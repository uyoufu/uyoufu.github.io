<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>新的生命开始绽放</title>
    <url>/posts/2022/19JPMSG.html</url>
    <content><![CDATA[<p>今日早晨，老婆发现一个小家伙已经悄悄出现在了我们的生命里。</p>
<span id="more"></span>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220326091350522.png"
alt="image-20220326091350522" />
<figcaption aria-hidden="true">image-20220326091350522</figcaption>
</figure>
<p>得知这个消息，心里有些惊喜，又有些担心，担心测的结果有误。所以，虽然有开心，但是保持了理智，需再过几天完全确定后，心里才能真正踏实下来。</p>
<p>经过这个事情，我知道，必需要提前准备育儿相关的知识了。所以今日起，开一个主题育儿篇，用于分享育儿知识，记录小家伙的成长。</p>
]]></content>
      <categories>
        <category>ChildCare</category>
      </categories>
      <tags>
        <tag>育儿</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>怀孕第一个月饮食推荐</title>
    <url>/posts/2022/C1JWDT.html</url>
    <content><![CDATA[<p>第一个月的孕妇一般感觉比较轻松，没有什么特别的不适，但是这个时期对胎儿的发育来说非常重要，所以准妈妈的营养摄入也不能放松。</p>
<p>这个月孕妇营养食谱要富含叶酸、蛋白质、维生素和矿物质，饮食以清淡可口的食物为佳。</p>
<span id="more"></span>
<h2 id="所需营养">所需营养</h2>
<p>第一个月孕期所需营养及建议的食物如下：</p>
<h3 id="蛋白质">蛋白质</h3>
<p>有些准妈妈在月末早晨会有恶心的症状，可以早晨先摄入一些蛋白质，例如
<code>温牛奶加苏打饼干</code>，以缓解症状。供给量需摄入
60-80克/天，主要来源于鱼类、乳类、豆制品、肉类、蛋类等。</p>
<h3 id="碳水化合物">碳水化合物</h3>
<p>蔗糖、葡萄糖、果糖、乳糖等简单碳水化合物能迅速被消化道吸收，提供“应急能量”。碳水化合物的需摄入
150克/天，食物主要来源于蔗糖、粮食作物。</p>
<h3 id="叶酸">叶酸</h3>
<p>需摄入
400微克/天，食物主要来源于蔬菜如青菜、卷心菜、柑橘、香蕉、牛肉、动物肝等。</p>
<p>除了生吃新鲜的水果，还可以用水果自制一些小吃。</p>
<h3 id="维生素c">维生素C</h3>
<p>需摄入
130毫克/天，食物主要来源于柑橘、草莓、猕猴桃、番茄、彩椒、豆芽等。</p>
<p>维生素C
容易被破坏，所以蔬菜水果应即买即吃。洗果蔬时速度要快，先洗后切，可以减少营养流失。</p>
<h3 id="铁">铁</h3>
<p>需摄入
25毫克/天，食物主要来源于动物肝脏和血、瘦肉、红糖、坚果、蛋、豆类、桃、梨。</p>
<blockquote>
<p><strong>注意</strong></p>
<p>植物中的植酸、草酸、膳食纤维、茶与咖啡、牛奶中的蛋白质会抑制铁质的吸收，尽量分开食用。</p>
</blockquote>
<h2 id="饮食基本原则">饮食基本原则</h2>
<ol type="1">
<li><p><strong>易消化</strong>、<strong>少油腻</strong>、<strong>味清淡</strong></p></li>
<li><p>补充维生素</p>
<p>孕 1 月胎儿脑部和神经系统迅速分化，补充维生素有利。</p></li>
<li><p>保证营养均衡</p></li>
<li><p>补充热量、蛋白质和脂肪酸</p>
<p>蛋白质是构成有机体的重要元素，脂肪酸有助于胎儿脑部发育</p></li>
<li><p>少吃多餐</p>
<p>有助于孕妇吸收营养</p></li>
</ol>
<h2 id="饮食要点">饮食要点</h2>
<p>孕 1月，吃得多不如吃的好。每天仅需补充 500千焦热量，相当食用
100克坚果。只要保证吃的食物有各种营养，饮食可以根据自己的食欲而定。</p>
<h3 id="吃什么">吃什么</h3>
<p>饮食的原则是<strong>易消化</strong>、<strong>少油腻</strong>、<strong>味清淡</strong>。</p>
<p>多吃富含蛋白质、维生素和矿物质的食物，适当吃点香蕉、动物内脏、坚果等。</p>
<h3 id="不吃什么">不吃什么</h3>
<p>不宜吃芦荟、螃蟹、甲鱼、薏米、马齿苋，开始向烟、酒、咖啡说不。</p>
<h3 id="营养补充">营养补充</h3>
<p>第 17 至 30
天是胎儿神经管发育的关键时期，补叶酸可降低胎儿脊柱裂或者其他神经管缺陷的危险。从计划怀孕到怀孕头三个月，每天补充
400微克的叶酸。绿叶叶酸含量最高，其次为肝、豆类、花生。</p>
<h2 id="适合孕-1-月的食物">适合孕 1 月的食物</h2>
<table>
<thead>
<tr class="header">
<th>各类</th>
<th>名称</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>新鲜蔬菜</td>
<td>生菜、油菜、小白菜。这些蔬菜富含丰富的叶酸</td>
</tr>
<tr class="even">
<td>水果</td>
<td>水果中的维生素有助于细胞的合成</td>
</tr>
<tr class="odd">
<td>海鱼</td>
<td>含钙、碘、铁等有助于胎儿大脑发育的物质</td>
</tr>
<tr class="even">
<td>核桃</td>
<td>可补脑益智、有助于胎儿脑部发育</td>
</tr>
<tr class="odd">
<td>多喝水</td>
<td>1000~1500 ml，可用水果代替</td>
</tr>
</tbody>
</table>
<h2 id="食谱推荐">食谱推荐</h2>
<p>基于以下原则制定食谱：</p>
<ol type="1">
<li>富含蛋白质、维生素和无机盐</li>
<li>少吃荤腻食品或大补之物</li>
<li>包含以清淡可口的食物为佳</li>
</ol>
<h3 id="早餐">早餐</h3>
<table>
<thead>
<tr class="header">
<th>方案</th>
<th>主食</th>
<th>辅食</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>二米枣粥（二米指大米+小米）</td>
<td>葡萄 100g</td>
</tr>
</tbody>
</table>
<h3 id="中餐">中餐</h3>
<table>
<colgroup>
<col style="width: 4%" />
<col style="width: 24%" />
<col style="width: 70%" />
</colgroup>
<thead>
<tr class="header">
<th>方案</th>
<th>主食</th>
<th>辅食</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>米饭 2 小碗或挂面一碗</td>
<td>炒菜（小白菜150g、胡萝卜50g、青椒50g）,煎焖刀鱼，牛奶鲫鱼汤 2
小碗，苹果一个</td>
</tr>
</tbody>
</table>
<h3 id="晚餐">晚餐</h3>
<table>
<colgroup>
<col style="width: 5%" />
<col style="width: 14%" />
<col style="width: 80%" />
</colgroup>
<thead>
<tr class="header">
<th>方案</th>
<th>主食</th>
<th>辅食</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>米饭 2 小碗</td>
<td>鸡蛋小菜汤 2 碗，香蕉 2 个，清炖牛腩（牛肉约150 g，土豆、胡罗卜各
100g，炒青菜（菜心人200 g））</td>
</tr>
</tbody>
</table>
<h3 id="水果">水果</h3>
<p><strong>饭前1小时和饭后2个小时</strong>左右食用</p>
<ul>
<li>葡萄</li>
<li>苹果</li>
<li>香蕉</li>
<li>西柚</li>
<li>柑橘</li>
<li>火龙果</li>
<li>猕猴桃</li>
</ul>
<h2 id="参考">参考</h2>
<ol type="1">
<li>育儿百科</li>
<li><a
href="https://m.maigoo.com/goomai/182190.html">https://m.maigoo.com/goomai/182190.html</a></li>
<li><a
href="https://zhuanlan.zhihu.com/p/37115054">这9种水果怀孕后应该多吃</a></li>
<li><a
href="https://zhuanlan.zhihu.com/p/36680304">DHA对宝宝到底有多重要？</a></li>
</ol>
]]></content>
      <categories>
        <category>ChildCare</category>
      </categories>
      <tags>
        <tag>育儿</tag>
      </tags>
  </entry>
  <entry>
    <title>主流开源许可证之间的区别</title>
    <url>/posts/2022/345RS77.html</url>
    <content><![CDATA[<p>世界上的开源许可证，大概有<a
href="https://www.gnu.org/licenses/license-list.html">上百种</a>。很少有人搞得清楚它们的区别。即使在最流行的六种----<a
href="https://www.gnu.org/licenses/gpl.html">GPL</a>、<a
href="https://en.wikipedia.org/wiki/BSD_licenses">BSD</a>、<a
href="https://en.wikipedia.org/wiki/MIT_License">MIT</a>、<a
href="https://www.mozilla.org/MPL/">Mozilla</a>、<a
href="https://www.apache.org/licenses/LICENSE-2.0">Apache</a>和<a
href="https://www.gnu.org/copyleft/lesser.html">LGPL</a>----之中做选择，也很复杂。</p>
<span id="more"></span>
<p>其主要区别如下图：</p>
<p><img data-src="https://s2.loli.net/2022/01/21/uhtOGlc4K5ngxIA.png" /></p>
<h2 id="参考">参考</h2>
<p>本文主要参考以下文章，在此表示诚挚感谢！</p>
<ol type="1">
<li><a
href="https://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html">阮一峰:如何选择开源许可证？</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>许可证</tag>
      </tags>
  </entry>
  <entry>
    <title>了解孩子生长规律，呵护宝宝健康成长</title>
    <url>/posts/2023/3VB08HW.html</url>
    <content><![CDATA[<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230727230001381.png"
alt="image-20230727230001381" />
<figcaption aria-hidden="true">image-20230727230001381</figcaption>
</figure>
<p>当孩子出生以后，我们就要开始时刻关注孩子的生长情况，了解孩子在成长过程中不同阶段的发育特点，我们通过观察、分析相关的参考值，
了解孩子身心发展的现状是否在正常范围内，为孩子的茁壮健康成长保驾护航。</p>
<span id="more"></span>
<h2 id="前言">前言</h2>
<p>孩子的生长标准主要有：</p>
<ol type="1">
<li>身长/身高</li>
<li>体重</li>
<li>头围</li>
<li>体重指数</li>
</ol>
<h2 id="标准值">标准值</h2>
<p>标准值可以参考卫健委发布的标准进行查阅，此处只截取了部分：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230727084242926.png" alt="image-20230727084242926" style="max-width:min(100%,300px)" /></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230727084504871.png" alt="image-20230727084504871" style="max-width:min(100%,300px)" /></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230727084528879.png" alt="image-20230727084528879" style="max-width:min(100%,300px)" /></p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230727084610493.png"
alt="image-20230727084610493" />
<figcaption aria-hidden="true">image-20230727084610493</figcaption>
</figure>
<p>更多相关的标准值可以打开下列链接查看：</p>
<ol type="1">
<li><a
href="http://www.nhc.gov.cn/wjw/fyjk/202211/16d8b049fdf547978a910911c19bf389/files/87dabebc66e1421b903f20c5db53ac07.pdf">7
岁以下儿童生长标准 - 中华人民共和国国家卫生健康委员会
(nhc.gov.cn)</a></li>
<li><a
href="http://www.nhc.gov.cn/ewebeditor/uploadfile/2018/07/20180705095132166.pdf">7
岁～18 岁儿童青少年身高发育等级评价 - 中华人民共和国国家卫生健康委员会
(nhc.gov.cn)</a></li>
</ol>
<h2 id="评价方法">评价方法</h2>
<h3 id="岁以下儿童生长水平的标准差评价方法">7
岁以下儿童生长水平的标准差评价方法</h3>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230725132955904.png"
alt="image-20230725132955904" />
<figcaption aria-hidden="true">image-20230725132955904</figcaption>
</figure>
<p>查 <a
href="http://www.nhc.gov.cn/wjw/fyjk/202211/16d8b049fdf547978a910911c19bf389/files/87dabebc66e1421b903f20c5db53ac07.pdf">7
岁以下儿童生长标准 - 中华人民共和国国家卫生健康委员会 (nhc.gov.cn)</a>
第 27 页表。</p>
<h3 id="岁以下儿童营养状况的标准差评价方法">7
岁以下儿童营养状况的标准差评价方法</h3>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230725133544445.png"
alt="image-20230725133544445" />
<figcaption aria-hidden="true">image-20230725133544445</figcaption>
</figure>
<p>查 <a
href="http://www.nhc.gov.cn/wjw/fyjk/202211/16d8b049fdf547978a910911c19bf389/files/87dabebc66e1421b903f20c5db53ac07.pdf">7
岁以下儿童生长标准 - 中华人民共和国国家卫生健康委员会 (nhc.gov.cn)</a>
第 25 页表。</p>
<h3 id="岁儿童青少年身高发育等级">7~18岁儿童青少年身高发育等级</h3>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230726131322027.png"
alt="image-20230726131322027" />
<figcaption aria-hidden="true">image-20230726131322027</figcaption>
</figure>
<h2 id="生长曲线图">生长曲线图</h2>
<p><img data-src="https://www.shouer.com.cn/Uploads/Picture/2021/11/23/u619c624695992.png" /></p>
<p><img data-src="https://www.shouer.com.cn/Uploads/Picture/2021/11/23/u619c6250c0baf.png" /></p>
<p><img data-src="https://www.shouer.com.cn/Uploads/Picture/2021/11/23/u619c6257bfa56.png" /></p>
<p><img data-src="https://www.shouer.com.cn/Uploads/Picture/2021/11/23/u619c625f41410.png" /></p>
<h2 id="生长特点">生长特点</h2>
<p>从上面和生长曲线图我们可以看出：</p>
<ol type="1">
<li>0-6 月宝宝身高增长速度很快</li>
<li>青春期：男孩 10-16 岁、女孩 10-14 岁身高开始快速增高</li>
<li>其它阶段，孩子的身高成线性比例增加</li>
</ol>
<p>综上分析：在孩子未成年时，都应保证他们摄入充足的营养、养成运动的良好习惯，使其健康地成长。特别是在
6
个月以内和青春期之间，更要格外关注孩子们的成长，保证良好的生成发育环境。</p>
<h2 id="如何让孩子长得高">如何让孩子长得高</h2>
<p>想要长高，关键在于“生长板”。医生常说“生长板”是身高的关键。究竟什么是增长板？生长板位于全身骨骼的上下两端。在脑垂体分泌的生长激素的刺激下，它们会不断增生软骨组织，新生的软骨经过钙化后会变成硬骨，从而骨骼变得更长更宽，这也是孩子能够长高的原因。当生长板闭合的时候，然而，当生长板到了一定的年龄，它就会闭合，骨骼不再生长，于是就决定了一个人的身高。生长板闭合后，即使用任何生长激素或增强剂刺激，也达不到增高的效果。</p>
<p><img data-src="https://p4.itc.cn/q_70/images03/20221020/7bf82aa4f6f7460c9fe71610ba4794f4.png" /></p>
<p>除了先天身高的遗传限制，如果孩子在青春期前出现第二性征，也就是所谓的性早熟，会使生长板过早闭合，影响生长。</p>
<p>如果不想让孩子的青春期过早开始，需要注意以下四点：</p>
<ol type="1">
<li><p>少吃精致的食物和快餐</p>
<p>一定要避免油炸食品、精致甜食、快餐，这些都有可能抑制生长激素的分泌，降低身高的增长。</p></li>
<li><p>防止儿童肥胖</p>
<p>超重的孩子容易性早熟，因为脂肪细胞会转化成性激素，影响发育。</p></li>
<li><p>避免接触环境荷尔蒙</p>
<p>生活中过多接触环境激素，如塑化剂、表面活性剂、油漆或清漆，也会催化孩子早熟。孩子容易接触到的塑化剂大多来自饮食，比如塑料碗、塑料袋装的热食，或者塑料杯装的饮料。最好用不锈钢或玻璃容器代替。</p></li>
</ol>
<p><strong>长高秘诀：</strong></p>
<ol type="1">
<li><p>保证充足的营养</p>
<p>除了均衡饮食外，还要保证摄入足够的钙和蛋白质。</p></li>
<li><p>保证充足的睡眠</p>
<p>晚上10点到凌晨2点是生长激素高峰期，晚睡会减缓孩子的生长发育。最好要求每天晚上9点前入睡，尽量不要熬夜</p></li>
</ol>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a
href="http://www.nhc.gov.cn/wjw/fyjk/202211/16d8b049fdf547978a910911c19bf389/files/87dabebc66e1421b903f20c5db53ac07.pdf">7
岁以下儿童生长标 - 中华人民共和国国家卫生健康委员会
(nhc.gov.cn)</a></li>
<li><a
href="http://www.nhc.gov.cn/ewebeditor/uploadfile/2018/07/20180705095132166.pdf">7
岁～18 岁儿童青少年身高发育等级评价 - 中华人民共和国国家卫生健康委员会
(nhc.gov.cn)</a></li>
<li><a
href="https://www.infantchart.com/zh-Hans/chinese0to3lengthforage.php">中国幼儿生长曲线图计算器:
身长年龄 0-3 岁 (infantchart.com)</a></li>
<li><a href="https://www.unicef.org/zh/儿童早期发展">儿童早期发展 |
联合国儿童基金会 (unicef.org)</a></li>
<li><a
href="https://www.unicef.cn/media/6946/file/0～6岁儿童发展的里程碑.pdf">0～6岁儿童发展的里程碑.pdf
(unicef.cn)</a></li>
<li><a
href="https://www.who.int/tools/child-growth-standards/standards">child-growth-standards</a></li>
<li><a
href="https://mp.weixin.qq.com/s?__biz=MzA5MzA5NTQ5Mw==&amp;mid=2652767081&amp;idx=1&amp;sn=d4b8f9c5e8142a8629050129a61fb585&amp;chksm=8b89b043bcfe3955c36c840a77ec63db7b66ce01b996d677b83b554caf1070679e5e7b914fff&amp;scene=27">新华专家教你看懂《儿童正常生长曲线表》（0-18岁）</a></li>
<li><a
href="https://www.shouer.com.cn/zyb/detail/7227.html">怎么知道身高增长是否正常-首都儿科研究所</a></li>
<li><a
href="https://www.sohu.com/a/594170422_121153029">想长高？生长板闭合前别做3件事！让孩子身高多长
10 公分</a></li>
</ol>
]]></content>
      <categories>
        <category>ChildCare</category>
      </categories>
      <tags>
        <tag>育儿</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>12 Egnlish Tenses</title>
    <url>/posts/2020/B9PE5D.html</url>
    <content><![CDATA[<p>I decide to learn the <strong>12 basic English tenses</strong>. There
are some notes bellow.</p>
<span id="more"></span>
<h1 id="summarize">Summarize</h1>
<table>
<colgroup>
<col style="width: 19%" />
<col style="width: 41%" />
<col style="width: 39%" />
</colgroup>
<thead>
<tr class="header">
<th>Tense</th>
<th>How and when to use</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1. Present Simple</td>
<td>general facts; regular actions; schedules</td>
<td>I work on Mondays.<br />I don't eat lunch at 2 PM.</td>
</tr>
<tr class="even">
<td>2. Present Continuous</td>
<td>continuing actions(now); one time actions for the future</td>
<td>I'm swiming this Saturday.</td>
</tr>
<tr class="odd">
<td>3. Present Perfect</td>
<td>general life experience(or lack thereof)</td>
<td>He has never been to spain</td>
</tr>
<tr class="even">
<td>4. Present Perfect Continuous</td>
<td>action that started in the past and continue</td>
<td>I've been studying English for 2 years.</td>
</tr>
<tr class="odd">
<td>/</td>
<td>/</td>
<td>/</td>
</tr>
<tr class="even">
<td>1.Past Simple</td>
<td>actions that started and finished in the past</td>
<td>I worked all night.<br />They didn't come.</td>
</tr>
<tr class="odd">
<td>2. Past Continuous</td>
<td>actions that were continuing in the past</td>
<td>We were listening music.</td>
</tr>
<tr class="even">
<td>3. Past Perfect</td>
<td>actions completed/not completed at a nonspecific point in the
past</td>
<td>The hadn't departed yet.<br />I had taken my lunch break.</td>
</tr>
<tr class="odd">
<td>4. Past Perfect Continuous</td>
<td>actions that started the past and continued and finished as
well</td>
<td>The had been waiting since 3 PM.</td>
</tr>
<tr class="even">
<td>/</td>
<td>/</td>
<td>/</td>
</tr>
<tr class="odd">
<td>1. Future Simple</td>
<td>actions planed/unplaned for the future</td>
<td>I'll have a glass of wine.<br />He's going to cookdinner.</td>
</tr>
<tr class="even">
<td>2. Future Continuous</td>
<td>actions that you think will/won't be continuing in the future</td>
<td>I'm not going to be working at company A.</td>
</tr>
<tr class="odd">
<td>3. Future Perfect</td>
<td>actions that you think will/won't have begun in the future</td>
<td>I'll have lived in China for 2 years in 2020.</td>
</tr>
<tr class="even">
<td>4. Future Perfcet Continuous</td>
<td>actions that you think will/won't have started and will be continung
in the future</td>
<td>I won't have been eating meat for 3 months.</td>
</tr>
</tbody>
</table>
<h1 id="resource-and-thanks">Resource And Thanks</h1>
<ol type="1">
<li><p>the article from:
https://www.englishclub.com/grammar/verb-tenses.htm</p></li>
<li><p>the video form:
https://www.youtube.com/watch?v=d0wV9EC3t14</p></li>
</ol>
]]></content>
      <categories>
        <category>English</category>
      </categories>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>一文带你全面了解蚕豆病</title>
    <url>/posts/2023/2BNMYWB.html</url>
    <content><![CDATA[<p><img data-src="https://obs.uamazing.cn:52443/public/files/images/g6pd-forbidden.png" alt="2369455128.png (800×1021) (pansmed.com)" style="max-width:min(100%,200px)" /></p>
<h2 id="什么是蚕豆病">什么是蚕豆病</h2>
<p>蚕豆病是一种遗传性疾病，它的学名为红细胞葡萄糖-6-磷酸脱氢酶(Glucose-6-phosphate
dehydrogenase，简称 G-6-PD)缺乏症。由于体内缺乏
G-6-PD，在孩子食用蚕豆等诱病源后，引发红细胞破裂，血红蛋白经过尿液被排出体外，导致重度贫血，尿出酱油尿，精神不济，如果不及时治疗，可致昏迷、惊厥和急性肾衰竭，孩子甚至有生命危险，所以发病后应及时就医诊治。</p>
<span id="more"></span>
<h2 id="遗传机理">遗传机理</h2>
<p>蚕豆病是一种X连锁隐性遗传（<strong>X</strong>-linked recessive
inheritance）疾病。若父母双方都是正常的，则其遗传图如下：</p>
<p><img data-src="http://upload.gxhospital.com/2021/0302/20210302105609465.png" alt="2369455128.png (800×1021) (pansmed.com)" style="max-width:min(100%,300px)" /></p>
<p>由上面的遗传图可以得知，若父母双方都是正常的，但母亲为基因携带者，则所生子女中有
25% 概率会患病，如果生女孩，都是健康的，但有 50%
的机率是致病基因携带者；如果生男孩，则有 50% 机率患病。</p>
<h2 id="病理介绍">病理介绍</h2>
<p>磷酸戊糖途径是部分细胞（如红细胞）赖以产生能量的代谢途径，以及维持
NADPH 的水平，而 G6PD 酶则属于该代谢途径的一员。NADPH
的含量，亦直接影响谷胱甘肽于细胞中的含量，而谷胱甘肽亦能保护红细胞免受氧化反应的破坏。G6PD
酶对磷酸盐戊糖代谢途径有速度限制作用，以及能转化葡萄糖-6-磷酸为6-磷酸葡萄糖酸-δ-内酯。</p>
<p>当 G6PD 患者的 <strong><em>氧化反应转趋剧烈</em></strong>
便有可能出现溶血性贫血现象；这种情况可能会由严重感染、药物治疗及部分食物引起。蚕豆含有大量蚕豆嘧啶葡糖苷、蚕豆嘧啶、伴蚕豆嘧啶核苷及异脲咪─这些全都是
<strong><em>氧化剂</em></strong>。</p>
<p>在剧烈的氧化反应下，谷胱甘肽会被耗尽，接着酵素及各种蛋白质（如血红蛋白）亦会被氧化物破坏，导致体内电解质失衡、细胞膜cross-bonding、巨噬作用及脾脏隔离红细胞等现象。血红蛋白会被代谢为胆红素，于高浓度时会引致黄疸，或直接经肾脏排出，于严重情况下可导致肾衰竭。</p>
<h2 id="发病症状">发病症状</h2>
<p>蚕豆病起病急剧，大多在进食新鲜蚕豆后 1～2 天内发生溶血，最短者只有 2
小时，最长者可相隔 9 天。</p>
<p>潜伏期的长短与症状的轻重无关。蚕豆病的贫血程度和症状大多很严重。症状有：</p>
<ol type="1">
<li>脸色苍白，疲倦乏力，食欲变差，身体状况普遍恶化</li>
<li>体温突然升高，皮肤和粘膜变黄</li>
<li>呼吸沉重，呼吸急促，心律过快</li>
<li>巩膜轻度黄染（眼角处的眼球发黄）</li>
<li>尿色如浓红茶或甚至如酱油</li>
<li>严重时，呼吸窘迫或是意识不清、休克</li>
</ol>
<p>根据发病程度，症状如下：</p>
<ol type="1">
<li><p>初期症状</p>
<p>起病急，1-2天内出现急性血管内溶血，来势凶猛，表现为全身不适、脸色苍白、微热、头昏、倦怠无力、厌食、腹痛、恶心、尿色加深等。</p></li>
<li><p>后续症状</p>
<p>出现黄疸、贫血、血红蛋白尿、尿呈酱油色、此后体温升高、倦怠乏力加重。可持续3日左右。</p></li>
<li><p>并发症</p>
<p>出现呕吐、腹泻和腹痛加剧、肝脏肿大、肝功能异常，约50%患者脾大。严重时可能导致昏迷、休克、全身衰竭，若急救不及时，会出现生命危险。</p></li>
</ol>
<p><strong>本节参考</strong>：</p>
<p><a href="https://www.g6pd.org/en/G6PDDeficiency.aspx">What Is G6PD
Deficiency-g6pd.org</a></p>
<p><a
href="https://rah.com.tw/page/news/show.aspx?num=1327&amp;lang=TW">蚕豆病
(rah.com.tw)</a></p>
<h2 id="诱病因素">诱病因素</h2>
<p>一切能加剧红细胞氧化反应的物品都可以诱发蚕豆病，在日常生活、学习、工作中应避免接触氧化物，常见的物品如下：</p>
<h3 id="食物">食物</h3>
<ol type="1">
<li><p>蚕豆、蚕豆花粉或蚕豆制品</p>
<p><img data-src="https://i.tmuyun.com/tmyimgcenter/down?appname=wuxing&msec=1681199493529&encrypting=824fb822e379ea3c953c65cbb71229ea&imgname=W020230411525727706737.jpg" style="max-width:min(100%,300px)"></p>
<p>蚕豆制品主要是【豆瓣酱】</p>
<p>在外出就餐时需要特别注意，因为一些餐馆（尤其是川菜馆）喜欢用干的蚕豆熬汤底（例如担担面的汤），以及用豆瓣酱烹饪菜肴，豆瓣酱在广东一带主要用黄豆作为主要材料，但在四川等地则是用蚕豆作为原料。</p>
<p>薄荷叶是西餐常用的材料，孩子忌食。</p></li>
<li><p>苦瓜</p></li>
<li><p>铁苋菜</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/tie-xian-cai.jpg" alt="tie-xian-cai" style="max-width:min(100%,300px)" /></p></li>
<li><p>红酒、蓝莓、菠萝、大豆慎用</p></li>
</ol>
<h3 id="日常用品">日常用品</h3>
<ul>
<li><p>樟脑</p></li>
<li><p>萘丸 (人工合成的樟脑丸)</p></li>
<li><p>龙胆紫 (紫药水)</p></li>
<li><p><strong>蓝色</strong> 的人工食用色素和染料</p>
<p>黑色指甲花染料（木蓝）、埃及红指甲花和其他相关染料纹身、染发等。</p></li>
<li><p>薄荷牙膏</p></li>
</ul>
<h3 id="西药">西药</h3>
<blockquote>
<p>加粗字体为 <code>禁用</code> 药，其它为慎用，原则上不用</p>
</blockquote>
<p>“蚕豆病”是一种急性溶血性疾病，不宜服用氧化性药物，需严格掌握用药禁忌，在医生指导下用药。</p>
<ol type="1">
<li><p>维生素类</p>
<p><strong>维生素 K3、K4</strong></p>
<p>维生素 C、K1</p>
<p>大剂量的维生素 C 应避免服用，否则会产生溶血反应。</p></li>
<li><p>解热镇痛类</p>
<p><strong>乙酰苯胺、乙酰苯肼</strong></p>
<p>对乙酰氨基酚、安乃近、扑热息痛(泰诺、百服宁、小儿退热栓)、阿司匹灵、非那酊、氨基比林、安替匹林、保泰松、安他唑啉等。</p></li>
<li><p><a
href="https://zh.wikipedia.org/wiki/磺胺类抗生素">磺胺类抗生素</a></p>
<p><strong>磺胺甲恶唑，磺胺二甲嘧啶，磺胺吡啶，柳氮磺胺吡啶</strong></p>
<p>磺胺嘧啶，磺胺甲嘧啶</p></li>
<li><p><a
href="https://zh.wikipedia.org/wiki/碸">砜类</a>：<strong>噻唑砜、氨苯砜</strong></p></li>
<li><p>抗疟药类</p>
<p><strong>伯氨喹，氯喹，扑疟喹，戊胺喹，阿的平</strong></p>
<p>奎宁， 乙胺嘧啶</p></li>
<li><p>外用药物</p>
<p><strong>跌打酒（含牛黄）、白花油、万金油、红花油（含有水杨酸）</strong></p></li>
<li><p>其他含<a
href="https://zh.wikipedia.org/wiki/硫磺">硫磺</a>的药品</p>
<p><strong>血糖平</strong></p></li>
<li><p><a
href="https://zh.wikipedia.org/wiki/呋喃妥因">呋喃妥因</a>：治疗<a
href="https://zh.wikipedia.org/wiki/尿道感染">尿道感染</a>的抗生素</p></li>
<li><p>其它忌服药物</p>
<p><strong>呋喃坦啶，呋喃唑酮，呋喃西林，呋喃妥英，黄连素，
硝咪唑，硝酸异山梨醇， 二巯基丙醇，亚甲蓝，三 氢化砷，维生素
K3、K4</strong></p>
<p>氯霉素，链霉素，异烟肼， 环丙沙星，氧氟沙星，
左氧氟沙星，诺氟沙星，萘啶酸，布林佐胺， 多佐胺，甲氧苄氨嘧
啶，普鲁卡因酰胺，奎尼丁，格列本脲，苯海
拉明，扑尔敏，秋水仙碱，左旋多巴，苯妥英
钠，苯海索，丙磺舒，对氨基苯甲酸，维生素 C，维生素 K1</p></li>
</ol>
<p>完整的西药禁用清单：</p>
<p><a
href="https://www.g6pd.org/en/G6PDDeficiency/SafeUnsafe/DaEvitare_ISS-it">Unsafe
to Take (g6pd.org)</a></p>
<h3 id="中药">中药</h3>
<blockquote>
<p>加粗字体为 <code>禁用</code> 药，其它为慎用，原则上不用</p>
</blockquote>
<ul>
<li><p><strong>黄连、川莲 (四川产黄莲)</strong></p></li>
<li><p><strong>金银花</strong></p></li>
<li><p><strong>茵桅黄</strong> (含金银花提取物)</p></li>
<li><p><strong>腊梅花</strong></p></li>
<li><p><strong>牛黄</strong></p></li>
<li><p><strong>珍珠粉</strong></p></li>
<li><p><strong>保婴丹</strong></p></li>
<li><p><strong>薄荷</strong></p>
<p>口香糖、冰淇淋、牙膏、外用贴布、漱口水等可能含有薄荷的食品或卫生用品都应该避免</p></li>
<li><p>生地</p></li>
<li><p>丹皮</p></li>
<li><p>冰片</p></li>
<li><p>大黄</p></li>
<li><p>熊胆</p></li>
<li><p>虎杖</p></li>
<li><p>番泻叶</p></li>
<li><p>八宝粉</p></li>
</ul>
<h3 id="疾病">疾病</h3>
<p>病毒性肝炎、流感、肺炎、伤寒、腮腺炎也可能会诱发蚕豆病。</p>
<h2 id="哺乳期注意">哺乳期注意</h2>
<p>哺乳期妈妈吃了上述食品或药器后，也容易诱发宝宝的蚕豆病。</p>
<h2 id="治疗">治疗</h2>
<p>蚕豆病属于遗传疾病，无法被根治，会随着年龄的长大，抗性会逐渐增强。在日常生活中，主要以预防为主，不接触和信用强氧化性的物品。若诱发了蚕豆病，应及时就医治疗。</p>
<p>蚕豆病的治疗有以下方式：</p>
<ul>
<li>去除诱发因素：停食蚕豆及其制品，严重者可人工催吐、洗胃及导泻；</li>
<li>对症处理：输液补充血容量等；</li>
<li>输血：贫血较轻者不需要输血，去除发病诱因后可自行恢复，贫血较重时，可输正常的红细胞
1～2 次；</li>
<li>激素治疗：激素对阻止疾病的发展无特殊疗效，但对危重病例，如高热、剧烈头痛、昏迷和休克出现时，可使用地塞米松或氢化可的松缓解症状，但不能以此代替输血、补液等治疗措施。</li>
<li>肾衰竭者行血液透析等治疗。</li>
</ul>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a
href="https://www.ynxzy.com/temp/1686884123423.pdf">中华人民共和国药典临床用药须知-2020年版</a></li>
<li><a href="https://www.g6pd.org/en/G6PDDeficiency.aspx">What Is G6PD
Deficiency (g6pd.org)</a></li>
<li><a
href="https://www.g6pd.org/en/G6PDDeficiency/SafeUnsafe/DaEvitare_ISS-it">Unsafe
to Take (g6pd.org)</a></li>
<li><a
href="http://m.gxhospital.com/tender_info/2021/mbkBEYaz.html">G6PD缺乏症-广西壮族自治区人民医院</a></li>
<li><a
href="https://www31.ha.org.hk/hkch/Pages/Patients/Services/CGSU/docs/Glucose6_Phosphate_Dehydrogenase_Deficiency_chi.pdf">Glucose6_Phosphate_Dehydrogenase_Deficiency_chi.pdf-香港医院管理局</a></li>
<li><a
href="https://mysfybjy.com/mobile/health/detail.aspx?detailid=1528&amp;categoryid=109&amp;channelid=1006&amp;parentid=22">G6PD缺乏症宣传单及携带卡-绵阳市儿童医院
(mysfybjy.com)</a></li>
<li><a
href="https://source.yiboshi.com/20170918/1505705774735777381.pdf">葡萄糖-６-磷酸脱氢酶缺乏症新生儿筛查、
诊断和治疗专家共识</a></li>
<li><a
href="https://www.cmaped.org.cn/goSuperSeach.jspx?siteId=15&amp;artDoi=&amp;issueYear=&amp;issueIssue=&amp;issueStartPage=&amp;title=葡萄糖-6-磷酸脱氢酶&amp;author=&amp;authorOrg=&amp;keyword=&amp;abstractStr=&amp;pageSize=10&amp;orderType=1">红细胞葡萄糖-6-磷酸脱氢酶缺陷症
- 中华儿科杂志 (cmaped.org.cn)</a></li>
<li><a
href="https://my.clevelandclinic.org/health/diseases/22556-g6pd-glucose-6-phosphate-dehydrogenase-deficiency">G6PD
Deficiency: Symptoms, Triggers &amp; Treatment
(clevelandclinic.org)</a></li>
<li><a
href="https://rah.com.tw/page/news/show.aspx?num=1327&amp;lang=TW">蠶豆症
(rah.com.tw)</a></li>
<li><a
href="https://zh.wikipedia.org/wiki/葡萄糖-6-磷酸脫氫酶缺乏症">葡萄糖-6-磷酸脱氢酶缺乏症
- 维基百科</a></li>
<li><a
href="http://www.szgm.gov.cn/szgm/132104/ylfw/132370/content/post_9590327.html">“蚕豆病”患儿生活中要注意哪些方面？</a></li>
<li><a
href="https://zh.wikipedia.org/zh-cn/%E8%91%A1%E8%90%84%E7%B3%96-6-%E7%A3%B7%E9%85%B8%E8%84%AB%E6%B0%AB%E9%85%B6%E7%BC%BA%E4%B9%8F%E7%97%87">葡萄糖-6-磷酸脱氢酶缺乏症-wiki</a></li>
<li><a
href="https://rs.yiigle.com/CN511693201702/988431.htm">葡萄糖-6-磷酸脱氢酶缺乏症的发病机制及诊疗现状</a></li>
<li><a
href="https://www.commonhealth.com.tw/article/86957">蠶豆症不能吃什麼？蠶豆症發作症狀、禁忌食物藥物列表</a></li>
<li><a
href="http://m.cnpharm.com/c/2020-05-27/732288.shtml">8岁前吃蚕豆容易诱发蚕豆病？这样养护才安全</a></li>
<li><a
href="https://www.medsci.cn/article/show_article.do?id=e61f3019205e">蚕豆病者禁用的常见药物，看了这篇，你就明白！-MedSci.cn</a></li>
<li><a
href="https://www.kch.nhs.uk/wp-content/uploads/2023/01/pl-296.2-glucose-6-phosphate-dehydrogenase-deficiency-favism-or-g6pd-deficiency.pdf#:~:text=URL%3A%20https%3A%2F%2Fwww.kch.nhs.uk%2Fwp">https://www.kch.nhs.uk/wp-content/uploads/2023/01/pl-296.2-glucose-6-phosphate-dehydrogenase-deficiency-favism-or-g6pd-deficiency.pdf</a></li>
<li><a
href="https://www.ebmconsult.com/articles/g6pd-deficiency-medications-drugs-avoid">Medications
to Avoid in Patients with G6PD Deficiency Due to Risk of Hemolysis
(ebmconsult.com)</a></li>
</ol>
]]></content>
      <categories>
        <category>ChildCare</category>
      </categories>
      <tags>
        <tag>育儿</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>American accent</title>
    <url>/posts/2020/317EM2J.html</url>
    <content><![CDATA[<p>There are the notes of American accent.</p>
<span id="more"></span>
<h1 id="vowel-sounds">15 vowel sounds</h1>
<p>the video url:
https://www.youtube.com/watch?v=X3aOsOUM06c&amp;list=PL7sOfomcE2Tdq0N-_nb7tvdm4S5gBEr0N</p>
<h1 id="vowel-rules元音规则">Vowel rules（元音规则）</h1>
<h2
id="understanding-neutralrelaxed-and-tense-vowels-认识中性元音和紧无音">Understanding
neutral/relaxed and tense vowels (认识中性元音和紧无音)</h2>
<ul>
<li><p>4 neutral vowels（四个中性元音，要短促）</p>
<p>/ɪ/, /ɜ/, /ə/, /ʊ/</p></li>
<li><p>重读</p>
<p>音节重读时，要拉长元音。</p>
<p>对于单词，重读突出关键词，一般重读名词和动词。</p></li>
<li><p>Reduced vowels（弱化元音）</p>
<p>元音组成弱化音节时，都可以读成 /ə/ 音</p>
<p>在句子里面也是一样，我们要强调动词和名词，对介词和冠词以及无关紧要的词进行弱化。比如：
in, on, at, for, with, by，发音要短。</p></li>
</ul>
<h1 id="consonant-rules辅音规则">Consonant rules（辅音规则）</h1>
<ul>
<li><p>把每个辅音发到位</p></li>
<li><p>voiced and voiceless consonnants（浊辅音和清辅音）</p></li>
<li><p>浊辅音前面的元音发声要长。ice / EYEs</p></li>
<li><p>l 发音稍长</p></li>
<li><p>stop and continuants (停顿和连续音)</p>
<p>对于停顿辅音，比如 b,d,m
等等，发音后嘴唇不要张开，不要释放最后的停顿，造成发出了该音的效果。比如
sometimes, pop music。</p>
<p>去除 t 的发音</p></li>
<li><p>两个元音之间的 t</p>
<p>当 t 位于两个元音之间时，发单似 d,不要很重，要快速</p>
<p>对于两个单词间也是如此</p></li>
<li><p>当 t+字母+n 时，直接发 n 音</p></li>
<li><p>ing 发音</p>
<p>发单时，舌头不要放下来</p></li>
<li><p>tr dr 发音 /tr/,/dr/</p></li>
<li><p>tu 发音 /tʃu/, du 发音 /dʒu/. 比如：would you, did you</p></li>
<li><p>ed 结尾发音</p>
<p>当单词以 t 或者 d 结尾 + ed，发 /Id/，比如 want, wanted</p>
<p>清辅音后 + ed, 发 /t/ 音，比如 passed</p>
<p>浊辅音后 + ed, 发 /d/ 音，比如 called</p></li>
</ul>
<h1 id="rythm-and-intonation-节奏和发音">Rythm and Intonation
(节奏和发音)</h1>
<p>一个句子某些词要 louder, longer and higher in pitch</p>
<ul>
<li><p>当一个名词存在 2 个音节时，90%
情况下，第一个章节重读。对于动词，有60%的情况是相反的。</p></li>
<li><p>ate 结尾的单词</p>
<p>如果是动词，发 /eit/, 如果是形容词或者名词，发 /et/</p></li>
<li><p>单词以 ese,eer,ique 结尾，重读这些后缀，如果是 ic
结尾，重读前面的章节</p></li>
<li><p>句子中单词重读的依据</p>
<p>重读实意词（content words):
去掉功能词后，用这些实意词，可以大概知道句子的意思</p>
<p>对于功能词（function words，并不需要重读</p>
<p>当有两个实意词时，第二个通常要更加的重读</p></li>
<li><p>focus words and thought group (焦点词和虚拟分组)</p>
<p>先对长句进行分组，然后找到组中最重要的词，这个词就叫做焦点词</p>
<p>怎么分组呢？根据语速不同，分组也会不同，分组的基本原则是保证语句通顺。</p>
<p>句子中的停顿多数发生在分组之间或者出现关键词的时候</p></li>
<li><p>怎样重读形容词和名词</p>
<p>当 adj + n 时，重读名词，而不是形容词</p>
<p>如果是 be + adj, 重读形容词</p></li>
<li><p>复合名词（compunt nouns）的重读</p>
<p>重读第一个名词，比如：HAIRcolor</p></li>
<li><p>动词短语重读</p>
<p>重读第二个单词，重读介词，比如：pick UP, break DOWN</p>
<p>如果动词短语当成名词使用时，重读第一个</p></li>
<li><p>人名和地名</p>
<p>重读最后一个单词</p></li>
<li><p>缩写词和数字</p>
<p>缩写重读最后一个字母，比如 CNN</p>
<p>数字重读最后部分</p></li>
<li><p>特殊重读</p>
<p>当要特别强调时，可以选择重读。一般这种是带有感情色彩的，也要根据语境</p></li>
</ul>
<h1 id="rising-and-falling-inonation">Rising and Falling inonation</h1>
<ul>
<li><p>对于陈述句，用降调</p></li>
<li><p>对于 yes/no 型，用升调。比如 Are you ok? (升调)</p></li>
<li><p>对于 wh- 型，用降调。比如 how,where,when,what</p></li>
<li><p>声调变化</p>
<p>对于排比型句子或者单词，前面都是升，最后一个降调</p>
<p>升调表示话还没说完</p>
<p>当给别人选择时，用升调</p></li>
</ul>
<h1 id="rules-you-need-to-know">10 rules you need to know</h1>
<h2 id="辅音和元音连续linking">辅音和元音连续（Linking)</h2>
<ul>
<li>第一个单词以辅音结尾，后一个单词以元音开头，要进行连读</li>
<li>在连读的时候，不要忘记焦点词的重读</li>
<li>在断句或者逗号的时候，不用连读</li>
</ul>
<h2 id="辅音结尾辅音开头">辅音结尾+辅音开头</h2>
<ul>
<li>两个辅音一样时，只发一次。比如 he likes swiming</li>
<li>当两个辅音发音点相同时，只读后面一个，比如 i used to, 发 /I us
2/</li>
<li>当第一个元音是 o 时，不发 /ou/音，而是发 /w/单</li>
</ul>
<h2 id="元音结尾元音开头">元音结尾+元音开头</h2>
<p>在后一个元音前加 y /yuh/ 进行连读</p>
<h2 id="单词轻读">单词轻读</h2>
<p>重读实意词，轻读功能词</p>
<ul>
<li>当轻读介词时，介词中的元音变成中性元音 /ə/。 比如 as /əs/</li>
</ul>
<table>
<thead>
<tr class="header">
<th>as</th>
<th>/əs/</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>on</td>
<td>/ən/</td>
</tr>
<tr class="even">
<td>at</td>
<td>/ət/</td>
</tr>
<tr class="odd">
<td>to</td>
<td>/tə/</td>
</tr>
<tr class="even">
<td>for</td>
<td>/fə/</td>
</tr>
<tr class="odd">
<td>or</td>
<td>/ər/</td>
</tr>
<tr class="even">
<td>our</td>
<td>/ər/</td>
</tr>
<tr class="odd">
<td>and</td>
<td>/n/</td>
</tr>
</tbody>
</table>
<ul>
<li><p>轻读代词</p>
<p>省略第一个 h 或者 th 发音。 比如 did he /dide/</p>
<p>在正式场合也不省略</p></li>
<li><p>用缩写</p>
<p>一般使用缩写，比如 don't</p>
<p>强调时，用全写，do not</p>
<p>I'd: I would</p>
<p>they're: they are</p>
<p>could've: could have,have 在省略中发 /əv/</p></li>
</ul>
<h1 id="some-rules">Some Rules</h1>
<h1 id="resource-and-thanks">Resource And Thanks</h1>
<ol type="1">
<li>the video form:
https://www.youtube.com/watch?v=X3aOsOUM06c&amp;list=PL7sOfomcE2Tdq0N-_nb7tvdm4S5gBEr0N</li>
</ol>
]]></content>
      <categories>
        <category>English</category>
      </categories>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>American accent practice</title>
    <url>/posts/2020/15QDG6.html</url>
    <content><![CDATA[<p>There are some experience in my studying.</p>
<span id="more"></span>
<ul>
<li><p>辅音后的无音要中性化</p>
<p>what are you</p>
<p>/ wad ər ju /</p></li>
<li><p>ng 音后如果是元音，ng 发 n 音</p>
<p>laughing at</p>
<p>/ lafen ai / at 中的 t 是 stop t</p></li>
<li><p>I wouldn't / ai wuln /</p></li>
<li><p>you said somefunny /ju sei sʌm‘m fʌni: /</p></li>
<li><p>didn't you / dn jə /</p></li>
<li><p>两个辅音相连，且不一样时，前一个发音后不要释放，像停止单一样</p>
<p>the guy's a joke machine / dʒou<del>k</del> məʃn /</p></li>
<li><p>当两个辅音发音差不多一样时，发重的那个音，省略轻的那个音</p></li>
<li><p>当只有回答 yes no 时，才用升调</p></li>
<li><p>Someone <del>wh</del>o / sʌmwan u /</p></li>
<li><p>can 一般 /kən/</p></li>
</ul>
]]></content>
      <categories>
        <category>English</category>
      </categories>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>一步步在 github pages 上用 jekyll 搭建属于自己的博客</title>
    <url>/posts/2019/3PCKARV.html</url>
    <content><![CDATA[<figure>
<img data-src="https://i.loli.net/2019/11/23/H5sBjnXVbCfIh9t.jpg"
alt="image-20191123112911663.jpg" />
<figcaption aria-hidden="true">image-20191123112911663.jpg</figcaption>
</figure>
<h3 id="序">序</h3>
<p>我的专业与互联网没有太大关系，接触博客还是工作以后的事情。随着工作的经验增加，总想将自己的所思所得记录下来，毕竟，好记性不如烂笔头。</p>
<span id="more"></span>
<p>开始是将自己的总结在本地保存，但是本地有一个劣势，就是不能随时随地的查看，最重要的是，不能随时随地的装X，所以，最后转到了简书，转到简书，是17年的时候，那个时候，简书的质量还是有保证，但是，随着简书的发展，广告越来越多，文章质量越来越差，而且首页推送的文章太多关于性的东西，重要是，慢慢地也出现了好多标题党，让人烦不胜烦。</p>
<p>无奈之下，只有尝试去寻找新的平台...</p>
<p>此时，盯了很多家，比如，csdn,
知乎，少数派等。除了博客园，知乎让我比较满意外，其它都有广告，当然，知乎和博客园也有，不过，知乎的质量在那儿，所以，广告也就不那么在意了，而博客园，是可以自定义界面风格的，可以查看我的博客园主页<a
href="https://www.cnblogs.com/BIMFlying">李有福呀</a>，广告什么的都可以去掉，所以影响不大。但是知乎是问答型社区，与自己这无病呻吟小年轻的风格又有点不搭，在上面写一篇文章，确实是要一定的专业深度的，当然，灌水这种事情，我不愿意去做。而博客园虽然有一定的自由度，但是总想有一方完完全全属于自己的一方空间。</p>
<p>最后，结论就是各个平台都不满意。</p>
<p>那就自己搭建一个博客平台吧...</p>
<h3 id="博客选择">博客选择</h3>
<p>搭建个人博客，有很多种方案。</p>
<p>因最近经济压力大，所以，本着能省几毛是几毛的理念，便选择了平台免费，功能强大，上手简单的组合：github
pages +jekyll 来搭建自己的博客 <a
href="https://noctiflorous.gitee.io">李有福呀</a>。</p>
<figure>
<img data-src="https://i.loli.net/2019/11/23/eD4wJgo2GHqQjAZ.png"
alt="image-20191123112746605.png" />
<figcaption aria-hidden="true">image-20191123112746605.png</figcaption>
</figure>
<p>为什么选择这个组合呢？</p>
<ol type="1">
<li><p>服务器选择
收费的云服务器什么的就不考虑了，那么免费且还能搭建博客的，主要的选择就是
github pages 和 gittee pages。</p>
<p>前者的服务器在国外，因为墙的原因，速度较慢，但是上面的资源多，为微软家的东西，质量有保证，生态齐全，且自带了
jekyll 编译器，这个是很重要的一点，如果用 jekyll
作为博客平台，那么只需要上传源文件，本地不需要进行编译，这样本地就不需要安装复杂的环境了。</p>
<p>后者的服务器在中国，响应速度快，每次上传文件之后，需要在仓库中的
pages 界面进行进行手动更新生成静态页面，比较麻烦。</p>
<p>如果推荐的话，个从建议用 gitee,
虽然每次要手动，但是的服务器在国内，速度快，而且它支持三种方式的在线编译，虽然每次推送修改后要手动操作一下，但是与它的优点相比，这就不算什么缺点了。</p>
<p>顺便也介绍下 gitee 的自动编译依据：</p>
<ol type="1">
<li><p>编译 Hugo
依据：仓库编译目录下存在<code>config.toml|json|yaml</code>文件和<code>content</code>目录的时候，会使用<code>hugo</code>生成静态文件。</p></li>
<li><p>编译 Hexo
依据：仓库编译目录下存在<code>package.json</code>，<code>_config.yml</code>文件和<code>scaffolds</code>目录的，会使用<code>hexo generate</code>生成静态文件，由于每次部署编译需要重新克隆编译并进行<code>npm install</code>，所以使用
Hexo 的时间相对 Hugo 和 Jekyll 会长一些。</p></li>
<li><p>当不符合上述1和2条件的时候，就默认使用Jekyll编译</p></li>
</ol></li>
<li><p>语言选择 构建 pages 有三种方式，分别是 jekyll ， hexo 和 Hugo
，因为本人选择了 github ，而它只支持 jekyll 自动编译，所以，便选择了
jekyll。</p></li>
</ol>
<h3 id="开始部署">开始部署</h3>
<ol type="1">
<li>建立自己的 github 账户，请自行百度或者点击下面的链接。</li>
</ol>
<p><a
href="https://blog.csdn.net/xingkaifan/article/details/81105352">创建我的GitHub账号及使用</a></p>
<ol start="2" type="1">
<li>Fork 本主题的仓库</li>
</ol>
<ul>
<li>进入<a
href="https://github.com/GalensGan/galensgan.github.io">galensgan.github.io</a></li>
<li>点击右上角的Fork按钮，见下图</li>
</ul>
<figure>
<img data-src="https://i.loli.net/2019/11/23/4wbyV2MKBlcCpG8.png"
alt="howtoforkrepo.PNG" />
<figcaption aria-hidden="true">howtoforkrepo.PNG</figcaption>
</figure>
<ul>
<li>进入自己的克隆的仓库,然后点击 Settings,
也可以直接输入这个地址：<code>https://github.com/你的用户名/galensgan.github.io/settings</code></li>
<li>将仓库名称改为：<code>你的用户名.github.io</code> 形式,点击
<strong>Rename</strong> 重命名</li>
</ul>
<ol start="3" type="1">
<li><p>自己的博客网站就初步建立了，你可以在浏览器中输入自己的网址访问：<code>你的用户名.github.io</code></p></li>
<li><p>开始定制博客内容</p></li>
</ol>
<ul>
<li>下载并安装git <a
href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git">传送门-Git安装</a></li>
<li>进入到自己的仓库：点击 <strong>Clone or download</strong>,
然后复制框中显示的URL</li>
</ul>
<figure>
<img data-src="https://i.loli.net/2019/11/23/K7Iw4BiZ12aTOsd.png"
alt="TIM截图20191123125227.png" />
<figcaption aria-hidden="true">TIM截图20191123125227.png</figcaption>
</figure>
<ul>
<li>在你想将代码放置的目录处，右键 &gt;&gt; Git Bash Here</li>
</ul>
<figure>
<img data-src="https://i.loli.net/2019/11/23/wyFd5L98uWcXYBv.png"
alt="TIM截图20191123125621.png" />
<figcaption aria-hidden="true">TIM截图20191123125621.png</figcaption>
</figure>
<ul>
<li>在弹出的黑窗体中输入：<code>git clone 你复制的url</code> &gt;&gt;
回车，开始克隆代码</li>
</ul>
<figure>
<img data-src="https://i.loli.net/2019/11/23/vndl5TpNiU8MJFw.png"
alt="TIM截图20191123125857.png" />
<figcaption aria-hidden="true">TIM截图20191123125857.png</figcaption>
</figure>
<ul>
<li><p>克隆完成以后，进入目录修改相关内容，变成自己的信息，下面列出经常用到或者是需要修改的目录：</p>
<table>
<colgroup>
<col style="width: 61%" />
<col style="width: 38%" />
</colgroup>
<thead>
<tr class="header">
<th>目录名称</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>_drafts</td>
<td>草稿，如果未完成的文章，可以放在里面，在里面的文章不会显示在博客上</td>
</tr>
<tr class="even">
<td>_post</td>
<td>发表的文章放在这里</td>
</tr>
<tr class="odd">
<td>about</td>
<td>关于中的内容写在这里</td>
</tr>
<tr class="even">
<td>_config.yml</td>
<td>此为网站的配置文件，所有的界面的信息和功能，都里面进行设置</td>
</tr>
<tr class="odd">
<td>...</td>
<td>...</td>
</tr>
<tr class="even">
<td>修改 _config.yml 为你自己的博客内容，同时，在post放入自己的 markdown
格式的文章</td>
<td></td>
</tr>
</tbody>
</table></li>
<li><p>对文章格式的要求：</p>
<ul>
<li>标题名称：年-月-日-唯一识别号,比如 2019-11-23-template</li>
<li>正文内容：每个头部要有如下格式</li>
</ul></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: this is a template</span><br><span class="line"></span><br><span class="line">tags: </span><br><span class="line">  - template</span><br><span class="line">  - blog</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>同时注意，每一个冒号后面需有一个空格</p>
<ol start="5" type="1">
<li>推送到github完成更新</li>
</ol>
<p>你进入你的本地仓库目录里面（与.git目录同级），右键 &gt;&gt; 右键
&gt;&gt; Git Bash Here &gt;&gt;
在弹出的黑窗体中依次输入下面的内容，每输入一行，按一次回车</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add . </span><br><span class="line">git commit -m &quot;这里是你提交的内容的描述，比如：初始化自己的博客&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<p>到此，属于自己的博客就完成了，再次在网页中打开<code>你的用户名.github.io</code>,
看看效果吧~</p>
<h3 id="致谢">致谢</h3>
<ol type="1">
<li><a
href="https://github.com/Simpleyyt/simpleyyt.github.io">simpleyyt.github.io</a></li>
</ol>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>个人博客</tag>
        <tag>jekyll</tag>
        <tag>Hexo</tag>
        <tag>galens</tag>
        <tag>李有福呀</tag>
      </tags>
  </entry>
  <entry>
    <title>博客 CDN 加速和增加 Live2d</title>
    <url>/posts/2019/2YZ5NBS.html</url>
    <content><![CDATA[<figure>
<img data-src="https://i.loli.net/2019/11/24/ZPfUFSTdKuXQlq1.png"
alt="TIM截图20191124131312.png" />
<figcaption aria-hidden="true">TIM截图20191124131312.png</figcaption>
</figure>
<h1 id="序">序</h1>
<p>辛辛苦苦终于将自己的博客建设起来了，但是因为挂载在 github page
的原因，导致国内访问速度有点慢得让人不能接受，偶然间在一个大神的文章 <a
href="https://wu-kan.github.io/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%9F%BA%E4%BA%8EJekyll%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2">基于Jekyll搭建个人博客</a>
里面获得了一个方法，可以对 js , css 进行 cdn
加速，同时，也在她的博客里看到了 Live2d
有意思的扩展，于是在原来的基础上进行了修改。</p>
<span id="more"></span>
<h1 id="cdn-加速">CDN 加速</h1>
<p>CDN 我用的是 <a href="https://www.jsdelivr.com/">Jsdelivr</a></p>
<p>Jsdelivr 网站是一个致力于为开发者提供数千种 Javascript、CSS 等超过
1650 多种 Libraries 加速的免费 CDN
服务，该平台是首个「打通中国大陆与海外的免费 CDN
服务」，网页开发者无须担心中国防火墙问题而影响使用。</p>
<p>打开博客的配置文件 _config.yml , 找到配置标签的
vendors，里面所有值都可以替换成 cdn 服务器上的地址。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">vendors:</span><br><span class="line">  # Internal path prefix. Please do not edit it.</span><br><span class="line">  _internal: assets/lib</span><br><span class="line"></span><br><span class="line">  # Internal version: 2.1.3</span><br><span class="line">  jquery: https://cdn.jsdelivr.net/npm/jquery@2.1.3/dist/jquery.min.js</span><br><span class="line"></span><br><span class="line">  # Internal version: 2.1.5</span><br><span class="line">  # See: http://fancyapps.com/fancybox/</span><br><span class="line">  fancybox: https://cdn.jsdelivr.net/npm/fancybox@2.1.5/dist/fancybox.jquery.cjs.min.js</span><br><span class="line">  fancybox_css: https://cdn.jsdelivr.net/npm/fancybox@2.1.5/dist/css/jquery.fancybox.css</span><br><span class="line"></span><br><span class="line">  # Internal version: 1.0.6</span><br><span class="line">  # See: https://github.com/ftlabs/fastclick</span><br><span class="line">  fastclick: https://cdn.jsdelivr.net/npm/fastclick@1.0.6/lib/fastclick.min.js</span><br><span class="line"></span><br><span class="line">  # Internal version: 1.9.7</span><br><span class="line">  # See: https://github.com/tuupola/jquery_lazyload</span><br><span class="line">  lazyload: https://cdn.jsdelivr.net/npm/jquery-lazyload@1.9.7/jquery.lazyload.min.js</span><br><span class="line"></span><br><span class="line">  # Internal version: 1.2.1</span><br><span class="line">  # See: http://VelocityJS.org</span><br><span class="line">  velocity: https://cdn.jsdelivr.net/npm/velocity-animate@1.5.2/velocity.min.js</span><br><span class="line"></span><br><span class="line">  # Internal version: 1.2.1</span><br><span class="line">  # See: http://VelocityJS.org</span><br><span class="line">  velocity_ui: https://cdn.jsdelivr.net/npm/velocity-animate@1.5.2/velocity.ui.js</span><br><span class="line"></span><br><span class="line">  # Internal version: 0.7.9</span><br><span class="line">  # See: https://faisalman.github.io/ua-parser-js/</span><br><span class="line">  ua_parser: https://cdn.jsdelivr.net/npm/ua-parser-js@0.7.9/src/ua-parser.min.js</span><br><span class="line"></span><br><span class="line">  # Internal version: 4.6.2 -real 4.7.0</span><br><span class="line">  # See: http://fontawesome.io/</span><br><span class="line">  fontawesome: https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css</span><br><span class="line"></span><br><span class="line">  # Internal version: 1</span><br><span class="line">  # https://www.algolia.com</span><br><span class="line">  algolia_instant_js: https://cdn.jsdelivr.net/npm/instantsearch.js@4.0.0/dist/instantsearch.production.min.js</span><br><span class="line">  algolia_instant_css:</span><br><span class="line"></span><br><span class="line">  # Internal version: 1.0.2</span><br><span class="line">  # See: https://github.com/HubSpot/pace</span><br><span class="line">  # Or use direct links below:</span><br><span class="line">  # pace: //cdn.bootcss.com/pace/1.0.2/pace.min.js</span><br><span class="line">  # pace_css: //cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-flash.min.css</span><br><span class="line">  pace:</span><br><span class="line">  pace_css:</span><br><span class="line"></span><br><span class="line">  # Internal version: 1.0.0</span><br><span class="line">  # https://github.com/hustcc/canvas-nest.js</span><br><span class="line">  canvas_nest: https://cdn.jsdelivr.net/npm/canvas-nest.js@1.0.0/canvas-nest.min.js</span><br><span class="line"></span><br><span class="line">  # three</span><br><span class="line">  three:</span><br><span class="line"></span><br><span class="line">  # three_waves</span><br><span class="line">  # https://github.com/jjandxa/three_waves</span><br><span class="line">  three_waves:</span><br><span class="line"></span><br><span class="line">  # three_waves</span><br><span class="line">  # https://github.com/jjandxa/canvas_lines</span><br><span class="line">  canvas_lines:</span><br><span class="line"></span><br><span class="line">  # three_waves</span><br><span class="line">  # https://github.com/jjandxa/canvas_sphere</span><br><span class="line">  canvas_sphere:</span><br><span class="line"></span><br><span class="line">  # Internal version: 1.0.0</span><br><span class="line">  # https://github.com/zproo/canvas-ribbon</span><br><span class="line">  canvas_ribbon:</span><br><span class="line"></span><br><span class="line">  # Internal version: 3.3.0</span><br><span class="line">  # https://github.com/ethantw/Han</span><br><span class="line">  han:</span><br></pre></td></tr></table></figure>
<ul>
<li><p>引用 CDN 上存在的 jquery 库和 css</p>
<p>打开 Jsdelivr 官网，在搜索中搜索相应库的，如果存在，则直接引用。</p>
<figure>
<img data-src="https://i.loli.net/2019/11/24/n1salZ8wcOhGU9Y.png"
alt="TIM截图20191124133634.png" />
<figcaption aria-hidden="true">TIM截图20191124133634.png</figcaption>
</figure></li>
<li><p>对于 github 上的文件加速</p>
<p>比如自己的网站图标，个人头像，一些 js 库是直接存储在 github
的仓库里面的，则可以用下面的方式进行加速。</p>
<p><code>https://cdn.jsdelivr.net/gh/用户名/仓库名/文件路径</code></p>
<p>例如，在配置文件中，可以看到我对个人的头像进行了加速</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line"># in directory: /assets/images/avatar.gif</span><br><span class="line">avatar: https://cdn.jsdelivr.net/gh/galensgan/galensgan.github.io/assets/images/info/author.jpg</span><br></pre></td></tr></table></figure>
<p>经过上面的操作之后，博客访问速度可以达到正常的使用水平。如果是采用的我的博客模板，则不需要再进行加速配置，都已经配置好了。</p></li>
</ul>
<h1 id="增加live2d">增加Live2D</h1>
<p>配置 Live2d 的方法来自于 <a
href="https://github.com/stevenjoezhang/live2d-widget">传送门:stevenjoezhang</a></p>
<p>本博客默认开启，如果要关闭，请在配置文件 _config.yml 中将下面的
enable 改成 false 即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#增加看板娘#</span><br><span class="line">live2d:</span><br><span class="line">    enable: true</span><br><span class="line">    live2d_widget: https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/autoload.js</span><br></pre></td></tr></table></figure>
<h1 id="致谢">致谢</h1>
<ol type="1">
<li>本博客模板来自 <a
href="https://github.com/Simpleyyt/simpleyyt.github.io">simpleyyt.github.io</a></li>
<li>CDN 加速的灵感来自 <a
href="https://wu-kan.github.io">今、情热が岚になって</a></li>
<li>stevenjoezhang 大大的 <a
href="https://github.com/stevenjoezhang/live2d-widget">Live2d-widget</a></li>
</ol>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>jekyll</tag>
        <tag>个人博客搭建</tag>
        <tag>CDN 加速</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>给博客增加revealjs功能</title>
    <url>/posts/2019/ARMN8G.html</url>
    <content><![CDATA[<figure>
<img data-src="https://i.loli.net/2019/12/02/rFzqNcd2lim1vMA.gif"
alt="reveal.js封面展示.gif" />
<figcaption aria-hidden="true">reveal.js封面展示.gif</figcaption>
</figure>
<h1 id="序">序</h1>
<p>汇报一直用 ppt ，审美疲劳了~ 对，简直是平淡无奇，用 ppt
汇报，总感觉与自己的帅气（简称X格）完全配不上，所以，汇报时，至少是
prezi 或者 focusky 。但自从搭建了个人博客之后，发现 prezi 之流依旧太
low。 那要用什么呢？当然是reveal.js啦~</p>
<span id="more"></span>
<h1 id="reveal.js介绍">reveal.js介绍</h1>
<p>先看看什么是reveal.js。 <img data-src="https://i.loli.net/2019/11/27/LcjN8yIY16xldrk.gif"
alt="sliedes展示.gif" /></p>
<p>Reveal.JS 是 Hakim El Hattab
开发的一个演示文稿制作工具，能够制作绚丽的演示文稿并生成 HTML
格式，将它发布到 web 上。它使用了 CSS3 变换功能和
JavaScript，这个工具大受 web
开发者的青睐，因为它容易创造美丽的演示。</p>
<h1 id="想法的形成">想法的形成</h1>
<p>开始接触到 reveal.js 的时候，因为它的 Web
特性，一下子就被迷上了，所以想将其移植到自己的博客里面，当点击博客标题时，就自动开始播放。</p>
<p>这样，博客里便可以同时存放文章和 PPT（在接下来的表达中，用 Slides
来表达用reveal.js生成的幻灯片，与 PPT 区别开来）。</p>
<p>但是，但是，但是...网上并没有现成的解决方案，百度了下，大家主流的方案如下：</p>
<ol type="1">
<li><p>将 reveal.js 源码下载下来，然后修改之后打开。<a
href="https://blog.csdn.net/qq_37954086/article/details/80541224">传送门</a></p>
<p>对这种操作，简直不能忍好吗？做一个
PPT，居然要下载一堆与PPT内容不相关的源代码，加起来人 2M
多了，有的幻灯片如果用 offce 做，也就几百 K。</p>
<p>并且这还有个问题是，如果汇报结束，别人找你要 PPT，
你还得压缩源代码，等其他人拿到你的 slides 时，首先要解压，然后找到其中的
index.html ，再双击打开。</p>
<p>如果是个 Web
小白，根本不懂哪个文件是入口，这种方式，对于分享太不友好了。</p>
<p>虽然我们装X，但起码得比其它方式的有优势才行，否则不是智障么？</p></li>
<li><p>将 reveal.js 部署到 pages 上面。<a
href="https://www.jianshu.com/p/2b13af2044dd">传送门</a></p>
<p>这种方案，先是用方案1生成本地 Slides，然后将它部署到 pages
上面。这对我也不适用，我的 pages 都用作个从博客了，没地方。</p></li>
</ol>
<p>上面的两个方式我不喜欢的地方在于</p>
<ol type="1">
<li><strong>一般人看到源代码文件，头大，不会编辑</strong></li>
<li><strong>会编辑的人，如果要制作满意的，复杂点的 PPT,
也比较费时间</strong></li>
</ol>
<p>在百般凉凉的状态下，终于让我发现了一个基于 reveal.js 的在线版本 <a
href="https://slides.com">Slides</a>。它可以直接线上制作，制作完成后，通用浏览器线访问。</p>
<p>从这个地方便得到了灵感，我可以在线上制作完成，然后导出到本地，制作成
markdown 格式的文章，再推送到个人博客，这样今后在博客里面就可以查看
Slides 了。</p>
<h1 id="开始实现">开始实现</h1>
<h2 id="注册-slides-账号">注册 Slides 账号</h2>
<p>和正常注册账号的流程一样</p>
<ul>
<li><p>打开官网https://slides.com</p></li>
<li><p>右上角有一个 Sign Up, 点击开始注册</p>
<figure>
<img data-src="https://i.loli.net/2019/11/27/hwab6EJRtmpAnQu.png"
alt="slideSignUp.png" />
<figcaption aria-hidden="true">slideSignUp.png</figcaption>
</figure></li>
<li><p>特别注意的是，注册是需要科学上网（你懂的）才行，因为它采用了谷歌的验证系统进行非机器验证。</p></li>
</ul>
<h2 id="新建-slides">新建 slides</h2>
<p>点击新建，和制件 ppt 一样的流程。</p>
<h2 id="导出到本地">导出到本地</h2>
<ol type="1">
<li><p>点击左侧导出按钮 <img data-src="https://i.loli.net/2019/11/27/DXC8db6Gj2SpKxv.png"
alt="导出slides1.png" /></p></li>
<li><p>选择 <strong>Export to reveal.js</strong> <img data-src="https://i.loli.net/2019/11/27/HhKC1Svw8ITpgVZ.png"
alt="导出slides2.png" /></p></li>
<li><p>打开我的 reveal.js 模板，位于 <code>_post/revealjs</code>
里面，替换对应的<code>head</code>和<code>body</code>,然后修改<code>ini</code>的相关参数。</p></li>
<li><p>更新文章，文章的链接就是 slides 了。</p>
<p><a
href="https://galensgan.github.io/2019/12/02/revealjsDemo/#/">效果传送门</a></p></li>
</ol>
<h1 id="声明">声明</h1>
<blockquote>
<p>本方首发于<a
href="https://noctiflorous.gitee.io/">李有福呀</a>，转载请注明出处。</p>
</blockquote>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>个人博客</tag>
        <tag>jekyll</tag>
        <tag>galens</tag>
        <tag>李有福呀</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建历程</title>
    <url>/posts/2019/24BB768.html</url>
    <content><![CDATA[<p>本文记录本人搭建博客的历程，虽不精彩，但于我来说是一份难得的回忆，值此保留。</p>
<span id="more"></span>
<h2 id="博客建立">2019/08/18 博客建立</h2>
<p>初时接触博客，对 html, js
一窍不通，好在有一点编程基础，结合网上的教程，历经千山万水，饱受风吹日晒之困难，最终，浑浑噩噩地将博客建立起来了。</p>
<h2 id="博客更换主题next">2019/11/23 博客更换主题：NEXT</h2>
<p>✅ 2019/11/24 增加 Live2d 功能</p>
<p>✅ 2019/11/25 增加对 reveal.js
的支持，可以推送slides到博客，实现在线预览</p>
<p>✅ 2019/11/26 增加对 mermaid 的支持，官方的 mermaid 不支持 markdown
中的 mermaid</p>
<p>✅ 2020/10/04 增加文章主题</p>
<h2 id="博客从-jekyll-引擎换成-hexo-引擎">2021/08/13 博客从 jekyll
引擎换成 hexo 引擎</h2>
<p>用了这么久的 jekyll，为什么突然就换了呢？</p>
<p>其实换之前我也挣扎很久，因为我不舍得 github 对 jekyll
友好的支持，使用 jekyll，我增加或者修改完文章，直接推送就可以了，github
会自动进行编译。</p>
<p>今天微风正好，我想给自己的主题美化一下，既然要美化，当然要安装环境咯，开始下载
jekyll 的 windows 版本安装，安装完成后，运行不起来，google
无果后，又尝试用 docker 安装 jekyll
环境，安装完成后，还是跑不起来...</p>
<p>一怒之下，我决定换成 hexo 了，起码它环境好安装，插件多，NexT
主题也一直在维护。</p>
<p>初次使用
Hexo,又成功了趟了满地的坑，填啊填，终于填完了，于是才有了这段总结。</p>
<p>...... 纵有千言万语，亦道不尽万般辛酸！</p>
<blockquote>
<p>原引擎的主题放在当前仓库的 <code>jekyll</code>
分支中，有需要的可以自行食用。</p>
</blockquote>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Hexo 5.x 创建NexT主题的个人博客</title>
    <url>/posts/2021/1224JG.html</url>
    <content><![CDATA[<p>花了大概两天的时间，终于把博客从 Jekyll 迁移到了
Hexo，期间淌过了很多的坑，作此记录，以醒来者。</p>
<span id="more"></span>
<h2 id="概述">概述</h2>
<p><strong>一开始为什么选择 jekyll ?</strong></p>
<p>选择 jekyll 的原因主要是 github
支持推送编译，所以只需要将自己的文章（.md文件）推送到 master
即可部署了，而 Hexo 需要在本地编译好，再上传，所以本机要安装
nodejs，比较麻烦。</p>
<p><strong>为什么会选择从 jekyll 更改到 Hexo 呢？</strong></p>
<p>我的博客从 2018年就开始建立了，最近想着美化一下主题吧，然后就开始配置
jekyll 开发环境，但是 jekyll 它本身只支持 linux, 从网上下载了一个 jekyll
的 windows 安装程序，按照教程安装，然后百般倒腾，就是运行不起来！</p>
<p>好吧，我想，既然你原生支持 linux, 那我下载个 docker
安装你吧，网上一搜，还真有专门针对 pages 的 docker
镜像，安装完成后，还是运行不起来，蛋疼~</p>
<p>不折腾了，直接用 Hexo 吧。</p>
<p>我原来用的是 NexT 主题，所以，在 Hexo
的主题商店一搜，好家伙，恕我以前没见识！</p>
<p>“哇，主题真多”，“哇，插件真多”，“兴奋~”。</p>
<p>好了，话不多说，接下来开开心心地安装 Hexo 加 NexT 主题吧。</p>
<h2 id="安装-hexo-及-next">安装 Hexo 及 NexT</h2>
<h3 id="扫盲">扫盲</h3>
<p>要特别注意的是，咱们从 github 上下载的 NexT 只是 Hexo
的一个主题，它不包含主程序，主程序需要用 Hexo 初始化。</p>
<h3 id="安装-hexo">安装 Hexo</h3>
<p>查看 <a href="https://hexo.io/zh-cn/docs/">Hexo安装官方教程</a>
进行安装</p>
<p>安装 Hexo 时，直接使用 <code>npm install -g hexo-cli</code>
进行安装，不建议采用 <strong>进阶安装</strong> 方式</p>
<h3 id="用-hexo-初始化一个博客">用 Hexo 初始化一个博客</h3>
<p>假设我的安装目录为：<code>D:\Personal</code>,
博客的目录为：<code>hexo-site</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd d:</span><br><span class="line">cd D:\Personal</span><br><span class="line">hexo init hexo-site</span><br><span class="line">cd hexo-site</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"># 安装 hexo-server，进行本地编译及运行</span><br><span class="line">npm install hexo-server --save</span><br><span class="line"></span><br><span class="line"># 安装 hexo-deployer-git,一键部署到 github 等平台</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>安装完成后目录如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml // 博客配置文件</span><br><span class="line">├── package.json  // npm包配置文件</span><br><span class="line">├── scaffolds  // 模版文件夹</span><br><span class="line">├── source // 存放用户资源的地方</span><br><span class="line">|   ├── _drafts // 存放草稿</span><br><span class="line">|   └── _posts  // 存放需要编译的文章</span><br><span class="line">└── themes  // 存放主题</span><br></pre></td></tr></table></figure>
<p><a href="https://hexo.io/zh-cn/docs/setup">官方教程</a></p>
<h3 id="下载-next-主题">下载 NexT 主题</h3>
<p>hexo 的主题都是放在 <code>themes</code> 目录下，一般每个主题都是一个
Git
仓库，所以，为了方便今后在其它电脑上下载自己的博客仓库进行编译，我们需要把主题作为
hexo 的子模块。</p>
<p><strong>添加子模块</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git submodule add https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p><strong>更新子模块</strong></p>
<p>保持上面的命令行窗口不变，输入以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 更新项目内子模块到最新版本</span><br><span class="line">git submodule update</span><br><span class="line"></span><br><span class="line">// 更新子模块为远程项目的最新版本</span><br><span class="line">git submodule update --remote</span><br></pre></td></tr></table></figure>
<p>主题安装完成后的目录如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\Personal\hexo-site</span><br><span class="line">├── _config.yml // 博客配置文件</span><br><span class="line">├── package.json  // npm包配置文件</span><br><span class="line">├── scaffolds  // 模版文件夹</span><br><span class="line">├── source // 存放用户资源的地方</span><br><span class="line">|   ├── _drafts // 存放草稿</span><br><span class="line">|   └── _posts  // 存放需要编译的文章</span><br><span class="line">└── themes  // 存放主题</span><br><span class="line">    ├── next</span><br><span class="line">    |   ├── _config.yml // 主题配置文件</span><br><span class="line">    |   ├── source</span><br><span class="line">    |   ├── ...</span><br><span class="line">    |   └── script</span><br><span class="line">    └── .gitkeep // 让 git 忽略当前文件夹及其子文件夹内所文件和文件夹 </span><br></pre></td></tr></table></figure>
<blockquote>
<p>关于子模块的使用，可以参考：<a
href="https://www.jianshu.com/p/9000cd49822c">Git submodule
子模块的管理和使用</a></p>
</blockquote>
<p><strong>启用主题</strong></p>
<p>打开 <strong>博客配置文件</strong>，搜索 <code>theme</code>
字段，将其改成如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<p><strong>安装主题依赖包</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd themes/next</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p><a
href="https://theme-next.js.org/docs/getting-started/">官方安装教程</a></p>
<h2 id="配置-next-主题">配置 NexT 主题</h2>
<p>我们需要修改 <code>themes\next\_config.yml</code>
来进行主题配置，但是如果直接修改它，会使得今后更新主题时出现冲突情况，所以我们使用
<a
href="https://hexo.io/zh-cn/docs/configuration#%E4%BD%BF%E7%94%A8%E4%BB%A3%E6%9B%BF%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">代替主题配置文件</a>
来进行个性化配置。它的文件名格式为：<strong><code>_config.[theme].yml</code></strong>
。</p>
<p>在网站根目录 <code>D:\Personal\hexo-site</code> 新建
<code>_config.next.yml</code> 文件，在里面进行博客配置。</p>
<h3 id="配置优先级">配置优先级</h3>
<p>Hexo 在合并主题配置时，Hexo 配置文件（博客配置文件）中的
<code>theme_config</code> 的优先级最高，其次是
<code>_config.[theme].yml</code> 文件，最后是位于主题目录下的
<code>_config.yml</code> 文件。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">&quot;next&quot;</span></span><br><span class="line"><span class="attr">theme_config:</span></span><br><span class="line">  <span class="attr">bio:</span> <span class="string">&quot;My awesome bio&quot;</span></span><br><span class="line">  <span class="attr">foo:</span></span><br><span class="line">    <span class="attr">bar:</span> <span class="string">&#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.next.yml</span></span><br><span class="line"><span class="attr">logo:</span> <span class="string">&quot;a-cool-image.png&quot;</span></span><br><span class="line">  <span class="attr">foo:</span></span><br><span class="line">    <span class="attr">baz:</span> <span class="string">&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># themes/next/_config.yml</span></span><br><span class="line"><span class="attr">bio:</span> <span class="string">&quot;Some generic bio&quot;</span></span><br><span class="line"><span class="attr">logo:</span> <span class="string">&quot;a-cool-image.png&quot;</span></span><br><span class="line">  <span class="attr">foo:</span></span><br><span class="line">    <span class="attr">baz:</span> <span class="string">&#x27;c&#x27;</span></span><br><span class="line">    <span class="attr">bay:</span> <span class="string">&#x27;d&#x27;</span></span><br></pre></td></tr></table></figure>
<p>最终主题配置的输出是：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">bio:</span> <span class="string">&quot;My awesome bio&quot;</span>,</span><br><span class="line">  <span class="attr">logo:</span> <span class="string">&quot;a-cool-image.png&quot;</span>,</span><br><span class="line">  <span class="attr">foo:</span> &#123;</span><br><span class="line">    <span class="attr">bar:</span> <span class="string">&quot;a&quot;</span>,</span><br><span class="line">    <span class="attr">baz:</span> <span class="string">&quot;b&quot;</span>,</span><br><span class="line">    <span class="attr">bay:</span> <span class="string">&#x27;d&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="关键配置">关键配置</h3>
<p>Hexo 和 NexT
安装完成后，还需要进行一些关键的配置，才能有更好的使用体验。</p>
<p><strong>NexT 主题配置：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.next.yml</span></span><br><span class="line"><span class="comment"># Define custom file paths.</span></span><br><span class="line"><span class="comment"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span></span><br><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.njk</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.njk</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.njk</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.njk</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl,在该文件中修改 css 样式，达到更多的定制化</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Schemes，主题类型选择</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开 menu 中的其它菜单</span></span><br><span class="line"><span class="comment"># 配置教程：https://theme-next.js.org/docs/theme-settings/custom-pages.html</span></span><br><span class="line"><span class="comment"># 打开后，还要进行额外的配置，详见下文</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable / Disable menu icons / item badges.</span></span><br><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">true</span> <span class="comment"># 显示文章数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示返回顶部按钮</span></span><br><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Local Search，本地搜索</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/next-theme/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">5</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Reading progress bar</span></span><br><span class="line"><span class="comment"># 阅读进度条</span></span><br><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: left | right</span></span><br><span class="line">  <span class="attr">start_at:</span> <span class="string">left</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">reversed:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#37c6c0&quot;</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">3px</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Sidebar Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/theme-settings/sidebar</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://i.loli.net/2021/08/13/uOIcVFAlDbYRiCk.png</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Social Links</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon`</span></span><br><span class="line"><span class="comment"># Key is the link label showing to end users.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/galensgan</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="string">简</span>  <span class="string">书:</span> <span class="string">https://www.jianshu.com/u/08760e791f9e</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-book-reader</span></span><br><span class="line">  <span class="comment">#Weibo: https://weibo.com/yourname || fab fa-weibo</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || fab fa-google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || fab fa-youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || fab fa-instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || fab fa-skype</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Post Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/theme-settings/posts</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Post meta display settings</span></span><br><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">created_at:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">updated_at:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">another_day:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use icon instead of the symbol # to indicate the tag at the bottom of the post</span></span><br><span class="line"><span class="attr">tag_icon:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Donate (Sponsor) settings</span></span><br><span class="line"><span class="comment"># Front-matter variable (unsupport animation).</span></span><br><span class="line"><span class="attr">reward_settings:</span></span><br><span class="line">  <span class="comment"># If true, a donate button will be displayed in every article by default.</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">comment:</span> <span class="string">Buy</span> <span class="string">me</span> <span class="string">a</span> <span class="string">coffee</span></span><br><span class="line"></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">wechatpay:</span> <span class="string">https://i.loli.net/2021/08/13/JOw9cxomhBAZFW8.png</span></span><br><span class="line">  <span class="attr">alipay:</span> <span class="string">https://i.loli.net/2021/08/13/U2s7gKn1zRw3uP4.png</span></span><br><span class="line">  <span class="comment">#paypal: /images/paypal.png</span></span><br><span class="line">  <span class="comment">#bitcoin: /images/bitcoin.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Subscribe through Telegram Channel, Twitter, etc.</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon` (Font Awesome)</span></span><br><span class="line"><span class="attr">follow_me:</span></span><br><span class="line">  <span class="string">公众号:</span> <span class="string">https://i.loli.net/2021/08/13/QMRtHE2b4czd7OA.jpg</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-weixin</span></span><br><span class="line">  <span class="string">简书:</span> <span class="string">https://www.jianshu.com/u/08760e791f9e</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-book-reader</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/username || fab fa-twitter  </span></span><br><span class="line">  <span class="comment">#WeChat: /images/wechat_channel.jpg || fab fa-weixin</span></span><br><span class="line">  <span class="comment">#RSS: /atom.xml || fa fa-rss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mermaid tag</span></span><br><span class="line"><span class="comment"># 开启 mermaid 展示</span></span><br><span class="line"><span class="attr">mermaid:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available themes: default | dark | forest | neutral</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">forest</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码块设置</span></span><br><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># All available themes: https://theme-next.js.org/highlight/</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">github</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">github</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">flat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Easily enable fast Ajax navigation on your website.</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/next-theme/pjax</span></span><br><span class="line"><span class="comment"># 该设置使得切换页面不会重复刷新，提高响应速度</span></span><br><span class="line"><span class="attr">pjax:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="配置-abouttagscategories-页面">配置
<code>About</code>，<code>Tags</code>，<code>Categories</code> 页面</h3>
<p>初始化的博客只有首页和归档两个菜单，一般我们还需要添加关于、标签、分类菜单栏，可以通过下列步骤进行增加。</p>
<p>**修改 _config.next.yml 配置**</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.next.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ... 其它配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开 menu 中的其它菜单</span></span><br><span class="line"><span class="comment"># 配置教程：https://theme-next.js.org/docs/theme-settings/custom-pages.html</span></span><br><span class="line"><span class="comment"># 打开后，还要进行额外的配置，详见下文</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>
<p><strong>新建页面</strong></p>
<p>在终端中，将目录定位到博客根目录（<code>D:\Personal\hexo-site</code>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 定位到根目录</span><br><span class="line">cd d:</span><br><span class="line">cd D:\Personal\hexo-site</span><br><span class="line"></span><br><span class="line"># 新建页面</span><br><span class="line">hexo new page about</span><br><span class="line">hexo new page tags</span><br><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>
<p><strong>修改页面类型</strong></p>
<p>通过上述命令后，会在博客根目录下的 <code>source</code> 目录中生成
<code>about</code>、<code>tags</code>、<code>categories</code>
三个目录，每个目录中分别有一个 <code>index.md</code>
文件，打开该文件，并添加 <code>type</code> 属性。以
<code>source/tags/index.md</code> 为例:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2021-08-13 00:09:00</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p>每个菜单的类型如下：</p>
<table>
<thead>
<tr class="header">
<th>菜单</th>
<th>type</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>about</td>
<td>about</td>
</tr>
<tr class="even">
<td>tags</td>
<td>tags</td>
</tr>
<tr class="odd">
<td>categories</td>
<td>categories</td>
</tr>
</tbody>
</table>
<h3 id="显示优化">显示优化</h3>
<p>通过上述步骤后，就可以运行
<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>，然后在浏览器中查看效果了（网址：http://127.0.0.1:4000）。</p>
<p>但是，当某些界面显示不符合我们的审美时，我们也可以对样式进行自定义。</p>
<p><strong>打开自定义样式配置</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.next.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define custom file paths.</span></span><br><span class="line"><span class="comment"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span></span><br><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.njk</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.njk</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.njk</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.njk</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl,在该文件中修改 css 样式，达到更多的定制化</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>
<p><strong>新建 <code>source/_data/styles.styl</code> 文件</strong></p>
<p><strong>在 <code>styles.styl</code> 文件中自定义样式</strong></p>
<p>下面是我做的一点更改，以供参考：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 侧边目录行距</span></span><br><span class="line"><span class="selector-class">.post-toc</span> <span class="selector-class">.nav-item</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链接</span></span><br><span class="line"><span class="selector-tag">p</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fc6423</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头部没有进度条时的黑框</span></span><br><span class="line"><span class="selector-class">.headband</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 侧边栏名称底色</span></span><br><span class="line"><span class="selector-class">.site-brand-container</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#333333c7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 边栏阅读进度背景色</span></span><br><span class="line"><span class="selector-class">.back-to-top</span><span class="selector-class">.back-to-top-on</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fc642380</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="插件推荐">插件推荐</h2>
<p>到上面一步为止，咱们的博客已经处于生产水平了，正常使用完全没问题了，如果不感兴趣，可以直接跳到
<a href="#部署">部署</a> 章节。</p>
<h3 id="hexo-enhancer">hexo-enhancer</h3>
<p><code>hexo-enhancer</code>是一个 Hexo
功能增强插件。它可以自动生成日期，标题，标签等等，在使用中很方便。</p>
<p>官方网址：https://sulin.me/2019/Z726F8.html</p>
<h3 id="hexo-uuid">hexo-uuid</h3>
<p>给文章添加设置一个永久链接，这样文章变动后，链接将不会改变。</p>
<p>官方网址：https://www.npmjs.com/package/hexo-uuid</p>
<h2 id="部署">部署</h2>
<p>本人采用 <a
href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>
来实现一键部署。</p>
<p>按 <a
href="https://github.com/hexojs/hexo-deployer-git">官方说明文档</a>
配置即可。</p>
<h2 id="其它参考文档">其它参考文档</h2>
<p><a href="https://theme-next.js.org/docs/">theme-next</a></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>快速搭建Hexo编译环境</title>
    <url>/posts/2021/2D12FH.html</url>
    <content><![CDATA[<p>有时候我们需要在其它电脑上编译 Hexo
博客，那么要如何快速搭建编译的环境呢，且听本文娓娓道来。如果涉及的环境已经存在或步骤已经执行过，请自行跳过。</p>
<span id="more"></span>
<h2 id="安装-npm">安装 npm</h2>
<p>npm 是随 nodejs 安装而自动安装的，所以，我们只需要安装 nodejs
即可。本人一般安装 nodejs 使用 scoop 来安装，命令行如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install nodejs</span><br></pre></td></tr></table></figure>
<h2 id="安装-git">安装 Git</h2>
<p>Git 用于克隆源代码，当然源代码也可以手动下载，但是用 Git
的话可以在另一台电脑修改博客后将更新推送到 GitHub。scoop
安装命令如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install git</span><br></pre></td></tr></table></figure>
<h2 id="克隆仓库">克隆仓库</h2>
<p>由于主题是作为博客的子模块，所以需要递归克隆整个项目：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git clone github地址 <span class="literal">--recursive</span></span><br></pre></td></tr></table></figure>
<h2 id="安装依赖包">安装依赖包</h2>
<p>命令行进入到博客主目录中，运行下列语句安装依赖包：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>进入到 <code>./themes/next</code>
目录，运行下列语句安装主题依赖包：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<h2 id="安装pandoc">安装Pandoc</h2>
<p>hexo 需要 pandoc 支持，采用 scoop 安装，其命令如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install pandoc</span><br></pre></td></tr></table></figure>
<h2 id="编译">编译</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npx hexo clean</span><br><span class="line">npx hexo generate</span><br><span class="line">npx hexo deploy</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>个人博客</tag>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>免费的静态托管网站推荐</title>
    <url>/posts/2023/3G50H3P.html</url>
    <content><![CDATA[<p>搭建了个人博客之后，如何托管博客网站就成了必须要解决的问题，基于国内的网络环境，如果部署在国外的网站上，访问速度上不去；如果选择国内的托管，大部分收费；如果使用家庭服务器，则备案又是一个问题。</p>
<blockquote>
<p>补充说明下为什么要备案：</p>
<ol type="1">
<li>备案后，可以通过 Http
默认端口访问网站，否则就得在域名后缀一个<code>:端口</code>，很难看</li>
<li>没备案，你将网站发给其他人，像微信、QQ会提示链接有风险，别人不敢打开</li>
</ol>
</blockquote>
<p>当然，此处不讨论自己付费租一个云服务器的方案，本文主打的一个就是“白嫖”！</p>
<span id="more"></span>
<p>本文只根据自己的日常使用进行总结推荐，受限于认知，可能并不全面，欢迎联系我进行补充。</p>
<h2 id="gitee-pages">Gitee Pages</h2>
<p>简介：国内最大的代码托管平台。</p>
<p>优点：稳定性强，由于服务器位于上海，国内访问速度非常快。</p>
<p>缺点：仓库的最大容量和单个文件大小有限制，对仓库内容非常敏感，需要实名认证，自定义域名和自动部署都需要收费。</p>
<p>个人观点：Gitee Pages
非常适合不需要自定义域名并且网站内容少、内容几乎不变的场景，例如<a
href="https://xiongxyang.gitee.io/">小说精品屋官网</a>。由于 Gitee Pages
对仓库内容非常敏感，每次部署前都会对仓库内容进行检查，部署博客的话会经常遇到部署失败的情况，而且内容校验规则也会发生变化，如果网站内容比较多，有时候排查整改起来会比较麻烦，所以建博客我现在几乎不考虑使用
Gitee Pages 了。</p>
<p>👉 <a href="https://gitee.com/">前往官网</a></p>
<h2 id="github-pages">GitHub Pages</h2>
<p>简介：全球最大的代码托管平台。</p>
<p>优点：稳定性强，部署简单，使用方便，支持自定义域名。</p>
<p>缺点：国内访问速度一般，拒绝百度爬虫访问。</p>
<p>个人观点：如果不想太折腾并且对百度收录没有要求的话可以选择 GitHub
Pages。</p>
<p>👉 <a href="https://github.com/">前往官网</a></p>
<h2 id="cloudflare-pages">Cloudflare Pages</h2>
<p>简介：Cloudflare 推出的全新网页托管服务。</p>
<p>优点：不限站点数、请求数和带宽，全球都拥有 CDN
节点，支持自定义域名和自动部署。</p>
<p>缺点：国内访问速度和稳定性一般，每月构建次数、文件数量和大小都有限制。</p>
<p>个人观点：放弃 Gitee Pages 和 GitHub Pages
后的一个选择，稳定性不好，经常超时，不过有时候挺快的。</p>
<p>👉 <a href="https://pages.cloudflare.com/">前往官网</a></p>
<h2 id="vercel">Vercel</h2>
<p>简介：一个开箱即用的网站托管服务，全球都拥有 CDN
节点，支持自定义域名和自动部署，前身叫 ZEIT。</p>
<p>优点：国内访问速度比 Github Pages 和 Cloudflare Pages
要快，支持自定义域名和自动部署。</p>
<p>缺点：构建次数和构建时长有限制，每月带宽限制 100G。</p>
<p>个人观点：博客托管的最终选择，国内访问速度是除了 Gitee Pages
外目前使用过最快的，<a
href="https://www.xxyopen.com/">个人博客</a>现已托管到 Vercel 上。</p>
<p>👉 <a href="https://vercel.com/">前往官网</a></p>
<h2 id="不同平台网站速度对比">不同平台网站速度对比</h2>
<p>以部署在不同平台上的<a
href="https://www.xxyopen.com/">个人博客</a>网站作为测试网站，右边为
Vercel 部署的网站：</p>
<h3 id="cloudflare-pages-与-vercel-对比">Cloudflare Pages 与 Vercel
对比</h3>
<p><a href="https://s1.ax1x.com/2022/07/19/j7zq0g.png"><img data-src="https://s1.ax1x.com/2022/07/19/j7zq0g.png" alt="img" /></a></p>
<h3 id="github-pages-与-vercel-和-对比">Github Pages 与 Vercel 和
对比</h3>
<p><a href="https://s1.ax1x.com/2022/07/19/j7zbnS.png"><img data-src="https://s1.ax1x.com/2022/07/19/j7zbnS.png" alt="img" /></a></p>
<h3 id="gitee-pages-与-vercel-对比">Gitee Pages 与 Vercel 对比</h3>
<p><a href="https://s1.ax1x.com/2022/07/19/j7z7X8.png"><img data-src="https://s1.ax1x.com/2022/07/19/j7z7X8.png" alt="img" /></a></p>
<h2 id="推荐分析">推荐分析</h2>
<p>Gitee Pages 限制太多。</p>
<p>国外首选 Vercel，否则 GitHub Pages 和 Cloudflare Pages 相差不大，但
GitHub Pages
的稳定性更好，如果想要自己的博客网站被百度搜索引擎收录，那么选择
Cloudflare Pages，否则选择 GitHub Pages。</p>
<h2 id="其它静态网站托管平台">其它静态网站托管平台</h2>
<p>其它常见的托管平台还有：</p>
<ul>
<li><a href="https://coding.net/">Coding
Pages</a>：被腾讯收购，收费，送代金劵可以试用几个月</li>
<li><a href="https://netlify.com/">Netlify</a>：
国外、免费，国内访问速度还可以，但和 Vercel 一样，带宽限制为每月
100G，可作为 Vercel 的替代方案</li>
<li><a
href="https://cloud.tencent.com/document/product/876/40270">CloudBase
静态网站托管</a>：腾讯云推出的静态网站托管服务，收费</li>
</ul>
<h2 id="致谢">致谢</h2>
<p>本文转载至</p>
<p><a
href="https://www.xxyopen.com/2022/07/19/tools/pages_host.html">几个免费的静态网站托管平台对比
| xxyopen</a></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>中文文案排版指北（简体中文版）</title>
    <url>/posts/2019/B17J0X.html</url>
    <content><![CDATA[<p>统一中文文案、排版的相关用法，降低团队成员之间的沟通成本，增强网站气质。</p>
<span id="more"></span>
<p>{:toc}</p>
<h2 id="空格">空格</h2>
<p>「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在
34
岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。</p>
<p>与大家共勉之。」——<a
href="https://github.com/vinta/pangu.js">vinta/paranoid-auto-spacing</a></p>
<h3 id="中英文之间需要增加空格">中英文之间需要增加空格</h3>
<p>正确：</p>
<blockquote>
<p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>在LeanCloud上，数据存储是围绕<code>AVObject</code>进行的。</p>
</blockquote>
<blockquote>
<p>在 LeanCloud上，数据存储是围绕<code>AVObject</code> 进行的。</p>
</blockquote>
<p>完整的正确用法：</p>
<blockquote>
<p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。每个
<code>AVObject</code> 都包含了与 JSON 兼容的 key-value
对应的数据。数据是 schema-free 的，你不需要在每个 <code>AVObject</code>
上提前指定存在哪些键，只要直接设定对应的 key-value 即可。</p>
</blockquote>
<p>例外：「豆瓣FM」等产品名词，按照官方所定义的格式书写。</p>
<h3 id="中文与数字之间需要增加空格">中文与数字之间需要增加空格</h3>
<p>正确：</p>
<blockquote>
<p>今天出去买菜花了 5000 元。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>今天出去买菜花了 5000元。</p>
</blockquote>
<blockquote>
<p>今天出去买菜花了5000元。</p>
</blockquote>
<h3 id="数字与单位之间无需增加空格">数字与单位之间无需增加空格</h3>
<p>正确：</p>
<blockquote>
<p>我家的光纤入户宽带有 10Gbps，SSD 一共有 10TB。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>我家的光纤入户宽带有 10 Gbps，SSD 一共有 20 TB。</p>
</blockquote>
<p>另外，度／百分比与数字之间不需要增加空格：</p>
<p>正确：</p>
<blockquote>
<p>今天是 233° 的高温。</p>
</blockquote>
<blockquote>
<p>新 MacBook Pro 有 15% 的 CPU 性能提升。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>今天是 233 ° 的高温。</p>
</blockquote>
<blockquote>
<p>新 MacBook Pro 有 15 % 的 CPU 性能提升。</p>
</blockquote>
<h3
id="全角标点与其他字符之间不加空格">全角标点与其他字符之间不加空格</h3>
<p>正确：</p>
<blockquote>
<p>刚刚买了一部 iPhone，好开心！</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>刚刚买了一部 iPhone ，好开心！</p>
</blockquote>
<h3 id="ms-text-autospace-to-the-rescue"><code>-ms-text-autospace</code>
to the rescue?</h3>
<p>Microsoft 有个 <a
href="http://msdn.microsoft.com/en-us/library/ie/ms531164(v=vs.85).aspx"><code>-ms-text-autospace</code></a>
的 CSS
属性可以实现自动为中英文之间增加空白。不过目前并未普及，另外在其他应用场景，例如
OS X、iOS
的用户界面目前并不存在这个特性，所以请继续保持随手加空格的习惯。</p>
<h2 id="标点符号">标点符号</h2>
<h3 id="不重复使用标点符号">不重复使用标点符号</h3>
<p>正确：</p>
<blockquote>
<p>德国队竟然战胜了巴西队！</p>
</blockquote>
<blockquote>
<p>她竟然对你说「喵」？！</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>德国队竟然战胜了巴西队！！</p>
</blockquote>
<blockquote>
<p>德国队竟然战胜了巴西队！！！！！！！！</p>
</blockquote>
<blockquote>
<p>她竟然对你说「喵」？？！！</p>
</blockquote>
<blockquote>
<p>她竟然对你说「喵」？！？！？？！！</p>
</blockquote>
<h2 id="全角和半角">全角和半角</h2>
<p>不明白什么是全角（全形）与半角（半形）符号？请查看维基百科词条『<a
href="http://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2">全角和半角</a>』。</p>
<h3 id="使用全角中文标点">使用全角中文标点</h3>
<p>正确：</p>
<blockquote>
<p>嗨！你知道嘛？今天前台的小妹跟我说「喵」了哎！</p>
</blockquote>
<blockquote>
<p>核磁共振成像（NMRI）是什么原理都不知道？JFGI！</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>嗨! 你知道嘛? 今天前台的小妹跟我说 "喵" 了哎!</p>
</blockquote>
<blockquote>
<p>嗨!你知道嘛?今天前台的小妹跟我说"喵"了哎!</p>
</blockquote>
<blockquote>
<p>核磁共振成像 (NMRI) 是什么原理都不知道? JFGI!</p>
</blockquote>
<blockquote>
<p>核磁共振成像(NMRI)是什么原理都不知道?JFGI!</p>
</blockquote>
<h3 id="数字使用半角字符">数字使用半角字符</h3>
<p>正确：</p>
<blockquote>
<p>这件蛋糕只卖 1000 元。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>这件蛋糕只卖 １０００ 元。</p>
</blockquote>
<p>例外：在设计稿、宣传海报中如出现极少量数字的情形时，为方便文字对齐，是可以使用全角数字的。</p>
<h3
id="遇到完整的英文整句特殊名词其內容使用半角标点">遇到完整的英文整句、特殊名词，其內容使用半角标点</h3>
<p>正确：</p>
<blockquote>
<p>乔布斯那句话是怎么说的？「Stay hungry, stay foolish.」</p>
</blockquote>
<blockquote>
<p>推荐你阅读《Hackers &amp; Painters: Big Ideas from the Computer
Age》，非常的有趣。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>乔布斯那句话是怎么说的？「Stay hungry，stay foolish。」</p>
</blockquote>
<blockquote>
<p>推荐你阅读《Hackers＆Painters：Big Ideas from the Computer
Age》，非常的有趣。</p>
</blockquote>
<h2 id="名词">名词</h2>
<h3 id="专有名词使用正确的大小写">专有名词使用正确的大小写</h3>
<p>大小写相关用法原属于英文书写范畴，不属于本 wiki
讨论內容，在这里只对部分易错用法进行简述。</p>
<p>正确：</p>
<blockquote>
<p>使用 GitHub 登录</p>
</blockquote>
<blockquote>
<p>我们的客户有 GitHub、Foursquare、Microsoft
Corporation、Google、Facebook, Inc.。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>使用 github 登录</p>
</blockquote>
<blockquote>
<p>使用 GITHUB 登录</p>
</blockquote>
<blockquote>
<p>使用 Github 登录</p>
</blockquote>
<blockquote>
<p>使用 gitHub 登录</p>
</blockquote>
<blockquote>
<p>使用 gｲんĤЦ8 登录</p>
</blockquote>
<blockquote>
<p>我们的客户有 github、foursquare、microsoft
corporation、google、facebook, inc.。</p>
</blockquote>
<blockquote>
<p>我们的客户有 GITHUB、FOURSQUARE、MICROSOFT
CORPORATION、GOOGLE、FACEBOOK, INC.。</p>
</blockquote>
<blockquote>
<p>我们的客户有 Github、FourSquare、MicroSoft
Corporation、Google、FaceBook, Inc.。</p>
</blockquote>
<blockquote>
<p>我们的客户有 gitHub、fourSquare、microSoft
Corporation、google、faceBook, Inc.。</p>
</blockquote>
<blockquote>
<p>我们的客户有 gｲんĤЦ8、ｷouЯƧquﾑгє、๓เςг๏ร๏Ŧt
ς๏гק๏гคtเ๏ภn、900913、ƒ4ᄃëв๏๏к, IПᄃ.。</p>
</blockquote>
<p>注意：当网页中需要配合整体视觉风格而出现全部大写／小写的情形，HTML
中请使用标准的大小写规范进行书写；并通过
<code>text-transform: uppercase;</code>／<code>text-transform: lowercase;</code>
对表现形式进行定义。</p>
<h3 id="不要使用不地道的缩写">不要使用不地道的缩写</h3>
<p>正确：</p>
<blockquote>
<p>我们需要一位熟悉 JavaScript、HTML5，至少理解一种框架（如
Backbone.js、AngularJS、React 等）的前端开发者。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>我们需要一位熟悉 Js、h5，至少理解一种框架（如 backbone、angular、RJS
等）的 FED。</p>
</blockquote>
<h2 id="争议">争议</h2>
<p>以下用法略带有个人色彩，既：无论是否遵循下述规则，从语法的角度来讲都是<strong>正确</strong>的。</p>
<h3 id="链接之间增加空格">链接之间增加空格</h3>
<p>用法：</p>
<blockquote>
<p>请 <a href="#">提交一个 issue</a> 并分配给相关同事。</p>
</blockquote>
<blockquote>
<p>访问我们网站的最新动态，请 <a href="#">点击这里</a> 进行订阅！</p>
</blockquote>
<p>对比用法：</p>
<blockquote>
<p>请<a href="#">提交一个 issue</a> 并分配给相关同事。</p>
</blockquote>
<blockquote>
<p>访问我们网站的最新动态，请<a href="#">点击这里</a>进行订阅！</p>
</blockquote>
<h3 id="简体中文使用直角引号">简体中文使用直角引号</h3>
<p>用法：</p>
<blockquote>
<p>「老师，『有条不紊』的『紊』是什么意思？」</p>
</blockquote>
<p>对比用法：</p>
<blockquote>
<p>“老师，‘有条不紊’的‘紊’是什么意思？”</p>
</blockquote>
<h2 id="工具">工具</h2>
<table>
<colgroup>
<col style="width: 88%" />
<col style="width: 11%" />
</colgroup>
<thead>
<tr class="header">
<th>仓库</th>
<th>语言</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a
href="https://github.com/vinta/paranoid-auto-spacing">vinta/paranoid-auto-spacing</a></td>
<td>JavaScript</td>
</tr>
<tr class="even">
<td><a
href="https://github.com/huei90/pangu.node">huei90/pangu.node</a></td>
<td>Node.js</td>
</tr>
<tr class="odd">
<td><a
href="https://github.com/huacnlee/auto-correct">huacnlee/auto-correct</a></td>
<td>Ruby</td>
</tr>
<tr class="even">
<td><a
href="https://github.com/sparanoid/space-lover">sparanoid/space-lover</a></td>
<td>PHP (WordPress)</td>
</tr>
<tr class="odd">
<td><a
href="https://github.com/NauxLiu/auto-correct">nauxliu/auto-correct</a></td>
<td>PHP</td>
</tr>
<tr class="even">
<td><a
href="https://github.com/hotoo/pangu.vim">hotoo/pangu.vim</a></td>
<td>Vim</td>
</tr>
<tr class="odd">
<td><a
href="https://github.com/sparanoid/grunt-auto-spacing">sparanoid/grunt-auto-spacing</a></td>
<td>Node.js (Grunt)</td>
</tr>
<tr class="even">
<td><a
href="https://github.com/hjiang/scripts/blob/master/add-space-between-latin-and-cjk">hjiang/scripts/add-space-between-latin-and-cjk</a></td>
<td>Python</td>
</tr>
</tbody>
</table>
<h2 id="谁在这样做">谁在这样做？</h2>
<table>
<colgroup>
<col style="width: 71%" />
<col style="width: 8%" />
<col style="width: 19%" />
</colgroup>
<thead>
<tr class="header">
<th>网站</th>
<th>文案</th>
<th>UGC</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="http://www.apple.com/cn/">Apple 中国</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr class="even">
<td><a href="http://www.apple.com/hk/">Apple 香港</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr class="odd">
<td><a href="http://www.apple.com/tw/">Apple 台湾</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr class="even">
<td><a href="http://www.microsoft.com/zh-cn/">Microsoft 中国</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr class="odd">
<td><a href="http://www.microsoft.com/zh-hk/">Microsoft 香港</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr class="even">
<td><a href="http://www.microsoft.com/zh-tw/">Microsoft 台湾</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr class="odd">
<td><a href="https://leancloud.cn/">LeanCloud</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr class="even">
<td><a href="https://www.zhihu.com/">知乎</a></td>
<td>Yes</td>
<td>部分用户达成</td>
</tr>
<tr class="odd">
<td><a href="https://www.v2ex.com/">V2EX</a></td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr class="even">
<td><a href="https://segmentfault.com/">SegmentFault</a></td>
<td>Yes</td>
<td>部分用户达成</td>
</tr>
<tr class="odd">
<td><a href="http://apple4us.com/">Apple4us</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr class="even">
<td><a href="https://www.wandoujia.com/">豌豆荚</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr class="odd">
<td><a href="https://ruby-china.org/">Ruby China</a></td>
<td>Yes</td>
<td>标题达成</td>
</tr>
<tr class="even">
<td><a href="https://phphub.org/">PHPHub</a></td>
<td>Yes</td>
<td>标题达成</td>
</tr>
</tbody>
</table>
<h2 id="参考文献">参考文献</h2>
<ul>
<li><a
href="http://grammar.about.com/od/punctuationandmechanics/a/Guidelines-For-Using-Capital-Letters.htm">Guidelines
for Using Capital Letters</a></li>
<li><a href="http://en.wikipedia.org/wiki/Letter_case">Letter case -
Wikipedia</a></li>
<li><a
href="http://www.oxforddictionaries.com/words/punctuation">Punctuation -
Oxford Dictionaries</a></li>
<li><a
href="https://owl.english.purdue.edu/owl/section/1/6/">Punctuation - The
Purdue OWL</a></li>
<li><a
href="http://www.wikihow.com/Use-English-Punctuation-Correctly">How to
Use English Punctuation Corrently - wikiHow</a></li>
<li><a
href="https://zh.opensuse.org/index.php?title=Help:%E6%A0%BC%E5%BC%8F">格式
- openSUSE</a></li>
<li><a
href="http://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2">全角和半角
- 维基百科</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E5%BC%95%E8%99%9F">引号 -
维基百科</a></li>
<li><a
href="http://zh.wikipedia.org/wiki/%E7%96%91%E5%95%8F%E9%A9%9A%E5%98%86%E8%99%9F">疑问惊叹号
- 维基百科</a></li>
</ul>
<h2 id="致谢">致谢</h2>
<p>本文转载至 <a
href="https://mazhuang.org/wiki/chinese-copywriting-guidelines/">中文文案排版指北（简体中文版）</a>并在其基础上进行了修改整理。</p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>个人博客</tag>
        <tag>书写规范</tag>
      </tags>
  </entry>
  <entry>
    <title>功能分析与硬件选择</title>
    <url>/posts/2021/BGHDM6.html</url>
    <content><![CDATA[<p>小伙伴们，大家好，我是李有福呀。最近准备搭建一个all in
one家庭服务器，于是将搭建过程做成系列视频，抛砖引玉，希望对新入门的小伙伴们有所帮助。</p>
<span id="more"></span>
<h2 id="什么是all-in-one">什么是all in one</h2>
<p>All In One
主机是指在底层虚拟机平台上创建软路由、NAS主机、Windows主机等虚拟主机，使一台主机可以扮演不同的角色来到达用户不同的需求。
对于虚拟机，目前流行的有三个： https://zhuanlan.zhihu.com/p/166352130
三者各有利弊，基于我的硬件情况，我选择了esxi。</p>
<h2 id="需求分析">需求分析</h2>
<p>我本人开始使用的软路由，但是随着需求增加，比如想具备nas功能，部署一个自己的网站，安装数据库等，软路由已经不能满足我的需求了。
目前我的需求主要有以下几个：</p>
<ol type="1">
<li>家庭网关</li>
<li>出国旅游</li>
<li>NAS</li>
<li>Windows
server(网站，数据库，当家庭电脑使用，如果今后内存增加，会考虑再安装一个win10，然后服务器换成Linux)</li>
</ol>
<h2 id="硬件选择">硬件选择</h2>
<table>
<thead>
<tr class="header">
<th>名称</th>
<th>品牌</th>
<th>型号</th>
<th>价格与数量</th>
<th>入手渠道</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>机箱</td>
<td>途腾</td>
<td></td>
<td>123</td>
<td></td>
</tr>
<tr class="even">
<td>风扇</td>
<td></td>
<td></td>
<td>10.26*2</td>
<td></td>
</tr>
<tr class="odd">
<td>CPU</td>
<td>XEON(至强)</td>
<td>e5 2650 v3</td>
<td>180</td>
<td>拼多多</td>
</tr>
<tr class="even">
<td>CPU散热器</td>
<td></td>
<td></td>
<td>56.16</td>
<td>拼多多</td>
</tr>
<tr class="odd">
<td>主板</td>
<td>华南金牌</td>
<td>x99 zd4 matx</td>
<td>440</td>
<td></td>
</tr>
<tr class="even">
<td>固态</td>
<td></td>
<td>512G</td>
<td>262</td>
<td>拼多多</td>
</tr>
<tr class="odd">
<td>硬盘</td>
<td>希捷酷狼</td>
<td>2T</td>
<td>465*2</td>
<td>淘宝</td>
</tr>
<tr class="even">
<td>内存</td>
<td>光威</td>
<td>ddr4 3000 8G</td>
<td>120*2</td>
<td>闲鱼</td>
</tr>
<tr class="odd">
<td>网卡</td>
<td></td>
<td>4口</td>
<td>110</td>
<td>闲鱼</td>
</tr>
<tr class="even">
<td>显卡</td>
<td></td>
<td>GTX650 2G</td>
<td>240</td>
<td>闲鱼</td>
</tr>
<tr class="odd">
<td>电源</td>
<td>金牌</td>
<td>500w</td>
<td>95</td>
<td>闲鱼</td>
</tr>
<tr class="even">
<td>显示器</td>
<td></td>
<td>红米</td>
<td>500</td>
<td>闲鱼</td>
</tr>
<tr class="odd">
<td></td>
<td></td>
<td>合计</td>
<td>3196.68</td>
<td></td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>HomeServer</category>
      </categories>
      <tags>
        <tag>家庭服务器</tag>
        <tag>All in one</tag>
        <tag>李有福呀</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-blog-encrypt目录消失</title>
    <url>/posts/2023/26YRMRD.html</url>
    <content><![CDATA[<p>使用 hexo-blog-encrypt
对文章进行加密，解密后发现目录消失，本文将介绍如何通过修改 NexT
主题的源码来实现加密文章的目录显示。</p>
<blockquote>
<p>本教程针对 hexo 下的 NexT 主题</p>
</blockquote>
<span id="more"></span>
<h2 id="原因">原因</h2>
<p>从插件的 <code>github issues</code> 中我找到了相关的讨论：<a
href="https://github.com/D0n9X1n/hexo-blog-encrypt/issues/16">解密后目录不会更新
· Issue #16 · D0n9X1n/hexo-blog-encrypt</a></p>
<p>原因是：</p>
<blockquote>
<p>加密的时候，<code>post.content</code> 会变成加密后的串，所以原来的
<code>TOC</code> 生成逻辑就会针对加密后的内容。
所以这边我只能把原来的内容存进 <code>post.origin</code> 字段。</p>
</blockquote>
<h2 id="优化代码">优化代码</h2>
<p>打开
<code>/thems/next/layout/_micro/sidebar.njk</code>文件，进行如下修改</p>
<p>找到包含 <code>set toc = toc(page.content...</code>
的代码段，将其中的内容替换为如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%- if display_toc %&#125;</span><br><span class="line">  &#123;%- if (page.encrypt) %&#125;</span><br><span class="line">    &#123;%- set toc = toc(page.origin, &#123; class: &#x27;nav&#x27;, list_number: page.toc.number, max_depth: page.toc.max_depth &#125;) %&#125;</span><br><span class="line">  &#123;%- else %&#125;</span><br><span class="line">    &#123;%- set toc = toc(page.content, &#123; class: &#x27;nav&#x27;, list_number: page.toc.number, max_depth: page.toc.max_depth &#125;) %&#125;</span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line">  &#123;%- set display_toc = toc.length &gt; 1 and display_toc %&#125;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码的作用是当有加密时，从 page.origin 中读取目录信息。</p>
<p>找到包含 <code>&lt;div class="post-toc-wrap sidebar-panel"&gt;</code>
的代码段，将其修改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--noindex--&gt;</span><br><span class="line">&lt;div class=&quot;post-toc-wrap sidebar-panel&quot;&gt;</span><br><span class="line">  &#123;%- if display_toc %&#125;</span><br><span class="line">    &#123;%- if (page.encrypt) %&#125;</span><br><span class="line">      &lt;div id=&quot;toc-div&quot; class=&quot;post-toc animated&quot; style=&quot;display:none&quot;&gt;&#123;&#123; toc &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &#123;%- else %&#125;</span><br><span class="line">      &lt;div class=&quot;post-toc animated&quot;&gt;&#123;&#123; toc &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>上述代码的原理是：在文章加密的前提下，通过将目录部分加入到一个
<code>不可见的div</code> 中来实现 <code>隐藏目录</code> 的效果。在 <a
href="https://github.com/D0n9X1n/hexo-blog-encrypt/blob/479ccd4cf522adc8f667cfa06290f057a219cb88/lib/hbe.js#L207">hexo-blog-encrypt/lib/hbe.js</a>
源码中，我们可以看到解密后会修改 <code>id</code> 值为
<code>toc-div</code> 的元素为 <code>display:inline</code>
来显示内容。</p>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<p><a
href="https://pxxyyz.com/posts/hexo-problem/#参考">Hexo博客文章加密</a></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>使用80和443端口访问其它任意端口</title>
    <url>/posts/2023/3J27R22.html</url>
    <content><![CDATA[<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/80ToAny.png" style="max-width:min(100%,300px)"></p>
<p>现在的云服务器有些小贵，而且带宽很小，像阿里云 5M 的带宽就要
125元/月。因此，有些同学可能会选择利用家庭宽带自建一个服务器。但是家庭宽带有个问题，运营商会封禁
80 8080 443 8443
等这些常用的端口，导致我们不能使用http的默认端口，在使用域名进行访问时，必须要指定端口，这有点不够优雅。</p>
<p>本文将提供一个不加端口访问自建服务器资源的方法。</p>
<span id="more"></span>
<blockquote>
<p>本文介绍如何配置80或443访问，对于文中提到的其它知识点，需要自行去学习。</p>
</blockquote>
<h2 id="宽带">宽带</h2>
<p>自建家庭服务器要求宽带支持动态 IP，目前来说，电信的宽带可以申请动态
IP，安装好宽带后，打电话给客服申请就可以了。</p>
<p>移动和联通会给你打马哈哈，说不能开通。</p>
<h2 id="实现思路">实现思路</h2>
<p>通过 <a href="cloudflare.com">cloudflare</a> 的 Origin Rules
来实现端口转发。</p>
<h2 id="配置步骤">配置步骤</h2>
<ol type="1">
<li><p>注册 cloudflare</p></li>
<li><p>选择【网站】/【新增网站】</p>
<p>添加自己的域名信息，作为一条网站记录</p></li>
<li><p>将 cloudflare 作为自己域名的 dns 解析服务器</p>
<p>在域名购买商处将域名的名称服务器改成
clounflare，自行查找教程实现</p></li>
<li><p>当 dns 解析服务器修改完成后，添加 dns 记录</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230718234900986.png"
alt="image-20230718234900986" />
<figcaption aria-hidden="true">image-20230718234900986</figcaption>
</figure>
<p>对于要进行端口转发的域名，要选择代理模式并启动代理</p></li>
<li><p>切换到【SSL/TLS】，选择加密模式为“完全”</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230718235131963.png"
alt="image-20230718235131963" />
<figcaption aria-hidden="true">image-20230718235131963</figcaption>
</figure></li>
<li><p>切换到【规则/Origin Rules】，添加 Origin 规则</p>
<p>按下图进行操作：</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230718235550513.png"
alt="image-20230718235550513" />
<figcaption aria-hidden="true">image-20230718235550513</figcaption>
</figure>
<p>其中，重写到一定要填写自己服务器的端口</p></li>
</ol>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>个人博客</tag>
        <tag>Hexo</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>js常用链接小飞机</title>
    <url>/posts/2020/3CGWMS0.html</url>
    <content><![CDATA[<p>此处主要记录了一些在编程过程中需要使用或者可以参考学习的文档地址，方便快速跳转查看。</p>
<span id="more"></span>
<h2 id="学习">学习</h2>
<h3 id="设计模式">设计模式</h3>
<p>https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/creational.html</p>
<h2 id="javascript">JavaScript</h2>
<h3 id="阅读需知">阅读需知</h3>
<ul>
<li>建议阅读英文版本。有时候中文翻译省略了很多内容，表达不是很完整。</li>
</ul>
<h3 id="数组-array">数组 Array</h3>
<p>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array</p>
<h3 id="字符串">字符串</h3>
<p>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String</p>
<h2 id="图标库">图标库</h2>
<p>阿里：https://www.iconfont.cn/</p>
<p>Material: https://material.io/resources/icons/?style=baseline</p>
<h2 id="工具类">工具类</h2>
<p>lodash: https://lodash.com/docs/4.17.15#differenceWith</p>
<p>underscore: https://underscorejs.org</p>
]]></content>
      <categories>
        <category>Navigation</category>
      </categories>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>考试复习计划</title>
    <url>/posts/2022/36TCWHD.html</url>
    <content><![CDATA[<p>通过在一注论坛参考多篇考试经验，自己总结了一套适合自己节奏和复习方案出来，规划如下：</p>
<span id="more"></span>
<h2 id="考试基本信息">考试基本信息</h2>
<h3 id="考试时间分配">考试时间分配</h3>
<p>考试时间为上、下午各4小时，但不确定各科目在上、下午的配题数量。</p>
<h3 id="考试分值分布情况">考试分值分布情况</h3>
<table>
<thead>
<tr class="header">
<th>序号</th>
<th>类型</th>
<th>题量</th>
<th>考试用时分配<code>待定</code></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>钢筋混凝土结构</td>
<td>15</td>
<td></td>
</tr>
<tr class="even">
<td>2</td>
<td>钢结构</td>
<td>14</td>
<td></td>
</tr>
<tr class="odd">
<td>3</td>
<td>砌体结构与木结构</td>
<td>14</td>
<td></td>
</tr>
<tr class="even">
<td>4</td>
<td>地基与基础</td>
<td>14</td>
<td></td>
</tr>
<tr class="odd">
<td>5</td>
<td>高层建筑、高耸结构与横向作用</td>
<td>15</td>
<td></td>
</tr>
<tr class="even">
<td>6</td>
<td>桥梁结构</td>
<td>8</td>
<td></td>
</tr>
</tbody>
</table>
<blockquote>
<p>合计 80 分，48 分合格</p>
</blockquote>
<h2 id="复习计划">复习计划</h2>
<p><strong>充分准备、规范为本、题海战术、坚持不懈</strong></p>
<h3 id="按应试指南复习">按应试指南复习</h3>
<p><strong>参考书：</strong></p>
<p>兰定筠的《一二级注册结构工程师专业考试应试技巧与题解》</p>
<p><strong>技巧：</strong></p>
<p>先按应试指南的内容对照着规范熟悉各条款，在这个环节要注意各条款之间的关系，在规范上标注与这一条相关的其它条款的编号和页码，关键字写在书签上贴在规范书页的上方。</p>
<p>举个例子，对于地下室顶板嵌固问题，混规、抗规、高规上可能都有涉及，而且分布在不同章节，比如地下一层与地上一层的刚度比比值，比如地下一层框架柱1.1倍，比如正负零框架梁的放大，比如正负零板的厚度、配筋率的要求。在每一条相关条款旁边列出其它相关条款的页码，就像网页上的超链接一样，构成一个互相引用的网络。</p>
<p><strong>详细计划：</strong></p>
<p>该书共有 2091 页，计划在 2 个月内看完，则每天要至少要看 35
页，按周结算进度，每周至少到看 44 页。</p>
<p>计划从 2022-02-28 开始执行。</p>
<h3 id="详细通读规范">详细通读规范</h3>
<h3 id="定时定量模拟越多越好">定时定量模拟，越多越好</h3>
<p>看到某个计算题，就能知道它在考什么，尽快的找到计算题所考的公式和参数。</p>
<p>熟记长度系数、截面稳定系数等等在规范中所在的位置以及相关的注意事项。</p>
<p>对于可能的陷阱点也要烂记于心，比如体积配箍率时混凝土是不是C35以下、钢结构稳定系数求算钢材可能不是Q235的、砌体是不是水泥砂浆。</p>
<h2 id="复习注意事项">复习注意事项</h2>
<ol type="1">
<li><p>把兰书上的对规范条文的注意点誊写到规范相应条文处。</p></li>
<li><p>每个题翻到规范动手做，而不是看一看</p></li>
<li><p>从题目中
<strong>熟悉出题思路、了解人是怎么通过设置题目考查规范的知识点的、几个知识点是怎么串起来考的</strong>，练习到解题的能力、计算的速度</p></li>
</ol>
<h2 id="其它技巧">其它技巧</h2>
<p>买不同颜色的笔来做笔记</p>
]]></content>
      <categories>
        <category>RegisteredStructure</category>
      </categories>
      <tags>
        <tag>一注结构专业</tag>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title>作息时间规划</title>
    <url>/posts/2022/3AYW43.html</url>
    <content><![CDATA[<p>我不聪明，但愿意用努力和汗水，搏一条康庄大道。鉴于本人工作与专业基本不相关，所以计划至少学习
1050 小时。现在是 2 月 23 日，按复习到 9 月 31 日算，每天需要保证 5
小时的学习时长。</p>
<span id="more"></span>
<h2 id="作息时间安排">作息时间安排</h2>
<p><strong>每天必须保证不小于 5 个小时的学习。</strong></p>
<h3 id="工作日作息时间表">工作日作息时间表</h3>
<table>
<thead>
<tr class="header">
<th>时间</th>
<th>事件</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>23:00-06:00</td>
<td>洗漱+睡觉</td>
</tr>
<tr class="even">
<td>06:00</td>
<td>起床</td>
</tr>
<tr class="odd">
<td>06:00-06:20</td>
<td>洗漱，出门<code>必须保证20分之前出门</code></td>
</tr>
<tr class="even">
<td>06:20-06:40</td>
<td>等公交，吃早餐</td>
</tr>
<tr class="odd">
<td>06:40-08:30</td>
<td>看书，上下车会耽搁时间，算 70 分钟</td>
</tr>
<tr class="even">
<td>08:30-12:00</td>
<td>工作</td>
</tr>
<tr class="odd">
<td>12:00-12:30</td>
<td>吃饭</td>
</tr>
<tr class="even">
<td>12:30-13:20</td>
<td>看书，计 50 分钟。如果因为工作耽搁，则不计入</td>
</tr>
<tr class="odd">
<td>13:20-13:58</td>
<td>休息</td>
</tr>
<tr class="even">
<td>14:00-18:00</td>
<td>上班</td>
</tr>
<tr class="odd">
<td>18:00-19:10</td>
<td>回家，在车上看书，上下车会耽搁时间，算 30 分钟</td>
</tr>
<tr class="even">
<td>19:10-20:00</td>
<td>炒菜，吃饭</td>
</tr>
<tr class="odd">
<td>20:00-23:00</td>
<td>看书，算 180 分钟</td>
</tr>
<tr class="even">
<td>23:00-06:00</td>
<td>洗漱+睡觉</td>
</tr>
</tbody>
</table>
<blockquote>
<p>工作日每天可学习：300 分钟</p>
</blockquote>
<h3 id="休息日作息时间安排">休息日作息时间安排</h3>
<table>
<thead>
<tr class="header">
<th>时间</th>
<th>事件</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>23:00-06:00</td>
<td>洗漱+睡觉</td>
</tr>
<tr class="even">
<td>06:00</td>
<td>起床</td>
</tr>
<tr class="odd">
<td>06:00-07:00</td>
<td>出门锻炼</td>
</tr>
<tr class="even">
<td>07:00-08:00</td>
<td>洗澡，早餐</td>
</tr>
<tr class="odd">
<td>08:00-12:00</td>
<td>学习</td>
</tr>
<tr class="even">
<td>12:00-14:00</td>
<td>午餐</td>
</tr>
<tr class="odd">
<td>14:00-18:00</td>
<td>学习</td>
</tr>
<tr class="even">
<td>18:00-20:00</td>
<td>晚餐</td>
</tr>
<tr class="odd">
<td>20:00-23:00</td>
<td>自由安排</td>
</tr>
<tr class="even">
<td>23:00-06:00</td>
<td>洗漱+睡觉</td>
</tr>
</tbody>
</table>
<blockquote>
<p>每个休息日看 8 个小时</p>
</blockquote>
<p><strong>注：</strong></p>
<ol type="1">
<li>自由安排时间用来陪老婆</li>
<li>其它时间占用后，用自由时间来抵消</li>
<li>自由时间可积累，用于挪用到其它时间处理紧急的事情</li>
</ol>
]]></content>
      <categories>
        <category>RegisteredStructure</category>
      </categories>
      <tags>
        <tag>一注结构专业</tag>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title>先积跬步，再至千里</title>
    <url>/posts/2022/380JK61.html</url>
    <content><![CDATA[<p>已经是 2022 年了，本人自从 2019
年基础考过后，由于工作时间关系，一直没有报考专业考试。2020
年正值疫情爆发，本应是准备考试的好时机，但是恰巧公司 BIM
研发战略转向，开始开发基于网页的 BIM
应用。由于本人在这方面完全是一个新手，不得不放弃考试，学习网页开发知识。而
2021
年由于职称评聘需要写论文、新房交付、并要准备结婚，考试又这样被搁置了一年。</p>
<p>此时，春风渐暖，我寻思着，今年必须要发奋图强一次了，为至千里，先得积跬步。</p>
<span id="more"></span>
<p>对于专业考试，在此之前只是略有耳闻，仅有的印象是很难、需要坚持。所以，在开始之前，需要借鉴前人的一些经验，然后根据自己情况，制定适合自己的学习计划。</p>
<h2 id="分个人一注专业经验有目标才有动力"><a
href="http://www.cectcc.com/thread-3954-1-1.html">73分！个人一注专业经验，有目标才有动力</a></h2>
<blockquote>
<p>该文章值得仔细拜读</p>
</blockquote>
<p>作者从 08 年毕业到 12 年，短短 4
年，先后通过了结构基础，岩土基础，GRE，托福，一注结构专业考试。这份履历看得主人热血上涌，我也希望像他那样，活得充实精彩。</p>
<p>还是自己的圈子太小，没有前人经验借鉴和激励，导致现在毕业已经 5
年半，还是一条咸鱼，本领不够硬，工作能力也不突出。今后，要多与牛人交流，开拓自己的视野。</p>
<h3 id="时间安排">时间安排</h3>
<p>提升自己工作效率，节约时间复习。</p>
<h3 id="复习流程">复习流程</h3>
<ol type="1">
<li><p>第一阶段就是学习施岚青老师的专业考试应试指南</p>
<p><strong>先按应试指南的内容对照着规范熟悉各条款，在这个环节要注意各条款之间的关系，在规范上标注与这一条相关的其它条款的编号和页码，关键字写在书签上贴在规范书页的上方。</strong></p>
<p>举个例子，对于地下室顶板嵌固问题，混规、抗规、高规上可能都有涉及，而且分布在不同章节，比如地下一层与地上一层的刚度比比值，比如地下一层框架柱1.1倍，比如正负零框架梁的放大，比如正负零板的厚度、配筋率的要求。在每一条相关条款旁边列出其它相关条款的页码，就像网页上的超链接一样，构成一个互相引用的网络。这个不仅仅是为了考试的时候能够迅速便捷的找到其它相关条文，也是一个知识的整理和掌握的过程。</p></li>
<li><p>第二阶段就是做模拟题</p>
<p><strong>一定要真正的定时定量模拟考试，越多越好。</strong></p>
<p>我用的是兰定筠老师的2012年一、二级注册结构工程师专业考试考前实战训练(第三版)
。你也可以用历年真题或者其它模拟题。其实用什么书不重要，重要的是练习的过程。不能因为一些错误就认为这些习题不值得做。可能是结构设计工作的原因，我发现很多同行们喜欢抠细节，比如体积配箍率的计算到底是算到箍筋中线还是内皮等等。这些其实不必过多关心，毕竟计算误差一点点，哪种都可以。还是应该多着眼于大局。所谓的大局就是做题的速度和质量。要的不是知识点抠的准，要的是做题做得多做得快。</p></li>
</ol>
<h3 id="临近考试">临近考试</h3>
<p><strong>临近考试的时候，我觉得应该把规范再熟悉一遍。</strong></p>
<p>做不到熟练掌握，也至少得做到“水过地皮湿”。
其一是再次巩固计算题的出题点，看到某个计算题，就能知道它在考什么，尽快的找到计算题所考的公式和参数。熟记长度系数、截面稳定系数等等在规范中所在的位置以及相关的注意事项。对于可能的陷阱点也要烂记于心，比如体积配箍率时混凝土是不是C35以下、钢结构稳定系数求算钢材可能不是Q235的、砌体是不是水泥砂浆。</p>
<p><strong>其二是熟悉概念题的关键字。</strong></p>
<p>全面的掌握规范是不可能的，但是可以做到对大多数关键字的掌握。比如今年考的“规定作用下的水平地震力”，你不需要知道它的具体内容，你只要知道它大概在哪本规范的哪个章节就足够了。考试中看到这个关键字，快速检索大脑中的记忆，找到这个关键字在规范中的位置，然后对照条文和条文说明，就很容易应对概念题。</p>
<h3 id="其它准备">其它准备</h3>
<ul>
<li>注意休息</li>
<li>注意锻炼身体</li>
<li>准备好计算器</li>
</ul>
<h2 id="一注结构复习经验1-9个月顺利通过一注71分"><a
href="https://zhuanlan.zhihu.com/p/34091133">一注结构复习经验（1）——
9个月，顺利通过一注71分</a></h2>
<h3 id="复习资料的准备">复习资料的准备</h3>
<ul>
<li>在第一证书论坛上查看通过人的经验贴</li>
<li>参考书：<strong>兰定筠的《一二级注册结构工程师专业考试应试技巧与题解》</strong></li>
</ul>
<h3 id="复习流程-1">复习流程</h3>
<ol type="1">
<li><p>以兰的应试技巧与题解为主线去系统学习规范</p>
<ol type="1">
<li>把兰书上的对规范条文的注意点誊写到规范相应条文处。</li>
<li>先整体过一遍。难的可以先放一放，复习到一定深度后</li>
</ol></li>
<li><p>复习完兰的书，<strong>张的二、一级真题</strong></p>
<ol type="1">
<li>2016-02：张庆芳的《二级注册结构工程师专业考试历年试题和考试分析》</li>
<li>2016-03-2016-05：张庆芳的<strong>《一级注册结构工程师专业考试历年真题.疑问解答.专业聚焦》</strong></li>
</ol></li>
<li><p>一级真题+兰的模拟题+老朱的书</p>
<p>定时且按考试要求做兰的21套题（当时给自己定的时间是：上午：混凝土16题90min，钢结构14题80min，砌体10题50min，预留20min涂卡；下午：木+地基基础16题90min，高层16题90min，桥梁8题40min
预留20min涂卡，考试基本上也是按这个给自己分配的时间）。</p>
<p>遇到不会的直接跳过，做完一科或者两科再对答案，完成一套后统计得分情况及把错题标出来。</p></li>
</ol>
<h3 id="复习建议">复习建议</h3>
<p><strong>每个题翻到规范动手做，而不是看一看</strong>；加了班还要看书学习确实比较累，所以当时我是根据自己当天的状态选做哪一科的题目，比如太累了，状态不好就做砌体这些比较简单的科目，每天保证做题的数量，状态好就做混凝土这些计算量比较大的科目。</p>
<p><strong>定时定量做题，严格按到考试的要求做题。</strong></p>
<p><strong>另外对规范的阅读贯穿在整个复习阶段</strong>，没有固定时间，不想做题，或者在办公室有时间，就把规范拿来翻一翻，读一读。</p>
<p>对主要规范的二级标题基本上都比较熟悉</p>
<p><strong>如果决定考，就一定要坚持下去，三天打鱼两天晒网，基本没得戏得。</strong></p>
<h3 id="考试带书">考试带书</h3>
<ol type="1">
<li>全套规范</li>
<li>兰的应试技巧下册</li>
<li>教材类
<ol type="1">
<li>钢结构本科教材</li>
<li>混凝土本科教材</li>
<li>结构力学本科教材</li>
<li>材料力学本科教材</li>
<li>土力学、基础工程本科教材</li>
<li>土木工程材料本科教材</li>
</ol></li>
<li>老朱的书</li>
</ol>
<h2 id="一注结构专业71分经验之谈"><a
href="http://www.cectcc.com/thread-1505-1-1.html">一注结构专业71分经验之谈</a></h2>
<p>很多人考了好几年差1分2分的，都是以为自己实力到了只是运气差一点点，来年运气好了就过了，但是这样的人往往一而再再而三的死在了运气上，他寄希望于运气，而没有想过其实差1分2分有可能是自己的知识有结构性的缺陷，有可能是自己的解题思路做题方法有致命的缺陷，其实还差的远。</p>
<p>一是看规范，几本对照着一起看，看条文说明，把同一个知识点的几本规范的条文说明对照着看。</p>
<p>这几年的考题充分证明，条文说明是一定会考的，而且考的越来越多，很多知识点，你只看规范原文，没看条文说明，相当于没看，因为你看了也没用，你会的人不考啊，要都考你会的，怎么区别出人是老师你是考生啊。</p>
<p>条文说明不仅要看，而且要把相关知识点几本规范的条文说明对照看，理解透，这样你才记得住，要不到时考试的时候你记得有看过，但硬是找不到在哪里，也不记得条文说明怎么说，那就只能说明你实力不济，花的时间不够了</p>
<p>做兰的题目不是非要把他的题搞多透，而是要从他的题目中<strong>熟悉出题思路、了解人是怎么通过设置题目考查规范的知识点的、几个知识点是怎么串起来考的</strong>，练习到解题的能力、计算的速度，有些太难的题、感觉有错的题，我也囫囵吞枣，跳着过。</p>
<p><strong>基础没有很好的，也不建议做兰的题</strong>，以免打击信心，拉偏思维，只是建议做真题，多做几遍，再做几遍，从真题中延伸，对照着看规范。</p>
<h2 id="一注结构专业考试之天山六阳掌"><a
href="http://www.cectcc.com/thread-1470-1-1.html">一注结构专业考试之天山六阳掌</a></h2>
<ol type="1">
<li><p>通过答题指导来快速熟悉规范</p></li>
<li><p>通过真题加深对规范的理解和记忆，达到看题知规范的境界</p>
<ol type="1">
<li>按考试要求答题</li>
<li>学会使用计算器</li>
<li>学会总结</li>
</ol></li>
<li><p>模拟题、真题穿插</p></li>
<li><p>准备小抄</p>
<ol type="1">
<li>经典题的计算步骤</li>
<li>包括规范条目</li>
</ol></li>
</ol>
<h2 id="一级注册结构工程师复习经验四字经"><a
href="http://www.cectcc.com/thread-406-1-1.html">一级注册结构工程师复习经验四字经</a></h2>
<p><strong>充分准备 规范为本 题海战术 坚持不懈</strong></p>
<h2 id="对土木工程注册考试证书性价比的一点浅见主观性很强"><a
href="http://www.cectcc.com/thread-11717-1-1.html">对土木工程注册考试证书性价比的一点浅见，主观性很强</a></h2>
<h2 id="又谈一级注册结构工程师复习经验by天空"><a
href="http://www.cectcc.com/thread-12067-1-1.html">又谈一级注册结构工程师复习经验by天空</a></h2>
<ol type="1">
<li>首先问自己为什么要考这个证书，如果不是从事结构设计，只是为了挂靠的钱，建议不要考了。可以考性价比高的证书：http://www.cectcc.com/thread-11717-1-1.html</li>
<li>保证有足够的复习时间，到底多少算足够，因为基础不同，所以每个人情况不一。我觉得应该保证在<strong>500个小时左右的复习时间</strong>（不是绝对的，仅供参考，大概6个月时间）。</li>
<li>处理好工作与考试的关系，如果可能建议在复习的这半年里尽量少做工程，可以让给其他同事，钱是永远赚不完的。</li>
<li>争取家人的支持，家里的杂事在这半年内和你绝缘。</li>
<li>规范为本，真题至少要过两遍，最后一遍一定要是自己动手按照真实考试的要求来做的。而且大家在每一次做真题的时候，建议按照新题来对待，不要想着我以前做过了，考的是什么什么。你就当是你从来没见过的题，重新去审题，然后去做。</li>
<li>珍惜生活中的每一点空闲时间。</li>
</ol>
<h2 id="对注册结构工程师参加培训辅导班的一些个人看法"><a
href="http://www.cectcc.com/thread-12230-1-1.html">对注册结构工程师参加培训辅导班的一些个人看法</a></h2>
<h3 id="优点">优点</h3>
<ol type="1">
<li>既然你决定报辅导班了，那么我想你肯定还是有通过的信念的。因为报辅导班，一般学费5000，住宿费5000，生活费2000，交通费1000，误工费10000，总计直接损失2.3万。你能下定决心花这个钱，说明你肯定会努力的。一个意志不坚的人或者只是为了凑数考试的人是不会去花这个钱的，当然不排除有冤大头，或者说叫活雷锋。<strong>花了这个钱之后，你平时复习不努力的时候你都会觉得非常愧疚</strong>，对不起自己的钱，对不起家人等等，所以你会而且也只能更加努力才对。</li>
<li>参加了辅导班有老师对知识点做一个梳理，对规范知识点进行讲解或者总结，对其中的疑问进行解答，而且最主要的是<strong>可以对我们的问题进行讲解，当你有不会的问题时可以请教他们，而不会找不到人</strong>。这一点可能是很多人报辅导班的原因吧，因为自己身边找不到可以一起讨论的人，最主要的是找不到可以解答我们问题的人。而报了培训班之后，我们的很多问题可能很快就被解决，加上有人带路，复习效率会提高很多很多。</li>
<li>参加了辅导班会有一个月的集中培训期，这一个月里你集中学习规范，其实就算老师讲得再差，也比你一边上班一边看书的效果要好很多很多。</li>
</ol>
<h3 id="缺点">缺点</h3>
<ol type="1">
<li>费钱…费时间……大部分设计院每年789月份都是比较忙的，而且越到考试反而越忙，你几乎请不了假。</li>
<li>去了辅导班之后你可能发现和你想的不太一样，虽然有人讲，虽然讲的人是大师，虽然你能听懂，但是做题还是不会，还是会做错，实际上还是需要你自己去理解。如果你报班之前没有自己先去复习，想指望在辅导班上才去学习，我想可能很难。规范的解读和大学教材不一样，你不提前做预习，去听也跟不上思路。</li>
<li>辅导班的时候可能大部分或者说100%都是老师在讲，如果他不讲，那么我们会觉得我们的钱花得不值，如果讲，那么你自己消化或者练习的时间就短了，知识没变成自己的，也不行。而且我们既然报班了，总觉得有什么问题可以找老师问啊，但是这个恐怕要让你失望了吧，辅导班的老师应该是没有时间答疑的，因为他需要给更多的人讲课，如果有答疑时间的话，那么可能我们根本插不上话，因为毕竟是大班上课，不可能照顾到所有人，所以其实最终还是要靠我们自己。</li>
</ol>
<h3 id="总体评价">总体评价</h3>
<p>不要指望报辅导班会让你提高很多，在我看来辅导班最大的好处就是有一段集中学习的时间，如果你能拿出这段时间来自己复习也会提高很多，当然这里没有否定辅导班的作用，好的辅导班确实能大大提高复习效率，节省复习时间。</p>
<p>如果非要报辅导班的话，我建议一定要自己复习一轮以上再去，建议在6、7月份参加，后面一定要留一个月的自我消化自我练习的阶段，否则意义也不大。</p>
<p>最后其实还有很多人报辅导班的原因是看到了某某大师的辅导班通过率50%以上，这里我要提醒大家一下，那个数据首先你无法证明是真实的，如果真的是真实的，那么也是有可能的，因为报辅导班的人整体水平或者说基础要比一般人要强太多太多，很多都是考过多次的，很多都是差1、2分的。</p>
<p>最后就是我知道的一个大师的辅导班的<strong>通过率</strong>是有水分的，这个大师相信很多人都知道，他的培训通过率不是通过人数/总的报名人数，而是<strong>通过人数/报分的人数</strong>，也就是说分母是那些考后告诉他自己成绩的人，而我们知道一般人没考过的话是不会和培训老师报分的，这个消息不是我瞎编的，而是事实。当然这么做的人不是我们的大师，而是他的代理人这么做的。</p>
<h3 id="目前比较好的培训班">目前比较好的培训班</h3>
<ul>
<li>施岚青</li>
<li>兰定筠</li>
<li>张庆芳</li>
</ul>
<h2 id="再次谈谈我的一级注册结构工程师复习经历经验"><a
href="http://www.cectcc.com/thread-323-1-1.html">再次谈谈我的一级注册结构工程师复习经历、经验</a></h2>
<p>实际上我的复习经验在原一注论坛说了太多了，新的一注论坛再次总结下，希望可以能供大家参考。</p>
<h3 id="准备时间">准备时间</h3>
<p>2011年4月-考试前夕</p>
<h3 id="准备规范">准备规范</h3>
<p>单行本（小本）：荷载、木结构、混凝土、钢结构、地基基础、桩基础、高层、抗震、地基处理、桥梁通用规范、人行天桥以及一本规范合集。</p>
<h3 id="复习资料">复习资料</h3>
<p>一级注册结构工程师历年真题、二级注册结构工程师历年真题、施岚青应试指南、张庆芳一级注册结构工程师历年真题、施岚青的抗震精讲。</p>
<h3 id="复习计划">复习计划</h3>
<p>说实话我没有做计划，就是用施岚青的应试指南的页数/复习天数=每天看的页数。</p>
<h3 id="复习经历">复习经历</h3>
<p>从2011年4月中旬开始复习的，因为4月之前有别的事情。4月到7月底一直在看规范和施岚青的应试指南，这期间没有做真题。</p>
<p>因为我的基础较差，很多规范之前都没有接触，所以我先把所有规范从头到尾看了一遍，包含条文说明，很多人说规范条文太难看了，看不下去，这个我觉得还是应该多读几遍的。</p>
<p>通读完规范之后，开始看应试指南（之所以选这本书，是因为认识的人都推荐这本，当时也没去选择就买了这本），应试指南很细致，很多东西不看他的书根本想不到。当时的计划是先把应试指南看一遍，争取看懂（不要觉得这个很快，至少我在看的时候感觉很费劲，几乎所有题都不会，全是靠看答案），然后第二轮再做一遍。毕竟只有通过自己动手才能发现更多的问题。</p>
<p><strong>看施岚青指南的时候，把规范要注意的部分都标在规范上了</strong>，中间复习的过程没什么好说的了，总之除了上班就是看书，这期间其他的事情都很少去做，比如逛街、去超市之类的能省就省了。在这里要特别感谢我媳妇，她的毅力要比我好太多。复习期间看过几次电影，但是很少。就这样日子很快到了7月底，我发现应试指南还没有看完。所以8月份抓紧时间草草看了下，施岚青的桥梁部分几乎都放弃了，因为感觉太难了，很多都不懂，所以考试之前实际上我都已经放弃了。</p>
<p>对别人来说考试是48/80,但是我在心里已经定下了我的标准48/72。这时候已经8月多了，马上就要考试了，而现在我除了看题之外都没有自己动手做过题，所以这时候很着急。这时候选择了做二级真题，白天做一套，晚上对答案和写总结，这段时间我和我媳妇每天晚上基本上就在住的地方吃炒饭，吃饭的时候看非诚勿扰，什么时候看完，什么时候才吃完然后再做总结。</p>
<p>看完施岚青的应试指南，做二级题感觉还行，那时候的做题速度大概是3个小时能做完，昨晚之后认真核对每一道题，哪里错了，为什么错的，都标上了。</p>
<p>同时也在规范上标注上，错的地方在规范上划一个大大的叉号。二级题好像只有06年没做，其他年的大概得分是48左右，基本上可以保证48以上，只有一年好像不及格。那时候错误总结里写得最多的就是：审题不严，很多已知条件看错，或者看错了所求量。</p>
<p>做完二级题目之后，开始做规范总结，贴上标签（也有人叫规范索引，总之差不多），贴标签这个工作觉得简单，但是实际上挺难做的，等动手时才发现想得太简单了，哪些要做、哪些不做、做在什么地方。都应该想好的。原则就是把常用的贴在最醒目的地方。</p>
<p>做完这些之后，我和我媳妇开始讲规范，是的没错，就是讲规范。对每一本单行本规范，从第一条开始讲，比如规范1.1.1条考试的时候应该怎么做，计算过程是什么，比如先算什么，再算什么，有哪些有注意的地方。</p>
<p>做完这些之后已经9月份了，而且这时候还没有做一级的真题，本来想认真做一遍的，但是算了下时间不够，所以就是看一题写下思路和大概过程，然后对比答案，比较下，做完之后再在规范上补充，就这么“做完”一级真题，发现很多真题没看懂，也找不到人问，所以在考前几天又买了张庆芳的真题（当时觉得这本书真贵啊），买了之后发现很多不懂的题目看张的都能明白。最后考前再浏览了下规范，并再次浏览了规范。</p>
<h3 id="总结">总结</h3>
<p>有些话不知道在复习经历里怎么写，就再列个总结吧。看了上面的经历，可能很多人觉得好像很轻松，但是从我个人经历来看，真的非常累。但是现在回头对比下我的经历和很多朋友的经历，看起来我的似乎有点轻松过头了。仔细思考了下，觉得我通过除了运气之外，可能得益于以下几点：</p>
<ol type="1">
<li>施岚青的应试指南非常认真地看了。</li>
<li>充分做了规范总结，对于常考的计算，在规范上全部写出了计算过程和注意事项。常用的表格也做了一些。比如2012年大家反映说，题目没给混凝土的强度。而我实际上在每一条需要用到强度的条文所在页都标上了。再举个例子：抗规P64，公式6.3.9，这道题常错的地方就是fc的取值，那除了在规范上标记fc≥c35之外，我在规范上还写上了混凝土的强度表C20
16.7 C25 16.7 C30 16.7 C35
16.7,这样绝对不会犯错。类似的情况还有很多，<strong>总之考试之前把你能想到的错误都标记上，会大大降低考试犯错的概率</strong>。</li>
<li>桥梁在看施岚青的时候放弃了，但是看了历年真题之后觉得考得都不是太难，拿个常规的4-5分还是可以的。所以着重复习了和桥梁历年真题相关的条文，<strong>通用规范必须好好看下</strong>，这个分数很好拿的。</li>
</ol>
<h3 id="答题顺序">答题顺序</h3>
<p>因为我自己已经习惯了按自然顺序作答，而且也没法去判断考试哪年哪些简单，哪些难。所以还是从头开始做的。基本上保证6分钟一道题，看完不知道什么意思的题，不要有任何犹豫，直接放弃。不要觉得可惜，也不要去想我放弃这么多还能过吗？放弃是为了先保证把基本的题目，也就是简单的分数先拿到手。做完简单的再去做其他的，基本上不会浪费太多时间的。这么做不一定是最好的方式，但是肯定可以保证你把简单的题都做完，而不会出现考完之后说“后面的题我还没看呢”或者“后面简单的题瞪着眼没时间做”。**</p>
<h3 id="考后感受">考后感受</h3>
<ol type="1">
<li>考试还是以规范为根本，规范永远是最重要的，而且也是考场上最有力的武器,不要尝试任何脱离规范的行为。</li>
<li>一定要大量练习。这一点我没有做好，因为时间不够了，但是我觉得很重要，而且从大多数通过的经验来看，这点是毋庸置疑的。只看不动手是不行的。有的即使你做了总结、做了标注，但是不做题还是体会不深的。另外通过做题可以练习下答题顺序，不要到了考场上再去练习！！！</li>
<li>考试的时候几乎看完题目之后就得条件反射地想到怎么去做，直接动笔，不可能有太多的时间让你去慢慢考虑，我先做什么，再做什么，要注意什么，这些工作一定要在考试之前做好。</li>
<li>考试的时候几乎没有时间去再复核的，所以争取一次成功吧，怎么做到呢？请参考第二条。</li>
<li>做什么事情之前最好考虑好，如果决定要做了，请一定坚持下去，不要半途而废。</li>
</ol>
<h3 id="考试结果和不足">考试结果和不足</h3>
<p>2011年的考试做了71道题，都是有计算过程的，当然包含有一些明显错误的。上午做了39，得分33，下午做了32，得分26，下午高层放弃了很多。实际上得分并不高，虽然很多人会说过了48就行了，但是分数的高低毕竟可以反映对规范的理解程度。
考过之后回头总结，感觉有以下不足：</p>
<ol type="1">
<li>练习太少太少了，做题的时候明显觉得吃力。</li>
<li>对规范还是不太熟悉，主要表现在概念题答得不好，下午的题很多都没找到。这点是和复习时间有关的，因为复习时间短，所以我把精力放在常规题目上。</li>
</ol>
<h3 id="其他感言">其他感言</h3>
<p>2011年考完之后很多人发帖说2011年史上最难之类的话，我看2012年考试之后也有人这么说。实际上每年都会有难题的，这点朱炳寅在博客上都已经说过了，简单的多少，中等的多少，难的多少，都是有梯度的。如果全是简单的，全国人都考过了，这个证书还会有人需要吗？这个是选拨考试，都考1+1=2的问题能区分开吗？
另外有人说如果让命题组的人来做，他们8个小时肯定做不完。从我个人经历来看，我觉得复习充分，做完绝对是没有问题的，但是要想80分都拿到那应该是不可能的。现在让你做高中甚至初中的题我想大部分人是无法拿满分的，难道说我们都不合格？都应该去重读吗？</p>
<p>总之，一注考试永远是属于那些做好充分准备的人，现在的考试想不复习或者简单复习就通过几乎是不可能的事情。</p>
<h2 id="一级注册结构工程师专业考试之如何复习规范"><a
href="http://www.cectcc.com/thread-1289-1-1.html">一级注册结构工程师专业考试之如何复习规范</a></h2>
<h3 id="枯燥期">枯燥期</h3>
<p>先通读一边规范，我说的通读不是看小说的那种读法，是一字一句的来读，任何条文都不要略过，包含规范开头的名词解释。看的时候一定要对照规范后面的条文说明对比来看，通过条文说明你会明白规范规定的原因，其次很多考题考的就是规范条文说明，所以一定要看。</p>
<p>需要说明的是，很多规范条文说明很长很长，很枯燥，但是我还是建议读一遍，因为是第一次看规范，肯定很多东西都不懂，不懂的内容建议标记出来，也不要忙着去查或者去问（当然你愿意也可以），等第二遍的时候再去解决，很多时候问题在你读完整本规范时已经明白了。
需要说明的是：</p>
<ol type="1">
<li>因为是第一遍，而且是通读，所以没有必要去仔细体会每一条规范，只要有个印象就行（当然你也可以仔细去理解）。</li>
<li>很多人都会觉得看完之后前面的内容都忘了，很烦躁，其实这是大多数人的反应，至少我就属于这种大众类型。</li>
</ol>
<h3 id="欣喜期">欣喜期</h3>
<p>通读完第一遍之后，我建议对照应试指南来看规范（指南买谁的都行，施岚青、兰定筠的都可以），通过辅导书来理解规范，这时候你会发现原来考题可以这么出，原来还有这么多地方自己都没看到。</p>
<h3 id="加固期">加固期</h3>
<p>看完指南之后，建议再精读一遍规范，从头到尾再读一遍，这次你可以分清轻重了，重要的条文多花时间，多读几遍，次要的条文少花时间。这次阅读顺便去解决第一次读规范留下的疑问。</p>
<h3 id="练习期">练习期</h3>
<p>精读完规范之后，可以尝试去做题了。
因为标题已经写明了是如何看规范，所以其他的也不再啰嗦了。
规范一定要多读多读多读，重要的条文甚至可以朗读，每一次阅读你可能都会有不同的收获。
据说要通过考试，每本规范至少读10遍以上。</p>
<h2 id="一注复习经验交流会录音男神专场"><a
href="http://www.cectcc.com/thread-249947-1-1.html">2019一注复习经验交流会录音：男神专场</a></h2>
<h3 id="刘妈妈">刘妈妈</h3>
<ol type="1">
<li>一定要有一颗强大内心，坚持下去</li>
<li>高效的复习方法
<ol type="1">
<li>选择一本参考书，推荐看朱炳寅(老朱)的四大名著</li>
<li>定制计划，如果不够自律，加入一个群共同进步</li>
</ol></li>
<li>要有良好考试的心态，这是一个通过性考试，不要在难题上浪费时间
<ol type="1">
<li>简单题全拿</li>
<li>中等题</li>
<li>难题</li>
</ol></li>
</ol>
<h3 id="谭浩">谭浩</h3>
<ol type="1">
<li><p>每天最少 3.5 h，合计 1000 个小时</p></li>
<li><p>心理准备，要有坚定的信念，当成今年最重要的事情准备</p></li>
<li><p>书籍选择</p>
<ol type="1">
<li>天空全套，一级二级真题，计算手册</li>
<li>老朱的高抗规，高钢规和四大名著</li>
</ol></li>
<li><p>每周都要规划好，每天学习到晚上12点</p></li>
<li><p>复习计划</p>
<ol type="1">
<li><p>1月-4月：看视屏学规范，根据条文解析来熟悉规范</p></li>
<li><p>建议从荷载规范开始看</p></li>
<li><p>4.9-5.12：做二级真题一遍</p>
<blockquote>
<p>不会的，上第一证书真题模块查看答案</p>
</blockquote></li>
<li><p>5.13-7.12: 做一级真题，二级过度到一级，真的很难</p></li>
<li><p>7.13-10月，过真题第二遍或三遍</p></li>
<li><p>查看其他人的总结</p>
<ol type="1">
<li>天空的总结</li>
<li>易错点总结</li>
</ol></li>
<li><p>考前看错误，考前做半套题找手感</p></li>
</ol></li>
<li><p>经验总结</p>
<ol type="1">
<li>坚持</li>
<li>多做真题，要把真题练熟，争取到3个小时内达到70分以上，计算量超大题8分钟以内</li>
<li>先有初步计划，然后再慢慢细化，并执行下去，认真复习很快就过去了</li>
<li>做笔记，看天空等大神怎么做笔记的</li>
<li>多交流，建立个小群一起努力</li>
<li>考试策略，三轮、计算量大跳过</li>
<li>先从砌体做，因为坑比较少</li>
<li>考试时，要有知识体系，看到一个题，就知道要考什么</li>
<li>可以将规范目录背一背</li>
<li>跟着大神意见走</li>
</ol></li>
</ol>
<h3 id="蹦蹦">蹦蹦</h3>
<ol type="1">
<li><p>考试准备</p>
<ol type="1">
<li><p>复习时间一定要 800-1000 小时</p></li>
<li><p>规范的准备，要买单行本，不要买合集</p></li>
<li><p>准备一个好的计算器，考试时，再买一个计算器备用</p></li>
<li><p>要会用计算器解二元一次方程</p></li>
<li><p>找一个qq群，用来共同进步</p>
<ol type="1">
<li>天空群</li>
</ol></li>
<li><p>网站：一注论坛，规范条文版块、真题版块</p>
<blockquote>
<p>有时候想不出来的时候，看一下版块</p>
</blockquote></li>
<li><p>全程用真题来复习，天空的全套书</p></li>
<li><p>做真题，做完真题后，将考点划到规范上面去</p></li>
<li></li>
</ol></li>
</ol>
]]></content>
      <categories>
        <category>RegisteredStructure</category>
      </categories>
      <tags>
        <tag>一注结构专业</tag>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title>一张图弄懂规范中各个作用值的区别</title>
    <url>/posts/2022/3DC5WC5.html</url>
    <content><![CDATA[<p>规范中各个作用值的描述，绕来绕去，让人看得云里雾里的，通过仔细研读，将其总结如下图。</p>
<span id="more"></span>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220225233730878.png"
alt="image-20220225233730878" />
<figcaption aria-hidden="true">image-20220225233730878</figcaption>
</figure>
<blockquote>
<p><strong>说明：</strong></p>
<p>不同的设计条件时，可变荷载会取不同的值作为代表值。各个代表的值的大小关系如下：</p>
<p>标准值 &gt;= 组合值 &gt;= 频遇值 &gt;= 准永久值</p>
</blockquote>
<p><strong>参考：</strong></p>
<ol type="1">
<li>GB 50068-2018 《建筑结构可靠性设计统一标准》P7-8</li>
</ol>
]]></content>
      <categories>
        <category>RegisteredStructure</category>
      </categories>
      <tags>
        <tag>一注结构专业</tag>
        <tag>考试</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>每日学习总结</title>
    <url>/posts/2022/3F4M78Z.html</url>
    <content><![CDATA[<p>此处记录备考以来的所有情况。</p>
<span id="more"></span>
<p>总结的主要内容为：</p>
<ol type="1">
<li>作息时间说明</li>
<li>学习时间说明</li>
<li>复习知识点简要总结</li>
</ol>
<h2 id="section">2022-02-23</h2>
<ul class="task-list">
<li><input type="checkbox" />按时起床</li>
<li><input type="checkbox" />学习时间 &gt;= 5 h</li>
</ul>
]]></content>
      <categories>
        <category>RegisteredStructure</category>
      </categories>
      <tags>
        <tag>一注结构专业</tag>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title>希腊字母大小写及发音</title>
    <url>/posts/2022/3DAB2TW.html</url>
    <content><![CDATA[<p>希腊字母表是希腊语中使用的字母，其广泛应用到学术领域，如数学、物理、生物、天文等学科。在规范里面大量使用希腊字母表示特定值，所以，学会发音后，可以记得更牢。</p>
<span id="more"></span>
<table>
<thead>
<tr class="header">
<th>序号</th>
<th>大写</th>
<th>小写</th>
<th>英文</th>
<th>汉字注音</th>
<th>英语音标注音</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>Α</td>
<td>α</td>
<td>alpha</td>
<td>阿尔法</td>
<td>/'ælfə/</td>
</tr>
<tr class="even">
<td>2</td>
<td>Β</td>
<td>β</td>
<td>beta</td>
<td>贝塔</td>
<td>/'bi:tə/或/'beɪtə/</td>
</tr>
<tr class="odd">
<td>3</td>
<td>Γ</td>
<td>γ</td>
<td>gamma</td>
<td>格玛</td>
<td>/'gæmə/</td>
</tr>
<tr class="even">
<td>4</td>
<td>Δ</td>
<td>δ</td>
<td>delta</td>
<td>德尔塔</td>
<td>/'deltə/</td>
</tr>
<tr class="odd">
<td>5</td>
<td>Ε</td>
<td>ε</td>
<td>epsilon</td>
<td>埃普西龙</td>
<td>/'epsɪlɒn/</td>
</tr>
<tr class="even">
<td>6</td>
<td>Ζ</td>
<td>ζ</td>
<td>zeta</td>
<td>泽塔</td>
<td>/'zi:tə/</td>
</tr>
<tr class="odd">
<td>7</td>
<td>Η</td>
<td>η</td>
<td>eta</td>
<td>艾塔</td>
<td>/'i:tə/</td>
</tr>
<tr class="even">
<td>8</td>
<td>Θ</td>
<td>θ</td>
<td>theta</td>
<td>西塔</td>
<td>/'θi:tə/</td>
</tr>
<tr class="odd">
<td>9</td>
<td>Ι</td>
<td>ι</td>
<td>iota</td>
<td>埃欧塔</td>
<td>/aɪ'əʊtə/</td>
</tr>
<tr class="even">
<td>10</td>
<td>Κ</td>
<td>κ</td>
<td>kappa</td>
<td>堪帕</td>
<td>/'kæpə/</td>
</tr>
<tr class="odd">
<td>11</td>
<td>∧</td>
<td>λ</td>
<td>lambda</td>
<td>兰姆达</td>
<td>/'læmdə/</td>
</tr>
<tr class="even">
<td>12</td>
<td>Μ</td>
<td>μ</td>
<td>mu</td>
<td>谬/穆</td>
<td>/mju:/</td>
</tr>
<tr class="odd">
<td>13</td>
<td>Ν</td>
<td>ν</td>
<td>nu</td>
<td>拗/奴</td>
<td>/nju:/</td>
</tr>
<tr class="even">
<td>14</td>
<td>Ξ</td>
<td>ξ</td>
<td>xi</td>
<td>克西</td>
<td>/kˈsai/ 或 /ˈzaɪ/</td>
</tr>
<tr class="odd">
<td>15</td>
<td>Ο</td>
<td>ο</td>
<td>omicron</td>
<td>欧米可戎</td>
<td>/əuˈmaikrən/或 /ˈɑmɪˌkrɑn/</td>
</tr>
<tr class="even">
<td>16</td>
<td>∏</td>
<td>π</td>
<td>pi</td>
<td>派</td>
<td>/paɪ/</td>
</tr>
<tr class="odd">
<td>17</td>
<td>Ρ</td>
<td>ρ</td>
<td>rho</td>
<td>若</td>
<td>/rəʊ/</td>
</tr>
<tr class="even">
<td>18</td>
<td>∑</td>
<td>σ</td>
<td>sigma</td>
<td>西格马</td>
<td>/'sɪɡmə/</td>
</tr>
<tr class="odd">
<td>19</td>
<td>Τ</td>
<td>τ</td>
<td>tau</td>
<td>套</td>
<td>/tɔ:/或 /taʊ/</td>
</tr>
<tr class="even">
<td>20</td>
<td>Υ</td>
<td>υ</td>
<td>upsilon</td>
<td>宇普西龙</td>
<td>/ˈipsɪlon/或 /ˈʌpsɪlɒn/</td>
</tr>
<tr class="odd">
<td>21</td>
<td>Φ</td>
<td>φ</td>
<td>phi</td>
<td>弗爱</td>
<td>/faɪ/</td>
</tr>
<tr class="even">
<td>22</td>
<td>Χ</td>
<td>χ</td>
<td>chi</td>
<td>凯/柯义</td>
<td>/kaɪ/</td>
</tr>
<tr class="odd">
<td>23</td>
<td>Ψ</td>
<td>ψ</td>
<td>psi</td>
<td>普赛</td>
<td>/psaɪ/</td>
</tr>
<tr class="even">
<td>24</td>
<td>Ω</td>
<td>ω</td>
<td>omega</td>
<td>欧米嘎</td>
<td>/'əʊmɪɡə/或 /oʊ'meɡə/</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>RegisteredStructure</category>
      </categories>
      <tags>
        <tag>一注结构专业</tag>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title>一文理清设计组合的使用</title>
    <url>/posts/2022/243ZBZ4.html</url>
    <content><![CDATA[<p>在进行设计时，不同的设计状况或设计条件，采用不同的设计组合。但是看规范的时候，规范里零零散散这个地方讲一点，那个地方提一句，看到最后，自己都混乱了。所以，本文对荷载组合进行系统的梳理，让人能很方便的区分各个组合的使用。</p>
<span id="more"></span>
<h2 id="荷载组合分类">荷载组合分类</h2>
<p>目前共有 6 种荷载组合，分别是：</p>
<ol type="1">
<li>基本组合</li>
<li>偶然组合</li>
<li>地震组合</li>
<li>标准组合</li>
<li>频遇组合</li>
<li>准永久组合</li>
</ol>
<p>其中，前三种仅用于
<strong>承载能力极限状态设计</strong>，后三种仅用于
<strong>正常使用极限状态设计</strong>。</p>
<h2 id="设计状况对应极限设计的类型">设计状况对应极限设计的类型</h2>
<table>
<thead>
<tr class="header">
<th>设计状况</th>
<th>承载能力</th>
<th>正常使用</th>
<th>耐久性</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>持久状况<code>指使用时正常的情况</code></td>
<td>应</td>
<td>应</td>
<td>宜</td>
</tr>
<tr class="even">
<td>短暂状况</td>
<td>应</td>
<td>按需</td>
<td></td>
</tr>
<tr class="odd">
<td>偶然状况</td>
<td>应</td>
<td>可不</td>
<td>可不</td>
</tr>
<tr class="even">
<td>地震状况</td>
<td>应</td>
<td>按需</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="承载能力极限与荷载组合">承载能力极限与荷载组合</h2>
<table>
<thead>
<tr class="header">
<th>设计状况</th>
<th>荷载组合</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>持久状况`指使用时正常的情况</td>
<td>基本</td>
</tr>
<tr class="even">
<td>短暂状况</td>
<td>基本</td>
</tr>
<tr class="odd">
<td>偶然状况</td>
<td>偶然</td>
</tr>
<tr class="even">
<td>地震状况</td>
<td>地震</td>
</tr>
</tbody>
</table>
<h2 id="正常使用极限与荷载组合">正常使用极限与荷载组合</h2>
<table>
<thead>
<tr class="header">
<th>设计状况</th>
<th>荷载组合</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>不可逆 </strong>正常使用极限状态设计</td>
<td>标准</td>
</tr>
<tr class="even">
<td><strong>可逆</strong> 正常使用极限状态设计</td>
<td>频遇</td>
</tr>
<tr class="odd">
<td>长期效应是决定因素</td>
<td>准永久</td>
</tr>
</tbody>
</table>
<h2 id="各个荷载组合计算的区别">各个荷载组合计算的区别</h2>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220226232739346.png"
alt="image-20220226232739346" />
<figcaption aria-hidden="true">image-20220226232739346</figcaption>
</figure>
<h2 id="参考">参考</h2>
<ol type="1">
<li>GB50068-2018《建筑结构可靠性设计统一标准》</li>
</ol>
]]></content>
      <categories>
        <category>RegisteredStructure</category>
      </categories>
      <tags>
        <tag>一注结构专业</tag>
        <tag>考试</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>结构力学常用公式表大全</title>
    <url>/posts/2022/1VMAW6B.html</url>
    <content><![CDATA[<p>本文主要收集了常用结构的力学公式，方便日常使用。</p>
<span id="more"></span>
<h2 id="常用截面几何与力学特征">常用截面几何与力学特征</h2>
<h3 id="基本介绍">基本介绍</h3>
<p><span class="math inline">\(I\)</span>
称为截面对主轴（形心轴）的截面惯性矩 ( <span
class="math inline">\(mm^4\)</span> )。基本计算公式如下： <span
class="math display">\[
I = \int_A y^2 \cdot dA
\]</span> <span class="math inline">\(W\)</span> 称为截面抵抗矩 ( <span
class="math inline">\(mm^3\)</span>
)，它表示截面抵抗弯曲变形能力的大小，基本计算公式如下： <span
class="math display">\[
W = \frac{I}{y_{max}}
\]</span> <span class="math inline">\(i\)</span> 称截面回转半径
(mm)，其基本计算公式如下： <span class="math display">\[
i = \sqrt{\frac{I}{A}}
\]</span></p>
<blockquote>
<ol type="1">
<li>上列各式中，<span class="math inline">\(A\)</span> 为截面面积 (
<span class="math inline">\(mm^2\)</span> )，<em>y</em>
为截面边缘到主轴（形心轴）的距离 (mm)，<span
class="math inline">\(I\)</span> 为对主轴（形心轴）的惯性矩。</li>
<li>上列各项几何及力学特征，主要用于验算构件截面的承载力和刚度。</li>
</ol>
</blockquote>
<h3 id="常用公式">常用公式</h3>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/常用截面几何与力学特征表.jpg"
alt="常用截面几何与力学特征表" />
<figcaption aria-hidden="true">常用截面几何与力学特征表</figcaption>
</figure>
<h2 id="单跨梁的内力及变形">单跨梁的内力及变形</h2>
<h3 id="简支梁的反力剪力弯矩和挠度">简支梁的反力、剪力、弯矩和挠度</h3>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/简支梁内力.jpg"
alt="简支梁内力" />
<figcaption aria-hidden="true">简支梁内力</figcaption>
</figure>
<h3 id="悬臂梁的反力剪力弯矩和挠度">悬臂梁的反力、剪力、弯矩和挠度</h3>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/悬臂梁内力.jpg"
alt="悬臂梁内力" />
<figcaption aria-hidden="true">悬臂梁内力</figcaption>
</figure>
<h3
id="一端简支另一端固定梁的反力剪力弯矩和挠度">一端简支另一端固定梁的反力、剪力、弯矩和挠度</h3>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/一端简支另一端固定梁内力.jpg"
alt="一端简支另一端固定梁内力" />
<figcaption aria-hidden="true">一端简支另一端固定梁内力</figcaption>
</figure>
<h3
id="两端固定梁的反力剪力弯矩和挠度">两端固定梁的反力、剪力、弯矩和挠度</h3>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/两端固定梁内力.jpg"
alt="两端固定梁内力" />
<figcaption aria-hidden="true">两端固定梁内力</figcaption>
</figure>
<h3 id="外伸梁的反力剪力弯矩和挠度">外伸梁的反力、剪力、弯矩和挠度</h3>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/外伸梁内力.jpg"
alt="外伸梁内力" />
<figcaption aria-hidden="true">外伸梁内力</figcaption>
</figure>
<h2 id="等截面连续梁的内力及变形表">等截面连续梁的内力及变形表</h2>
<h3 id="二跨等跨梁的内力和挠度系数">二跨等跨梁的内力和挠度系数</h3>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/二跨等跨梁的内力和挠度系数.jpg"
alt="二跨等跨梁的内力和挠度系数" />
<figcaption aria-hidden="true">二跨等跨梁的内力和挠度系数</figcaption>
</figure>
<ul>
<li><p>在均布荷载作用下：</p>
<p><span class="math inline">\(M = 表中系数 \times ql^2\)</span>；<span
class="math inline">\(V ＝ 表中系数 \times ql\)</span>；$ w =表中系数
$。</p></li>
<li><p>在集中荷载作用下：</p>
<p><span class="math inline">\(M ＝表中系数 \times Fl\)</span>；<span
class="math inline">\(V ＝表中系数 \times F\)</span>；<span
class="math inline">\(w =表中系数\times
\frac{Fl^3}{100EI}\)</span>。</p></li>
</ul>
<h3 id="不等跨连续梁的内力系数">不等跨连续梁的内力系数</h3>
<h4 id="二不等跨梁的内力系数">二不等跨梁的内力系数</h4>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/二不等跨梁的内力系数.jpg"
alt="二不等跨梁的内力系数" />
<figcaption aria-hidden="true">二不等跨梁的内力系数</figcaption>
</figure>
<ul>
<li><p>$ M＝表中系数 ql_1^2<span class="math inline">\(；\)</span>
V＝表中系数 ql_1$；</p></li>
<li><p><span class="math inline">\(M_{max}\)</span>、<span
class="math inline">\(V_{max}\)</span>
表示它为相应跨内的最大内力。</p></li>
</ul>
<h4 id="三不等跨梁内力系数">三不等跨梁内力系数</h4>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/三不等跨梁内力系数.jpg"
alt="三不等跨梁内力系数" />
<figcaption aria-hidden="true">三不等跨梁内力系数</figcaption>
</figure>
<ul>
<li><p>$ M＝表中系数 ql_1^2<span class="math inline">\(；\)</span>
V＝表中系数 ql_1$；</p></li>
<li><p><span class="math inline">\(M_{max}\)</span>、<span
class="math inline">\(V_{max}\)</span>
为荷载在最不利布置时的最大内力。</p></li>
</ul>
]]></content>
      <categories>
        <category>RegisteredStructure</category>
      </categories>
      <tags>
        <tag>一注结构专业</tag>
        <tag>考试</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown 中 LaTeX公式语法大全</title>
    <url>/posts/2022/1ERZT1V.html</url>
    <content><![CDATA[<h2 id="公式声明">公式声明</h2>
<p>行内公式：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$公式$</span><br></pre></td></tr></table></figure>
<p>多行公式</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin</span><br><span class="line">公式</span><br><span class="line">\end</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="空格">空格</h2>
<table>
<thead>
<tr class="header">
<th>名称</th>
<th>描述</th>
<th>语法</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><span class="math inline">\(a \qquad b\)</span></td>
<td>两个 quad 空格：2 个 m 的宽度</td>
<td><code>$a \qquad b$</code></td>
</tr>
<tr class="even">
<td><span class="math inline">\(a \quad b\)</span></td>
<td>quad空格：1 个 m 的宽度</td>
<td><code>$a \quad b$</code></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(a\ b\)</span></td>
<td>大空格：1/3 个 m 的宽度</td>
<td><code>$a\ b$</code></td>
</tr>
<tr class="even">
<td><span class="math inline">\(a\;b\)</span></td>
<td>中等空格：2/7 个 m 的宽度</td>
<td><code>$a\;b$</code></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(a\,b\)</span></td>
<td>小空格：1/6 个 m 的宽度</td>
<td><code>$a\,b$</code></td>
</tr>
<tr class="even">
<td><span class="math inline">\(ab\)</span></td>
<td>正常</td>
<td><code>$ab$</code></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(a\!b\)</span></td>
<td>负空格</td>
<td><code>$a\!b$</code></td>
</tr>
</tbody>
</table>
<h2 id="操作符">操作符</h2>
<table>
<thead>
<tr class="header">
<th>名称</th>
<th>语法</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>+</td>
<td><code>+</code></td>
</tr>
<tr class="even">
<td>-</td>
<td><code>-</code></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(\times\)</span></td>
<td><code>$\times $</code></td>
</tr>
<tr class="even">
<td><span class="math inline">\(\div\)</span></td>
<td><code>$\div $</code></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(\dfrac{x}{y}\)</span></td>
<td><code>$\dfrac&#123;x&#125;&#123;y&#125; $</code></td>
</tr>
<tr class="even">
<td><span class="math inline">\(\frac{x}{y}\)</span></td>
<td><code>$\dfrac&#123;x&#125;&#123;y&#125; $</code></td>
</tr>
<tr class="odd">
<td>$ $</td>
<td><code>$\sqrt[n]&#123;x&#125; $</code></td>
</tr>
<tr class="even">
<td><span class="math inline">\(x^y\)</span></td>
<td><code>$x^y $</code></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(\cdot\)</span></td>
<td><code>$\cdot $</code></td>
</tr>
</tbody>
</table>
<h2 id="符号">符号</h2>
<table>
<thead>
<tr class="header">
<th>名称</th>
<th>语法</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>$ $</td>
<td><code>$\pi \approx 3.14159 $</code></td>
</tr>
<tr class="even">
<td>$, 0.2 $</td>
<td><code>$\pm \, 0.2$</code></td>
</tr>
<tr class="odd">
<td>$ $</td>
<td><code>$\dfrac&#123;0&#125;&#123;1&#125; \neq \infty$</code></td>
</tr>
<tr class="even">
<td>$0 &lt; x &lt; 1 $</td>
<td><code>$0 &lt; x &lt; 1$</code></td>
</tr>
<tr class="odd">
<td>$0 x $</td>
<td><code>$0 \leq x \leq 1$</code></td>
</tr>
<tr class="even">
<td>$x $</td>
<td><code>$x \geq 10$</code></td>
</tr>
<tr class="odd">
<td>$, x (1,2) $</td>
<td><code>$\forall \, x \in (1,2)$</code></td>
</tr>
<tr class="even">
<td>$, x $</td>
<td><code>$\exists \, x \notin [0,1]$</code></td>
</tr>
<tr class="odd">
<td>$A B $</td>
<td><code>$A \subset B$</code></td>
</tr>
<tr class="even">
<td>$A B $</td>
<td><code>$A \subseteq B$</code></td>
</tr>
<tr class="odd">
<td>$A B $</td>
<td><code>$A \cup B$</code></td>
</tr>
<tr class="even">
<td>$A B $</td>
<td><code>$A \cap B$</code></td>
</tr>
<tr class="odd">
<td>$X Y $</td>
<td><code>$X \implies Y$</code></td>
</tr>
<tr class="even">
<td>$X Y $</td>
<td><code>$X \impliedby Y$</code></td>
</tr>
<tr class="odd">
<td>$a b $</td>
<td><code>$a \to b$</code></td>
</tr>
<tr class="even">
<td>$a b $</td>
<td><code>$a \longrightarrow b$</code></td>
</tr>
<tr class="odd">
<td>$a b $</td>
<td><code>$a \Rightarrow b$</code></td>
</tr>
<tr class="even">
<td>$a b $</td>
<td><code>$a \Longrightarrow b$</code></td>
</tr>
<tr class="odd">
<td>$a b $</td>
<td><code>$a \propto b $</code></td>
</tr>
</tbody>
</table>
<h2 id="希腊字母">希腊字母</h2>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a href="https://ashki23.github.io/markdown-latex.html">Markdown and
LaTeX introduction</a></li>
<li><a href="https://www.latex-project.org">latex-project</a></li>
<li><a href="https://en.wikibooks.org/wiki/LaTeX/Mathematics">LaTeX
Wiki</a></li>
<li><a
href="https://www.overleaf.com/learn/latex/Learn_LaTeX_in_30_minutes">Learn
LaTeX in 30 minutes</a></li>
</ol>
]]></content>
      <categories>
        <category>RegisteredStructure</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>如何求最大弯矩</title>
    <url>/posts/2022/3SP0JGM.html</url>
    <content><![CDATA[<p>在荷载进行作用组合时，往往需要先求内力，然后再进行组合。下方分享如何快速地求得最大弯矩。</p>
<span id="more"></span>
<h2 id="基本方程法">基本方程法</h2>
<p>通过弯矩方程来求最大弯矩。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220321220445565.png"
alt="image-20220321220445565" />
<figcaption aria-hidden="true">image-20220321220445565</figcaption>
</figure>
<p>如上图所示，由于荷载及支反力均对称于梁跨的中点，因此，两支反力（图a）相等，由平衡方程
$ F_y = 0$，得：</p>
<p><span class="math display">\[
\begin{align}
F_A=F_B=\dfrac{ql}{2}
\end{align}
\]</span> 取距左端（坐标原点）为 x
的任意横截面（图a），则梁的剪力和弯矩方程为： <span
class="math display">\[
\begin{align}
F_s(x) = F_A-qx = \dfrac{ql}{2}-qx \qquad x\in[0,l]\\
M(x) = F_Ax-qx\dfrac{x}{2}=\frac{qlx}{2}-\dfrac{qx^2}{2} \qquad x
\in[0,l]
\end{align}
\]</span></p>
<h2 id="微分关系法">微分关系法</h2>
<p>通过弯矩、剪力与分布荷载集度间的微分关系来求解最大弯矩。 <span
class="math display">\[
\begin{align}
\dfrac{dM(x)}{dx} = F_s(x) \\
\dfrac{d^2M(x)}{dx^2}=q(x)
\end{align}
\]</span></p>
<ul>
<li>剪力图上某点处的切线斜率等于该点处荷载集度的大小</li>
<li>弯矩图的某点处的切线斜率等于该点处剪力的大小</li>
</ul>
<p>换言之，某点处截面的弯矩等于该点之前的
<strong>剪力图的面积</strong>。</p>
<p>从 1
中的剪力图中，我们可以知道，弯矩最大点在跨中。该方法有个优点是将高次方程转为低次方程来计算，降低了复杂度，在手算时很方便。</p>
<h2 id="叠加原理法">叠加原理法</h2>
<p>当所求参数（内力、应力或位移）与梁上荷载为线性关系时，由几项荷载共同作用时所引起的某一参数，就等于每项荷载单独作用时所引起的该参数值的叠加。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220321223214213.png"
alt="image-20220321223214213" />
<figcaption aria-hidden="true">image-20220321223214213</figcaption>
</figure>
<p>当该参数处于同一平面内同一方向
时，叠加即为代数和。若处于不同平面或不同方向，则为几何和。</p>
<h2 id="参考">参考</h2>
<ol type="1">
<li>材料力学<span
class="math inline">\(\cdot\)</span>剪力图和弯矩图</li>
</ol>
]]></content>
      <categories>
        <category>RegisteredStructure</category>
      </categories>
      <tags>
        <tag>一注结构专业</tag>
        <tag>考试</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>求简支梁的绝对最大弯矩</title>
    <url>/posts/2022/2CGPR3T.html</url>
    <content><![CDATA[<p>在设计承受移动荷载的结构时，须求出每一截 面内力的最大值
(最大正值和最大负值)。连接各截面内力最大值的曲线称为内力包络图。包络图是结构设计中重要的工具，在吊车梁、楼盖的连续和桥梁的设计中应用很多。</p>
<p>包络图表示各截面内力变化
的极值，在设计中是十分重要的。弯矩包络图中最高的竖距称为绝对最大弯矩，它代表在一定移动荷载作用下梁内可能出现的弯矩最大值。</p>
<p>需要特别注意，最大弯矩一般出现在
<strong>跨中附近</strong>，但不一定是跨中。</p>
<span id="more"></span>
<h2 id="简支梁均布荷载作用的最大弯矩">简支梁均布荷载作用的最大弯矩</h2>
<p>当全梁布满匀布荷载，其绝对最大变矩也就是匀布静荷载作用下的跨中最大弯矩:，其值为
<span class="math display">\[
M_{跨中} = \frac{1}{8}ql^2
\]</span></p>
<h2
id="简支梁集中荷载组作用的最大弯矩">简支梁集中荷载组作用的最大弯矩</h2>
<p>如果简支梁上作用的是一组移动的集中荷载，求梁的绝对最大弯矩较难。</p>
<p>有人认为，如果分别把梁的各截面的最大弯矩值求出，加以比较，取其中的最大值，不就可以确定绝对最大弯矩值了吗?
这种想法是可行的，可实际涉及到计算并不容易，甚至是无法进行的。</p>
<p>那么到底用什么方法可以计算其绝对最大弯矩呢？</p>
<h3 id="原理">原理</h3>
<p>我们知道，荷载在任一位置时，梁的弯矩圆的顶点永远发生在集中荷载下面。因此，可以断定，<strong>绝对最大弯矩必定发生在某一集中荷载的作用点处</strong>。把这一集中荷载记为
<span class="math inline">\(P_k\)</span>。那么在一组移动的集中荷
载中，哪一个会成为 <span class="math inline">\(P_k\)</span> 呢?</p>
<p>事实上，一般情况下，在一组移动的集中荷载
中，<strong>使梁的跨中截面产生最大弯矩的荷载即是产生绝对最大弯矩的荷载
<span class="math inline">\(P_k\)</span></strong>。</p>
<p>确定了 <span class="math inline">\(P_k\)</span>
荷载后，我们即可遵照下面的方法
来计算绝对最大弯矩了。下图表明，梁上所有荷载(包括 <span
class="math inline">\(P_k\)</span> 在内) 的合力 R 与 <span
class="math inline">\(P_k\)</span> 恰好位于梁的跨中截面 C
两侧的对称位置时，<span class="math inline">\(P_k\)</span>
所在截面的弯矩最大。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220324090538380.png"
alt="image-20220324090538380" />
<figcaption aria-hidden="true">image-20220324090538380</figcaption>
</figure>
<p>此时简支梁的绝对最大弯矩为： <span class="math display">\[
\begin{align}
M_{max} = \frac{R}{4l}(l-a)^2-M_k \tag{2-1}
\end{align}
\]</span></p>
<ul>
<li>l，跨长</li>
<li>R，梁上实有荷载的合力</li>
<li>a，梁上实有荷载的合力 R 与 <span class="math inline">\(P_k\)</span>
荷载间的距离。当 <span class="math inline">\(P_k\)</span> 荷载 在合力 R
之左时，a 取正值；当 <span class="math inline">\(P_k\)</span> 在 R
之右时，a 取负值</li>
<li><span class="math inline">\(M_k\)</span>，<span
class="math inline">\(P_k\)</span> 以左荷载对 <span
class="math inline">\(P_k\)</span> 点的力矩之和，是一常数</li>
</ul>
<h3 id="求解步骤">求解步骤</h3>
<ol type="1">
<li><p>求出能使梁中点截面的弯矩发生最大值的临界荷载 <span
class="math inline">\(P_k\)</span>；</p></li>
<li><p>计算梁上合力 R 及其与 <span class="math inline">\(P_k\)</span>
的距离 a；</p>
<p>求解合力时，只需将力摘出来，利用静力平衡方程求解。</p></li>
<li><p>移动荷载，使 R 与 <span class="math inline">\(P_k\)</span>
对称分布与中点两侧。若无荷载移出或移入梁，则用式（2-1）计算绝对最大弯矩；若有荷载移出或移入，则从第
2 步重新计算。</p></li>
</ol>
<h2 id="参考">参考</h2>
<ol type="1">
<li><p><a
href="https://obs.uamazing.cn:52443/public/files/pdf/简支梁的绝对最大弯矩.pdf">简支梁的绝对最大弯矩.pdf</a></p></li>
<li><p><a
href="http://kjwy.5any.com/jglx2/content/jglx2-02/020501/text.htm">第五节
简支梁的绝对最大弯矩 (5any.com)</a></p></li>
</ol>
]]></content>
      <categories>
        <category>RegisteredStructure</category>
      </categories>
      <tags>
        <tag>一注结构专业</tag>
        <tag>考试</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>桁架中零杆的判断</title>
    <url>/posts/2022/EBMGE2.html</url>
    <content><![CDATA[<p>本文总结了桁架中零杆的判断方法，在分析桁架内力时，若能首先确定其中的零杆，可以简化后续杆件的分析。</p>
<p>桁架中的零杆虽然不受力，但却是保持结构坚固性所必需的杆件。因为桁架中的荷载往往是变化的，在一种荷载工况下的零杆，在另一个工况下就有可能承受荷载。</p>
<span id="more"></span>
<h2 id="判断方法">判断方法</h2>
<ol type="1">
<li>不在同一条直线上的两杆节点上若没有荷载作用，两杆均为零杆</li>
<li>不共线的两杆结点，若荷载沿一杆作用，则另一杆为零杆</li>
<li>无荷载作用的三杆节点，若两杆在一直线上，则第三杆为零杆</li>
<li>对称桁架在对称荷载作用下，对称轴上的 K
形结点若无荷载，则该结点上两根斜杆为零杆</li>
<li>对称桁架在反对称荷载作用下，与对称轴重合或者垂直相交的杆件为零杆</li>
</ol>
<h2 id="参考">参考</h2>
]]></content>
      <categories>
        <category>RegisteredStructure</category>
      </categories>
      <tags>
        <tag>一注结构专业</tag>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title>移动已安装软件程序文件夹：FreeMove</title>
    <url>/posts/2020/YY2KY2.html</url>
    <content><![CDATA[<p>FreeMove
是一款可以移动已安装软件程序文件夹的软件，很多时候软件在安装的时候选在了
A 分区，但是使用过一段时间后想移动到 B
分区，但是又不想卸载重新安装，这时候就需要用到这款 FreeMove 软件了。</p>
<span id="more"></span>
<h2 id="应用简介">应用简介</h2>
<p>FreeMove 的用法很简单，在「Move
From」处选择你需要移动的软件文件夹位置，再在「To」处选择目标移动位置，最后点击「Move」按钮即可。</p>
<p>这款小工具的原理跟我们之前介绍过的 Steam Mover
的原理是一样的，都是为文件夹创建一个软链接，之后指向到新位置，就可以实现移动的功能了。</p>
<h2 id="功能特点">功能特点</h2>
<ol type="1">
<li><p>FreeMove不需要安装，解压即可使用</p></li>
<li><p>FreeMove软件占用系统内存少，简单易用</p></li>
</ol>
<h2 id="freemove使用方法">FreeMove使用方法</h2>
<p>1、打开FreeMove软件 <img data-src="https://pic.cr173.com/up/2018-3/2018031213354077564.png"
alt="1" /></p>
<p>2、在Move From处选择你需要移动的软件文件夹位置 <img data-src="https://pic.cr173.com/up/2018-3/2018031213354198907.png"
alt="2" /></p>
<p>3、在To处选择目标移动位置 <img data-src="https://pic.cr173.com/up/2018-3/2018031213354110375.png"
alt="3" /></p>
<p>4、最后点击Move按钮即可 <img data-src="https://pic.cr173.com/up/2018-3/2018031213354183550.png"
alt="4" /></p>
<h2 id="下载">下载</h2>
<p><a href="http://xza.198424.com/freemove.zip">软件下载传送门
48kb</a></p>
<h2 id="致谢">致谢</h2>
<p>本文摘抄至<a
href="https://www.cr173.com/soft/706765.html">西西软件</a></p>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>佳软</tag>
      </tags>
  </entry>
  <entry>
    <title>常用软件列表</title>
    <url>/posts/2020/18MAEYX.html</url>
    <content><![CDATA[<p>本文将自己一些常用的软件及其安装方式记录下来，方便因为更换电脑后，可以快速安装。</p>
<span id="more"></span>
<h2 id="软件安装">软件安装</h2>
<p>软件名称：scoop github：https://github.com/lukesampson/scoop</p>
<h2 id="命令行工具">命令行工具</h2>
<table>
<thead>
<tr class="header">
<th>序号</th>
<th>软件名称</th>
<th>安装方式</th>
<th>特点</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>vim</td>
<td>scoop</td>
<td>基于命令行的文本编辑器</td>
</tr>
<tr class="even">
<td>2</td>
<td>sudo</td>
<td>scoop</td>
<td>命令行提权</td>
</tr>
<tr class="odd">
<td>3</td>
<td>busybox</td>
<td>scoop</td>
<td>集成了一百多个最常用Linux 命令和工具</td>
</tr>
</tbody>
</table>
<h2 id="数据库管理">数据库管理</h2>
<p>软件名称：Navicat</p>
<p>下载地址：</p>
<h2 id="markdown">Markdown</h2>
<table>
<thead>
<tr class="header">
<th>序号</th>
<th>软件名称</th>
<th>安装方式</th>
<th>特点</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>typora</td>
<td>scoop</td>
<td>简洁，内存占用少，免费今后可能会收费</td>
</tr>
<tr class="even">
<td>2</td>
<td>marktext</td>
<td>scoop</td>
<td>功能丰富，内存占用高，MIT开源</td>
</tr>
</tbody>
</table>
<p>本人原来一直使用的是 typora，但是近来发现 marktext
有很多体验很好的功能，所以开始改用后者，但是 marktext
有个缺陷是，内存占用高。</p>
<h2 id="读书笔记">读书笔记</h2>
<p>软件名称：bookxnote</p>
<p>下载地址：http://www.bookxnote.com/</p>
<h2 id="快速搜索">快速搜索</h2>
<p>软件名称：</p>
<ul>
<li><p>everything</p></li>
<li><p>flow-launcher</p>
<p>开源项目 wox 据说合并到 powertoys 中了，但是 powertoys
有点不好用，有人根据 wox 开发了 flow-launcher</p></li>
</ul>
<p>安装方式： scoop</p>
<h2 id="全局手势">全局手势</h2>
<p>软件名称：wgestures</p>
<p>下载地址：https://www.yingdev.com/projects/wgestures</p>
<h2 id="浏览器">浏览器</h2>
<p>软件名称：googlechrome</p>
<p>安装方式：scoop</p>
<h2 id="开发工具">开发工具</h2>
<ul>
<li><p>vscode</p></li>
<li><p>nginx</p></li>
<li><p>MongoDB</p></li>
<li><p>nodejs</p></li>
<li><p>redis</p></li>
<li><p>git</p></li>
</ul>
<p>安装方式：scoop</p>
<h2 id="广告拦截">广告拦截</h2>
<p>软件名称：Adguard</p>
<p>下载地址：https://adguard.com/zh_cn/welcome.html</p>
<p>备注：收费</p>
<h2 id="dns解析及广告拦截">DNS解析及广告拦截</h2>
<p>软件名称：AdguardHome</p>
<p>下载地址：https://adguard.com/zh_cn/welcome.html</p>
<h2 id="解压缩软件">解压缩软件</h2>
<p>软件名称：7zip</p>
<p>安装方式：scoop</p>
<h2 id="同步软件">同步软件</h2>
<p>软件名称：微力同步</p>
<p>下载地址：http://www.verysync.com/</p>
<p>备注：如果有开源洁癖的话，可以使用 <code>sycthing</code></p>
<h2 id="nodejs进程守护">nodeJs进程守护</h2>
<p>pm2</p>
<p>安装方式：npm</p>
<h2 id="视屏录制">视屏录制</h2>
<p>软件名称：</p>
<ul>
<li><p>captura</p>
<p>小巧,但是使用了 ffmpeg，这个软件有点大</p></li>
<li><p>obs-studio</p>
<p>功能强大，可以编辑视屏</p></li>
</ul>
<p>安装方式：scoop</p>
<h2 id="视屏播放器">视屏播放器</h2>
<p>软件名称：PotPlayer</p>
<p>安装方式：scoop</p>
<h2 id="图片查看器">图片查看器</h2>
<p>软件名称：imageglass</p>
<p>安装方式：scoop</p>
<h2 id="密码管理">密码管理</h2>
<p>软件名称：KeePass</p>
<p>安装方式：scoop</p>
<h2 id="pdf编辑">PDF编辑</h2>
<table>
<thead>
<tr class="header">
<th>软件名称</th>
<th>安装方式</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>pdfsam</td>
<td>scoop</td>
</tr>
<tr class="even">
<td>pdfgear</td>
<td><a href="https://www.pdfgear.com/">pdfgear.com</a></td>
</tr>
</tbody>
</table>
<h2 id="多台电脑共用一套鼠标键盘">多台电脑共用一套鼠标键盘</h2>
<p>软件名称：MouseWithoutBorders</p>
<p>安装方式：官网下载</p>
<h2 id="极客工具">极客工具</h2>
<h3 id="反编译">反编译</h3>
<p>软件名称：dnspy</p>
<p>安装方式：scoop</p>
<h3 id="脱壳">脱壳</h3>
<p>软件名称：de4dot</p>
<p>安装方式：官网下载</p>
<h2 id="图片压缩">图片压缩</h2>
<table>
<colgroup>
<col style="width: 10%" />
<col style="width: 89%" />
</colgroup>
<thead>
<tr class="header">
<th>名称</th>
<th>下载地址</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Imagine</td>
<td><a href="https://github.com/meowtec/Imagine/releases">Releases ·
meowtec/Imagine (github.com)</a></td>
</tr>
<tr class="even">
<td>图压</td>
<td>https://tuya.xinxiao.tech/#open-source</td>
</tr>
</tbody>
</table>
<h2 id="wiki系统">Wiki系统</h2>
<p>软件名称：docsify</p>
<p>来源：https://www.jianshu.com/p/bbcbd2359974</p>
<h2 id="修改系统字体">修改系统字体</h2>
<p>软件名称：MacType</p>
<p>下载地址：https://www.mactype.net</p>
<h2 id="win10-资源管理器扩展">win10 资源管理器扩展</h2>
<p>软件名称：极客多标签文件管理器</p>
<p>下载地址：http://www.pcsuperx.com/ExplorerX</p>
<h2 id="文本编辑器">文本编辑器</h2>
<p>软件名称：NotePadPlusPlus</p>
<p>下载方式：scoop</p>
<h2 id="截图">截图</h2>
<p>软件名称：snipaste</p>
<p>安装方式：scoop</p>
<h2 id="windows-服务封装">windows 服务封装</h2>
<p>软件名称：</p>
<ul>
<li>nssm</li>
<li>winsw</li>
</ul>
<p>安装方式：scoop</p>
<p>nssm 介绍：http://phantom0301.cc/2016/07/19/NSSM</p>
<h2 id="中文搜索引擎">中文搜索引擎</h2>
<p>软件名称：solr</p>
<p>下载地址：https://solr.apache.org/</p>
<p>安装为服务：https://www.sitecoreblog.cz/how-to-install-solr-as-a-windows-service</p>
<h2 id="iso启动引导程序">ISO启动引导程序</h2>
<p>软件名称：ventoy</p>
<p>安装方式：scoop</p>
<h2 id="npm镜像管理">NPM镜像管理</h2>
<p>软件名称：nrm</p>
<p>安装方式：<code>npm install nrm -g</code></p>
<h2 id="yarn镜像管理">Yarn镜像管理</h2>
<p>软件名称：yrm</p>
<p>安装方式：<code>npm install yrm -g</code></p>
<h2 id="磁盘空间使用分析">磁盘空间使用分析</h2>
<p>软件名称：SpaceSniffer</p>
<p>安装方式：<code>scoop install SpaceSniffer</code></p>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>常用软件</tag>
      </tags>
  </entry>
  <entry>
    <title>Filezilla 安装及配置教程</title>
    <url>/posts/2021/3KHWK77.html</url>
    <content><![CDATA[<p>本文为 FileZilla的安装教程及其配置，主要是方便今后快速搭建一个 Ftp
服务器。</p>
<span id="more"></span>
<h2 id="下载">下载</h2>
<ul>
<li><p>通过 scoop 安装</p>
<p><code>scoop install extras/scoop install filezilla-server</code></p></li>
<li><p>从官网下载</p>
<p>也可以直接从官网下载安装</p></li>
</ul>
<h2 id="filezilla-配置">FileZilla 配置</h2>
<h3 id="设置管理界面密码">设置管理界面密码</h3>
<p><img data-src="https://i.loli.net/2021/08/10/pwIu6XDF7aMjNYW.png" /></p>
<p>修改 FTP
管理端口，增强安全性，比如：20001，同时设置管理密码。设置管理界面密码是为了提高
FTP 的安全性，防止其他人修改 FTP 配置。</p>
<h3 id="修改通信端口">修改通信端口</h3>
<figure>
<img data-src="https://i.loli.net/2021/08/10/bq1ZXiMzGhBTWDN.png"
alt="image-20210810142154949" />
<figcaption aria-hidden="true">image-20210810142154949</figcaption>
</figure>
<p>FileZilla 的默认通信端口是 21，需要将其改成其它端口，提高安全性。</p>
<h3 id="设置主动模式端口">设置主动模式端口</h3>
<figure>
<img data-src="https://i.loli.net/2021/08/10/a14EVkeP5dGbNhY.png"
alt="image-20210810114551377" />
<figcaption aria-hidden="true">image-20210810114551377</figcaption>
</figure>
<p>设置端口范围，至少需要两个端口。该端口用于文件上传下载的数据传输。</p>
<h3 id="配置-tls">配置 TLS</h3>
<figure>
<img data-src="https://i.loli.net/2021/08/10/JHx6iTcPWuUDs52.png"
alt="image-20210810142603777" />
<figcaption aria-hidden="true">image-20210810142603777</figcaption>
</figure>
<p>按步骤生成证书即可。</p>
<p>生成完成后，还需要修改TLS端口为自定义的端口，提高安全性。</p>
<h2 id="防火墙配置">防火墙配置</h2>
<p>上述配置完成后，即可在本机进行连接使用，但是如果想在其它机器连接，则需要在安装电脑上的防火墙中添加入站规则，允许FTP相关的端口通过。上面的端口包括：</p>
<ul>
<li>通信端口（默认21）</li>
<li>文件上传下载端口（默认1-65535）</li>
<li>TLS 验证端口（默认990）</li>
</ul>
<p>通过上述几步，便完成了整个整个配置，现在开始愉快地使用吧！</p>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>佳软</tag>
        <tag>Filezilla</tag>
      </tags>
  </entry>
  <entry>
    <title>代理和镜像源配置方式汇总</title>
    <url>/posts/2024/2625AHG.html</url>
    <content><![CDATA[<p>本文记录工作中用到的软件的代理或镜像配置方式。</p>
<span id="more"></span>
<h2 id="git">Git</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置代理</span></span><br><span class="line">git config --global http.proxy http://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy https://127.0.0.1:1080</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除代理</span></span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>
<h2 id="node">Node</h2>
<p>NPM设置代理：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> proxy=<span class="string">&quot;&lt;http_proxy&gt;&quot;</span></span><br><span class="line">npm config <span class="built_in">set</span> https-proxy=<span class="string">&quot;&lt;https_proxy&gt;&quot;</span></span><br></pre></td></tr></table></figure>
<p>NPM删除代理：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config delete proxy </span><br><span class="line">npm config delete https-proxy</span><br></pre></td></tr></table></figure>
<p>YARN设置代理:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn config <span class="built_in">set</span> proxy &lt;http_proxy&gt;</span><br><span class="line">yarn config <span class="built_in">set</span> https-proxy &lt;https_proxy&gt;</span><br></pre></td></tr></table></figure>
<p>YARN删除代理:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn config delete proxy  </span><br><span class="line">yarn config delete https-proxy</span><br></pre></td></tr></table></figure>
<p>设置registry:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org/</span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org/</span><br><span class="line"></span><br><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org/</span><br><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure>
<blockquote>
<p>若安装包时，包名是 git:// 协议，可以通过
<code>git config --global url."https://".insteadOf git://</code> 将 git
协议转为 https 协议。</p>
</blockquote>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>proxy</tag>
        <tag>registry</tag>
      </tags>
  </entry>
  <entry>
    <title>4条文件命名的黄金规则</title>
    <url>/posts/2021/2840RVF.html</url>
    <content><![CDATA[<p>我一直在折腾自己的文件树命名规则，有时候按年划分，有时候按领域划分，有时候，又按类型划分。往往复复，最后，头炸了，文件也炸了，只能将以前的文件尽归于
<strong>xx年之前</strong> 里。我开始思考，我这样分类的意义在哪儿？</p>
<span id="more"></span>
<p>原来，我需要的是快速检索，能够第一时间直达它。</p>
<p>这一切的改变都基于 everything，everything
可以秒搜任何文件。所以，我通过规范自己的文件命名，利用 everything
实现了文件直达的目的。</p>
<h2 id="why">1. Why?</h2>
<p>我们的逻辑一直是，先说「Why」，文件命名也是一样。</p>
<p>上手先不要想这个文件的名字，
而是先想想：如果我现在就立刻删除这个文件，<strong>为什么不可以删除</strong>？</p>
<p>如果，我实在找不出理由，那就删了吧。</p>
<p>如果，找的出理由，把理由写下来作为文件名即可，例如：</p>
<p>「3月8日女王节素材」「李姐18号出差广州要用」「A公司X项目合同草稿等批准」……</p>
<p>这类名称看似很随意，但是已经抓住了某类文件的核心问题：<strong>为什么存在？</strong></p>
<p>尤其针对：<strong>临时文件</strong>，这种命名已经足够了。
多数文件最后都会有自己的最终归宿，要么被纸质归档，
要么存在电子邮箱，要么进入XX
ERP系统，要么被扔到一个叫做「归档」的文件夹里。</p>
<p>临时文件，占据了我们工作的相当大一部分，只要想清楚「存在的理由」不难命名，而这类文件最后的归宿都是「废纸篓」。</p>
<h2 id="when-who-what">When / Who / What</h2>
<p>对于上述以外的「非临时」文件，那么意味着有长久保存的必要，虽然可能也是从一份临时文件演变过来的。
例如「合同草稿」最后变为「盖章合同扫描件」。</p>
<p>长久要保存的文件，如果是类型固定的，数量又庞大的，就适合 When / Who /
What 这个规则。</p>
<p>我们还是以「合同」文件为例，
如果有大量合同文件要归档，我们可以开一个文件夹，名叫「历史合同」，然后合同文件都扔进去，但要体现出每份合同的
不同之处。最常见的区分维度是：</p>
<ul>
<li>When：合同日期（或到期日）</li>
<li>Who：和谁签的合同</li>
<li>What：关于什么事情的合同</li>
</ul>
<p>例如：「20190601.A公司.X项目1期合同.pdf」</p>
<p>不仅局限于「合同」，常规的工作文件，几乎都适合这个套路，包括但不限于：周报，销售记录，统计表格，会议记录，协议备忘，申请表格
……</p>
<blockquote>
<p>不同的信息用 . 分隔</p>
</blockquote>
<h2 id="更多的客观标签">更多的「客观标签」</h2>
<p>如果 When / Who / What
已经不能满足了，可以考虑添加一些固定的「标签」来描述。
所谓「标签」就是一些经常会用到词眼。</p>
<p>例如：如果我们的工作文件和地域
有很强的关系，可以考虑「北京」「上海」「广州」……之类的标签。
这种标签直接附加在文件标题后即可。</p>
<p>例如：3月销售报告#广州.xls, 海外代理商名单#NY.pdf ……</p>
<p>不仅仅是「地域」，任何一个对我们业务有帮助的客观属性，都可以作为一类「标签」的参考。
但重点是对业务有帮助，<strong>不要为了分类而去分类</strong>，这是完全不可取的。</p>
<p>之所以称之为「客观标签」那是因为，这个「标签」描述的是客观内容，无论谁都会得出相同的结论。好处就是，我这份文件的「接收方」绝不会对描述产生歧义。</p>
<p>比方说，想找「北京」数据文件的人，只要看到了文件名就不会去找标着「广州」标签的文件，即使用
Everything 搜索 也能精确的得到所需内容。</p>
<blockquote>
<p>标签用 # 开头表示</p>
</blockquote>
<h2 id="适当的状态标签">适当的「状态标签」</h2>
<p>个人认为，这是4条规则中，含金量最高的标签。</p>
<p>「状态标签」是什么意思呢？ 就是文件在「工作流」内的附加信息。</p>
<p>例如：Office系统200条快捷键技巧<strong>#完成稿</strong>.pdf,
A客户信息简介#<strong>高净值</strong>.ppt，XX项目计划书#<strong>已批准</strong>.docx，</p>
<p>静态的文件并没有什么「状态」，
而实际上很多工作文件由于牵涉到「工作流」，因而都是「动态」的。随着时间的推移，流程阶段会产生变化，业务的价值本身也会起伏，文件也会有生命周期，最后可能变得毫无价值。</p>
<p>所以，如果这份文件要跟着流程「走」，最好加上「状态标签」，让使用它的人，清楚的知道这份文件的价值所在。</p>
<h2 id="参考文章">参考文章</h2>
<p><a
href="https://mp.weixin.qq.com/s?__biz=MzI2MjEyODE4OA==&amp;mid=2650475756&amp;idx=1&amp;sn=26c71fce196e8574fba69353563a5fbd&amp;chksm=f2407bbfc537f2a98edd4068ffb194a6c84849c8ad1566616b26fdccebb9495e4965c893460f&amp;scene=21#wechat_redirect">我们实践总结的
4条「文件命名」的黄金规则，文档/表格/邮件/幻灯 都适用</a></p>
]]></content>
      <categories>
        <category>Tricks</category>
      </categories>
      <tags>
        <tag>文件命名</tag>
      </tags>
  </entry>
  <entry>
    <title>电信光猫改桥接模式</title>
    <url>/posts/2021/11CAJEB.html</url>
    <content><![CDATA[<p>原使用移动宽带，由于移动宽带无法申请动态公网IP，所以家里拟改用电信宽带。在电信师傅上门安装时，我告诉他我需要光猫桥接，然而师傅一脸为难地告诉我，电信无法改桥接。我一下秒懂了。</p>
<span id="more"></span>
<p>本不想折腾，现在只能自己想办法改了。好在安装师傅人给力（诚挚感谢安装师傅！），向他要了光猫后台的超级管理员账号密码以及自己宽带的账号密码。好了，现在言归正传，正式开始。</p>
<blockquote>
<p>最重要的是要知道光猫的超级管理员密码才行</p>
</blockquote>
<h2 id="登陆光猫后台">登陆光猫后台</h2>
<p>为了能够登陆后台，路由器要改成DHCP模式，然后连接路由器的网络。当然，如果电脑有网口，直接接一根网线到光猫上也可以。</p>
<p>在浏览器中输入：<code>192.168.1.1</code></p>
<p><img data-src="https://s2.loli.net/2021/12/11/Yl4ugeOKPI6RT7W.png" /></p>
<h2 id="查看-internet-信息">查看 INTERNET 信息</h2>
<p>进入后台后，点击【网络】-&gt;【宽带设置】</p>
<p><img data-src="https://s2.loli.net/2021/12/11/JTlbfz5tHMWuDXK.png" /></p>
<p>从图中可以看见，现在封装类型显示的IPoE(有的是PPPOE，这两个都是拨号模式），连接模式为<code>路由</code>，说明是在光猫端拨的号。</p>
<p>在改桥接之前一定记住 <code>VLAN ID</code> 的值。</p>
<h2 id="改为桥接模式">改为桥接模式</h2>
<p>由于自己的连接模式可以修改，于是将连接模式改为桥接，点击保存就可以了。</p>
<h2 id="如何从光猫端中获取宽带密码">如何从光猫端中获取宽带密码</h2>
<p><img data-src="https://s2.loli.net/2021/12/11/QSLYRTkvjHZDIiO.png" /></p>
<h2 id="致谢">致谢</h2>
<p>本文是对文章 <a
href="http://www.360doc.com/content/19/0612/10/8253947_841919236.shtml">光猫改桥接如此简单</a>
的实践，诚挚感谢作者！</p>
<p>感谢电信安装师傅告知超管密码和宽带密码，减少了后期修改的麻烦，诚挚感谢！</p>
<p>感谢电信的支持，打电信客服电话，有的客服也会帮忙找技术人员处理！</p>
<p>感谢电信对公网IP的支持，这是选他家的唯一理由！</p>
]]></content>
      <categories>
        <category>Tricks</category>
      </categories>
      <tags>
        <tag>宽带</tag>
      </tags>
  </entry>
  <entry>
    <title>最全家庭关系称呼汇总</title>
    <url>/posts/2023/28RRCMN.html</url>
    <content><![CDATA[<p>亲戚称呼是指以自己为中心所确定的亲属成员，是建立在血亲姻亲基础上的亲属之间相互称呼的名称、叫法。它是以本人为轴心的确定亲属与本人关系的标志。</p>
<p>汉族的亲戚关系条理例分明尊卑有序：比自己长一辈的称呼有姨父叔伯姑舅，同辈的有兄弟姐妹嫂等等，下一辈有侄甥等等。中国人由于姻亲而产生的亲戚关系相当庞杂，本文将逐一梳理，既是解惑，亦是传承。</p>
<span id="more"></span>
<h2 id="关系计算器">关系计算器</h2>
<p><a
href="https://passer-by.com/relationship/vue/#/">亲戚关系计算器手机版</a></p>
<p><a
href="https://passer-by.com/relationship/">亲戚关系计算器电脑版</a></p>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此表示诚挚谢意！</p>
<ol type="1">
<li><a href="https://www.fuhaoku.net/tool/qinqiguanxi.html">亲戚关系称呼
中国人亲戚关系图表 在线家庭亲戚关系计算器 (fuhaoku.net)</a></li>
<li><a href="https://passer-by.com/relationship/">中国亲戚关系计算器
亲戚称谓计算器 亲戚称呼大全 (passer-by.com)</a></li>
<li><a
href="https://github.com/mumuy/relationship/">github.com/mumuy/relationship/</a></li>
</ol>
]]></content>
      <categories>
        <category>Tricks</category>
      </categories>
      <tags>
        <tag>Tricks</tag>
      </tags>
  </entry>
  <entry>
    <title>深入原理学习汽车驾驶</title>
    <url>/posts/2022/1ZBGNQC.html</url>
    <content><![CDATA[<p>本文从理论出发，深度剖析驾驶原理，从而从容面对各种复杂工况。</p>
<span id="more"></span>
<h2 id="说明">说明</h2>
<p>本文章采用的汽车数据为（单位 mm）：</p>
<table>
<thead>
<tr class="header">
<th>车长</th>
<th>车宽</th>
<th>轴距</th>
<th>前轮距</th>
<th>后轮距</th>
<th>轮胎</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>4650</td>
<td>1860</td>
<td>2712</td>
<td>1565</td>
<td>1565</td>
<td>225/60 R18</td>
</tr>
</tbody>
</table>
<p>车库尺寸为：5.8m x 3m</p>
<h2 id="汽车转弯">汽车转弯</h2>
<h3 id="转弯半径">转弯半径</h3>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220427134427047.png"
alt="image-20220427134427047" />
<figcaption aria-hidden="true">image-20220427134427047</figcaption>
</figure>
<p>汽车转弯时如上图所示，其中：</p>
<ul>
<li>L：车总长</li>
<li>a：前轴至车头距离</li>
<li>l：轴距</li>
<li>c：后轴至车尾距离</li>
<li>b：车身宽度</li>
<li>R：汽车转弯时最小外半径</li>
<li>r：汽车转弯时最小内半径</li>
<li>W：转弯时所需道路宽度</li>
<li><span class="math inline">\(\alpha\)</span>：汽车前内轮转角</li>
<li><span class="math inline">\(\beta\)</span>：汽车前外轮转角</li>
</ul>
<h3 id="alpha-与-beta-的关系"><span
class="math inline">\(\alpha\)</span> 与 <span
class="math inline">\(\beta\)</span> 的关系</h3>
<p>在转弯时，前面两个轮子的转弯角度是不一样的，因为汽车在行驶过程中(直线和转弯时候)，每个车轮的运动轨迹必须符合他的自然运动轨迹，从而保证轮胎与地面始终处于纯滚动状态。</p>
<p>他们之间的关系为：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/阿克曼几何图示.png"
alt="阿克曼几何图示" /> <span class="math display">\[
cot\alpha - cot\beta = K/L
\]</span></p>
<ul>
<li><span class="math inline">\(\beta\)</span> - 汽车前外轮转角</li>
<li><span class="math inline">\(\alpha\)</span> - 汽车前内轮转角</li>
<li>K - 两主销中心距</li>
<li>L - 轴距（上图中）</li>
</ul>
<blockquote>
<p>具体的原理可以参考<a
href="https://en.wikipedia.org/wiki/Ackermann_steering_geometry">阿克曼几何</a>。</p>
</blockquote>
<h3 id="最小内侧半径-r">最小内侧半径 r</h3>
<p>最小内侧半径为右后轮外侧处的半径，其公式如下： <span
class="math display">\[
\begin{aligned}
tan \alpha = l/r \\
r= l/tan\alpha=l \cdot ctan \alpha
\end{aligned}
\]</span></p>
<h3 id="最大外侧半径-r">最大外侧半径 R</h3>
<p>最大外侧半径为左车头的半径，根据勾股定理有： <span
class="math display">\[
\begin{aligned}
R^2 &amp;=(l+a)^2+(b+r)^2 \\
R^2 &amp;=(l+a)^2+(b+b.ctan\alpha)^2 \\
所以：R &amp;= \sqrt{(l+a)^2+(b+b.ctan\alpha)^2}
\end{aligned}
\]</span> ### 转弯道路宽度</p>
<p><span class="math display">\[
\begin{aligned}
W = R -r
\end{aligned}
\]</span></p>
<h3 id="内轮差">内轮差</h3>
<p>在汽车行驶过程中，前内轮能过去的地方，后轮不一定能通过，所以需要使用内轮差来进行判断。即当障碍物垂直于内轮的距离大于内轮差时，后轮肯定也可以通过。</p>
<p>内轮差的计算公式如下： <span class="math display">\[
d_{内轮差} = r/cos \alpha - r
\]</span></p>
<h3 id="汽车转弯时最大速度">汽车转弯时最大速度</h3>
<p>由物理学公式： <span class="math display">\[
\begin{aligned}
F_{离心力} &amp;=m\times a\\
a &amp;=\omega ^2 \cdot r = v^2/r \\
\end{aligned}
\]</span></p>
<ul>
<li>F-离心力</li>
<li>m-汽车质量</li>
<li><span class="math inline">\(\omega\)</span>-角速度</li>
<li><span class="math inline">\(v\)</span>-速度</li>
<li>r-半径</li>
</ul>
<p><span class="math display">\[
\begin{aligned}
\therefore v= \sqrt{F_{离心力} \cdot r/{m}}
\end{aligned}
\]</span></p>
<p>汽车在转弯过程中，通过汽车与地面的摩擦力来克服汽车的离心力，所以有：
<span class="math display">\[
\begin{aligned}
\because F_{摩擦} &amp;= \mu \cdot m \cdot g \\
\therefore v &amp;= \sqrt{\mu \cdot g \cdot r}
\end{aligned}
\]</span></p>
<ul>
<li><span class="math inline">\(\mu\)</span> -
汽车与需的摩擦系数，不同类型的路面其值不同</li>
<li>g- 重力加速度，可取 <span class="math inline">\(9.8 \
m/s^2\)</span></li>
</ul>
<h3 id="常用数值表">常用数值表</h3>
<p>根据上述公式，计算了一些常用转向角对应的值，方便取用（单位：m）。</p>
<table style="width:100%;">
<colgroup>
<col style="width: 26%" />
<col style="width: 25%" />
<col style="width: 34%" />
<col style="width: 13%" />
</colgroup>
<thead>
<tr class="header">
<th>内轮角 <span class="math inline">\(\theta\)</span> (单位：度)</th>
<th>r <span class="math inline">\((l \cdot ctan \alpha)\)</span></th>
<th><span class="math inline">\(d_{内轮差} \ (r/cos \alpha -
r)\)</span></th>
<th>l = 2.712</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>5</td>
<td>11.4 l</td>
<td>0.04 l</td>
<td>r=31.0, d=0.1</td>
</tr>
<tr class="even">
<td>10</td>
<td>5.7 l</td>
<td>0.09 l</td>
<td>r=15.4, d=0.2</td>
</tr>
<tr class="odd">
<td>15</td>
<td>3.7 l</td>
<td>0.13 l</td>
<td>r=10.1, d=0.4</td>
</tr>
<tr class="even">
<td>20</td>
<td>2.7 l</td>
<td>0.18 l</td>
<td>r=7.5, d=0.5</td>
</tr>
<tr class="odd">
<td>25</td>
<td>2.1 l</td>
<td>0.22 l</td>
<td>r=5.8, d=0.6</td>
</tr>
<tr class="even">
<td>30</td>
<td>1.7 l</td>
<td>0.27 l</td>
<td>r=4.7, d=0.7</td>
</tr>
<tr class="odd">
<td>35</td>
<td>1.4 l</td>
<td>0.32 l</td>
<td>r=3.9, d=0.9</td>
</tr>
<tr class="even">
<td>40</td>
<td>1.2 l</td>
<td>0.36 l</td>
<td>r=3.2, d=1.0</td>
</tr>
</tbody>
</table>
<h2 id="倒车入库轨迹">倒车入库轨迹</h2>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220427214126353.png"
alt="image-20220427214126353" />
<figcaption aria-hidden="true">image-20220427214126353</figcaption>
</figure>
<p>倒车入库如上图所示，参数说明如下：</p>
<ul>
<li>d: 倒车时车尾距离目标车库边界的距离</li>
<li>e: 开始倒车时车侧边距离车库入库线距离</li>
<li>f: 车库入库线距离圆心的竖向距离</li>
<li>g: 车库宽度</li>
</ul>
<p>通过结合汽车转弯半径图示，d、e、f 值如下：</p>
<p><strong>d：</strong></p>
<p>由几何关系得 <span class="math display">\[
\begin{aligned}
d &amp;= r-(g-b)/2
\end{aligned}
\]</span> <strong>f：</strong></p>
由勾股定理得 <span class="math display">\[
\begin{aligned}
r^2 &amp;= d^2+f^2  \\
f &amp;= \sqrt{r^2-d^2} \\
\end{aligned}
\]</span> f 按<a
href="https://www.bilibili.com/read/cv9813111">连分数法</a>求解： $$
<span class="math display">\[\begin{aligned}
当 \ s &amp;= a^2+b \ (a^2 &gt;= b) \ 时 \\
有 \ \sqrt{s} &amp;= a+ \frac{b}{a+\sqrt{s}} \\

\therefore f &amp;= r + \frac{-d^2}{r+r+0}
（按一层近似计算,f值会偏大）\\
f &amp;= r + \frac{-d^2}{2r}
\end{aligned}\]</span>
<p>$$</p>
<p><strong>e:</strong></p>
<p>由几何关系得 <span class="math display">\[
\begin{aligned}
e = r-f
\end{aligned}
\]</span> 在倒车入库时，一般关心的值是 d 和
e，倒车时一般满打方向盘，所以 <span
class="math inline">\(\theta\)</span> 取最大值（35度）。</p>
按《汽车库设计规范》JGJ100-98第4.1.4条规定：小型汽车与左右两侧墙面的最小距离应为0.6m，与前后墙面的最小距离应为0.5m。(g-b)/2
按取常量 0.6m，从而可以计算得： $$
<span class="math display">\[\begin{aligned}
d &amp;= 1.4l - 0.6 \\

f &amp;= 0.7l +0.6 - \frac{0.129}{l} \\
\because &amp; \  \frac{0.129}{l} \ 太小，舍去 \\
\therefore f&amp;=0.7l+0.6 \\
e &amp;= r-f = 0.7l-0.6
\end{aligned}\]</span>
<p>$$</p>
<p>对于本文所使用的车型，可以得： <span class="math display">\[
\begin{aligned}
f&amp;=0.7l+0.6 = 0.7*2.712+0.6 = 2.2272 \\
\end{aligned}
\]</span> 由于在推导 f 过程中，使用连分数法时只计算到第一层，现在再用 f
值迭代到第二层，于是有： <span class="math display">\[
\begin{aligned}
f &amp;= r + \frac{-d^2}{r+r+\frac{-d^2}{r+\sqrt{2.2272}}} \\
r &amp;= 1.4l = 3.7968 \\
d &amp;= 1.4l - 0.6 = 3.1968 \\
\\
\therefore f&amp;= 1.991 \\
e &amp;= r-f=1.8018
\end{aligned}
\]</span> <strong>结论：</strong></p>
<p>对于轴距为 2.7m 左右的车，其车轮后轴距车库边线距离至少应为
3.1968m，侧边距离入库边线至少为 1.8018m。</p>
<p>当起始位置非图示水平，且车辆位于水平位置左侧时，上述值会相应的减少。</p>
<h2 id="侧方停车轨迹">侧方停车轨迹</h2>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220502130259206.png"
alt="image-20220502130259206" />
<figcaption aria-hidden="true">image-20220502130259206</figcaption>
</figure>
<p>其中，蓝色线代表后轮轨迹，绿色线代表前轮轨迹。</p>
<p>在进行右侧方位停车时，主要有以下步骤：</p>
<ol type="1">
<li>自己的车与右侧库边线保持 30cm 距离</li>
<li>在后轴越过目标车库边线时，开始向右满打方向盘</li>
<li>待到车身与入库边线程 48度角（建议45~48度）时，反向打满方向盘</li>
<li>即可一把倒车入库</li>
</ol>
<h3 id="入库时车辆左侧道路最小宽度-h">入库时车辆左侧道路最小宽度 <span
class="math inline">\(h\)</span></h3>
$$
<span class="math display">\[\begin{aligned}
R_{界外} &amp;= r + 0.3 + b + h  \\
R_{界外}^2 &amp;= (r+0.3+b)^2 + (l+a)^2 \\

\therefore R &amp;= \sqrt{(r+0.3+b)^2 + (l+a)^2} \\
h &amp;= \sqrt{(r+0.3+b)^2 + (l+a)^2} - r -0.3 - b
\end{aligned}\]</span>
<p>$$</p>
<p>对于不同的车型，可以代入上述公式，计算其左侧距离。</p>
<p>本文中所用车型参数按卡式计算得，<span
class="math inline">\(h=1.22m\)</span>。</p>
<h3 id="一把出库时最小车前距-l_2">一把出库时最小车前距 <span
class="math inline">\(L_2\)</span></h3>
<p><span class="math display">\[
L2 = r \times tan \gamma
\]</span></p>
<blockquote>
<p>为什么 <span class="math inline">\(\gamma\)</span> 建议取 45~48
度呢？</p>
<p>可以通过公式证明，但是比较复杂，笔者就不再这里证明了。</p>
</blockquote>
<h2 id="车距判断">车距判断</h2>
<p>在行车过程中，在车内如何判断车头各部位的距离也非常重要。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220502143520209.png"
alt="image-20220502143520209" />
<figcaption aria-hidden="true">image-20220502143520209</figcaption>
</figure>
<ul>
<li>L1- 驾驶员垂直于车头的距离</li>
<li>L2 - 驾驶员垂直于车身的左侧距离</li>
<li>L3- 驾驶员垂直于车身的右侧距离</li>
<li>H1- 地面距车头右边界高度</li>
<li>H2- 地面距车头左边界高度</li>
<li>H3- 驾驶员眼睛距地面高度</li>
</ul>
<p>由上图可知，视野中，周围的障碍物在视野中必须低于前车的高度，才不会与自己的车剐蹭。在实际中，可以在车内寻找特征点判断车距。</p>
<h2 id="行车安全距离控制">行车安全距离控制</h2>
<table>
<thead>
<tr class="header">
<th>车速</th>
<th>距离</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>$v $100km/h</td>
<td><span class="math inline">\(D \ge 100m\)</span></td>
</tr>
<tr class="even">
<td><span class="math inline">\(100km/h \ge v \ge 60 km/h\)</span></td>
<td><span class="math inline">\(D=v\)</span></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(60km/h \ge v \ge 40\)</span></td>
<td>50m</td>
</tr>
<tr class="even">
<td><span class="math inline">\(v \lt 40 km/h\)</span></td>
<td>30m</td>
</tr>
</tbody>
</table>
<p>上表中仅为正常行驶状态下的参考值，
在实际行车中，最好按照反应时间来根据自身条件进行估算，其公式如下： <span
class="math display">\[
T = T_{反应时间} + T_{刹车时间}+T_{制动后与前车安全距离时间等效}
\]</span> T 一般取 3 秒。</p>
<h2 id="参考">参考</h2>
<p><a
href="https://blog.csdn.net/bisal/article/details/106232934">了解阿克曼转向原理的作用</a></p>
<p><a
href="https://www.pcauto.com.cn/jxwd/2065/20654165.html">标准车库尺寸是多少</a></p>
]]></content>
      <categories>
        <category>Tricks</category>
      </categories>
      <tags>
        <tag>汽车驾驶</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>使用草料二维码免费生成挪车码</title>
    <url>/posts/2024/2Z6NVCZ.html</url>
    <content><![CDATA[<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240222222605912.png"
alt="image-20240222222605912" />
<figcaption aria-hidden="true">image-20240222222605912</figcaption>
</figure>
<p>一些车主为了方便挪车，往往会在车上留下自己的电话，方便其他人及时与自己取得联系。直接展示电话号码的形式，会使号码非常容易泄露，从而遭受广告骚扰。</p>
<p>因此，可以将挪车信息转换成二维码的形式，避免电话号码直接曝光，从而保护隐私。</p>
<span id="more"></span>
<p>读者使用 <a href="https://cli.im/vcard">草料名片二维码生成器
(cli.im)</a> 来生成名片二维码，然后贴到前窗玻璃上，二维码效果如下：</p>
<p><img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240222223029386.png" alt="image-20240222223029386" style="max-width:min(100%,300px)" /></p>
]]></content>
      <categories>
        <category>Tricks</category>
      </categories>
      <tags>
        <tag>二维码</tag>
        <tag>挪车码</tag>
      </tags>
  </entry>
  <entry>
    <title>摩智键盘蓝牙使用说明</title>
    <url>/posts/2022/1W9B310.html</url>
    <content><![CDATA[<p>很久以前买了一个蓝牙键盘（Mozhi，摩智），当时闲充电麻烦，就一直用的有线，今天突然想改无线、切换下光效，却忘记了怎么配置，然后联系卖家，发现卖家厂家都已经倒闭了。最后通过回忆与尝试，摸索了出来，遂将其总结如下：</p>
<span id="more"></span>
<h2 id="蓝牙连接">蓝牙连接</h2>
<ol type="1">
<li>先打开蓝牙，在后侧有个开关，拨向数字键盘方向</li>
<li>长按 <code>Fn</code> + <code>Tab</code> 键，直到 <code>Esc</code>
闪烁，同时 <code>scroll lock</code> 也会亮起来</li>
<li>通过电脑的蓝牙连接就可以了</li>
</ol>
<blockquote>
<p>该键盘有3个蓝牙信道，按 Fn+1~3
可以切换，不同的信道，可以连接不同的设备，方便切换。</p>
</blockquote>
<h2 id="有线连接">有线连接</h2>
<p>将键盘后侧的开关拨向 esc 键方向，然后连接有线即可。</p>
<h2 id="快捷键">快捷键</h2>
<p>键盘的快捷键有：Fn+(F1~F11、↑↓、-=)</p>
<h2 id="修改灯光">修改灯光</h2>
<p>Fn + insert 键循环切换灯光</p>
<p>Fn + -= 灯速调节</p>
]]></content>
      <categories>
        <category>Tricks</category>
      </categories>
      <tags>
        <tag>蓝牙键盘</tag>
      </tags>
  </entry>
  <entry>
    <title>管理 Microstation CE 版本的环境配置</title>
    <url>/posts/2019/7W71XB.html</url>
    <content><![CDATA[<p>本文将解释如何构建和管理 MicroStation CONNECT Edition（以下简称 MS ）
的环境配置</p>
<span id="more"></span>
<h2 id="概述">概述</h2>
<p>Microstation 通过配置变量（configuration
variables）来引导软件配置向正确的位置。</p>
<p><strong>配置变量</strong> 被组织成以 <em>USTN</em> 前缀开始的
<strong>框架配置变量（Framework Configuration Variables）</strong>和以
MS_ 为前缀开始的 <strong>操作配置变量（Operational Configuration
Variables)</strong>。通常，框架配置变量用于设置基本路径，而操作配置变量用于指导
MS
内的程序流程。一些框架配置变量由MicroStation安装文件夹决定。其他框架配置变量默认设置为相对于安装文件夹的位置，但是可以在用户提供或编辑的配置文件中更改。</p>
<p>MS 的
配置文件处理可以看作是一个简单的程序，其中一部分由系统配置文件提供，不应该由用户修改，另一部分由用户可修改的配置文件提供。所有配置文件都是简单的文本文件，可以使用任何文本编辑器检查，修改。</p>
<p>系统配置文件位于
<code>C:\Program Files\Bentley\MicroStation CONNECT Edition\MicroStation\config</code>
文件夹,同时用户可以修改的配置文件位于安装目录或其他指定的目录。系统配置文件在适当的时候将用户可修改的配置文件包含到配置文件处理流中。</p>
<h3 id="ms-配置">MS 配置</h3>
<h4 id="ms-默认配置目录">MS 默认配置目录</h4>
<p>MS 默认配置目录为
<code>C:\Program Files\Bentley\MicroStation CONNECT Edition\MicroStation\Default\</code></p>
<h4 id="ms-配置目录结构">MS 配置目录结构</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line"></span><br><span class="line">0&#123;配置结构&#125;--&gt;1[Configuration];</span><br><span class="line">    1--&gt;11(Workspaces);</span><br><span class="line">        11--&gt;111(Example);</span><br><span class="line">            111--&gt;1111(Standards);</span><br><span class="line">                1111--&gt;11111(Cell);</span><br><span class="line">                1111--&gt;11112(DgnLib);</span><br><span class="line">                    11112--&gt;111121(GUI);</span><br><span class="line">            111--&gt;1112(WorkSets);</span><br><span class="line">                1112--&gt;11121(Building);</span><br><span class="line">                    11121--&gt;111211(Data);</span><br><span class="line">                    11121--&gt;111212(DGN);</span><br><span class="line">                    11121--&gt;111213(DWG);</span><br><span class="line">                    11121--&gt;111214(Out);</span><br><span class="line">                    11121--&gt;111215(Standars);</span><br><span class="line">                        111215--&gt;1112151(Cell);</span><br><span class="line">                        111215--&gt;1112152(DgnLib);</span><br><span class="line">                        111215--&gt;1112153(Seed);</span><br><span class="line">                        111215--&gt;1112154(Etc...);</span><br><span class="line">                1112--&gt;11122(Civil);</span><br><span class="line">                    11122--&gt;111221(Data);</span><br><span class="line">                    11122--&gt;111222(Etc...);</span><br><span class="line">                1112--&gt;11123(General);</span><br><span class="line">                    11123--&gt;111231(Data);</span><br><span class="line">                    11123--&gt;111232(Etc...);</span><br><span class="line">                1112--&gt;11124(Etc...);</span><br><span class="line">0--&gt;2[Organization];</span><br><span class="line">    2--&gt;21(Cell);</span><br><span class="line">    2--&gt;22(Data);</span><br><span class="line">    2--&gt;23(Dgn);</span><br><span class="line">    2--&gt;24(DgnLib);</span><br><span class="line">        24--&gt;241(ClashDetection);</span><br><span class="line">        24--&gt;242(DrawComp);</span><br><span class="line">        24--&gt;243(Etc...);</span><br><span class="line">    2--&gt;25(Macros);</span><br><span class="line">    2--&gt;26(Mareials);</span><br><span class="line">        26--&gt;261(Bump);</span><br><span class="line">        26--&gt;262(Pattern);</span><br><span class="line">    2--&gt;27(MdlApps);</span><br><span class="line">        27--&gt;271(InteInt)</span><br><span class="line">    2--&gt;28(Pltcfg);</span><br><span class="line">    2--&gt;29(Seed);</span><br><span class="line">    2--&gt;210(Spc);</span><br><span class="line">    2--&gt;211(Symb);</span><br><span class="line">    2--&gt;212(Tables);</span><br><span class="line">        212--&gt;2121(Dwg);</span><br><span class="line">        212--&gt;2122(PEN)</span><br><span class="line">    2--&gt;213(VBA);</span><br></pre></td></tr></table></figure>
<!--
上述为mermaid图，可能因为网站问题，不能显示，可见下面的文字表示：
- 配置结构
  - Configuration
    - Workspaces
        - Example            
        - Standards
            - Cell
            - DgnLib
                - GUI
    - WorkSets
    - Building
            - Data
            - DGN
            - DWG
            - Out
            - Standars
                - Cell
                - DgnLib
                - Seed
                - Etc...
        - Civil
            - Data
            - Etc...
        - General
            - Data
            - Etc...
    - Etc...
  - Organization
    - Cell
    - Data
    - Dgn
    - DgnLib
    - ClashDetection
      - DrawComp
      - Etc...
    - Macros
    - Mareials
    - Bump
    - Pattern
    - MdlApps

      - InteInt
    - Pltcfg
    - Seed
    - Spc
    - Symb
    - Tables
      - Dwg
      - PEN
    - VBA
    -->
<h4 id="关于configuration目录">关于Configuration目录</h4>
<p>此处至少有两个文件夹和一个文件，如果是基于 MS
平台的其它产品，还可能会有更多的文件夹及文件。</p>
<p><code>\Organization</code> 文件夹是组织 CAD
标准所在的位置。可以通过在配置文件中使用
<code>_USTN_ORGANIZATION</code>（ORD 是
<code>_USTN_CUSTOM_CONFIGURATION</code>）指向不同的位置。该配置在
<code>ConfigurationSetup.cfg</code>中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_USTN_CUSTOM_CONFIGURATION=C:\MyOrganization\</span><br><span class="line">或者：_USTN_CUSTOM_CONFIGURATION=你的服务器配置地址\</span><br></pre></td></tr></table></figure>
<p><code>MicroStation CONNECT Edition</code> 中的
<code>\WorkSpaces</code>
文件夹是工作集、设计文件、标准文件和配置文件的容器。<code>.cfg</code>
文件是一个配置文件，可以将MS 的环境配置重定向到服务器或其他位置上。</p>
<h4 id="关于organization目录">关于Organization目录</h4>
<p>组织文件夹是存储自己的组织、单元格、dgnlib 和其他与 CAD
标准相关的数据的地方。这些文件夹是空的，通过配置
<code>standard .cfg</code>
文件告诉MicroStation在何处查找种子文件等特定项。</p>
<h3 id="配置变量定义及语法">配置变量定义及语法</h3>
<h3 id="配置文件加载顺序">配置文件加载顺序</h3>
<p>配置文件处理从配置文件 <code>mslocal.cfg</code> 开始。它是启动
MicroStation
时打开的第一个文件，是一个简短的文件。<code>mslocal.cfg</code> 包含
<code>msdir.cfg</code>，<code>msdir.cfg</code>
是在安装时生成的另一个小配置文件，它标识 MicroStation
安装文件夹，然后包含 <code>msconfig.cfg.cfg</code>
文件包含处理事件的大部分配置文件。</p>
<p>永远不要修改 <code>msconfig.cfg</code> 本身(或 MicroStation
程序文件夹中的任何其他配置文件)，也不要在这个位置添加自己的配置文件。<code>msconfig.cfg</code>
中有许多已经定义好的，包含用户可修改的配置文件。在这些用户可修改的配置文件中，可以修改配置变量，以提供所有必要的灵活性，以满足组织对项目数据位置和
CAD 标准的需求。</p>
<p>当然，如果已经对配置文件理解得很透彻，则任何配置文件都可以修改。</p>
<p><code>msconfig.cfg</code> 配置文件首先设置
<code>_USTN_BENTLEYROOT</code>
配置变量和一些框架配置变量，这些配置变量指向安装程序数据的目录。这些是程序操作所必需的，且不为任何用户数据或文件定义的位置。然后还包含MicroStation附带的系统和应用程序配置文件。</p>
<p><code>msconfig.cfg</code>
文件被完全重新组织，行内文档解释了它的作用。<code>msconfig.cfg</code>
文件没有定义任何 MS_xxx(操作型)配置变量。</p>
<p>下面是配置文件的加载顺序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mslocal.cfg--&gt;msdir.cfg--&gt;msconfig.cfg</span><br></pre></td></tr></table></figure>
<p>在 <code>msconfig.cfg</code>
文件中，会按照顺序先后加载配置配置文件，配置文件的顺序按照出现在
<code>msconfig.cfg</code>
中定义的先后顺序，注意不要修改其顺序，修改后可能导致系统出现意外的错误。加载顺序如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">all system cfg files</span><br><span class="line">all appl cfg files</span><br><span class="line">workspacesetup.cfg files</span><br><span class="line">all organization cfg files</span><br><span class="line">personal.ucf file</span><br><span class="line">workspace&lt;name&gt;.cfg file</span><br><span class="line">all workspace cfg files</span><br><span class="line">workset&lt;name&gt;.cfg files</span><br><span class="line">all workset cfg files</span><br><span class="line">role.cfg file</span><br><span class="line">database cfg file</span><br></pre></td></tr></table></figure>
<blockquote>
<h6 id="参考资料">参考资料</h6>
</blockquote>
<p>[1] . <a href="learn.bentley.com">Managing Configurations in
MicroStation CONNECT Edition</a> [2]. <a href="c:\">help</a></p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Custom</category>
      </categories>
      <tags>
        <tag>Microstation</tag>
      </tags>
  </entry>
  <entry>
    <title>Connect Client 提示无法安全地连接到此页面</title>
    <url>/posts/2021/3ZSEX8G.html</url>
    <content><![CDATA[<figure>
<img data-src="https://img.uamazing.cn:52443/2021/11/1637736446_企业微信截图_16377355973798.png"
alt="企业微信截图_16377355973798.png" />
<figcaption
aria-hidden="true">企业微信截图_16377355973798.png</figcaption>
</figure>
<span id="more"></span>
<p>当打开 Connect Client，如果提示 ”无法安全地连接到此页面”，并出现 “TLS
安全设置未设置为默认设置” 等提示时（如上图），可以采用如下方法处理：</p>
<p>打开 IE &gt; 设置 &gt; Internet 选项 &gt; 高级 &gt; 勾选 TLS1.0
;TLS1.1 ;TLS1.2 &gt; 确定。</p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Problems</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
        <tag>Bentley问题处理</tag>
      </tags>
  </entry>
  <entry>
    <title>ORD打印图片是黑色</title>
    <url>/posts/2021/1P39N8S.html</url>
    <content><![CDATA[<p>在 ORD
中进行批量打印时，发现无法打印图片，图片范围全是黑色的，可以通过如下方式解决：</p>
<figure>
<img data-src="https://img.uamazing.cn:52443/2021/11/1638153837_企业微信截图_16366214984716.png"
alt="企业微信截图_16366214984716.png" />
<figcaption
aria-hidden="true">企业微信截图_16366214984716.png</figcaption>
</figure>
<p>将 <code>Print raster images</code> 勾选即可。</p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Problems</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
        <tag>Bentley问题处理</tag>
      </tags>
  </entry>
  <entry>
    <title>ORD安装完成一打开报错</title>
    <url>/posts/2021/WYBXRB.html</url>
    <content><![CDATA[<p>在ORD安装完成后，一打开软件就弹出崩溃界面，在错误文件的
<code>Managed Call Stack:</code> 处有如下错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Managed Call Stack:</span><br><span class="line"> 0: Boolean get_EnablePerformanceChanges() from Bentley.ECObjects.ECObjects in Bentley.ECObjects3, Version=1.0.0.0, Culture=neutral, PublicKeyToken=4bf6c96a266e58d4</span><br><span class="line"> 1: Bentley.DgnPlatformNET.BentleyStatus Initialize() from Bentley.DgnPlatformNET.DgnPlatformLib in Bentley.DgnPlatformNET, Version=1.0.0.0, Culture=neutral, PublicKeyToken=4bf6c96a266e58d4</span><br><span class="line"> 2: UInt32 wWinMainCRTStartup()</span><br><span class="line"> 3: UInt32 wWinMainCRTStartup()</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>然后查找 <code>imodelSDKBinPath</code>，其值如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">imodelSDKBinPath=G:\PKPMV51\EXPPWI</span><br></pre></td></tr></table></figure>
<p>所以猜想是 PKPM 软件导致了 Benetley 的 imodel 模块出现了问题。</p>
<p>接着在【应用和功能】中找到 <code>PMTolModel_GAC</code>
将其卸载。至此，ORD 终于可以正常打开了。</p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Problems</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
        <tag>Bentley问题处理</tag>
      </tags>
  </entry>
  <entry>
    <title>ORD u9中无法编辑或者插入 Excel 表</title>
    <url>/posts/2021/31QX5RZ.html</url>
    <content><![CDATA[<p>最近将 ORD 升级到了 u9，发现以前在 dgn
中插入的表格无法打开编辑了。遇到这种情况，一般都是 ORD 的 OLE
管理模块没有加载导致的。</p>
<span id="more"></span>
<p>可以在程序中按 F9 或者 Enter 打开 Keyin
窗体，在里面输入下列命令，手动加载模块即可解决。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mdl load olecntr</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Problems</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
        <tag>Bentley问题处理</tag>
      </tags>
  </entry>
  <entry>
    <title>ORD 环境变量汇总</title>
    <url>/posts/2020/2HMJJW9.html</url>
    <content><![CDATA[<p>进行 Bentley
系列产品修改化自定时，首先需要对环境变量进行配置，将特定的环境变量指向自定义的位置，所以在此处对
ORD 的环境变量进行系统的归纳。</p>
<span id="more"></span>
<hr />
<h2 id="system-environment-category">System Environment Category</h2>
<hr />
<table style="width:100%;">
<colgroup>
<col style="width: 32%" />
<col style="width: 14%" />
<col style="width: 36%" />
<col style="width: 8%" />
<col style="width: 8%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_CONFIG</td>
<td>Filename</td>
<td>Main Configuration File</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>RSC_COMP</td>
<td>Command Line</td>
<td>Resource Compiler Command Line</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MDL_COMP</td>
<td>Command Line</td>
<td>MDL Compiler Command Line</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>BMAKE_OPT</td>
<td>Command Line</td>
<td>BMAKE Options</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_DEBUGMDLHEAP</td>
<td>Keyword</td>
<td>Extended Malloc</td>
<td>NO</td>
<td>NO</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="configuration-category">Configuration Category</h2>
<hr />
<table style="width:100%;">
<colgroup>
<col style="width: 27%" />
<col style="width: 10%" />
<col style="width: 50%" />
<col style="width: 6%" />
<col style="width: 6%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_TEMPLATEEXTENDER_APPS</td>
<td>Filelist</td>
<td>Element Template Extender Applications</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_USERPREF_APPS</td>
<td>Filelist</td>
<td>User Preference Applications</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MSDIR</td>
<td>Directory</td>
<td>$[_USTN_PRODUCT_NAME] Dir</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MSLOCAL</td>
<td>Directory</td>
<td>$[_USTN_PRODUCT_NAME] Dir (Local)</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>_USTN_DEFUSERINTNAME</td>
<td>Directory</td>
<td>Default Interface Subdirectory</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>_USTN_USERINTNAME</td>
<td>Directory</td>
<td>Interface Subdirectory</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>_USTN_USERINTROOT</td>
<td>Directory</td>
<td>Interface Root Dir</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>_USTN_USERINT</td>
<td>Directory</td>
<td>Interface Base Data Dir</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>_USTN_WORKSETNAME</td>
<td>Base Name</td>
<td>Base WorkSet Name</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>_USTN_USERCFG</td>
<td>Filename</td>
<td>User Configuration File</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>_USTN_USERNAME</td>
<td>Base Name</td>
<td>Base User Name</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>_USTN_USERDESCR</td>
<td>Keyword</td>
<td>User Description</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>_USTN_USER</td>
<td>Directory</td>
<td>User Configuration Files</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>_USTN_WORKSETDGNWS</td>
<td>Search Path</td>
<td>WorkSet full path</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>_USTN_WORKSETSDGNWSROOT</td>
<td>Search Path</td>
<td>WorkSets file root directory</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>_USTN_TEMPLATEWORKSETNAME</td>
<td>Search Path</td>
<td>WorkSpace template</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>_USTN_TEMPLATEWORKSPACENAME</td>
<td>Search Path</td>
<td>WorkSpace template</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>_USTN_WORKSETDGNWSTEMPLATE</td>
<td>Search Path</td>
<td>WorkSpace template</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>_USTN_WORKSETTEMPLATE</td>
<td>Search Path</td>
<td>WorkSet template</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>_USTN_WORKSPACECFG</td>
<td>Search Path</td>
<td>WorkSpace configuration</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>_USTN_WORKSPACELABEL</td>
<td>Search Path</td>
<td>WorkSpace label</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>_USTN_WORKSPACENAME</td>
<td>Search Path</td>
<td>WorkSpace name</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>_USTN_WORKSPACEROOT</td>
<td>Search Path</td>
<td>WorkSpace Root Directory</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>_USTN_WORKSPACESROOT</td>
<td>Search Path</td>
<td>WorkSpaces Root Directory</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>_USTN_WORKSPACESTANDARDS</td>
<td>Search Path</td>
<td>WorkSpaces standards</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>_USTN_WORKSPACETEMPLATE</td>
<td>Search Path</td>
<td>WorkSpace template file</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>_USTN_WORKSETSTANDARDSDIRNAME</td>
<td>Search Path</td>
<td>WorkSet Standards Files Directory Name</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>_USTN_WORKSETSTANDARDS</td>
<td>Search Path</td>
<td>WorkSet Standards Files</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>_USTN_WORKSETDGNSDIRNAME</td>
<td>Search Path</td>
<td>Design Files Directory Name</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>_USTN_WORKSETDGNS</td>
<td>Search Path</td>
<td>Design Files</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>_USTN_WORKSETROOT</td>
<td>Directory</td>
<td>WorkSet Root Directory</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>_USTN_WORKSETSROOT</td>
<td>Directory</td>
<td>WorkSets Root Directory</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>_USTN_DATABASE</td>
<td>Directory</td>
<td>Database Configuration Files</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>_USTN_ORGANIZATION</td>
<td>Directory</td>
<td>Organization Configuration Files</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>_USTN_APPL</td>
<td>Directory</td>
<td>Application Config Files</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>_USTN_CONFIGURATION</td>
<td>Directory</td>
<td>Configuration Root Directory</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>_USTN_SYSTEMROOT</td>
<td>Directory</td>
<td>Workspace System Directory</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>_USTN_SYSTEM</td>
<td>Directory</td>
<td>System Configuration Files</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>_USTN_DATABASECFG</td>
<td>Filename</td>
<td>Database Configuration File</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>_USTN_DATABASENAME</td>
<td>Base Name</td>
<td>Database Name</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>_VERSION89</td>
<td>Keyword</td>
<td>Version Number</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>_PLATFORMNAME</td>
<td>Keyword</td>
<td>Platform Name</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>_WORKDIR</td>
<td>Directory</td>
<td>Working Directory</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>_USTN_HOMEROOT</td>
<td>Directory</td>
<td>Local Product-specific Data Directory</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>_USTN_HOMEPREFS</td>
<td>Directory</td>
<td>Local Preferences Directory</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>_USTN_CAPABILITY_V7</td>
<td>Keyword</td>
<td>V7 Workmode Capabilities</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>_USTN_CAPABILITY_DGN</td>
<td>Keyword</td>
<td>DGN Workmode Capabilities</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>_USTN_CAPABILITY_DWG</td>
<td>Keyword</td>
<td>DWG Workmode Capabilities</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>_USTN_CAPABILITY</td>
<td>Keyword</td>
<td>$[_USTN_PRODUCT_NAME] Capabilities</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>_USTN_BENTLEYROOT</td>
<td>Directory</td>
<td>Bentley Root Directory</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>_USTN_WORKSPACESTANDARDSUBDIRS</td>
<td>Filelist</td>
<td>WorkSpace Standard Subdirectories</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>_USTN_WORKSETSTANDARDSUBDIRS</td>
<td>Filelist</td>
<td>WorkSet Standard Subdirectories</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MSDIR_INSTALLED</td>
<td>Directory</td>
<td>Executable Directory</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>_ROOTDIR</td>
<td>Directory</td>
<td>Executable Directory</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>_USTN_OUTDIRNAME</td>
<td>Directory</td>
<td>Output Base Directory Name</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>_USTN_OUT</td>
<td>Directory</td>
<td>Output Base Directory</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>_USTN_NEWDGNFILE</td>
<td>Filelist</td>
<td>MDL Apps Loaded on New Design File</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>_USTN_FIRSTDGNFILE</td>
<td>Filelist</td>
<td>MDL Apps Loaded on First Design File</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>_USTN_REQUIREDAPPS</td>
<td>Filelist</td>
<td>Required MDL Applications</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>_USTN_DISPLAYALLCFGVARS</td>
<td>Boolean</td>
<td>Config Var Display Flag</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>_ENGINENAME</td>
<td>Keyword</td>
<td>Foundation Product</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>_USTN_CUSTOM_CONFIGURATION</td>
<td>Keyword</td>
<td>Defines the path of your custom Configuration directory</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>$[_USTN_PRODUCT_CONFIGVARNAME]</td>
<td>Boolean</td>
<td>Product</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>_INTELNT</td>
<td>Boolean</td>
<td>Operating System</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>_WINNT</td>
<td>Boolean</td>
<td>Operating System</td>
<td>YES</td>
<td>NO</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="all-lists-only">ALL lists only</h2>
<hr />
<table>
<colgroup>
<col style="width: 37%" />
<col style="width: 7%" />
<col style="width: 44%" />
<col style="width: 5%" />
<col style="width: 5%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_NAMEDCOMMANDSLIST</td>
<td>Filelist</td>
<td>Named Command Definitions XML File List</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>_USTN_PRIMARY_RIBBONRSCLIST</td>
<td>Filelist</td>
<td>Primary Ribbon Resource File List</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_DGNINDEXER_PORT</td>
<td>Keyword</td>
<td>DGN Indexer port</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_ANNOTATIONSCALEPROPAGATION</td>
<td>Keyword</td>
<td>Model Annotation Scale Propagation</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_AUTO_UPDATE_FIELDS</td>
<td>Keyword</td>
<td>Automatically Update Fields in Active Model</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_NOTEAUTOUPDATE</td>
<td>Keyword</td>
<td>Automatically update Note when saving Dimension Style</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_DIMLEGACYPOINTORDER</td>
<td>Keyword</td>
<td>Use Legacy Datapoint Order for Dimensions</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_SHEETDIR</td>
<td>Directory</td>
<td>Output directory for sheet files</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_DRAWINGDIR</td>
<td>Directory</td>
<td>Output directory for drawing files</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>_USTN_SYSTEMTABLES</td>
<td>Directory</td>
<td>Tables Root Directory</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>_USTN_RASTERTABLE</td>
<td>Directory</td>
<td>Raster Table Directory</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>_USTN_CUSTOMIZEBASEID</td>
<td>Keyword</td>
<td>Base Resource Identifier for user customizations</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>_USTN_RMGR_MAXFILEPTRS</td>
<td>Keyword</td>
<td>Resource File Pointers</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>PZIP_OUT</td>
<td>Directory</td>
<td>Packager Output Directory</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_SIGNATURE_DELETE_REQUIRES_PRIVATE_KEY</td>
<td>Boolean</td>
<td>Must own private key to delete signature?</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_SIGNATURE_SHOW_FULL_NAME</td>
<td>Boolean</td>
<td>Digital signature full name</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_SIGNATURE_DISPLAY_UNVERIFIED</td>
<td>NONE</td>
<td>Digital signature X</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_DATA</td>
<td>Directory</td>
<td>Data Files</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_OLDUSERLICENSE</td>
<td>Filename</td>
<td>Old User License</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_USERLICENSE</td>
<td>Filename</td>
<td>User License</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>_PACKAGEFILE</td>
<td>Filename</td>
<td>Package File Name</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>_EMBEDFILE</td>
<td>Filename</td>
<td>Embedded File Name</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>_DGNFILE</td>
<td>Filename</td>
<td>Current File Name</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>_DGNDIR</td>
<td>Directory</td>
<td>Current File Directory</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>_USTN_HELPNAMESPACE</td>
<td>Keyword</td>
<td>Help Namespace</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_HELPLOAD_TOPICPAGE</td>
<td>Keyword</td>
<td>Help Topic Page Name Format</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_HELPLOAD_CONTENTSPAGE</td>
<td>Keyword</td>
<td>Help Contents Page</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_HELPLOAD_USEBROWSER</td>
<td>Boolean</td>
<td>Use Browser for Help</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_WORKSETMISMATCH_ALERT_EXCLUDE_VARS_ALLLEVELS</td>
<td>Search Path</td>
<td>Exclusion list for WorkSet Mismatch(All levels)</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_WORKSETMISMATCH_ALERT_EXCLUDE_VARS_WORKSPACELEVEL</td>
<td>Search Path</td>
<td>Exclusion list for WorkSet Mismatch(WorkSpace Level and Above)</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_HELPLOAD_APPLICATION</td>
<td>Keyword</td>
<td>Application Type that Loads Help</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>_USTN_LOCALUSERTEMPPATH</td>
<td>Search Path</td>
<td>Help Path</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>_USTN_USERAPPDATAPATH</td>
<td>Search Path</td>
<td>Help Path</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>_USTN_LOCALUSERAPPDATAPATH</td>
<td>Search Path</td>
<td>Help Path</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_HELPPATH</td>
<td>Search Path</td>
<td>Help Path</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_RIGHTLOGICKB</td>
<td>Keyword</td>
<td>Right to Left Chars</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_INITAPPS</td>
<td>Filelist</td>
<td>Initial MDL Applications</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_RSRC</td>
<td>Filename</td>
<td>Main Resource</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_DGNOUT</td>
<td>Directory</td>
<td>Output Design Files</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_OPENDESIGNFILEFILTER</td>
<td>Keyword</td>
<td>Open Design File Filter</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_SMARTSOLID</td>
<td>Directory</td>
<td>SmartSolid Directory</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_SNAP_TANGENT_POINT_DEFAULT_MODE</td>
<td>NONE</td>
<td>Perp/Tan location</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_SNAPMODE_SOURCE</td>
<td>NONE</td>
<td>Snap mode source</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_VIEWATTRIBUTES_PLUGINASSEMBLIES</td>
<td>NONE</td>
<td>View Attributes Plugin Assemblies</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>CONNECTUSER_FULLNAME</td>
<td>NONE</td>
<td>CONNECT User Full Name</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>CONNECTUSER_LANGUAGE</td>
<td>NONE</td>
<td>CONNECT User Language</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>CONNECTUSER_ORGANIZATION</td>
<td>NONE</td>
<td>CONNECT User Organization</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>CONNECTUSER_COUNTRY</td>
<td>NONE</td>
<td>CONNECT User Country</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>CONNECTUSER_NAME</td>
<td>NONE</td>
<td>CONNECT User Name</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>CONNECTPROJECT_ASSETTYPE</td>
<td>NONE</td>
<td>CONNECT Project Asset Type</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>CONNECTPROJECT_INDUSTRY</td>
<td>NONE</td>
<td>CONNECT Project Industry</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>CONNECTPROJECT_LOCATION</td>
<td>NONE</td>
<td>CONNECT Project Location</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>CONNECTPROJECT_STATUS</td>
<td>NONE</td>
<td>CONNECT Project Status</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>CONNECTPROJECT_NUMBER</td>
<td>NONE</td>
<td>CONNECT Project Number</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>CONNECTPROJECT_NAME</td>
<td>NONE</td>
<td>CONNECT Project Name</td>
<td>NO</td>
<td>YES</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="primary-search-path-category">Primary Search Path Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 24%" />
<col style="width: 7%" />
<col style="width: 58%" />
<col style="width: 4%" />
<col style="width: 4%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_DGNLIBLIST_DETAILINGSYMBOLSTYLES</td>
<td>Filelist</td>
<td>Process the DGNLIBs for available DetailingSymbol Styles.</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_DGNLIBLIST_LINESTYLES</td>
<td>Filelist</td>
<td>Process the DGNLIBs for available LineStyles.</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_DGNLIBLIST_DRAWINGSEEDS</td>
<td>Filelist</td>
<td>Process the DGNLIBs for available DrawingSeeds.</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_DGNLIBLIST_DISPLAYSTYLES</td>
<td>Filelist</td>
<td>Process the DGNLIBs for available Display Styles.</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_DGNLIBLIST_DIMENSIONSTYLES</td>
<td>Filelist</td>
<td>Process the DGNLIBs for available Dimension Styles.</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_DGNLIBLIST_TEXTSTYLES</td>
<td>Filelist</td>
<td>Process the DGNLIBs for available Text Styles.</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_DGNLIBLIST_TEXTFAVORITES</td>
<td>Filelist</td>
<td>Process the DGNLIBs for available Text favorites.</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_SEED_LINKSET_PATH</td>
<td>Search Path</td>
<td>Link Set Seed File Path</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>_USTN_COMMONAPPDATAPATH</td>
<td>Filelist</td>
<td>Defines the full path to the file directory containing application
data for all users</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_ECFRAMEWORK_SCHEMAS</td>
<td>Filelist</td>
<td>ECSchema Search Path</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_DGNLIBLIST_PRINTING</td>
<td>Filelist</td>
<td>DGN Library List for Print Styles.</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_DGNLIBLIST_LINKS</td>
<td>Filelist</td>
<td>DGN Library List for Link Set files.</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_DGNLIBLIST_RENDER</td>
<td>Filelist</td>
<td>DGN Library List for Rendering tasks.</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_DGNLIBLIST</td>
<td>Filelist</td>
<td>DGN Library List</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_DEF</td>
<td>Search Path</td>
<td>Design Files</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_RFDIR</td>
<td>Search Path</td>
<td>References</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_MDLAPPS</td>
<td>Search Path</td>
<td>Visible MDL Applications</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_MDL</td>
<td>Search Path</td>
<td>MDL Applications</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_ADDINPATH</td>
<td>Search Path</td>
<td>AddIns</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_ADDIN_DEPENDENCYPATH</td>
<td>Search Path</td>
<td>AddIn Dependencies</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_RSRCPATH</td>
<td>Search Path</td>
<td>Resource Files</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_GUIDGNLIBLIST</td>
<td>Filelist</td>
<td>User Interface DGN Library List</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_LIBRARY_PATH</td>
<td>Search Path</td>
<td>Library Path</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>RDL_DIR</td>
<td>Search Path</td>
<td>Redline Location</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>DWGRDL_DIR</td>
<td>Search Path</td>
<td>DWG Redline Location</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_FILTER_LIB_DIR</td>
<td>Search Path</td>
<td>Filter Library Path</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_LINFILELIST</td>
<td>Filelist</td>
<td>LIN File Path</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_ICONRSCLIST</td>
<td>Search Path</td>
<td>Icon Resource File List</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_ICONLIBRARYLIST</td>
<td>Search Path</td>
<td>Icon Library List</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_ICONPATH</td>
<td>Search Path</td>
<td>Icon Path</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_PERSONALDGNLIB</td>
<td>Filename</td>
<td>Users Personal DGNLIB</td>
<td>YES</td>
<td>YES</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="printing-category">Printing Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 39%" />
<col style="width: 10%" />
<col style="width: 37%" />
<col style="width: 6%" />
<col style="width: 6%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_PLTCFG_PATH</td>
<td>Search Path</td>
<td>Printer Driver Config Path</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_DEFAULT_PLTCFG_FILE</td>
<td>Filename</td>
<td>Default Printer Configuration</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PLT_PDF_PLTFILE</td>
<td>Filename</td>
<td>Default PDF Printer Config</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_PLT_SYSPRT_PLTFILE</td>
<td>Filename</td>
<td>Default Windows Printer Config</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PLT_SYSPRT_DEFAULT_PRINTER</td>
<td>Keyword</td>
<td>Default Windows Printer Name</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_PLT_SYSPRT_DEFAULT_FORM</td>
<td>Keyword</td>
<td>Default Windows Form Name</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PLT_SYSPRT_DEFAULT_TRAY</td>
<td>Keyword</td>
<td>Default Windows Tray Name</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_PLTFILES</td>
<td>Directory</td>
<td>Print Output Directory</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PRINTDEF_PATH</td>
<td>Search Path</td>
<td>Print Definition Search Path</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_PENTABLE</td>
<td>Search Path</td>
<td>Pen Table Search Path</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_DESIGNSCRIPT_PATH</td>
<td>Search Path</td>
<td>Design Script Search Path</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_PROPFILTER_PATH</td>
<td>Search Path</td>
<td>Property Filter Search Path</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PLT_PREVIEW_USABLEAREACOLOR</td>
<td>Keyword</td>
<td>Preview Usable Area Color</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_PLT_PREVIEW_PLOTBOXCOLOR</td>
<td>Keyword</td>
<td>Preview Plot Rectangle Color</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PLT_PREVIEW_PLOTFENCECOLOR</td>
<td>Keyword</td>
<td>Preview Plot Fence Color</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_PLTDLG_UNLOADONCLOSE</td>
<td>Keyword</td>
<td>Unload Print Dialog on Close</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PLTDLG_CLOSE_AFTER_PLOT</td>
<td>Keyword</td>
<td>Close Print Dialog After Plot</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_PLT_ENABLE_SCALE_CLIPPING</td>
<td>Keyword</td>
<td>Enable Scale Clipping</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PLT_ENABLE_PRESERVE_SCALE</td>
<td>Keyword</td>
<td>Enable Preserve Scale</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_PLT_ENABLE_AUTO_ROTATE</td>
<td>Keyword</td>
<td>Enable Automatic Rotation</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PLT_ENABLE_AUTO_ORIENT</td>
<td>Keyword</td>
<td>Enable Automatic Orientation</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_PLTDLG_AREA_PRIORITY</td>
<td>Keyword</td>
<td>Print Area Priority</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PLT_FORM_SCALE_PRIORITY</td>
<td>Keyword</td>
<td>Form Scale Priority</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_PLT_SET_LAYOUT_FROM_SHEET</td>
<td>Keyword</td>
<td>Honor Sheet Layout Info</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PLT_SET_PLOT_STYLE_TABLE_FROM_SHEET</td>
<td>Keyword</td>
<td>Honor Sheet Plot Style Table</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_PLT_MAX_ON_NEW_AREA</td>
<td>Keyword</td>
<td>Maximize on New Print Area</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PLTDLG_AUTO_FIT_VIEW</td>
<td>Keyword</td>
<td>Automatically Fit View</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_PLTDLG_SHOW_BASIC_LAYOUT_CONTROLS</td>
<td>Keyword</td>
<td>Basic Layout Controls</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PLTDLG_ALLOW_FORM_SIZE_EDIT</td>
<td>Keyword</td>
<td>Allow Form Size Edits</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_PLTDLG_SHOW_PRINT_STATUS</td>
<td>Keyword</td>
<td>Show Print Status Dialog</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PLTDLG_THUMBNAIL_PREVIEW_TIMEOUT</td>
<td>Keyword</td>
<td>Thumbnail Preview Timeout</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_PLTDLG_SHOW_ACCURATE_PREVIEW_ROTATION</td>
<td>Keyword</td>
<td>Preview Accurate Rotation</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PLTDLG_SET_UNITS_FROM_SHEET</td>
<td>Keyword</td>
<td>Set Units from Sheet</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_PLTDLG_KEEPVIEWFLAGSONFENCECHANGE</td>
<td>Boolean</td>
<td>Keep View Flags on New Fence</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PLOTDLG_DEF_PENTABLE</td>
<td>Filename</td>
<td>Default Pen Table</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_PLTDLG_ENABLE_SAVE_CONFIG</td>
<td>Keyword</td>
<td>Enable Save Configuration</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PLTDLG_DISABLE_PREFERENCES_DIALOG</td>
<td>Keyword</td>
<td>Disable Plotdlg Preferences</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_PLT_SCALE_METHOD</td>
<td>Keyword</td>
<td>Scale Method</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PENTABLE_IMPORTEMPTYSECTIONS</td>
<td>Boolean</td>
<td>Import Empty Pen Table Sections</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_PENTABLE_DISABLECOLOR</td>
<td>Boolean</td>
<td>Pen Table Disable Color</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PENTABLE_SLOTNUM_MATCH_APPLIES_TO_CHILD</td>
<td>Keyword</td>
<td>Pen Table Slot Number Match</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_PENTABLE_SEARCH_LEVEL_LIBRARIES</td>
<td>Keyword</td>
<td>Pen Table Search Level Libs</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PENTABLE_IMPORTCTB_NOPENMAP</td>
<td>Boolean</td>
<td>Pen Table Import Pen Maps</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_PLTFILE_EDITOR</td>
<td>Filename</td>
<td>Printer Configuration Editor</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PENTABLE_EDITOR</td>
<td>Filename</td>
<td>Pen Table Editor</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_DESIGNSCRIPT_EDITOR</td>
<td>Filename</td>
<td>Design Script Editor</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PLT_INVERT_WHITE_COLORS</td>
<td>Keyword</td>
<td>Invert White-to-Black Colors</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_PLT_ABBREVIATE_BORDER_FILENAME</td>
<td>Keyword</td>
<td>Abbreviate Border Filename</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PLT_AUTOAREA_RESULT_LIMIT</td>
<td>Keyword</td>
<td>Automatic Area Result Limit</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_PLT_AUTOAREA_SORT_MODE</td>
<td>Keyword</td>
<td>Automatic Area Sort Order</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PLT_ENGINE_CMDLINE_ARGS</td>
<td>Keyword</td>
<td>Engine Command-Line Arguments</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_PLT_ENABLE_VARIABLE_DEFINITION_MODE</td>
<td>Keyword</td>
<td>Use Variable Print Definitions</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PRINTORGANIZER_OPEN_DGN_READWRITE</td>
<td>Keyword</td>
<td>Open Designs Read-Write</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_PRINTERLIST_VISIBILITY</td>
<td>Keyword</td>
<td>Printer List Visibility</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PRINTERLIST_SYSPRINTERS</td>
<td>Keyword</td>
<td>Printer List System Printers</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_PLT_ACCTVAR_ABBREV_LEN</td>
<td>Keyword</td>
<td>Accounting Var Abbrev Length</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PLT_DEFAULT_PRINTDEF_NAME_EXPRESSION</td>
<td>Keyword</td>
<td>Default print definition name expression</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_PLT_DEFAULT_OUTPUT_FILENAME_EXPRESSION</td>
<td>Keyword</td>
<td>Default output file name expression</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PLOT_VISEDGE_OVERRIDES</td>
<td>NONE</td>
<td>Plotting Visible Edge Overrides</td>
<td>NO</td>
<td>YES</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="cell-category">Cell Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 34%" />
<col style="width: 14%" />
<col style="width: 33%" />
<col style="width: 8%" />
<col style="width: 8%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_CELL</td>
<td>Search Path</td>
<td>Cell Library Directories</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_CELLLIST</td>
<td>Filelist</td>
<td>Cell Library List</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_CELLSELECTORDIR</td>
<td>Directory</td>
<td>Cell Selector Directory</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_CELLSELECTOR</td>
<td>Filename</td>
<td>Cell Selector File</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_CELLOUT</td>
<td>Directory</td>
<td>Output Cell Libraries</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_MENU</td>
<td>Filename</td>
<td>Menu Cells</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_RESOLVESCNAMECONFLICTS</td>
<td>Keyword</td>
<td>Shared Cell Name Conflicts</td>
<td>NO</td>
<td>NO</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="seed-category">Seed Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 30%" />
<col style="width: 12%" />
<col style="width: 42%" />
<col style="width: 7%" />
<col style="width: 7%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_SEED_LINKSET_NAME</td>
<td>Keyword</td>
<td>Link Set Name</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_SEED_LINKSET_FILE_NAME</td>
<td>Filename</td>
<td>Link Set Seed File</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_INPUT_CONFIGXMLSEED</td>
<td>Filename</td>
<td>Touch Gesture Assignments Seed File</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_BUTTONMENUSEED</td>
<td>Filename</td>
<td>Button Assignments Seed File</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_FKEYMNUSEED</td>
<td>Filename</td>
<td>Function Key Assignments Seed File</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_KEYBOARDSHORTCUTSSEED</td>
<td>Filename</td>
<td>Keyboard Shortcuts Seed File</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_PERSONALDGNLIBSEED</td>
<td>Filename</td>
<td>Personal DGNLIB Seed</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_VIEWGROUPSEED</td>
<td>Filename</td>
<td>View Group Seed File</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_VIEWGROUPSEEDNAME</td>
<td>Keyword</td>
<td>View Group Seed</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_DWGSEED</td>
<td>Filename</td>
<td>DWG Seed File</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_DWGSEED_OVERRIDE</td>
<td>Filename</td>
<td>DWG Seed File Override</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_SEEDFILES</td>
<td>Search Path</td>
<td>Seed File Location</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_DESIGNSEED</td>
<td>Filename</td>
<td>Default Design File Seed</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_TRANSEED</td>
<td>Filename</td>
<td>Default Translation Seed</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_TRANSEED_OVERRIDE</td>
<td>Filename</td>
<td>Translation Seed Override</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_CELL_SEEDFILE</td>
<td>Filename</td>
<td>Cell Library Seed File</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_SHEETSEED</td>
<td>Filename</td>
<td>Drawing Sheet Seed File</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_GROUPPANELPREFSEED</td>
<td>Filename</td>
<td>Group Panel Preference Seed</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_TASKDIALOGPREFSEED</td>
<td>Filename</td>
<td>Task Navigation Dialog Preference Seed</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_DOCKINGPREFSEED</td>
<td>Filename</td>
<td>Dialog Docking Preference Seed</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_USERPREFSEED</td>
<td>Filename</td>
<td>User Preference Seed</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_DRAWINGMODELSEED</td>
<td>Filename</td>
<td>Drawing Model Seed File</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_DRAWINGMODELSEEDNAME</td>
<td>Keyword</td>
<td>Drawing Model Seed</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_DESIGNMODELSEED</td>
<td>Filename</td>
<td>Design Model Seed File</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_DESIGNMODELSEEDNAME</td>
<td>Keyword</td>
<td>Design Model Seed</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_SHEETMODELSEED</td>
<td>Filename</td>
<td>Sheet Model Seed File</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_SHEETMODELSEEDNAME</td>
<td>Keyword</td>
<td>Sheet Model Seed</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_DWGSHEETMODELSEED</td>
<td>Filename</td>
<td>DWG Sheet Model Seed File</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_DWGSHEETMODELSEEDNAME</td>
<td>Keyword</td>
<td>DWG Sheet Model Seed</td>
<td>YES</td>
<td>YES</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="tempbackup-category">Temp/Backup Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 27%" />
<col style="width: 9%" />
<col style="width: 50%" />
<col style="width: 7%" />
<col style="width: 7%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>DGNDBFILEIO_CACHE_MAX_FILES</td>
<td>Directory</td>
<td>Maximum number of files in dgndb extraction cache.</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>DGNDBFILEIO_CACHE_MAX_SIZE</td>
<td>Directory</td>
<td>Maximum size of dgndb extraction cache in MB.</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_DWG_BACKUP</td>
<td>Directory</td>
<td>Directory for DWG backup files.</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_NO_DWG_BACKUP</td>
<td>Boolean</td>
<td>Turn off DWG .bak files</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_BACKUP</td>
<td>Directory</td>
<td>Backup Files</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_TMP</td>
<td>Directory</td>
<td>Temporary Files</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_SCR</td>
<td>Directory</td>
<td>Scratch Files</td>
<td>NO</td>
<td>NO</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="colors-category">Colors Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 34%" />
<col style="width: 11%" />
<col style="width: 35%" />
<col style="width: 8%" />
<col style="width: 8%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_DEFCTBL</td>
<td>Filename</td>
<td>Default Color Table</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_RMENCTBL</td>
<td>Filename</td>
<td>Right Menu Color Table</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_LMENCTBL</td>
<td>Filename</td>
<td>Left Menu Color Table</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_COLORBOOK_LIBRARIES</td>
<td>Filelist</td>
<td>Colorbook Library List</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_SYSTEM_COLORBOOKS</td>
<td>Directory</td>
<td>System Color Books Directory</td>
<td>NO</td>
<td>NO</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="symbology-category">Symbology Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 33%" />
<col style="width: 13%" />
<col style="width: 35%" />
<col style="width: 8%" />
<col style="width: 8%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_FONTCONFIGFILE</td>
<td>Search Path</td>
<td>Font Configuration File Path</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_FONTPATH</td>
<td>Search Path</td>
<td>Font Directories</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_SYMBRSRC</td>
<td>Filelist</td>
<td>Symbology Resources</td>
<td>NO</td>
<td>YES</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="system-operation-category">System Operation Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 31%" />
<col style="width: 9%" />
<col style="width: 45%" />
<col style="width: 6%" />
<col style="width: 6%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_FAST_LEGACY_WIREFRAME</td>
<td>Boolean</td>
<td>Disable SmartSolid Silhouettes</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_COMPRESS_OPTIONS</td>
<td>Keyword</td>
<td>Compress Options Selections</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_KEYBOARDSHORTCUTSUSERORDER</td>
<td>Boolean</td>
<td>Keyboard Shortcuts User Order</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_KEYBOARDSHORTCUTSEXPAND</td>
<td>Boolean</td>
<td>Keyboard Shortcuts User Order</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_KEYBOARDSHORTCUTS</td>
<td>Filename</td>
<td>User Keyboard Shortcuts</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_BUTTONMENU</td>
<td>Filename</td>
<td>Button Menu</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_FKEYMNU</td>
<td>Filename</td>
<td>Function Key Menu</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_SAVEMENU</td>
<td>Filename</td>
<td>Attached Menus</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_APPMEN</td>
<td>Search Path</td>
<td>Application Menus</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_FILEHISTORY</td>
<td>Keyword</td>
<td>File History</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_READONLY</td>
<td>Boolean</td>
<td>Read Only</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_WORKMODE</td>
<td>Keyword</td>
<td>Work Mode</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_OPENV7</td>
<td>Keyword</td>
<td>Open V7 files</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_OPENDWGAEC</td>
<td>Keyword</td>
<td>Open DWG AEC files</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_DISABLE_FILE_ICONS</td>
<td>Boolean</td>
<td>Disable File Open Icons</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_SOURCENAME_PROPERTY</td>
<td>Keyword</td>
<td>Save the SOURCE file property</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_IDLETIMEOUT</td>
<td>Keyword</td>
<td>Exit $[_USTN_PRODUCT_NAME] when idle</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_POPUPDIALOGCLOSEDELAY</td>
<td>Keyword</td>
<td>Popup Dialog Close Delay</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_LEGACYTOOLMAPLIST</td>
<td>Filelist</td>
<td>Path to files that contain Tool Mapping data.</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_FULLPATHINTITLEBAR</td>
<td>Keyword</td>
<td>Full Path in Title Bar</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_NO_VIEW_ANIMATION</td>
<td>Keyword</td>
<td>Disable Tile/Cascade Animation</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_COMMONITEMDIALOG</td>
<td>Boolean</td>
<td>Common Item Dialog from Microsoft</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_VIEWAUTORESIZE</td>
<td>Keyword</td>
<td>View Resize Behavior</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_GRAYGROUPHEADERBACKGROUND</td>
<td>Boolean</td>
<td>Gray Color for Group Headers</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_UPDATESPLITBUTTONLABELTOSELECTED</td>
<td>Boolean</td>
<td>Update Split Button Label to Selected</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_GROUPPOPUPFADEKEYTIPS</td>
<td>Boolean</td>
<td>Ribbon Group Popup Fade KeyTips</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_RIBBON_NUMEXPANDEDTASKGROUPS</td>
<td>Keyword</td>
<td>Number of expanded ribbon groups on Active Task tab</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_RIBBON_MAXBUTTONLABELCHARS</td>
<td>Keyword</td>
<td>Maximum characters for a ribbon button label</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_CURSORPROMPT</td>
<td>Boolean</td>
<td>Cursor Prompt</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_AUTOUPDATETEXTITEMSSLOWER</td>
<td>Boolean</td>
<td>AutoUpdate speed for Text items</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_AUTOUPDATETEXTITEMSSUPPORT</td>
<td>Boolean</td>
<td>AutoUpdate feature for Text items</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_TOOLSETTINGSIGNORETITLEFORWIDTH</td>
<td>Boolean</td>
<td>Tool Settings Ignore Title when Determining Width</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_INPUT_CONFIGXML</td>
<td>Filename</td>
<td>Default Touch Gesture Configuration</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_DEFAULT_MAINTASKPATH</td>
<td>Keyword</td>
<td>Default Main Task</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_VIEWTOOLBOX3D</td>
<td>Keyword</td>
<td>View window toolbox for 3D</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_VIEWTOOLBOX2D</td>
<td>Keyword</td>
<td>View window toolbox for 2D</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_GROUPPOPUPFALLBACKWORKFLOW_3D</td>
<td>Keyword</td>
<td>3D Fall-back Workflow for pop-up group processing</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_GROUPPOPUPFALLBACKWORKFLOW_2D</td>
<td>Keyword</td>
<td>2D Fall-back Workflow for pop-up group processing</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_RIBBONCOMPONENTPROVIDERS</td>
<td>Filelist</td>
<td>Ribbon Component Providers AddIn List</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_RIBBONXML</td>
<td>Filelist</td>
<td>Ribbon XML File List</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_RIBBONPREFSSEED</td>
<td>Filelist</td>
<td>Ribbon Preferences Seed File</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_RIBBONPREFS</td>
<td>Filelist</td>
<td>Ribbon Preferences File</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_RIBBONRSCLIST</td>
<td>Filelist</td>
<td>Ribbon Resource File List</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_RIBBONDIR</td>
<td>Search Path</td>
<td>Base Path for Ribbon Definitions</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_VISEDGE_OVERRIDES</td>
<td>NONE</td>
<td>Visible Edge Overrides</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_VISEDGE_DEFAULTS</td>
<td>NONE</td>
<td>Visible Edge Overrides</td>
<td>NO</td>
<td>YES</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="renderingimage-category">Rendering/Image Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 35%" />
<col style="width: 13%" />
<col style="width: 34%" />
<col style="width: 8%" />
<col style="width: 8%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_MATERIAL</td>
<td>Search Path</td>
<td>Material Palettes</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_PATTERN</td>
<td>Search Path</td>
<td>Pattern Maps</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_BUMP</td>
<td>Search Path</td>
<td>Bump Maps</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_IMAGE</td>
<td>Search Path</td>
<td>Images</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_IMAGEOUT</td>
<td>Directory</td>
<td>Image Output</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_SHADOWMAP</td>
<td>Directory</td>
<td>Shadow Maps</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_LIGHTING</td>
<td>Search Path</td>
<td>IES Lighting Files</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_LIGHTLIST</td>
<td>Filelist</td>
<td>Predefined Light Sources</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_IMAGE_EDITOR</td>
<td>Filename</td>
<td>Image Editor</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_MATERIAL_PREVIEW_BACKGROUND</td>
<td>Filename</td>
<td>Material Preview Background</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_FILTEREDCODECS</td>
<td>Filename</td>
<td>Filtered DirectShow Codecs</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_RENDERV7MATERIALS</td>
<td>Boolean</td>
<td>V7 Material Compatibility</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_DISABLE_RPCBROWSER</td>
<td>Boolean</td>
<td>Disable RPC Thumbnail Browser</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_RPCDIR</td>
<td>Directory</td>
<td>RPC Search Path</td>
<td>NO</td>
<td>YES</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="database-category">Database Category</h2>
<hr />
<table style="width:100%;">
<colgroup>
<col style="width: 33%" />
<col style="width: 13%" />
<col style="width: 35%" />
<col style="width: 8%" />
<col style="width: 8%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_UDLDIR</td>
<td>Search Path</td>
<td>Universal Data Link directory</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_ORACLE_HOME</td>
<td>Search Path</td>
<td>Oracle Home</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_DBASE</td>
<td>Search Path</td>
<td>Database Files</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_SERVER</td>
<td>Filename</td>
<td>Server Loader</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_DBEXT</td>
<td>Filename</td>
<td>Database Server</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_LINKTYPE</td>
<td>Keyword</td>
<td>Database Linkages</td>
<td>NO</td>
<td>YES</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="data-files-category">Data Files Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 31%" />
<col style="width: 10%" />
<col style="width: 41%" />
<col style="width: 8%" />
<col style="width: 8%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_CUSTOMSHEETSIZEDEF</td>
<td>Filename</td>
<td>Sheet Size Definitions</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_CUSTOMSCALEDEF</td>
<td>Filename</td>
<td>Scales Definitions</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_CUSTOMUNITDEF</td>
<td>Filename</td>
<td>Unit Definitions for Upgrading to V8</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_HTMLDGNDIR</td>
<td>Directory</td>
<td>HTML Template Directory</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_WMS_SERVERS_SEED</td>
<td>Filename</td>
<td>Seed file for MS_WMS_SERVERS file</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_WMS_SERVERS</td>
<td>Filename</td>
<td>Web Map Service servers</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_DATETIMEFORMATS</td>
<td>Filename</td>
<td>Standard Date Time formats</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_SETTINGSOUTDIR</td>
<td>Directory</td>
<td>Settings Output Directory</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_SETTINGSDIR</td>
<td>Directory</td>
<td>Settings Directory</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_REMAP_CSVFILE</td>
<td>Filename</td>
<td>Remap CSV File</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_BSILOG_CONFIG_FILE</td>
<td>Filename</td>
<td>Logging config file</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_BSILOG_ENABLE</td>
<td>Boolean</td>
<td>Enable diagnostic logging</td>
<td>YES</td>
<td>YES</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="quickvision-category">QuickVision Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 31%" />
<col style="width: 8%" />
<col style="width: 44%" />
<col style="width: 8%" />
<col style="width: 8%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>QV_DISABLE_D3D11</td>
<td>Boolean</td>
<td>Disables Direct3D Version 11</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>QV_DISABLE_HARDWARE</td>
<td>Boolean</td>
<td>Disables Graphics Hardware Acceleration</td>
<td>YES</td>
<td>NO</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="dgnapps-category">DGNAPPS Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 23%" />
<col style="width: 7%" />
<col style="width: 56%" />
<col style="width: 6%" />
<col style="width: 6%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>_USTN_FIRSTDGNAPPS</td>
<td>Filelist</td>
<td>Allows you to add applications that load on MicroStation
startup</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_DGNAPPS</td>
<td>Filelist</td>
<td>Design File Applications</td>
<td>NO</td>
<td>YES</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="application-load-category">Application Load Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 36%" />
<col style="width: 10%" />
<col style="width: 33%" />
<col style="width: 9%" />
<col style="width: 9%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_MDLSTUB_LOAD</td>
<td>Filelist</td>
<td>MDL Application Stub-load</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_XCOMMAND_APPS</td>
<td>Filelist</td>
<td>XCommand Table Auto-load</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_CMDTABLE_LOAD</td>
<td>Filelist</td>
<td>Key-in Table Auto-load</td>
<td>YES</td>
<td>NO</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="dwgdxf-search-path">DWG/DXF Search Path</h2>
<hr />
<table style="width:100%;">
<colgroup>
<col style="width: 33%" />
<col style="width: 11%" />
<col style="width: 38%" />
<col style="width: 8%" />
<col style="width: 8%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_DWG_COMMANDPREFIX</td>
<td>Keyword</td>
<td>DWG Command Prefix.</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_DWG_PGPFILE</td>
<td>Filename</td>
<td>PGP Command Alias file.</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_DWGSETTINGSFILE</td>
<td>Filename</td>
<td>DWG Settings File.</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_DWGSYSTEMDATA</td>
<td>Directory</td>
<td>System DWG Data Directory.</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_DWGDATA</td>
<td>Directory</td>
<td>DWG Data Directory.</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_BLOCKLIST</td>
<td>Filelist</td>
<td>AutoCAD Block List</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_DWGFONTPATH</td>
<td>Directory</td>
<td>AutoCAD SHX Font Directory</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_ACADDIR</td>
<td>Directory</td>
<td>AutoCAD Program Directory</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_DWG_FIELD_2005FORMATTING</td>
<td>Keyword</td>
<td>Force AutoCAD 2005 field format</td>
<td>YES</td>
<td>YES</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="cgm-translation-category">CGM-Translation Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 36%" />
<col style="width: 12%" />
<col style="width: 32%" />
<col style="width: 9%" />
<col style="width: 9%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_CGMIN</td>
<td>Directory</td>
<td>CGM Input Directory.</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_CGMOUT</td>
<td>Directory</td>
<td>CGM Output Directory.</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_CGMLOG</td>
<td>Directory</td>
<td>CGM Log Files.</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_CGMTABLES</td>
<td>Directory</td>
<td>CGM Configuration Tables</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_CGMINSET</td>
<td>Filename</td>
<td>CGMIN Settings File.</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_CGMOUTSET</td>
<td>Filename</td>
<td>CGMOUT Settings File.</td>
<td>NO</td>
<td>YES</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="iges-translation-category">IGES-Translation Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 37%" />
<col style="width: 12%" />
<col style="width: 30%" />
<col style="width: 9%" />
<col style="width: 9%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_IGESIN</td>
<td>Directory</td>
<td>IGES Input Directory.</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_IGESOUT</td>
<td>Directory</td>
<td>IGES Output Directory.</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_IGESLOG</td>
<td>Directory</td>
<td>IGES Log Files.</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_IGESINSET</td>
<td>Filename</td>
<td>IGESIN Settings File.</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_IGESOUTSET</td>
<td>Filename</td>
<td>IGESOUT Settings File.</td>
<td>NO</td>
<td>YES</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="workspace-category">Workspace Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 24%" />
<col style="width: 9%" />
<col style="width: 53%" />
<col style="width: 6%" />
<col style="width: 6%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>_USTN_WORKSETCFG</td>
<td>Filename</td>
<td>WorkSet Configuration</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_USERPREF</td>
<td>Filename</td>
<td>User Preference Resource</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>_USTN_UIPATH</td>
<td>Search Path</td>
<td>User Interface</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>_USTN_DISALLOW_NOWORKSET</td>
<td>Search Path</td>
<td>If on, the No WorkSet option in the Work page will be hidden</td>
<td>YES</td>
<td>NO</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="tags-category">Tags Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 40%" />
<col style="width: 13%" />
<col style="width: 25%" />
<col style="width: 10%" />
<col style="width: 10%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_TAGOUTPUT</td>
<td>Directory</td>
<td>Tag Output</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_TAGREPORTS</td>
<td>Directory</td>
<td>Tag Reports</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_TAGTEMPLATES</td>
<td>Directory</td>
<td>Tag Templates</td>
<td>NO</td>
<td>YES</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="ole-server-category">OLE Server Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 35%" />
<col style="width: 9%" />
<col style="width: 37%" />
<col style="width: 9%" />
<col style="width: 9%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_OLE_RETAIN_CONTROL_SIZE</td>
<td>Boolean</td>
<td>Retain display size of object</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_OLESERVE_EMBED_REFFILES</td>
<td>Keyword</td>
<td>Embed References</td>
<td>NO</td>
<td>YES</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="engineering-links-category">Engineering Links Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 36%" />
<col style="width: 12%" />
<col style="width: 33%" />
<col style="width: 9%" />
<col style="width: 9%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_WEBLIB_HISTORY</td>
<td>Filename</td>
<td>Weblib history</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_BOOKMARKS_IMAGE</td>
<td>Filename</td>
<td>Image bookmarks</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_BOOKMARKS_RSC</td>
<td>Filename</td>
<td>Resource bookmarks</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_BOOKMARKS_ARCHIVE</td>
<td>Filename</td>
<td>Archive bookmarks</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_BOOKMARKS_CELL</td>
<td>Filename</td>
<td>Cell library bookmarks</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_BOOKMARKS_DGN</td>
<td>Filename</td>
<td>DGN bookmarks</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_WEBKIOSKMODE</td>
<td>Keyword</td>
<td>Kiosk mode</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_WEBTYPESFILE</td>
<td>Filename</td>
<td>Special filetype handling</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_WEBFILES_DIR</td>
<td>Directory</td>
<td>Weblib local storage</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_WEBDOWNLOADDIR</td>
<td>Directory</td>
<td>Download directory</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_BROWSERMAKECHILDWINDOW</td>
<td>Boolean</td>
<td>Reparent Browser</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_USEEXTERNALBROWSER</td>
<td>Keyword</td>
<td>External browser name</td>
<td>NO</td>
<td>NO</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="step-translation-category">Step-Translation Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 36%" />
<col style="width: 12%" />
<col style="width: 32%" />
<col style="width: 9%" />
<col style="width: 9%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_STEPOUT</td>
<td>Directory</td>
<td>Step Output Directory.</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_STEPLOG</td>
<td>Directory</td>
<td>Step Log Files.</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_ROSEDB</td>
<td>Directory</td>
<td>Rose database directory.</td>
<td>NO</td>
<td>YES</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="spelling-category">Spelling Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 36%" />
<col style="width: 12%" />
<col style="width: 32%" />
<col style="width: 9%" />
<col style="width: 9%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_SPELLINGUSERDICTIONARY</td>
<td>Filename</td>
<td>Spelling User Dictionary</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_SPELLINGDICTIONARYPATH</td>
<td>Directory</td>
<td>Spelling Dictionaries</td>
<td>YES</td>
<td>NO</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="levels-category">Levels Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 37%" />
<col style="width: 8%" />
<col style="width: 41%" />
<col style="width: 5%" />
<col style="width: 5%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_LEVEL_DO_NOT_OVERRIDE_DESIGN_LEVELS_IN_SHEET</td>
<td>Keyword</td>
<td>Level Property Overrides in Sheet and Drawing Models</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_LEVEL_DISPLAY_FORMAT</td>
<td>Keyword</td>
<td>Level Display Format</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_LEVEL_EDIT_NESTED_ATTACHMENT_LEVELS</td>
<td>Keyword</td>
<td>Edit Nested Attachment Levels</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_LEVEL_ALLOW_LIBRARY_LEVEL_EDIT</td>
<td>Keyword</td>
<td>Edit Unused Library Levels</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_LEVEL_LOAD_ATTACHMENT_FILTERS</td>
<td>Keyword</td>
<td>Load Attachment Level Filters</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_LEVEL_EDIT_ATTRIBUTE_LIST</td>
<td>Keyword</td>
<td>Control Level Attributes Edit</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_LEVEL_SYNC_ATTRIBUTE_LIST</td>
<td>Keyword</td>
<td>Control Level Attributes Sync</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_LEVEL_AUTO_SYNC_ATTRIBUTE_LIST</td>
<td>Keyword</td>
<td>Level Attribute Auto Synch.</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_LEVEL_SEED_LEVEL_NAME</td>
<td>Keyword</td>
<td>Seed Level Name</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_LEVEL_CREATE_FROM_SEED_ATTRIBUTE_LIST</td>
<td>Keyword</td>
<td>Seed Level Attributes to use</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_UPDATE_KEEP_UNUSED_LIBRARY_LEVELS</td>
<td>Keyword</td>
<td>Keep Unused Library Levels</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_LEVEL_PICKER_WIDTH</td>
<td>Keyword</td>
<td>Attributes Level Picker Width</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_LEVEL_SYNCH_BYLEVEL</td>
<td>Keyword</td>
<td>Synch Symbology to ByLevel on Level Change</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_LEVEL_LIB_DIR</td>
<td>Search Path</td>
<td>Level Library Path</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_V7TOV8_CSVNAME</td>
<td>Filename</td>
<td>V7 to V8 Level CSV File</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_V7_LEVEL_NAME_PREFIX</td>
<td>Keyword</td>
<td>V7 to V8 Level Name Prefix</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_V7TOV8_DELETE_UNUSED_LEVELS</td>
<td>Keyword</td>
<td>V7 to V8 Delete Unused Levels</td>
<td>NO</td>
<td>NO</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="design-history-category">Design History Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 37%" />
<col style="width: 6%" />
<col style="width: 42%" />
<col style="width: 6%" />
<col style="width: 6%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_DESIGN_HISTORY_COMMIT_ON_SAVE</td>
<td>Boolean</td>
<td>Commit on save</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_DESIGN_HISTORY_COMMIT_ON_CLOSE</td>
<td>NONE</td>
<td>Commit before close</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_DESIGN_HISTORY_COMMIT_ON_MODEL_SWITCH</td>
<td>Boolean</td>
<td>Commit on model switch</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_DESIGN_HISTORY_OWNERSHIP_WARNING</td>
<td>Boolean</td>
<td>Confirm when taking ownership</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_DESIGN_HISTORY_COLORS</td>
<td>NONE</td>
<td>Colors</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_DESIGN_HISTORY_REVISION_NUMBER_FORMAT</td>
<td>Keyword</td>
<td>Revision number display format</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_DESIGN_HISTORY</td>
<td>Keyword</td>
<td>Design History capabilities</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_DESIGN_HISTORY_COMMIT_DOC_PROPERTIES</td>
<td>Boolean</td>
<td>Include document properties in design history?</td>
<td>NO</td>
<td>YES</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="protection-category">Protection Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 39%" />
<col style="width: 8%" />
<col style="width: 36%" />
<col style="width: 8%" />
<col style="width: 8%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_PROTECTION_ENABLE</td>
<td>Keyword</td>
<td>Enable file protection</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_PROTECTION_V8_COMPATIBILITY</td>
<td>Keyword</td>
<td>Limit encryption strength</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_PROTECTION_LICENSE_ENABLE</td>
<td>Keyword</td>
<td>Control license creation</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_PROTECTION_PASSWORD_MIXED</td>
<td>Keyword</td>
<td>Password letters and numbers?</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_PROTECTION_PASSWORD_MINIMUM</td>
<td>Keyword</td>
<td>Minimum length of password</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_PROTECTION_NOENCRYPT_THUMBNAIL</td>
<td>Keyword</td>
<td>Do NOT encrypt file thumbnail?</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_PROTECTION_NOENCRYPT_PROPERTIES</td>
<td>Keyword</td>
<td>Do NOT encrypt file properties?</td>
<td>NO</td>
<td>NO</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="security-category">Security Category</h2>
<hr />
<table style="width:100%;">
<colgroup>
<col style="width: 36%" />
<col style="width: 9%" />
<col style="width: 34%" />
<col style="width: 9%" />
<col style="width: 9%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_SECURITY_LEVEL</td>
<td>Keyword</td>
<td>Security level</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_SECURITY_SPC</td>
<td>Keyword</td>
<td>Software Publishing Certs</td>
<td>NO</td>
<td>NO</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="reference-category">Reference Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 28%" />
<col style="width: 9%" />
<col style="width: 48%" />
<col style="width: 7%" />
<col style="width: 7%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_REF_MASTERFILELAST_SHEET</td>
<td>Keyword</td>
<td>Sheet Model Update Sequence</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_REF_MASTERFILELAST_DRAWING</td>
<td>Keyword</td>
<td>Drawing Model Update Sequence</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_REF_MASTERFILELAST_DESIGN</td>
<td>Keyword</td>
<td>Design Model Update Sequence</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_REF_MAXNESTDEPTH</td>
<td>Keyword</td>
<td>Maximum Reference Nesting Depth</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_REF_DEFAULTATTACHDIRECTORY</td>
<td>Directory</td>
<td>Default Attachment Directory</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_REF_DEFAULTSETTINGS</td>
<td>Keyword</td>
<td>Default Attachment Settings</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_DISALLOWFULLREFPATH</td>
<td>Keyword</td>
<td>Disallow Full Ref Path</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_REF_NO_CVE_LOAD</td>
<td>Keyword</td>
<td>Disable loading of CVE references</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_REF_ENABLE_LEGACY_VISEDGES</td>
<td>Keyword</td>
<td>Enable Visible Edges "Legacy" Option</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_REF_NEWLEVELDISPLAY</td>
<td>Keyword</td>
<td>New Level Display</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_NEST_COLORADJUSTMENT</td>
<td>Keyword</td>
<td>Nested Reference Color Adjustment</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_REF_DONTHILITEFORMANIP</td>
<td>Keyword</td>
<td>Hiliting References for Manipulation</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_REF_VISEDGE_ATTACH_STATE</td>
<td>NONE</td>
<td>Reference Visible Edges default Attachment State</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_CVE_VISEDGE_OVERRIDES</td>
<td>NONE</td>
<td>CVE Visible Edge Overrides</td>
<td>NO</td>
<td>YES</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="standards-checker-category">Standards Checker Category</h2>
<hr />
<table style="width:100%;">
<colgroup>
<col style="width: 33%" />
<col style="width: 9%" />
<col style="width: 42%" />
<col style="width: 7%" />
<col style="width: 7%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_STANDARDSCHECKER_SETTINGSFILE</td>
<td>Filename</td>
<td>Required Standards Checker Settings File</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_STANDARDSCHECKER_SETTINGSNAME</td>
<td>NONE</td>
<td>Required Standards Checker Named Settings</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_STANDARDSCHECKER_OUT</td>
<td>Directory</td>
<td>Standards Checker Report Directory</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_STANDARDSCHECKER_STYLESHEET</td>
<td>Filename</td>
<td>Standards Checker Style Sheet</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_STANDARDSCHECKER_APPS</td>
<td>Filelist</td>
<td>Standards Checker Applications</td>
<td>NO</td>
<td>YES</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="file-save-category">File Save Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 35%" />
<col style="width: 9%" />
<col style="width: 37%" />
<col style="width: 9%" />
<col style="width: 9%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_DGNAUTOSAVE</td>
<td>Keyword</td>
<td>Design File Auto-Save</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_V7AUTOSAVE</td>
<td>Keyword</td>
<td>V7 Design File Auto-Save</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_V7AUTOSAVE_NODIALOG</td>
<td>Keyword</td>
<td>V7 Auto-Save Dialog</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_V7BACKUPV8</td>
<td>Keyword</td>
<td>V7 create backup in V8 format</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_DWGAUTOSAVE</td>
<td>Keyword</td>
<td>DWG/DXF File Auto-Save</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_DWGAUTOSAVE_NODIALOG</td>
<td>Keyword</td>
<td>DWG/DXF Auto-Save Dialog</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="odd">
<td>MS_EVE_VISEDGE_OVERRIDES</td>
<td>NONE</td>
<td>Export Visible Edge Overrides</td>
<td>NO</td>
<td>YES</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="raster-category">Raster Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 31%" />
<col style="width: 6%" />
<col style="width: 48%" />
<col style="width: 6%" />
<col style="width: 6%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_RASTER_IMG_STRETCH</td>
<td>Boolean</td>
<td>Set contrast stretch filtering for IMG file format</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_RASTER_IMG_CHANNELS</td>
<td>NONE</td>
<td>Set band to channel mapping for IMG file format</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_RASTER_DISABLE_IPPCONNECTION</td>
<td>NONE</td>
<td>Disable default server port</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_RASTER_VIEWSAVEASDWG</td>
<td>NONE</td>
<td>Define view for DWG file</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_RASTER_COMMONGEOREFFILEFORMATS</td>
<td>NONE</td>
<td>'Common Geo Ref Raster Formats' File Filter</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_RASTER_COMMONFILEFORMATS</td>
<td>NONE</td>
<td>'Common Raster Formats' File Filter</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_RASTER_TIFFINVERT</td>
<td>NONE</td>
<td>Invert monochrome tiff</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_RASTER_NOSHARING</td>
<td>NONE</td>
<td>Create .sharing.tmp files</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_RASTER_NO_DETACH_CONFIRM</td>
<td>NONE</td>
<td>Display alert dialog upon raster detach</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_RASTER_EPSGTABLE_PATH</td>
<td>NONE</td>
<td>Set path to EPSG table</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_RASTER_DEFAULTSISTER</td>
<td>NONE</td>
<td>Set default sister file</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_RASTER_DEFAULTSCALE</td>
<td>NONE</td>
<td>Set default scale</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_RASTER_1BIT_WORKMODE</td>
<td>NONE</td>
<td>Harmonize monochrome raster display</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_RASTER_DEFAULT_LEVEL</td>
<td>NONE</td>
<td>Set default display level</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_RASTER_TRANSPARENCY</td>
<td>NONE</td>
<td>Set transparency</td>
<td>NO</td>
<td>YES</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="clash-detection-category">Clash Detection Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 38%" />
<col style="width: 8%" />
<col style="width: 37%" />
<col style="width: 8%" />
<col style="width: 8%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_INVALID_FIELD_INDICATOR_STRING</td>
<td>Keyword</td>
<td>Display "null" instead of "####"</td>
<td>YES</td>
<td>YES</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="markup-category">Markup Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 34%" />
<col style="width: 13%" />
<col style="width: 34%" />
<col style="width: 8%" />
<col style="width: 8%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_MARKUP_HIDE_AUDIT_COMMENTS</td>
<td>Boolean</td>
<td>Hide Markup Audit Comments</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_MARKUPVIEWRESOLUTION</td>
<td>NONE</td>
<td>Markup View Resolution</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_MARKUPSHEETSEEDNAME</td>
<td>NONE</td>
<td>Markup Template Sheet</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_MARKUPSHEETSEED</td>
<td>Filename</td>
<td>Markup Template File</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_MARKUPSETTINGS</td>
<td>Filename</td>
<td>Markup Customization Settings</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_MARKUPPATH</td>
<td>Search Path</td>
<td>Markup Path</td>
<td>NO</td>
<td>YES</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="macro-recorder-category">Macro Recorder Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 30%" />
<col style="width: 12%" />
<col style="width: 42%" />
<col style="width: 7%" />
<col style="width: 7%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_MACRONEWFILEDIRECTORY</td>
<td>Directory</td>
<td>Directory to create new BMR macros in</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr class="even">
<td>MS_MACRO</td>
<td>Search Path</td>
<td>Search path for BMR macro files</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_VBASAVEONRUN</td>
<td>Keyword</td>
<td>Automatically save VBA projects</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_VBAAUTOLOADPROJECTS</td>
<td>Filename</td>
<td>Names of standard projects</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_VBASEARCHDIRECTORIES</td>
<td>Search Path</td>
<td>Directories to search for VBA projects</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_VBANEWPROJECTDIRECTORY</td>
<td>Directory</td>
<td>Directory for new projects</td>
<td>NO</td>
<td>NO</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="tables-category">Tables Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 40%" />
<col style="width: 13%" />
<col style="width: 25%" />
<col style="width: 10%" />
<col style="width: 10%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_TABLE_INPUT</td>
<td>Directory</td>
<td>Table Input</td>
<td>NO</td>
<td>YES</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="reports-category">Reports Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 40%" />
<col style="width: 13%" />
<col style="width: 25%" />
<col style="width: 10%" />
<col style="width: 10%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_REPORT_OUTPUT</td>
<td>Directory</td>
<td>Report Output</td>
<td>NO</td>
<td>YES</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="point-cloud-category">Point Cloud Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 34%" />
<col style="width: 4%" />
<col style="width: 43%" />
<col style="width: 8%" />
<col style="width: 8%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_POINTCLOUD_LAS_NBIT_COLOR</td>
<td>NONE</td>
<td>Point Cloud LAS File Color Treatment</td>
<td>NO</td>
<td>YES</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="geographic-coordinate-system-category">Geographic Coordinate
System Category</h2>
<hr />
<table>
<colgroup>
<col style="width: 40%" />
<col style="width: 9%" />
<col style="width: 34%" />
<col style="width: 7%" />
<col style="width: 7%" />
</colgroup>
<thead>
<tr class="header">
<th>Configuration Variable Name</th>
<th>Type</th>
<th>Short Description</th>
<th>Restart</th>
<th>WorkSet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MS_GEOCOORDINATE_USERLIBRARIES</td>
<td>Filelist</td>
<td>User-defined GCS Dictionaries</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_GEOCOORDINATE_REPROJECTIONSETTINGS</td>
<td>Directory</td>
<td>Reprojection Settings</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_GEOCOORDINATE_REFSETTINGS</td>
<td>Directory</td>
<td>Reference Reprojection Settings</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="even">
<td>MS_GEOCOORDINATE_FAVORITESFILES</td>
<td>Filename</td>
<td>GCS Favorites File</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr class="odd">
<td>MS_GEOCOORDINATE_DATA</td>
<td>Directory</td>
<td>GeoCoordinate Data Files</td>
<td>NO</td>
<td>YES</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Custom</category>
      </categories>
      <tags>
        <tag>ORD</tag>
      </tags>
  </entry>
  <entry>
    <title>ORD安装提示Failed copy payload xx的解决办法</title>
    <url>/posts/2023/304FHXE.html</url>
    <content><![CDATA[<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230307212335456.png" style="max-width:min(100%,300px)"></p>
<span id="more"></span>
<p>如果 ORD 在安装过程中出现 <code>Failed to copy payload for xxx</code>
时，可能有几下几个原因：</p>
<ol type="1">
<li><p>由于Connection Client的版本不匹配导致。</p></li>
<li><p>由于.Net Framework 版本不匹配导致的。</p></li>
<li><p>一些国产软件可能会影响安装并导致这个报错。</p>
<p>可以在安装时暂时关闭杀毒软件和防火墙，或者重启电脑后再试。</p></li>
</ol>
<p><strong>参考：</strong></p>
<p><a
href="https://communities.bentley.com/communities/other_communities/chinafirst/w/chinawiki/41717/microstation-ce-0x80070643">MicroStation
CE 安装报错 0x80070643</a></p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Problems</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
        <tag>Bentley问题处理</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>VBA已拒绝OpenRoadsDesigner应用程序对象</title>
    <url>/posts/2022/2BJZWZD.html</url>
    <content><![CDATA[<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220509162253268.png"
alt="image-20220509162253268" />
<figcaption aria-hidden="true">image-20220509162253268</figcaption>
</figure>
<span id="more"></span>
<h2 id="正文">正文</h2>
<p>当出现上图中的错误时，可能是 ORD 中的 OCX
注册失败导致的，可以通过如下方式解决：</p>
<ol type="1">
<li>用管理员打开 cmd</li>
<li>进入到 ORD 安装目录：
<code>cd C:\Program Files\Bentley\OpenRoads Designer CONNECT Edition\OpenRoadsDesigner</code></li>
<li>输入 <code>openroadsdesigner /regserver</code> 重新注册服务</li>
</ol>
<h2 id="参考">参考</h2>
<p><a
href="https://communities.bentley.com/products/road___site_design/f/geopak-inroads-mx-openroads-forum/189463/vba-rejected-the-openroads-designer-application-object">VBA
rejected the OpenRoads Designer Application Object</a></p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Problems</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
        <tag>Bentley问题处理</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>ORD 启动相关错误汇总</title>
    <url>/posts/2022/1XTXTE4.html</url>
    <content><![CDATA[<p>本文汇总了 ORD
在启动过程中可能遇到的问题，方便再次遇到问题时能够快速定位并处理。</p>
<span id="more"></span>
<h2 id="application-use-will-be-limited">Application use will be
limited</h2>
<p><strong>错误如下：</strong></p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220509114902220.png"
alt="image-20220509114902220" />
<figcaption aria-hidden="true">image-20220509114902220</figcaption>
</figure>
<p><strong>解决方法：</strong></p>
<p>出现此问题的原因是由于没有登陆 <code>CONNECTION Client</code>
导致的。打开 <code>CONNECTION Client</code> 后登陆自己的账号即可。</p>
<h2 id="page-expired">Page Expired</h2>
<p><strong>错误如下：</strong></p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220509115130920.png"
alt="image-20220509115130920" />
<figcaption aria-hidden="true">image-20220509115130920</figcaption>
</figure>
<p><strong>解决方法：</strong></p>
<p>出现上述问题是由于在登陆页面停留过久，导致页面过期了。</p>
<p>可以通过下列任一方法来解决：</p>
<ol type="1">
<li>右键，点击刷新，刷新页面</li>
<li>关闭 <code>CONNECTION Client</code>，然后重新打开</li>
</ol>
<h2 id="trial-expired">Trial Expired</h2>
<p><strong>错误如下：</strong></p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220509115358653.png"
alt="image-20220509115358653" />
<figcaption aria-hidden="true">image-20220509115358653</figcaption>
</figure>
<p><strong>解决方法：</strong></p>
<p>出现上述错误的原因是 ORD
试用过期且未能获取到用户的正式授权导致的。</p>
<p>可以通过如下方式排查：</p>
<ol type="1">
<li>是否登陆了 <code>CONNECTION Client</code></li>
<li>如果登陆了，问题依旧，则说明没有授权，可以找管理员开通授权</li>
</ol>
<h2 id="连接问题">连接问题</h2>
<p><strong>错误如下：</strong></p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220509115801614.png"
alt="image-20220509115801614" />
<figcaption aria-hidden="true">image-20220509115801614</figcaption>
</figure>
<p><strong>解决方法：</strong></p>
<p>出现这个问题的的原因是无法与服务器通信导致的。可以通过以下方法解决：</p>
<ol type="1">
<li>检查是否有杀毒软件禁止了 <code>CONNECTION Client</code> 联网</li>
<li>如果网络正常，则关闭
<code>CONNECTION Client</code>，重新打开。可以多试几次</li>
<li>使用代理</li>
</ol>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Problems</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
        <tag>Bentley问题处理</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>廊道高程获取异常解决方法</title>
    <url>/posts/2023/22EQ1WQ.html</url>
    <content><![CDATA[<p>当模板导致生成的廊道高程获取异常时，可以使用如下方法解决。</p>
<span id="more"></span>
<h2 id="现象描述">现象描述</h2>
<p>如下图所示：</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230403104740267.png"
alt="绿化带异常" />
<figcaption aria-hidden="true">绿化带异常</figcaption>
</figure>
<p><strong>原因：一般是模板导致生成的 top mesh
网格出现问题导致</strong>。</p>
<p>可通过查看廊道TM查找模板具体哪里出问题，如下图所示，TM错误导致绿化带边线的纵断面异常：</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230403104858787.png"
alt="image-20230403104858787" />
<figcaption aria-hidden="true">image-20230403104858787</figcaption>
</figure>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230403104909416.png"
alt="image-20230403104909416" />
<figcaption aria-hidden="true">image-20230403104909416</figcaption>
</figure>
<h2 id="解决步骤">解决步骤</h2>
<ol type="1">
<li><p>更新模版，边坡，挡土墙等不参与 top mesh 生成，勾选 "Exclude From
Top/Bottom Mesh"</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230403105047250.png"
alt="image-20230403105047250" />
<figcaption aria-hidden="true">image-20230403105047250</figcaption>
</figure></li>
<li><p>更新完库模板后，点击绿化带异常所在的廊道Temple
Drop,在悬停工具栏中点击同步库模板按钮</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230403105116225.png"
alt="image-20230403105116225" />
<figcaption aria-hidden="true">image-20230403105116225</figcaption>
</figure></li>
</ol>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Problems</category>
      </categories>
      <tags>
        <tag>Problems</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>修改文字大小</title>
    <url>/posts/2020/JJQETR.html</url>
    <content><![CDATA[<p>在开发中，遇到这样一个问题，需要用某一文字样式创建文字，同时，还需要修改生成文字的大小，又不影响原来的文字样式。下面记录已知的两种方法。</p>
<span id="more"></span>
<h2 id="详细介绍">详细介绍</h2>
<ul>
<li>采用 COM
里面的API，用代码在原来样式的基础上生成新的样式，具体代码如下</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Bentley.Internal.MstnPlatformNET.TextStyleLibCollection textStyles = <span class="keyword">new</span> Bentley.Internal.MstnPlatformNET.TextStyleLibCollection(StyleIteratorMode.ActiveFileAndLibraries);</span><br><span class="line">DgnTextStyle targetStyle = textStyles.Where(item =&gt; item.Name == <span class="string">&quot;textStyleName&quot;</span>).FirstOrDefault();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (targetStyle == <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建新的钢筋标注样式</span></span><br><span class="line">    <span class="built_in">string</span> newTextStyleName = SwTextStyle.SW_25_SectionName.ToStringValue();<span class="comment">//注意名字要确保是唯一的</span></span><br><span class="line">    <span class="built_in">string</span> templateStyleName = SwTextStyle.SW_50_SectionName.ToStringValue();</span><br><span class="line">    Application msApp = Utilities.ComApp;</span><br><span class="line">    TextStyle templateStyle = msApp.ActiveDesignFile.TextStyles[templateStyleName];</span><br><span class="line">    msApp.ActiveDesignFile.TextStyles.Add(templateStyle, newTextStyleName);</span><br><span class="line">    TextStyle newTextStyle = msApp.ActiveDesignFile.TextStyles[newTextStyleName];</span><br><span class="line">    newTextStyle.Width = <span class="number">0.0020</span>;</span><br><span class="line">    <span class="comment">//修改文本样式的属性</span></span><br><span class="line">    newTextStyle.Height = <span class="number">0.0025</span>;</span><br><span class="line">    targetStyle = textStyles.Where(item =&gt; item.Name ==   <span class="string">&quot;textStyleName&quot;</span>).FirstOrDefault();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">TextBlock textBlock = <span class="keyword">new</span> TextBlock(dgnTextStyle, DgnModel);</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure>
<ul>
<li>直接修改文字样式，具体代码如下 <figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Bentley.Internal.MstnPlatformNET.TextStyleLibCollection textStyles = <span class="keyword">new</span> Bentley.Internal.MstnPlatformNET.TextStyleLibCollection(StyleIteratorMode.ActiveFileAndLibraries);</span><br><span class="line">DgnTextStyle targetStyle = textStyles.Where(item =&gt; item.Name == <span class="string">&quot;textStyleName&quot;</span>).FirstOrDefault();</span><br><span class="line"></span><br><span class="line">targetStyle.SetProperty(TextStyleProperty.Width, <span class="number">0.0020</span> * uor);</span><br><span class="line">targetStyle.SetProperty(TextStyleProperty.Height, <span class="number">0.0025</span> * uor);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">TextBlock textBlock = <span class="keyword">new</span> TextBlock(dgnTextStyle, DgnModel);</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure></li>
</ul>
<p>上面这种用法也是不会修改原来文字样式。</p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>Bentley二次开发</tag>
      </tags>
  </entry>
  <entry>
    <title>引线标注</title>
    <url>/posts/2020/1P955T2.html</url>
    <content><![CDATA[<p>最近用 C# 对 ORD
进行二次开发，做一个自动出图工具。其中必不可少的就是标注，被各种标注折腾得死去活来，特别是引线标注，坑特别多，特记录下来，供和大家学习交流，若有不正确之处，还请斧正。</p>
<span id="more"></span>
<h2 id="简介">简介</h2>
<p>在 C# 中，引线标注采用的是 <code>NoteCellHeaderElement</code>
这个类。具体代码如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 其中，arrowHeadPoint, arrowTailPnt, annotation, dgnModel 和 _dimensionCreateData 是传入的参数</span></span><br><span class="line">TextBlock textBlock = <span class="keyword">new</span> TextBlock(_dimensionCreateData.GetTextStyle(), DgnModel);</span><br><span class="line">textBlock.AppendText(annotation);</span><br><span class="line"></span><br><span class="line">NoteCellHeaderElement header = <span class="keyword">new</span> NoteCellHeaderElement(<span class="keyword">out</span> Element leaderElement, textBlock, <span class="keyword">this</span>._dimensionCreateData.GetDimensionStyle(), DgnModel, <span class="keyword">new</span> DPoint3d[] &#123; arrowHeadPoint, arrowTailPnt &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此步骤是为了设置引线文字的对齐方式为 0 (auto),它的主要作用是当第一个点在第二个点左侧时，文字在左方，否则文字是右方</span></span><br><span class="line">DimensionElement dim = leaderElement <span class="keyword">as</span> DimensionElement;</span><br><span class="line">DimensionStyle ds = dim.GetDimensionStyle();</span><br><span class="line">ds.SetIntegerProp(<span class="number">0</span>, DimStyleProp.MLNote_HorAttachment_INTEGER);         </span><br><span class="line">dim.ApplyDimensionStyle(ds, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 必须用这种方法添加引线标注到 model 中</span></span><br><span class="line">header.AddToModel(<span class="keyword">out</span> dim,dgnModel);</span><br></pre></td></tr></table></figure>
<p>下面详细分析为了得出上面的几行代码，需要处理的技术问题。</p>
<h2 id="dimensioncreatedata-怎么来的">_dimensionCreateData
怎么来的？</h2>
<p><code>_dimensionCreateData</code> 是 <code>DimensionCreateData</code>
的实例，查看 <code>DimensionCreateData</code>
定义，我们可以看到，它是一个抽象类，不能实例化它，所以就想着，看在 ORD
的程序集里面找一个实现它的类，可以查找无果，最后，从优先社区中得知，需要自己子类化一下它，代码如下（代码是项目中的一部分，没有简化，不能开箱即用，仅供参考）。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Bentley.DgnPlatformNET;</span><br><span class="line"><span class="keyword">using</span> Bentley.DgnPlatformNET.Elements;</span><br><span class="line"><span class="keyword">using</span> Bentley.GeometryNET;</span><br><span class="line"><span class="keyword">using</span> Bentley.MstnPlatformNET;</span><br><span class="line"><span class="keyword">using</span> swOpenRoadsSDK;</span><br><span class="line"><span class="keyword">using</span> SwTools.SimpleCAD.Enum.Extension;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SwTools.RebarTools.SDK.Dimension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">SwDimesionCreateData</span> : <span class="title">DimensionCreateData</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Dictionary&lt;SwDimensionStyle, DimensionStyle&gt; _dimensionStyleDic = <span class="keyword">new</span> Dictionary&lt;SwDimensionStyle, DimensionStyle&gt;();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Dictionary&lt;SwTextStyle, DgnTextStyle&gt; _textStyleDic = <span class="keyword">new</span> Dictionary&lt;SwTextStyle, DgnTextStyle&gt;();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Dictionary&lt;SwLevel, LevelId&gt; _levelDic = <span class="keyword">new</span> Dictionary&lt;SwLevel, LevelId&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> Symbology _symbology;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> DirectionFormatter _directionFormatter;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> DimensionStyle DimensionStyle &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> DgnTextStyle DgnTextStyle &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> LevelId LevelId &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SwDimesionCreateData</span>(<span class="params">DimensionStyle dimStyle, DgnTextStyle textStyle, Symbology symb, LevelId levelId, DirectionFormatter formatter</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            DimensionStyle = dimStyle;</span><br><span class="line">            DgnTextStyle = textStyle;           </span><br><span class="line">            LevelId = levelId;</span><br><span class="line"></span><br><span class="line">            _symbology = symb;</span><br><span class="line">            _directionFormatter = formatter;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SwDimesionCreateData</span>(<span class="params">SwDimensionStyle swDimensionStyle,SwTextStyle swTextStyle,Symbology symb, SwLevel swLevel,DirectionFormatter formatter</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(_dimensionStyleDic.TryGetValue(swDimensionStyle,<span class="keyword">out</span> DimensionStyle value1))</span><br><span class="line">            &#123;</span><br><span class="line">                DimensionStyle = value1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                DimensionStyle = DimensionHelper.GetDimensionStyle(swDimensionStyle.ToString());</span><br><span class="line">                _dimensionStyleDic.Add(swDimensionStyle, DimensionStyle);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(_textStyleDic.TryGetValue(swTextStyle,<span class="keyword">out</span> DgnTextStyle value2))</span><br><span class="line">            &#123;</span><br><span class="line">                DgnTextStyle = value2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                DgnTextStyle = DrawingHelper.GetTextStyle(swTextStyle.ToStringValue());</span><br><span class="line">                _textStyleDic.Add(swTextStyle, DgnTextStyle);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(_levelDic.TryGetValue(swLevel,<span class="keyword">out</span> LevelId value3))</span><br><span class="line">            &#123;</span><br><span class="line">                LevelId = value3;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                LevelHandle levelByName = Session.Instance.GetActiveDgnFile().GetLevelCache().GetLevelByName(swLevel.ToString());</span><br><span class="line">                LevelId = levelByName.LevelId;</span><br><span class="line">                _levelDic.Add(swLevel, LevelId);</span><br><span class="line">            &#125;         </span><br><span class="line"></span><br><span class="line">            _symbology = symb;</span><br><span class="line">            _directionFormatter = formatter;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> DimensionStyle <span class="title">GetDimensionStyle</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> DimensionStyle;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> DgnTextStyle <span class="title">GetTextStyle</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> DgnTextStyle;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Symbology <span class="title">GetSymbology</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _symbology;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> LevelId <span class="title">GetLevelId</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> LevelId;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> <span class="title">GetViewNumber</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> DMatrix3d <span class="title">GetDimensionRotation</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> DMatrix3d.Identity;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> DMatrix3d <span class="title">GetViewRotation</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> DMatrix3d.Identity;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> DirectionFormatter <span class="title">GetDirectionFormatter</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _directionFormatter;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> 静态方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SwDimesionCreateData <span class="title">GetSwBridgeAnnotationCreateData</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SwDimesionCreateData(SwDimensionStyle.SW_Bridge, SwTextStyle.CB_25, <span class="keyword">new</span> Symbology(), SwLevel.sw_尺寸, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DgnTextStyle <span class="title">GetDgnTextStyle</span>(<span class="params">SwTextStyle swTextStyle</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_textStyleDic.TryGetValue(swTextStyle, <span class="keyword">out</span> DgnTextStyle style))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> style;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                DgnTextStyle styleNew = DrawingHelper.GetTextStyle(swTextStyle.ToStringValue());</span><br><span class="line">                _textStyleDic.Add(swTextStyle, styleNew);</span><br><span class="line">                <span class="keyword">return</span> styleNew;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="new-notecellheaderelement对象时参数dpoint3d-中的点代表什么">new
NoteCellHeaderElement对象时，参数DPoint3d[] 中的点代表什么？</h2>
<p>它的第 1
个点代表引线箭头的坐标，后面的点代表引线导线的关键点。一般传入两个点就可以了。</p>
<h2 id="怎么实现引线和文字关联">怎么实现引线和文字关联？</h2>
<p>开始 new NoteCellHeaderElement 对象的时候，看到它 out 了一个
<code>element</code>, 便直接将它和 <code>header</code> 添加到了
model。这时查看模型元素后，发现它们俩是分开的，拽文字引线不跟着动，很难受。后面在众多相似的方法中，在
<code>NoteCellHeaderElement</code> 中找到一个
<code>AddToModel</code>的重载，它是这样的：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BentleyStatus <span class="title">AddToModel</span>(<span class="params"><span class="keyword">out</span> Element leaderElement, DgnModel dgnCache</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>从上面的定义里面，我们知道，它会 out
一个元素出来，但是，这个其实就是个坑，一个大坑。这个参数真正的意思是要将从上文得到的
leaderElement 传入进去，它里面会与 header 进行关联，并添加到 model
中。</p>
<p>所以，真正的用法应该是开篇示例代码那样。</p>
<h2 id="怎么让文字水平吸附为自动">怎么让文字水平吸附为自动？</h2>
<p><img data-src="https://i.loli.net/2020/08/27/rqQXWp3zNHFnadt.png" /></p>
<p>如上图，如果不对参数进行设置，默认生成的引线标注是 1 和 2
的样式，如果要得到 3 ，需要设置它的对齐方式。就是下面的代码：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">DimensionElement dim = leaderElement <span class="keyword">as</span> DimensionElement;</span><br><span class="line">DimensionStyle ds = dim.GetDimensionStyle();</span><br><span class="line">ds.SetIntegerProp(<span class="number">0</span>, DimStyleProp.MLNote_HorAttachment_INTEGER);         </span><br><span class="line">dim.ApplyDimensionStyle(ds, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<h2 id="怎么知道要设置哪个属性值呢">怎么知道要设置哪个属性值呢？</h2>
<p>上面是直接贴出了代码，可能就有人会问，为什么就知道是设置<code>DimStyleProp.MLNote_HorAttachment_INTEGER</code>
这个属性呢？下面介绍一下怎么去解决这种类似的问题。这种问题，我称之为
“操作代码化”
问题，就是说用户可以使用软件手动操作生成出来，但是现在需要用程序来实现。</p>
<p>这种问题的突破口就是要回归操作</p>
<ul>
<li>在应用程序中，手动放置需要生成的元素，然后通过 key-in
<code>analyze element</code> 这个命令去查看元素的详细信息。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 部分信息如下</span><br><span class="line">Element ID: 160542</span><br><span class="line">File Name: C:\WorkSets\codeTesting\dgn\柱测试.dgn</span><br><span class="line">Model Name: 桩_图纸</span><br><span class="line">Last Modified: 2020/08/27 00:52:41</span><br><span class="line">Type Specific Details:</span><br><span class="line">Dimension Type : </span><br><span class="line">IsAnnotation   : Yes</span><br><span class="line">Proxy Cell     : &lt;None&gt;</span><br><span class="line">Height         : 0.00000</span><br><span class="line">Point #0       : 0.50705, 0.26187</span><br><span class="line">Point #1       : 0.50178, 0.26847     A</span><br><span class="line">Rotation       : | 1.0000000  0.0000000  0.0000000 |</span><br><span class="line">                 |-0.0000000  1.0000000  0.0000000 |</span><br><span class="line">                 | 0.0000000  0.0000000  1.0000000 |</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<ul>
<li>画一个对照元素，也通过命令查看元素的详细信息</li>
<li>将两个详细信息进行对比，差异的部分就是导致两个元素表征显示不一样的原因，然后在程序里面去找到相应的设置。</li>
</ul>
<p>那么现在又有一个问题了，程序里面的获得元素，都是 <code>Element</code>
这个父类黑箱子，而要设置，就要进行拆箱，我们不知道究竟拆成什么类型？</p>
<p>这个问题，可以在运行时，通过 <code>.GetType()</code>
来获取类型，就知道应该转成什么类型了。</p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>Bentley二次开发</tag>
      </tags>
  </entry>
  <entry>
    <title>将元素的颜色设置为 ByLevel</title>
    <url>/posts/2020/31H546G.html</url>
    <content><![CDATA[<p>在给元素添加颜色的过程中，发现不能直接将颜色号设置成
-1（ByLevel），经过在优先社区的查找，终于解决了，特此记录。</p>
<span id="more"></span>
<h2 id="简介">简介</h2>
<p>设置元素的属性一般是创建一个
ElementPropertiesSetter，具体代码如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">ElementPropertiesSetter setter = <span class="keyword">new</span> ElementPropertiesSetter();</span><br><span class="line">setter.SetColor(ElementPropertyUint.COLOR_BYLEVEL);</span><br><span class="line">setter.SetWeight(<span class="number">1</span>);</span><br><span class="line">setter.SetLevel(GetLevel(SwLevel.sw_2D_点划线));</span><br><span class="line">setter.SetLinestyle((<span class="built_in">int</span>)ElementPropertyUint.STYLE_BYLEVEL,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">setter.Apply(ele);</span><br></pre></td></tr></table></figure>
<p>转到 SetColor 的定义我们可以看到，它是这样的：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetColor</span>(<span class="params"><span class="built_in">uint</span> color</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>而在 ORD 中，我们可以得知，ColorByLevel 的值是
-1，这就让我们很为难了。</p>
<h2 id="解决办法">解决办法</h2>
<p>实际上，在 .NET 下的颜色，-1 并不代表 ColorByLevel, ColorByLevel
真正的值是一个 uint, 不过它是16进制的，具体的定义如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ElementPropertyUint</span></span><br><span class="line">&#123;    </span><br><span class="line">    <span class="comment">// DgnPlatform.h 里面</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">uint</span> COLOR_BYLEVEL = <span class="number">0xffffffff</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">uint</span> COLOR_BYCELL = <span class="number">0xfffffffe</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">uint</span> STYLE_BYLEVEL = <span class="number">0x7fffffff</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">uint</span> STYLE_BYCELL = <span class="number">0x7ffffffe</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">uint</span> WEIGHT_BYLEVEL = <span class="number">0xffffffff</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">uint</span> WEIGHT_BYCELL = <span class="number">0xfffffffe</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">uint</span> LEVEL_BYCELL = <span class="number">64</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="致谢">致谢</h2>
<p>解决思路来自优先社区：
https://communities.bentley.com/communities/other_communities/chinafirst/f/microstation-projectwise/175980/msce-c-element-bylevel?ReplySortBy=CreatedDate&amp;ReplySortOrder=Ascending</p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>Bentley二次开发</tag>
      </tags>
  </entry>
  <entry>
    <title>MS中曲线总结</title>
    <url>/posts/2020/37N8G1C.html</url>
    <content><![CDATA[<p>MS
二开中，可能会处理很多的曲线，比如对曲线进行偏移，求交点，延长等等。每一种曲线，有它的特点和相应的
API，有时候要实现一个功能，可能需要将曲线在多种类型中进行相互转化，从而利用
MS 中原生的 API 实现我们自己想要的功能。</p>
<p>本文对常用的 ms 中的线条使用进行总结。</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>Bentley二次开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Bentley 各个 DLL 库介绍</title>
    <url>/posts/2023/358VFAC.html</url>
    <content><![CDATA[<p>Bentley 各个 DLL 作用介绍。</p>
<span id="more"></span>
<table>
<colgroup>
<col style="width: 34%" />
<col style="width: 65%" />
</colgroup>
<thead>
<tr class="header">
<th>DLL 名称</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Bentley.GeometryNET</strong></td>
<td>Managed wrappers for <strong>native</strong> (element)
implementations. BsplineCurve, CurvePrimitive, etc.</td>
</tr>
<tr class="even">
<td><strong>Bentley.GeometryNET.Structs</strong></td>
<td>Managed wrappers for "<strong>value</strong>" data type structures.
DPoint3d, DTransform3d, etc.</td>
</tr>
<tr class="odd">
<td><strong>Bentley.GeomertyNET.Common</strong></td>
<td>Interfaces providing <strong>EC/XML</strong> bindings. e.g.
IGeomerty, iLineSegment, etc.</td>
</tr>
</tbody>
</table>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<ol type="1">
<li><a
href="https://communities.bentley.com/products/programming/microstation_programming/w/wiki/52175/bentley-geometrynet">Bentley.GeometryNET
- MicroStation Programming - Wiki - MicroStation Programming - Bentley
Communities</a></li>
</ol>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
      </tags>
  </entry>
  <entry>
    <title>MS中曲线总结</title>
    <url>/posts/2020/37N8G1C.html</url>
    <content><![CDATA[<p>MS
二开中，可能会处理很多的曲线，比如对曲线进行偏移，求交点，延长等等。每一种曲线，有它的特点和相应的
API，有时候要实现一个功能，可能需要将曲线在多种类型中进行相互转化，从而利用
MS 中原生的 API 实现我们自己想要的功能。</p>
<p>本文对常用的 ms 中的线条使用进行总结。</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>Bentley二次开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Bentley二开资料导航</title>
    <url>/posts/2022/C1SHZF.html</url>
    <content><![CDATA[<p>本文收集 Bentley 开发相关资源链接，方便开发时查阅。</p>
<span id="more"></span>
<h2 id="开发文档及示例">开发文档及示例</h2>
<p><a
href="https://gitee.com/io9ioio9io/MicroStationAPI-Case-Set">MicroStationAPI案例集</a></p>
<p><a href="https://www.yuque.com/bentleysystems/msapi2022">MicroStation
C# API 2022版 (yuque.com)</a></p>
<h2 id="社区问答">社区问答</h2>
<p><a
href="https://communities.bentley.com/communities/other_communities/chinafirst/f/microstation-projectwise">二次开发
- Bentley 中国优先社区</a></p>
<p><a
href="https://communities.bentley.com/communities/other_communities/chinafirst/w/chinawiki/42797/page">技术资料库
- Bentley 中国优先社区</a></p>
<p><a
href="https://communities.bentley.com/communities/other_communities/bdn_other_communities/w/chinabdn-wiki">中国BDN社区-Wiki</a></p>
<p><a href="https://www.yuque.com/bentleysystems">Bentley 软件知识库 ·
语雀 (yuque.com)</a></p>
<p><a
href="https://communities.bentley.com/products/programming/">Developers
and Programming - Bentley Communities</a></p>
<p><a
href="https://communities.bentley.com/communities/other_communities/chinafirst/b/blog/posts/bentley-1786440826">Bentley
相关产品的咖啡角</a></p>
<h2 id="官方教学">官方教学</h2>
<p><a href="https://bentley-learn.com/">BENTLEY软件-官方教学
(bentley-learn.com)</a></p>
<p><a href="https://bentley-learn.com/page/1943206">MS 开发</a></p>
<p><a href="https://bentley-learn.com/all/5557853">ORD 开发</a></p>
<h2 id="bentley-每周开发资讯">Bentley 每周开发资讯</h2>
<ol type="1">
<li><p><a
href="https://mp.weixin.qq.com/s/eh5_-M3HRAtTKGjOOKUVOw">普通，共享，参数化？单元类型怎么选</a></p>
<p>当单元要求整体缩放，批量布置时，用共享单元</p>
<p>当单元的多个变化量可以用变量表达，且需要进行不同变化时，用参数化单元</p>
<p>当单元的变化没有规律时，只能使用普通单元</p></li>
<li><p><a
href="https://mp.weixin.qq.com/s/1_wFAIEx-7u-xMdNEtjQZQ">视角不同，呈现不同
—— Named Presentations功能介绍</a></p></li>
<li><p><a
href="https://mp.weixin.qq.com/s/a-965kgZY7G6c5qwDpOLUQ">参数化约束（一）</a></p></li>
</ol>
<h2 id="帮助文档">帮助文档</h2>
<p><a
href="https://docs.bentley.com/LiveContent/web/OpenRoads%20Designer%20CONNECT-v11/en/GUID-1C5C2EE7-525F-497C-9214-2D84E4C71F36.html">MicroStation
(bentley.com)</a></p>
<h2 id="dotnet-开发资源">DotNET 开发资源</h2>
<p><a
href="https://github.com/jobbole/awesome-dotnet-cn">jobbole/awesome-dotnet-cn:
DotNet
资源大全中文版，内容包括：编译器、压缩、应用框架、应用模板、加密、数据库、反编译、IDE、日志、风格指南等。
(github.com)</a></p>
<p><a href="https://gitee.com/kuiyu/dotnetcodes">DotNetCodes:
一些常用的功能性代码,可以减少许多开发时间,而且类与类之间没有什么依赖,每个类都可以单独拿出来使用</a></p>
<p><a
href="https://github.com/quozd/awesome-dotnet">quozd/awesome-dotnet: A
collection of awesome .NET libraries, tools, frameworks and software
(github.com)</a></p>
<h2 id="其它个人博客">其它个人博客</h2>
<p><a href="https://www.scratchapixel.com/index.html">Scratchapixel 3.0,
Learn Computer Graphics Programming</a></p>
<h2 id="致谢">致谢</h2>
<p>非常感谢以上文章所属作者的分享，在此表示诚挚谢意！</p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
      </tags>
  </entry>
  <entry>
    <title>MS To Learn</title>
    <url>/posts/2023/1H5NPNF.html</url>
    <content><![CDATA[<p>Bentley-learn里面全都有。都是以前公开课的视频。VBA、C#和C++的三套</p>
<span id="more"></span>
<h2 id="参考">参考</h2>
<p>https://bentley-learn.com/page/1943206</p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
      </categories>
  </entry>
  <entry>
    <title>如何制作 Bentley 软件的离线安装包</title>
    <url>/posts/2019/33DD0CG.html</url>
    <content><![CDATA[<h2 id="制作-bentley-产品的离线安装包">制作 Bentley
产品的离线安装包</h2>
<p>打开命令行，进入到 <code>安装文件.exe</code> 所在目录，然后执行
<code>*.exe /layout</code> 进行安装。</p>
<span id="more"></span>
<p>以安装 OBD 为例，假设安装文件为 <code>obdu9.exe</code>，位于系统的
<code>下载目录</code>中，则安装命令为：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">cd</span> downloads</span><br><span class="line">./obdu9.exe /layout</span><br></pre></td></tr></table></figure>
<h2 id="声明">声明</h2>
<p>本文首发于<a
href="https://noctiflorous.gitee.io/">李有福呀</a>，转载请注明出处。</p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>UseSkill</category>
      </categories>
      <tags>
        <tag>MS应用</tag>
        <tag>MS</tag>
        <tag>李有福呀</tag>
      </tags>
  </entry>
  <entry>
    <title>同一个Model中多个相同的参考显示不同的层组合</title>
    <url>/posts/2019/159N1WD.html</url>
    <content><![CDATA[<figure>
<img data-src="https://i.loli.net/2019/12/02/mup7YbjV3cPvIgh.png"
alt="同参考显示不同图层1.png" />
<figcaption aria-hidden="true">同参考显示不同图层1.png</figcaption>
</figure>
<p>在进行二维出图的时候，我们通常会将几张图纸放到一个 Sheet
中，那么，如何在不同的图纸显示不同的图层组合呢？</p>
<span id="more"></span>
<h2 id="问题描述">问题描述</h2>
<p>假设 “图纸汇总" Sheet 中有 3 张图纸，分别是 ”图A“、”图B“ 和 "图C"。
这三张图参考同一个名为 ”直线Model“ 的 Model <img data-src="https://i.loli.net/2019/12/02/JOuBF7plYh3GzMo.png"
alt="同参考显示不同图层2.png" /> ”直线“ Model 中有三条线，分别在
"Line1"、”Line2“、”Line3“ 这三个图层中。 <img data-src="https://i.loli.net/2019/12/02/bO5Bxwl2aGcnZNF.png"
alt="同参考显示不同图层3.png" /> 现在希望在 "图纸汇总" 中的 "图A" 中显示
"Line1" 和 ”Line2“ 图层，在 ”图B“ 显示 ”Line2“ 和 ”Line3“ 图层，在 ”图C“
中显示 "Line1" 和 ”Line3“ 图层。 如下图所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">0[图纸汇总]--包含--&gt;11[图A]</span><br><span class="line">0--包含--&gt;12[图B]</span><br><span class="line">0--包含--&gt;13[图C]</span><br><span class="line"></span><br><span class="line">11--参考--&gt;21(直线Model)</span><br><span class="line">12--参考--&gt;21</span><br><span class="line">13--参考--&gt;21</span><br><span class="line"></span><br><span class="line">21--包含--&gt;31[Line1图层]</span><br><span class="line">21--包含--&gt;32[Line2图层]</span><br><span class="line">21--包含--&gt;33[Line3图层]</span><br><span class="line"></span><br><span class="line">11-.显示参考模型中的.-&gt;31</span><br><span class="line">11-.显示参考模型中的.-&gt;32</span><br><span class="line"></span><br><span class="line">12-.显示参考模型中的.-&gt;32</span><br><span class="line">12-.显示参考模型中的.-&gt;33</span><br><span class="line"></span><br><span class="line">13-.显示参考模型中的.-&gt;31</span><br><span class="line">13-.显示参考模型中的.-&gt;33</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="解决方案">解决方案</h2>
<ol type="1">
<li>打开图纸的 sheet;</li>
<li>选择需要修改的元素，长按右键，在弹出菜单中选择
Active。这个功能的意思是在当前 Model 中激活参考，实现在当前 Model
中对参考进行编辑。 <img data-src="https://i.loli.net/2019/12/02/c9oj5k3O7s6xwhE.png"
alt="同参考显示不同图层4.png" /></li>
<li>打开图层显示管理器，根据需要，开关不同的图层。 <img data-src="https://i.loli.net/2019/12/02/u1xzRIjYJcH3AQG.png"
alt="同参考显示不同图层5.png" /></li>
<li>长按右键，在弹出菜单中选择 DeActive
取消激活，便完成了一张图纸的修改。</li>
<li>如果有需要，可以采用上述 2-4
步骤，对所有需要修改的图纸进行操作。</li>
</ol>
<h2 id="效果展示">效果展示</h2>
<figure>
<img data-src="https://i.loli.net/2019/12/02/mup7YbjV3cPvIgh.png"
alt="同参考显示不同图层1.png" />
<figcaption aria-hidden="true">同参考显示不同图层1.png</figcaption>
</figure>
<h2 id="声明">声明</h2>
<p>本文首发于<a
href="https://noctiflorous.gitee.io/">李有福呀</a>，转载请注明出处。</p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>UseSkill</category>
      </categories>
      <tags>
        <tag>MS应用</tag>
        <tag>MS</tag>
        <tag>李有福呀</tag>
      </tags>
  </entry>
  <entry>
    <title>打开系统隐藏的管理员功能</title>
    <url>/posts/2020/1DD84QT.html</url>
    <content><![CDATA[<span id="more"></span>
<h2 id="打开系统隐藏的管理员功能">打开系统隐藏的管理员功能</h2>
<p>从 [ 快速访问工具栏 ]
中选择管理时，将显示“管理”工作流选项卡。选项卡、工具组和工具按工作流从左到右排列。</p>
<p>缺省情况下，仅当激活文件是由
MS_GUIDGNLIBLIST、_USTN_SYSTEM_GUIDGNLIBLIST、MS_DGNLIBLIST 或
_USTN_DGNLIBLIST_SYSTEM 配置变量指定的 DGN 库文件 (*.dgnlib) 时，“管理”
工作流才可用。</p>
<p>如果希望“管理”工作流始终可用，要将功能变量
<code>_USTN_CAPABILITY &lt; +CAPABILITY_UI_ALWAYSSHOWADMINWORKFLOW</code>
添加到 组织配置文件 (standards.cfg) 中。</p>
<p>如果希望该工作流仅适用于特定的工作集，请将该功能变量添加到
工作集配置文件 中。</p>
<p>如果希望该工作流仅适用于特定的工作空间，请将该功能变量添加到
工作空间配置文件 中。</p>
<h2 id="声明">声明</h2>
<p>本文首发于<a
href="https://noctiflorous.gitee.io/">李有福呀</a>，转载请注明出处。</p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>UseSkill</category>
      </categories>
      <tags>
        <tag>MS应用</tag>
        <tag>MS</tag>
        <tag>李有福呀</tag>
      </tags>
  </entry>
  <entry>
    <title>命名表达式可使用的函数汇总</title>
    <url>/posts/2020/1S5QGSS.html</url>
    <content><![CDATA[<p>收集了 ms 中一些可用的命名表达式（Named Expression）方法。</p>
<span id="more"></span>
<p><a href="/htmls/expression_symbols_list">expression_symbols</a></p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>UseSkill</category>
      </categories>
      <tags>
        <tag>ORD</tag>
        <tag>NamedExpression</tag>
      </tags>
  </entry>
  <entry>
    <title>3dmax 文件如何导入到 dgn 中</title>
    <url>/posts/2022/29WK0R3.html</url>
    <content><![CDATA[<p>如果需要将 3dmax 模型文件导入到 dgn 中，可以有以下方法：</p>
<span id="more"></span>
<ol type="1">
<li><p>转为 fbx</p></li>
<li><p>导出为 3ds 文件</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/a20b055e7096dbd2105bdd712558425.png"
alt="a20b055e7096dbd2105bdd712558425" />
<figcaption
aria-hidden="true">a20b055e7096dbd2105bdd712558425</figcaption>
</figure>
<p>在 3DMAX 中导出 3DS 格式，然后在 MS 中导入 3DS.</p></li>
</ol>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>UseSkill</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
        <tag>UseSkill</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>超级快捷键使用说明</title>
    <url>/posts/2021/192XQSC.html</url>
    <content><![CDATA[<p>超级快捷键是一款可以让你在使用 Bentley 的产品时，拥有和 CAD
一样的快捷键体验的插件。</p>
<span id="more"></span>
<h2 id="演示">🌈演示</h2>
<video id="video" controls preload="none" poster="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220726213114859.png">
<source id="mp4" src="https://obs.uamazing.cn:52443/public/files/video/Microstation-powershortcut.mp4" type="video/mp4" />
</video>
<h2 id="优点">😃优点</h2>
<ol type="1">
<li><p>命令直达</p>
<p>所有操作皆可通过敲入一个快捷键来调用</p></li>
<li><p>按字母顺序模糊匹配</p>
<p>快捷键忽略大小写，同时会按顺序进行模糊匹配。比如定义了快捷键
<code>line</code>，可以输入
<code>l</code>、<code>i</code>、<code>e</code>、<code>li</code>、<code>lin</code>
<code>ine</code> 等共 10 种组合方式</p></li>
<li><p>按使用频率排序</p>
<p>由于每个快捷键会有多种匹配方式，会根据使用频率对结果进行排序，更懂你的想法</p></li>
<li><p>中文状态可输入快捷键</p>
<p>在中文状态下，也可以直接输入命令执行</p></li>
<li><p>快捷键与 keyin 多对多</p>
<p>一个快捷键可以执行多个 keyin，一个 keyin
也可以设置多个快捷键</p></li>
</ol>
<h2 id="安装">🍅安装</h2>
<h3 id="快速安装">快速安装</h3>
<p>超级快捷键支持 PowerShell 脚本一键安装，打开
PowerShell，然后复制以下命令，按 Enter 执行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">irm</span> https://gitee.com/galensgan/benltey<span class="literal">-power-shortcuts</span>/raw/master/install.ps1 | <span class="built_in">iex</span></span><br></pre></td></tr></table></figure>
<p>然后按提示输入选项即可一键安装。</p>
<blockquote>
<p>若提示需要手动配置快捷键，则按 <a
href="#手动配置空格弹出快捷键">手动配置空格弹出快捷键</a> 进行操作</p>
</blockquote>
<h3 id="视屏教程">视屏教程</h3>
<video id="video" controls preload="none" poster="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220802223420426.png">
<source id="mp4" src="https://obs.uamazing.cn:52443/public/files/video/powerShortcut-install.mp4" type="video/mp4" />
</video>
<h3 id="安装步骤">安装步骤</h3>
<ol type="1">
<li><p>点击 <a
href="https://obs.uamazing.cn:52443/public/files/soft/PowerShortcut.dll">超级快捷键</a>
下载插件，并重命名为 <code>PowerShortcut.dll</code></p>
<p>在下载的时候，浏览器可能会提示需要信任：</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220318123634321.png"
alt="image-20220318123634321" />
<figcaption aria-hidden="true">image-20220318123634321</figcaption>
</figure>
<p>点击信任即可。</p>
<blockquote>
<p>源代码：https://gitee.com/galensgan/benltey-power-shortcuts</p>
</blockquote></li>
<li><p>将 <code>PowerShortcut.dll</code> 拷贝至
<code>C:\Program Files\Bentley\OpenRoads Designer CONNECT Edition\OpenRoadsDesigner\Mdlapps</code>
目录中。</p></li>
<li><p>加载快捷键</p>
<figure>
<img data-src="https://i.loli.net/2021/08/24/ptBMTQSJZvqUjGa.png"
alt="ptBMTQSJZvqUjGa.png" />
<figcaption aria-hidden="true">ptBMTQSJZvqUjGa.png</figcaption>
</figure></li>
<li><p>初始化超级快捷键</p>
<p>请注意，初始化后，会覆盖原来的空格弹出功能。</p>
<p>快捷键加载完成后，按 Enter 或者 F9 弹出 keyin 窗体，在里面输入
<code>power install</code>，然后按 Enter 确认。</p>
<blockquote>
<p>如果提示
<code>未找到系统快捷键配置，请手动修改激活的快捷键</code>，请按 <a
href="#手动配置空格弹出快捷键">手动配置空格弹出快捷键</a>
进行手动配置快捷键</p>
</blockquote></li>
<li><p>开始配置符合自己习惯的快捷键</p>
<p>具体方式见 <a href="#增加快捷键">&gt; 增加快捷键</a></p></li>
</ol>
<h3 id="手动配置空格弹出快捷键">手动配置空格弹出快捷键</h3>
<p>如果提示
<code>未找到系统快捷键配置，请手动修改激活的快捷键</code>，需要按下图更改空格的响应
keyin 命令：</p>
<p><img data-src="https://i.loli.net/2021/08/24/bsKXZ9hQIu7iplf.png" /></p>
<p>如果没有手动修改配置空格的快捷键，需要重启软件才会生效。</p>
<h3 id="添加自定义快捷键">添加自定义快捷键</h3>
<p>按 Enter 或者 F9 弹出 keyin 窗体，在里面输入
<code>power openconfig</code>，按空格确认，此时会打开快捷键定义文件，在里面进行快捷键定义，编辑完成后关闭文件，快捷键添加完成。</p>
<p><a href="#增加快捷键">&gt; 详细步骤-增加快捷键</a></p>
<h2 id="使用">🥝使用</h2>
<ol type="1">
<li><p>单击空格，如果安装成功，会弹出快捷键输入窗体：</p>
<p><img data-src="https://i.loli.net/2021/08/24/s9TlypXKogYv4NZ.png" /></p></li>
<li><p>在里面输入定义的快捷键，按 Enter 或者 空格 响应命令</p></li>
</ol>
<h2 id="内置-keyin">🍆内置 keyin</h2>
<table>
<colgroup>
<col style="width: 4%" />
<col style="width: 21%" />
<col style="width: 73%" />
</colgroup>
<thead>
<tr class="header">
<th>序号</th>
<th>keyin</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>power install</td>
<td>超级快捷键安装，会覆盖原来空格键的弹出菜单</td>
</tr>
<tr class="even">
<td>2</td>
<td>power openConfig</td>
<td>打开快捷键定义文件，关闭编辑器会自动重载快捷键</td>
</tr>
<tr class="odd">
<td>3</td>
<td>power reloadConfig</td>
<td>重新加载快捷键文件。如果直接修改快捷键文件后，需运行该命令重新加载后才可使用</td>
</tr>
<tr class="even">
<td>4</td>
<td>power shortcut</td>
<td>打开超级快捷键窗口</td>
</tr>
<tr class="odd">
<td>5</td>
<td>power setting</td>
<td>对超级快捷键进行设置</td>
</tr>
</tbody>
</table>
<h2 id="内置快捷键">🥬内置快捷键</h2>
<table>
<colgroup>
<col style="width: 9%" />
<col style="width: 14%" />
<col style="width: 76%" />
</colgroup>
<thead>
<tr class="header">
<th>序号</th>
<th>keyin</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>空格</td>
<td>激活快捷键输入窗体或者执行快捷键或者执行上一次的快捷键</td>
</tr>
<tr class="even">
<td>2</td>
<td>Enter</td>
<td>执行快捷键或者窗体输入为空时，执行上一次的快捷键</td>
</tr>
<tr class="odd">
<td>3</td>
<td>config</td>
<td>打开快捷键定义文件</td>
</tr>
<tr class="even">
<td>4</td>
<td>reload</td>
<td>重新加载快捷键文件。当增加快捷键后，运行该命令重新加载后才可使用</td>
</tr>
<tr class="odd">
<td>5</td>
<td>上箭头</td>
<td>查看上一个命令</td>
</tr>
<tr class="even">
<td>6</td>
<td>下箭头</td>
<td>查看下一个命令</td>
</tr>
</tbody>
</table>
<h2 id="快捷键定义">🌰快捷键定义</h2>
<h3 id="单个快捷键定义">单个快捷键定义</h3>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;d&quot;</span><span class="punctuation">,</span><span class="string">&quot;delete&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 可以设置多个快捷键</span></span><br><span class="line">    <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span><span class="string">&quot;delete element&quot;</span><span class="punctuation">,</span> <span class="comment">// 快捷键对应的 keyin 命令,多个 keyin 用分号分隔，也可以使用 keyins 来配置</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;删除元素&quot;</span> <span class="comment">// 快捷键的描述</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="comment">// 每一个定义都要以英文逗号结尾</span></span><br></pre></td></tr></table></figure>
<h3 id="一个快捷键响应多个命令">一个快捷键响应多个命令</h3>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种方式</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;mks&quot;</span><span class="punctuation">,</span><span class="string">&quot;multipleKeyins&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span><span class="string">&quot;keyin1;keyin2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;运行两个命令&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方式</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;mks&quot;</span><span class="punctuation">,</span><span class="string">&quot;multipleKeyins&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;keyins&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;keyin1&quot;</span><span class="punctuation">,</span><span class="string">&quot;keyin2&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;运行两个命令&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="模板">模板</h3>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;shortcuts&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;l&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span><span class="string">&quot;place smartline&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;绘制直线&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;d&quot;</span><span class="punctuation">,</span><span class="string">&quot;delete&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span><span class="string">&quot;delete element&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;删除元素&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;c&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span><span class="string">&quot;place circle icon&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;绘制圆弧&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;cc&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span><span class="string">&quot;place circle center&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;通过圆心绘制圆弧&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;cd&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span><span class="string">&quot;place circle diameter&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;通过直径绘制圆弧&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;m&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span><span class="string">&quot;move icon&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;移动&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;co&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span><span class="string">&quot;copy icon&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;复制&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;mi&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span><span class="string">&quot;mirror icon&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;镜像&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;o&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span><span class="string">&quot;MOVE PARALLEL OFFSET&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;偏移&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;tr&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span><span class="string">&quot;trim multiple&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;修剪&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;te&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span><span class="string">&quot;trim Extend&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;延长&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;b&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span><span class="string">&quot;trim break&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;打断&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;ti&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span><span class="string">&quot;trim tointersection&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;剪切到交点&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;reload&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span><span class="string">&quot;power reloadConfig&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;重新加载快捷键&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;default&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span><span class="string">&quot;model active default&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;打开/关闭 default model&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;modeltest&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span><span class="string">&quot;model active ModelTest&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;打开/关闭 ModelTest model&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;model&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span><span class="string">&quot;MDL KEYIN MODELMANAGER MODEL DIALOG TOGGLE&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;打开/关闭 model 管理界面&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;ref&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span><span class="string">&quot;MDL KEYIN REF DIALOG REFERENCE TOGGLE&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;打开 model 管理界面&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;sw&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span><span class="string">&quot;ribbon setworkflow swTools&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;打开 swTools 界面&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;drawing&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span><span class="string">&quot;ribbon setworkflow drawing&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;打开 drawing 界面&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;skp&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span><span class="string">&quot;snap keypoint&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;捕捉关键点&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;mref&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span><span class="string">&quot;reference merge&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;合并参考文件&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;tk&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span><span class="string">&quot;BOQAddin InsertDrawingBorder&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;图框&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;config&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span><span class="string">&quot;power openConfig&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;打开快捷键配置文件&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;di&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span><span class="string">&quot;measure distance&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;测量距离&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;acs&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span><span class="string">&quot;MDL KEYIN BENTLEY.VIEWATTRIBUTESDIALOG,VAD VIEWATTRIBUTESDIALOG SETATTRIBUTE 0 ACSTriad True&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;打开 ACS&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="快捷键定义文件位置">快捷键定义文件位置</h3>
<p>快捷键默认保存到：<code>C:\Users\%username%\AppData\Local\Bentley\PowerShortcut\PowerShortcut.json</code></p>
<h3 id="好用的快捷键配置">好用的快捷键配置</h3>
<p>可直接复制到配置文件中使用。</p>
<ol type="1">
<li><p>打开 ACS</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;acs&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keyins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;MDL KEYIN BENTLEY.VIEWATTRIBUTESDIALOG,VAD VIEWATTRIBUTESDIALOG SETATTRIBUTE 0 ACSTriad True&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;MDL KEYIN BENTLEY.VIEWATTRIBUTESDIALOG,VAD VIEWATTRIBUTESDIALOG SETATTRIBUTE 1 ACSTriad True&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;打开 ACS&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li>
<li><p>激活某个功能区</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;curves&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MDL KEYIN RibbonView RIBBON SETACTIVETAB Modeling\\Curves&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;激活建模中的曲线功能区&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li>
<li><p>初始化环境</p>
<p>该快捷键主要做以下几个操作：</p>
<ul>
<li><p>关闭向后剪切</p></li>
<li><p>打开 ACS</p></li>
<li><p>将图形元素适应整个屏幕</p></li>
<li><p>旋转到 ISO 视角</p></li>
<li><p>光标重置为选择状态</p></li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;init&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;env&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keyins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;MDL KEYIN BENTLEY.VIEWATTRIBUTESDIALOG,VAD VIEWATTRIBUTESDIALOG SETATTRIBUTE 0 ClipBack False&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;MDL KEYIN BENTLEY.VIEWATTRIBUTESDIALOG,VAD VIEWATTRIBUTESDIALOG SETATTRIBUTE 0 ACSTriad True&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;MDL KEYIN BENTLEY.VIEWATTRIBUTESDIALOG,VAD VIEWATTRIBUTESDIALOG SETATTRIBUTE 1 ACSTriad True&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;fit view extended&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;ROTATE ACTIVEVIEW ISO&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;choose element&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;环境初始化&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li>
<li><p>打开/关闭 model 管理界面</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;model&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MDL KEYIN MODELMANAGER MODEL DIALOG TOGGLE&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;打开/关闭 model 管理界面&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li>
<li><p>打开参考管理界面</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;ref&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MDL KEYIN REF DIALOG REFERENCE TOGGLE&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;打开参考管理界面&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li>
<li><p>参考文件的操作</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;rc&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;reference copy&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;复制参考&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;rm&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;reference move&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;移动参考&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;rmi&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;reference copy&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;镜像参考&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;rr&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;reference rotate&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;旋转参考&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;rs&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;reference scale&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;缩放参考&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;rmg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;merge&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;reference merge&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;合并参考到主文件&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li>
<li><p>隔离与取消隔离</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;gl&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;displayset set selection&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;隔离选中元素&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;ngl&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;displayset clear&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;取消隔离&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li>
<li><p>功能区切换</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;curves&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MDL KEYIN RibbonView RIBBON SETACTIVETAB Modeling\\Curves&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;激活建模中的曲线功能区&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;solids&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MDL KEYIN RibbonView RIBBON SETACTIVETAB Modeling\\Solids&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;激活建模中的实体功能区&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;constraints&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MDL KEYIN RibbonView RIBBON SETACTIVETAB Modeling\\Constraints&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;激活建模中的约束功能区&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;home&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MDL KEYIN RibbonView RIBBON SETACTIVETAB Drawing\\Home&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;激活绘图中的主页功能区&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;rebar&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keyin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MDL KEYIN RibbonView RIBBON SETACTIVETAB swTools\\sw_Rebar&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;激活swTools中的钢筋功能区&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="匹配规则">🍉匹配规则</h2>
<p>快捷键按下列优先级对匹配的快捷键进行排序：</p>
<ol type="1">
<li>完整匹配</li>
<li>部分匹配，按使用频率排序</li>
</ol>
<h2 id="增加快捷键">🍒增加快捷键</h2>
<p>按下列步骤新增快捷键：</p>
<ul>
<li><p>打开快捷键定义文件</p>
<p>可以使用三种方式打开快捷键文件</p>
<ol type="1">
<li>在快捷键窗口中输入 <code>config</code></li>
<li>在 keyin 窗口中输入 <code>power openConfig</code></li>
<li>在资源管理器中输入
<code>C:\Users\%username%\AppData\Local\Bentley\PowerShortcut\PowerShortcut.json</code>
打开</li>
</ol></li>
<li><p>添加快捷键定义</p>
<p>快捷键具体定义格式见 <a href="#快捷键定义">&gt;
快捷键定义</a>，特别注意，每个定义后面必须要有一个英文的逗号</p></li>
<li><p>重新加载快捷键文件</p>
<p>可以使用下列 3 个方式重新加载快捷键</p>
<ol type="1">
<li>如果是通过 <code>config</code> 快捷键或者
<code>power openConfig</code> keyin
打开的快捷键编辑器，在其关闭时会自动重新加载</li>
<li>在快捷键窗口中输入 <code>reload</code></li>
<li>在 keyin 窗口中输入 <code>power reloadConfig</code></li>
</ol></li>
</ul>
<p><strong>在快捷键定义中，如何找到自己需要的 keyin 呢？</strong></p>
<p>点击视屏查看具体方法：</p>
<video id="video" controls preload="none" poster="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220726215958494.png">
<source id="mp4" src="https://obs.uamazing.cn:52443/public/files/video/获取keyin命令.mp4" type="video/mp4" />
</video>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>UseSkill</category>
      </categories>
      <tags>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>如何删除 ORD 中的工作空间</title>
    <url>/posts/2022/T3NMZE.html</url>
    <content><![CDATA[<p>在日常使用中，我们可能会由于误操作，在公司定制的
<code>workspace（工作空间）</code>
中创建了一个多余的工作空间，那么要如何删除它呢?</p>
<span id="more"></span>
<p>假设需要删除的工作空间为 <code>useless</code>, 如下图所示：</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220314194931015.png"
alt="image-20220314194931015" />
<figcaption aria-hidden="true">image-20220314194931015</figcaption>
</figure>
<p>找到工作空间存储的文件夹位置，下列中为
<code>C:\sw_Bentley\OpenRoads\WorkSpaces</code>， 删除其中的
<code>useless</code> 文件夹和 <code>useless.cfg</code> 配置文件。</p>
<blockquote>
<p>可以通过打开新建工作空间界面，来获取其保存的位置。</p>
</blockquote>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220314194815286.png"
alt="image-20220314194812625" />
<figcaption aria-hidden="true">image-20220314194812625</figcaption>
</figure>
<p>重启 ORD 即可完成对工作空间的删除。</p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>UseSkill</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>ORD 及 swBentley 安装教程</title>
    <url>/posts/2022/3EFH36D.html</url>
    <content><![CDATA[<p>本文介绍了 OpenRoads Designer（以下简称 ORD）的安装教程。本教程以 ORD
u11 为例，其它版本的安装方法与该版本相同。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230307213816049.png"
alt="image-20230307213816049" />
<figcaption aria-hidden="true">image-20230307213816049</figcaption>
</figure>
<span id="more"></span>
<h2 id="安装要求">安装要求</h2>
<p>由于 ORD 软件默认安装在 C 盘，所以需要保证 C 盘有足够的空间大小，ORD
最小所需安装空间约为：<strong>20G ！</strong>。</p>
<blockquote>
<p>ORD 安装时支持自定义安装位置，可以选择安装在其它盘，减少 C 盘占用</p>
</blockquote>
<h2 id="下载安装包">下载安装包</h2>
<p>安装包可以从 <code>iEPC</code>
的知识管理中下载，也可以从同事处拷贝，由于网速原因，此处不再另外单独给下载链接。</p>
<h2 id="卸载原安装">卸载原安装</h2>
<p>根据以下步骤进行依次卸载或者删除：</p>
<h3 id="卸载-ord-程序">卸载 ORD 程序</h3>
<p>打开程序和功能面板，卸载 ORD</p>
<blockquote>
<p>快捷打开方式： <code>win+R</code>，然后输入 <code>appwiz.cpl</code>
，点击确定。</p>
</blockquote>
<h3 id="卸载-connection-client-程序">卸载 Connection Client 程序</h3>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230530095409381.png"
alt="image-20230530095409381" />
<figcaption aria-hidden="true">image-20230530095409381</figcaption>
</figure>
<h3 id="删除卸载残留">删除卸载残留</h3>
<blockquote>
<p>删除残留为可选项，当安装失败时，需要先清除残留后再进行安装。</p>
</blockquote>
<ol type="1">
<li><p>删除安装目录</p>
<p>默认为：
<code>C:\Program Files\Bentley\OpenRoads Designer CE 10.11\OpenRoadsDesigner</code></p></li>
<li><p>删除程序配置目录</p>
<p><code>C:\ProgramData\Bentley\OpenRoads Designer CE 10.11</code></p>
<p><code>C:\ProgramData\Bentley\OpenRoadsDesigner</code></p></li>
<li><p>删除用户配置目录</p>
<p><code>C:\Users\%username%\AppData\Local\Bentley\OpenRoadsDesigner</code></p></li>
<li><p>删除注册表</p>
<p>以管理员身份运行 <code>cmd</code> 或者 <code>posershell</code>，按
<code>ctrl+x</code> 会弹出快捷菜单：</p>
<ul>
<li>windows 10 选择 <code>Windows Powershell 管理员(A)</code></li>
<li>windows 11 选择 <code>终端管理员(A)</code></li>
</ul>
<p>可以快速打开 powershell。</p>
<p>将以下代码拷贝到里面，按 Enter 即可：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除 ConnectClient</span></span><br><span class="line">reg delete HKCU/HKEY_CURRENT_USER/Software/Bentley/CONNECTIONClient /f</span><br><span class="line">reg delete HKCU/HKEY_LOCAL_MACHINE/Software/Bentley/CONNECTIONClient /f</span><br><span class="line"><span class="comment"># 删除 ORD</span></span><br><span class="line">reg delete HKCU/HKEY_CURRENT_USER/Software/Bentley/OpenRoadsDesigner /f</span><br><span class="line">reg delete HKCU/HKEY_LOCAL_MACHINE/Software/Bentley/OpenRoadsDesigner /f</span><br><span class="line"><span class="comment"># 删除 License 服务</span></span><br><span class="line">reg delete HKCU/HKEY_CURRENT_USER/Software/Bentley/LicenseService /f</span><br><span class="line">reg delete HKCU/HKEY_LOCAL_MACHINE/Software/Bentley/LicenseService /f</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="开始安装">开始安装</h2>
<ol type="1">
<li><p>解压软件</p>
<p>安装包下载完成后，解压文件，其中文件如下图所示：</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/企业微信截图_16521749963686.png"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure></li>
<li><p>单击 <em>Setup_OpenRoadsDesignerx64_10.09.00.091.exe</em>
进行安装</p></li>
<li><p>配置安装路径</p>
<p>点击 <code>Configure</code> 跳转到安装配置界面，如下图所示</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230307213254437.png" alt="image-20230307213254437" style="width: 50%;"/></p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230307213816049.png"
alt="image-20230307213816049" />
<figcaption aria-hidden="true">image-20230307213816049</figcaption>
</figure>
<p>配置完成后，勾选
<code>I accept the End User License Agreement</code>，然后点击
<code>Install</code> 进行安装。</p>
<p>现在不需要其它操作，静候程序自动安装完成即可!</p></li>
<li><p>关闭 CONNECTION Client 自启动</p>
<blockquote>
<p>本步骤为可选项，根据需要选择</p>
</blockquote>
<p><code>CONNECTION Client</code>
安装完成后，会默认开机启动，既影响开机速度，又影响使用体验。关闭位置如下：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220510175143781.png" style="width:80%"></p>
<p>在任务管理器的启动栏中，找到上述三个启动项，右键，关闭。</p></li>
</ol>
<h2 id="登陆bentley账号">登陆Bentley账号</h2>
<p>在打开 ORD 时，会要求登陆
<code>CONNECTION Client</code>，其登陆界面如下：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220510175314700.png"></p>
<p>输入账号（账号是邮箱），点击
<code>Next</code>，再输入密码进行登陆。</p>
<h3 id="注册账号">注册账号</h3>
<p>如果没有账号，需要点击 <code>立即注册</code> 进行注册。也可以<a
href="https://ims.bentley.com/">点击此处</a> 快速跳转到注册界面。</p>
<h3 id="申请授权">申请授权</h3>
<p>新注册账户需要管理员进行授权才能使用 ORD。将申请的账号发给
<em>管理员</em>，在管理员授权以后，重新登陆
<code>CONNECTION Client</code> ，即可正常使用 ORD。</p>
<h3 id="忘记密码">忘记密码？</h3>
<p>若忘记密码，请单击登陆界面的 <code>忘记密码</code> 进行找回。</p>
<h2 id="下载-swsetup">下载 SwSetup</h2>
<p>到目前为止，ORD 不具有任何企业定制化的设置在里面，此时需要通过
<code>SwSetup</code> 安装 <code>SwBentley</code>，从而使 ORD
可以开始应用于生产环境。</p>
<p><code>SwSetup</code> 可在 <code>iEPC</code>
的知识管理中下载，此处没有直链。</p>
<blockquote>
<p><strong>注意：</strong></p>
<p>下载时、解压时、使用时可能会被杀毒软件提示是病毒，从而不能被隔离。可以关闭杀毒软件再试，被报病毒是由于该软件需要用管理员权限启动，所以会被误报。</p>
</blockquote>
<h2 id="激活-swbentley">激活 SwBentley</h2>
<p><strong>注册必读：</strong></p>
<p><strong>申请码与电脑硬件数量及类型相关，比如增减U
盘、移动硬盘、软件狗等会使激活码变动（鼠标、键盘、显示器没有影响），因此在申请时，确保当前电脑处于常用的硬件安装状态。</strong></p>
<p>当打开 <code>swSetup</code>
时，若未注册，则会弹出新用户注册界面，如下图所示：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220510180523865.png" style="max-width:min(100%,400px)"></p>
<p>点击 <code>获得注册码</code></p>
<p>随后弹出注册申请界面，如下图所示：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220510180648349.png" style="max-width:min(100%,300px)"></p>
<p>填入相关信息，单击发送。</p>
<p>若申请通过，将会通过用户邮箱发送用户注册码。</p>
<blockquote>
<p>激活码可能会被邮箱识别成垃圾邮件，所以可以在垃圾箱中查看下是否有激活码接收。</p>
</blockquote>
<h2 id="安装swbentley">安装SwBentley</h2>
<p><code>swSetup</code> 激活后，就可以进行更新了。</p>
<p>在更新之前，需要先 <strong>关闭 ORD</strong>，然后再打开
<code>swSetup.exe</code>，此时会出现下图所示界面：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220510180955637.png" style="max-width:min(100%,350px)"></p>
<p>点击 <code>更新</code>，更新完成后，<code>SwBentley</code>
也就安装完成了。</p>
<blockquote>
<p>额外补充：</p>
<p>swSetup 的激活码与 SwBentley 是绑定的，只要激活了 swSetup，SwBentley
也就激活了。</p>
</blockquote>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>UseSkill</category>
      </categories>
      <tags>
        <tag>NexT</tag>
        <tag>Bentley</tag>
        <tag>ORD使用</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>多个数据的展开与压缩</title>
    <url>/posts/2023/2812PDV.html</url>
    <content><![CDATA[<p>在开发中，遇到一个需求，需要将一组数据，将连续出现的部分压缩成 n*y
的形式，比如：<code>20 30 30 20</code> 压缩后的结果应为
<code>20 2x30 20</code></p>
<p>同时也要对压缩的数据进行解压还原。</p>
<span id="more"></span>
<p><strong>压缩数据算法实现：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将数组数中相同的元素进行合并，表示成 数量*值 的形式，元素之间使用逗号分隔</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">arr</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回的是数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">compressArray</span>(<span class="params">arr, productSign = <span class="string">&#x27;x&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = []</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 如果是最后一个元素或者当前元素与下一个元素不同</span></span><br><span class="line">    <span class="keyword">if</span> (i === arr.<span class="property">length</span> - <span class="number">1</span> || arr[i] !== arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="comment">// 如果连续出现的元素个数大于 1，则将其压缩为数量*值的形式</span></span><br><span class="line">      <span class="keyword">if</span> (count &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        result.<span class="title function_">push</span>(count + productSign + arr[i])</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 否则直接将当前元素加入结果数组中</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        result.<span class="title function_">push</span>(arr[i])</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 将计数器重置为 1</span></span><br><span class="line">      count = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果当前元素与下一个元素相同，则将计数器加 1</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="title function_">compressArray</span>([<span class="number">20</span>,<span class="number">30</span>,<span class="number">30</span>,<span class="number">20</span>]) <span class="comment">// 结果：[20,&quot;2*30&quot;,20]</span></span><br></pre></td></tr></table></figure>
<p><strong>解压数据算法实现：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将字符串分隔符统一成逗号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">str</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; returnString 是否转换成字符串返回</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">separator</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">formatStringToArray</span>(<span class="params">str, returnString = <span class="literal">false</span>, separator = <span class="string">&#x27;,&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> results = []</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> str !== <span class="string">&#x27;string&#x27;</span>) results = [str]</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 先通过字符串进行分割</span></span><br><span class="line">    results = str.<span class="title function_">split</span>(<span class="regexp">/,|:|;|\s+|，|；|。|\-|~|\+/</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断每个元素是否包含 *、x、X, 如果包含，则进行展开</span></span><br><span class="line">  <span class="keyword">const</span> newResults = []</span><br><span class="line">  <span class="keyword">const</span> regex = <span class="regexp">/(\d+)([xX*])(\d+)/</span></span><br><span class="line">  results.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> match = item.<span class="title function_">match</span>(regex)</span><br><span class="line">    <span class="keyword">if</span> (match) &#123;</span><br><span class="line">      <span class="keyword">const</span> count = <span class="built_in">parseInt</span>(match[<span class="number">1</span>], <span class="number">10</span>)</span><br><span class="line">      <span class="keyword">const</span> value = <span class="built_in">parseInt</span>(match[<span class="number">3</span>], <span class="number">10</span>)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        newResults.<span class="title function_">push</span>(value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      newResults.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (returnString) <span class="keyword">return</span> newResults.<span class="title function_">join</span>(separator)</span><br><span class="line">  <span class="keyword">return</span> newResults</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="title function_">formatStringToArray</span>(<span class="string">&quot;20 2*30 20&quot;</span>) <span class="comment">// 结果：[&#x27;20&#x27;,&#x27;30&#x27;,&#x27;30&#x27;,&#x27;20&#x27;]</span></span><br><span class="line"><span class="title function_">formatStringToArray</span>(<span class="string">&quot;20 2*30 20&quot;</span>,<span class="literal">true</span>) <span class="comment">// 结果：&quot;20,30,30,20&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库编码风格指南</title>
    <url>/posts/2022/3KBT6ZZ.html</url>
    <content><![CDATA[<p>在面向数据读取时，建议按照以下约定进行开发。</p>
<span id="more"></span>
<h2 id="简介">简介</h2>
<h2 id="操作">操作</h2>
<p>避免直接在具体功能代码中操作数据库，在数据库与具体功能代码之间，应增加一个中介来进行解耦。为未来数据变动提供统一的修改入口。</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>CodeStyleGuide</category>
      </categories>
      <tags>
        <tag>CodeStyle</tag>
      </tags>
  </entry>
  <entry>
    <title>javalScript编码风格指南</title>
    <url>/posts/2022/FD5821.html</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<h2 id="参考">参考</h2>
<p><a href="https://google.github.io/styleguide/jsguide.html">Google
JavaScript Style Guide</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>CodeStyleGuide</category>
      </categories>
      <tags>
        <tag>CodeStyle</tag>
      </tags>
  </entry>
  <entry>
    <title>编码风格指南说明</title>
    <url>/posts/2022/08TWEH.html</url>
    <content><![CDATA[<p>在进行代码开发过程中，随着需求的不断变动，功能的不断增加，往往需要对代码进行优化或重构，而具有良好开发风格约束的代码，在处理这些问上更显得迎刃有余，从而达到事半功倍的效果。</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>Develop</category>
        <category>CodeStyleGuide</category>
      </categories>
      <tags>
        <tag>编码风格</tag>
      </tags>
  </entry>
  <entry>
    <title>凸包问题的 5 种算法</title>
    <url>/posts/2020/15F3BA2.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>首先，什么是凸包？
假设平面上有p0~p12共13个点，过某些点作一个多边形，使这个多边形能把所有点都“包”起来。当这个多边形是凸多边形的时候，我们就叫它“凸包”。如下图：</p>
<figure>
<img data-src="https://img-blog.csdn.net/20150529181415457" alt="图片1" />
<figcaption aria-hidden="true">图片1</figcaption>
</figure>
<span id="more"></span>
<p>然后，什么是凸包问题？
我们把这些点放在二维坐标系里面，那么每个点都能用 (x,y) 来表示。
现给出点的数目为13，和各个点的坐标。求构成凸包的点？</p>
<h2 id="解一穷举法蛮力法">解一：穷举法（蛮力法）</h2>
<p>时间复杂度：O(n³）。
思路：两点确定一条直线，如果剩余的其它点都在这条直线的同一侧，则这两个点是凸包上的点，否则就不是。
步骤：</p>
<ol type="1">
<li><p>将点集里面的所有点两两配对，组成 n(n-1)/2 条直线。</p></li>
<li><p>对于每条直线，再检查剩余的 (n-2)
个点是否在直线的同一侧。</p></li>
</ol>
<p>如何判断一个点 p3 是在直线 p1p2
的左边还是右边呢？（坐标：p1(x1,y1)，p2(x2,y2)，p3(x3,y3)）</p>
<p><img data-src="https://img-blog.csdn.net/20150529192037246"
alt="这里写图片描述" /> 当上式结果为正时，p3 在直线 p1p2
的左侧；当结果为负时，p3 在直线 p1p2 的右边。</p>
<p>或者采用向量法判断（叉乘）：</p>
<p>向量 v12=p2-p1</p>
<p>向量 v13=p3-p1</p>
<p>如果 v12 x 13 的方向与 +Z相反，则在右侧，否则在左侧。</p>
<h2 id="解二分治法">解二：分治法</h2>
<p>时间复杂度：O(n㏒n)。
思路：应用分治法思想，把一个大问题分成几个结构相同的子问题，把子问题再分成几个更小的子问题……。然后我们就能用递归的方法，分别求这些子问题的解。最后把每个子问题的解“组装”成原来大问题的解。
步骤：</p>
<ol type="1">
<li>把所有的点都放在二维坐标系里面。那么横坐标最小和最大的两个点 P1 和
Pn 一定是凸包上的点（为什么呢？用反证法很容易证明，这里不详讲）。直线
P1Pn 把点集分成了两部分，即 X
轴上面和下面两部分，分别叫做上包和下包。</li>
<li>对上包：求距离直线 P1Pn 最远的点，即下图中的点 Pmax 。</li>
<li>作直线 P1Pmax 、PnPmax，把直线 P1Pmax 左侧的点当成是上包，把直线
PnPmax 右侧的点也当成是上包。</li>
<li>重复步骤 2、3。</li>
<li>对下包也作类似操作。</li>
</ol>
<figure>
<img data-src="https://img-blog.csdn.net/20150530094927274"
alt="这里写图片描述" />
<figcaption aria-hidden="true">这里写图片描述</figcaption>
</figure>
<p>然而怎么求距离某直线最远的点呢？我们还是用到解一中的公式： <img data-src="https://img-blog.csdn.net/20150529192037246"
alt="这里写图片描述" /> 设有一个点 P3 和直线 P1P2
。（坐标：p1(x1,y1)，p2(x2,y2)，p3(x3,y3)）
对上式的结果取绝对值，绝对值越大，则距离直线越远。</p>
<p>注意：在步骤一，如果横坐标最小的点不止一个，那么这几个点都是凸包上的点，此时上包和下包的划分就有点不同了，需要注意。</p>
<h2 id="解三jarvis步进法">解三：Jarvis步进法</h2>
<p>时间复杂度：O(nH)。（其中 n 是点的总个数，H 是凸包上的点的个数）
思路：</p>
<ol type="1">
<li>纵坐标最小的那个点一定是凸包上的点，例如图上的 P0。</li>
<li>从 P0
开始，按逆时针的方向，逐个找凸包上的点，每前进一步找到一个点，所以叫作步进法。</li>
<li>怎么找下一个点呢？利用夹角。假设现在已经找到 {P0，P1，P2}
了，要找下一个点：剩下的点分别和 P2
组成向量，设这个向量与向量P1P2的夹角为 β 。当 β
最小时就是所要求的下一个点了，此处为 P3 。</li>
</ol>
<figure>
<img data-src="https://img-blog.csdn.net/20150530114410318"
alt="这里写图片描述" />
<figcaption aria-hidden="true">这里写图片描述</figcaption>
</figure>
<p>注意：</p>
<ol type="1">
<li>找第二个点 P1 时，因为已经找到的只有 P0
一个点，所以向量只能和水平线作夹角 α，当 α 最小时求得第二个点。</li>
<li>共线情况：如果直线 P2P3 上还有一个点
P4，即三个点共线，此时由向量P2P3 和向量P2P4 产生的两个 β
是相同的。我们应该把 P3、P4 都当做凸包上的点，并且把距离 P2
最远的那个点（即图中的P4）作为最后搜索到的点，继续找它的下一个连接点。</li>
</ol>
<h2 id="解四graham扫描法">解四：Graham扫描法</h2>
<p>时间复杂度：O(n㏒n) 思路：Graham 扫描的思想和 Jarris
步进法类似，也是先找到凸包上的一个点，然后从那个点开始按逆时针方向逐个找凸包上的点，但它不是利用夹角。
<img data-src="https://img-blog.csdn.net/20150530151346608"
alt="这里写图片描述" /> 步骤：</p>
<ol type="1">
<li><p>把所有点放在二维坐标系中，则纵坐标最小的点一定是凸包上的点，如图中的P0。</p></li>
<li><p>把所有点的坐标平移一下，使 P0 作为原点，如上图。</p></li>
<li><p>计算各个点相对于 P0 的幅角 α ，按从小到大的顺序对各个点排序。当 α
相同时，距离 P0 比较近的排在前面。例如上图得到的结果为
P1，P2，P3，P4，P5，P6，P7，P8。我们由几何知识可以知道，结果中第一个点
P1 和最后一个点 P8 一定是凸包上的点。</p>
<hr />
<p>（以上是准备步骤，以下开始求凸包）</p></li>
<li><p>以上，我们已经知道了凸包上的第一个点 P0 和第二个点
P1，我们把它们放在栈里面。现在从步骤3求得的那个结果里，把 P1
后面的那个点拿出来做当前点，即 P2 。接下来开始找第三个点：</p></li>
<li><p>连接P0和栈顶的那个点，得到直线 L 。看当前点是在直线 L
的右边还是左边。如果在直线的右边就执行步骤5；如果在直线上，或者在直线的左边就执行步骤6。</p></li>
<li><p>如果在右边，则栈顶的那个元素不是凸包上的点，把栈顶元素出栈。执行步骤4。
当前点是凸包上的点，把它压入栈，执行步骤7。</p></li>
<li><p>检查当前的点 P2
是不是步骤3那个结果的最后一个元素。是最后一个元素的话就结束。如果不是的话就把
P2 后面那个点做当前点，返回步骤4。</p></li>
</ol>
<p>最后，栈中的元素就是凸包上的点了。
以下为用Graham扫描法动态求解的过程： <img data-src="https://img-blog.csdn.net/20150530145453912"
alt="这里写图片描述" /></p>
<h2 id="解五melkman算法">解五：Melkman算法</h2>
<p><img data-src="https://img-blog.csdn.net/20150530163818573"
alt="这里写图片描述" />
说真的，这个算法我也还没有看清。网上的资料也少的可怜，我暂且把网上的解释截个图在这里，往后搞懂以后再回来补上。
或者有人看懂了的，希望不吝指教，不甚感激！</p>
<h2 id="扩展">扩展</h2>
<p>以上讨论的只是二维的凸包，如果延生为三维、多维的凸包问题呢？如何求解？
不过首先，二维凸包可以用来解决围栏问题、城市规划问题、聚类分析等等。但是三维、多维的凸包可能的使用范畴有哪些？</p>
<h2 id="致谢">致谢</h2>
<p>原文链接：https://blog.csdn.net/Bone_ACE/article/details/46239187</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>凸包</tag>
      </tags>
  </entry>
  <entry>
    <title>在弹性布局中内容溢出，滚动条失效的解决办法</title>
    <url>/posts/2020/2PX2VEN.html</url>
    <content><![CDATA[<p>当在使用弹性布局时，我们希望头部、底部固定，中间 <code>flex:1</code>
的部分实现滚动条显示，但是我们会发现，滚动条不会触发，直接超出弹性区域范围。</p>
<span id="more"></span>
<p>解决方法是在设置 <code>flex:1</code> 的位置，将高度设置为 0：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">height</span>: <span class="number">0px</span>; <span class="comment">// 为了能够有滚动条</span></span><br><span class="line"><span class="attribute">flex</span>: <span class="number">1px</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>布局</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS中图片超过宽度自动缩放</title>
    <url>/posts/2022/2R0P0YJ.html</url>
    <content><![CDATA[<p>在进行图片显示的时候，如何使图片宽度或高度超限时，让其自动缩放显示呢？</p>
<span id="more"></span>
<p>可以给 image 添加如下样式：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">image &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="selector-tag">object</span>-fix: <span class="string">&#x27;contain&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上述样式不仅针对 image，其它元素有类似需求时，也可以使用该方法</p>
</blockquote>
]]></content>
      <categories>
        <category>Develop</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 5种经典布局</title>
    <url>/posts/2020/3GJ4VTC.html</url>
    <content><![CDATA[<p>页面布局是样式开发的第一步，也是 CSS 最重要的功能之一。</p>
<figure>
<img data-src="https://www.wangbase.com/blogimg/asset/202008/bg2020080719.jpg"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<p>常用的页面布局，其实就那么几个。下面我会介绍5个经典布局，只要掌握了它们，就能应对绝大多数常规页面。</p>
<p>这几个布局都是自适应的，自动适配桌面设备和移动设备。代码实现很简单，核心代码只有一行，有很大的学习价值，内容也很实用。</p>
<span id="more"></span>
<p>我会用到 CSS 的 <a
href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">Flex
语法</a>和 <a
href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">Grid
语法</a>，不过只用到一点点，不熟悉的朋友可以先看看教程链接，熟悉一下基本概念。每一个布局都带有
CodePen 示例，也可以到<a
href="https://1linelayouts.glitch.me/">这个网页</a>统一查看。</p>
<blockquote>
<p>本文是跟极客大学合作的前端学习讲座的一部分，详见文末说明。</p>
</blockquote>
<h2 id="空间居中布局">空间居中布局</h2>
<p>空间居中布局指的是，不管容器的大小，项目总是占据中心点。</p>
<figure>
<img data-src="https://www.wangbase.com/blogimg/asset/202008/bg2020080703.jpg"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<p>CSS 代码如下（<a
href="https://codepen.io/una/pen/YzyYbBx">CodePen</a> 示例）。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    place-items: center;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>上面代码需要写在容器上，指定为 Grid
布局。核心代码是<code>place-items</code>属性那一行，它是一个简写形式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">place-items: &lt;align-items&gt; &lt;justify-items&gt;;</span><br></pre></td></tr></table></figure>
<p><code>align-items</code>属性控制垂直位置，<code>justify-items</code>属性控制水平位置。这两个属性的值一致时，就可以合并写成一个值。所以，<code>place-items: center;</code>等同于<code>place-items: center center;</code>。</p>
<p>同理，左上角布局可以写成下面这样。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">place-items: start;</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://www.wangbase.com/blogimg/asset/202008/bg2020080704.jpg"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<p>右下角布局。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">place-items: end;</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://www.wangbase.com/blogimg/asset/202008/bg2020080705.jpg"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<h2 id="并列式布局">并列式布局</h2>
<p>并列式布局就是多个项目并列。</p>
<figure>
<img data-src="https://www.wangbase.com/blogimg/asset/202008/bg2020080706.jpg"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<p>如果宽度不够，放不下的项目就自动折行。</p>
<figure>
<img data-src="https://www.wangbase.com/blogimg/asset/202008/bg2020080707.jpg"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<figure>
<img data-src="https://www.wangbase.com/blogimg/asset/202008/bg2020080708.jpg"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<p>它的实现也很简单。首先，容器设置成 Flex
布局，内容居中（<code>justify-content</code>）可换行（<code>flex-wrap</code>）。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后，单个项上面只用一行<code>flex</code>属性就够了（<a
href="https://codepen.io/una/pen/WNQdBza">CodePen 示例</a>）。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">   <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">1</span> <span class="number">150px</span>;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>flex</code>属性是<code>flex-grow</code>、<code>flex-shrink</code>、<code>flex-basis</code>这三个属性的简写形式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex</span>: &lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>flex-basis</code>：项目的初始宽度。</li>
<li><code>flex-grow</code>：指定如果有多余宽度，项目是否可以扩大。</li>
<li><code>flex-shrink</code>：指定如果宽度不足，项目是否可以缩小。</li>
</ul>
<p><code>flex: 0 1 150px;</code>的意思就是，项目的初始宽度是150px，且不可以扩大，但是当容器宽度不足150px时，项目可以缩小。</p>
<p>如果写成<code>flex: 1 1 150px;</code>，就表示项目始终会占满所有宽度。</p>
<figure>
<img data-src="https://www.wangbase.com/blogimg/asset/202008/bg2020080711.jpg"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<figure>
<img data-src="https://www.wangbase.com/blogimg/asset/202008/bg2020080710.jpg"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<figure>
<img data-src="https://www.wangbase.com/blogimg/asset/202008/bg2020080709.jpg"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<h2 id="两栏式布局">两栏式布局</h2>
<p>两栏式布局就是一个边栏，一个主栏。</p>
<figure>
<img data-src="https://www.wangbase.com/blogimg/asset/202008/bg2020080712.jpg"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<p>下面的实现是，边栏始终存在，主栏根据设备宽度，变宽或者变窄。如果希望主栏自动换到下一行，可以参考上面的"并列式布局"。</p>
<figure>
<img data-src="https://www.wangbase.com/blogimg/asset/202008/bg2020080714.jpg"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<p>使用 Grid，实现很容易（<a
href="https://codepen.io/una/pen/gOaNeWL">CodePen 示例</a>）。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="built_in">minmax</span>(<span class="number">150px</span>, <span class="number">25%</span>) <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中，<code>grid-template-columns</code>指定页面分成两列。第一列的宽度是<code>minmax(150px, 25%)</code>，即最小宽度为<code>150px</code>，最大宽度为总宽度的25%；第二列为<code>1fr</code>，即所有剩余宽度。</p>
<h2 id="三明治布局">三明治布局</h2>
<p>三明治布局指的是，页面在垂直方向上，分成三部分：页眉、内容区、页脚。</p>
<figure>
<img data-src="https://www.wangbase.com/blogimg/asset/202008/bg2020080715.jpg"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<p>这个布局会根据设备宽度，自动适应，并且不管内容区有多少内容，页脚始终在容器底部（粘性页脚）。也就是说，这个布局总是会占满整个页面高度。</p>
<figure>
<img data-src="https://www.wangbase.com/blogimg/asset/202008/bg2020080716.jpg"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<p>CSS 代码如下（<a href="https://codepen.io/una/pen/bGVXPWB">CodePen
示例</a>）。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: auto <span class="number">1</span>fr auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码写在容器上面，指定采用 Grid
布局。核心代码是<code>grid-template-rows</code>那一行，指定垂直高度怎么划分，这里是从上到下分成三部分。第一部分（页眉）和第三部分（页脚）的高度都为<code>auto</code>，即本来的内容高度；第二部分（内容区）的高度为<code>1fr</code>，即剩余的所有高度，这可以保证页脚始终在容器的底部。</p>
<h2 id="圣杯布局">圣杯布局</h2>
<p>圣杯布局是最常用的布局，所以被比喻为圣杯。它将页面分成五个部分，除了页眉和页脚，内容区分成左边栏、主栏、右边栏。</p>
<figure>
<img data-src="https://www.wangbase.com/blogimg/asset/202008/bg2020080717.jpg"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<p>这里的实现是，不管页面宽度，内容区始终分成三栏。如果宽度太窄，主栏和右边栏会看不到。如果想将这三栏改成小屏幕自动堆叠，可以参考并列式布局。</p>
<figure>
<img data-src="https://www.wangbase.com/blogimg/asset/202008/bg2020080718.jpg"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<p>HTML 代码如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;header/&gt;</span><br><span class="line">    &lt;div/&gt;</span><br><span class="line">    &lt;main/&gt;</span><br><span class="line">    &lt;div/&gt;</span><br><span class="line">    &lt;footer/&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>CSS 代码如下（<a href="https://codepen.io/una/pen/mdVbdBy">CodePen
示例</a>）。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template</span>: auto <span class="number">1</span>fr auto / auto <span class="number">1</span>fr auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码要写在容器上面，指定采用 Grid
布局。核心代码是<code>grid-template</code>属性那一行，它是两个属性<code>grid-template-rows</code>（垂直方向）和<code>grid-template-columns</code>（水平方向）的简写形式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">grid-template</span>: &lt;grid-template-rows&gt; / &lt;grid-template-columns&gt;</span><br></pre></td></tr></table></figure>
<p><code>grid-template-rows</code>和<code>grid-template-columns</code>都是<code>auto 1fr auto</code>，就表示页面在垂直方向和水平方向上，都分成三个部分。第一部分（页眉和左边栏）和第三部分（页脚和右边栏）都是本来的内容高度（或宽度），第二部分（内容区和主栏）占满剩余的高度（或宽度）。</p>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="https://web.dev/one-line-layouts/">Ten modern layouts in
one line of CSS</a>, Una Kravets</li>
<li><a
href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">Flex
布局教程</a></li>
<li><a
href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">Grid
布局教程</a></li>
<li><a
href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template">grid-template
属性</a>, MDN</li>
</ul>
<h2 id="致谢">致谢</h2>
<p>本文摘抄至：<a
href="http://www.ruanyifeng.com/blog/2020/08/five-css-layouts-in-one-line.html">阮一峰的网络日志——只要一行代码，实现五种
CSS 经典布局</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>布局</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS常用居中方式</title>
    <url>/posts/2022/9TBVZR.html</url>
    <content><![CDATA[<p>本文主要总结在开发中用得比较多的几种居中方式，方便使用。</p>
<span id="more"></span>
<h2 id="水平居中">水平居中</h2>
<h3 id="内联元素水平居中">内联元素水平居中</h3>
<p>利用 <code>text-align: center</code>
可以实现在块级元素内部的内联元素水平居中。此方法对内联元素(<code>inline</code>)，内联块(<code>inline-block</code>)，内联表(<code>inline-table</code>)，<code>inline-flex</code>元素水平居中都有效。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center-text</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="块级元素水平居中">块级元素水平居中</h3>
<p>通过把固定宽度块级元素的<code>margin-left</code>和<code>margin-right</code>设成auto，就可以使块级元素水平居中。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center-block</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多块级元素水平居中">多块级元素水平居中</h3>
<h4 id="利用inline-block">利用<code>inline-block</code></h4>
<p>如果一行中有两个或两个以上的块级元素，通过设置块级元素的显示类型为<code>inline-block</code>和父容器的<code>text-align</code>属性从而使多块级元素水平居中。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inline-block</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="利用flex-布局">利用<code>flex</code> 布局</h4>
<p>利用弹性布局(<code>flex</code>)，实现水平居中，其中<code>justify-content</code>
用于设置弹性盒子元素在主轴（横轴）方向上的对齐方式，本例中设置子元素水平居中显示。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-center</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="垂直居中">垂直居中</h2>
<h3
id="单行内联inline-元素垂直居中">单行内联(<code>inline-</code>)元素垂直居中</h3>
<p>通过设置内联元素的高度(<code>height</code>)和行高(<code>line-height</code>)相等，从而使元素垂直居中。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#v-box</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">120px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多行元素垂直居中">多行元素垂直居中</h3>
<h4 id="利用-flex-布局">利用 <code>flex</code> 布局</h4>
<p>利用 flex
布局实现垂直居中，其中<code>flex-direction: column</code>定义主轴方向为纵向。因为
flex 布局是 CSS3 中定义，在较老的浏览器存在兼容性问题。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center-flex</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="利用表布局table">利用表布局（<code>table</code>）</h4>
<p>利用表布局的<code>vertical-align: middle</code>可以实现子元素的垂直居中。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center-table</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-cell</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="水平垂直居中">水平垂直居中</h2>
<h3 id="利用-flex-布局-1">利用 <code>flex</code> 布局</h3>
<p>利用flex布局，其中<code>justify-content</code>
用于设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式；而<code>align-items</code>属性定义flex子项在flex容器的当前行的侧轴（纵轴）方向上的对齐方式。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a
href="https://segmentfault.com/a/1190000013966650">这15种CSS居中的方式，你都用过哪几种？</a></li>
<li><a
href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">Flex
布局教程：语法篇 - 阮一峰的网络日志 (ruanyifeng.com)</a></li>
<li><a
href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html">Flex
布局教程：实例篇 - 阮一峰的网络日志 (ruanyifeng.com)</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 中的 CSS 样式编写要点</title>
    <url>/posts/2022/12DMY8D.html</url>
    <content><![CDATA[<p>当 <code>&lt;style&gt;</code> 标签有 <code>scoped</code> 属性时，它的
CSS 只作用于当前组件中的元素。这类似于 Shadow DOM
中的样式封装。它有一些注意事项，但不需要任何 polyfill。</p>
<span id="more"></span>
<p>它通过使用 PostCSS 来实现以下转换：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.example</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;example&quot;</span>&gt;</span>hi<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>转换结果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.example</span><span class="selector-attr">[data-v-f3f3eg9]</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;example&quot;</span> <span class="attr">data-v-f3f3eg9</span>&gt;</span>hi<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="混用本地和全局样式">混用本地和全局样式</h2>
<p>你可以在一个组件中同时使用有 scoped 和非 scoped 样式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 全局样式 */</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 本地样式 */</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="子组件的根元素">子组件的根元素</h2>
<p>使用 <code>scoped</code>
后，父组件的样式将不会渗透到子组件中。不过一个子组件的根节点会同时受其父组件的
scoped CSS 和子组件的 scoped CSS
的影响。这样设计是为了让父组件可以从布局的角度出发，调整其子组件根元素的样式。</p>
<h2 id="深度作用选择器">深度作用选择器</h2>
<p>如果你希望 <code>scoped</code>
样式中的一个选择器能够作用得“更深”，例如影响子组件，你可以使用
<code>&gt;&gt;&gt;</code> 操作符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.a</span> &gt;&gt;&gt; <span class="selector-class">.b</span> &#123; <span class="comment">/* ... */</span> &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上述代码将会编译成：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.a</span><span class="selector-attr">[data-v-f3f3eg9]</span> <span class="selector-class">.b</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>
<p>有些像 Sass 之类的预处理器无法正确解析
<code>&gt;&gt;&gt;</code>。这种情况下你可以使用 <code>/deep/</code> 或
<code>::v-deep</code> 操作符取而代之——两者都是 <code>&gt;&gt;&gt;</code>
的别名，同样可以正常工作。</p>
<h2 id="动态生成的内容">动态生成的内容</h2>
<p>通过 <code>v-html</code> 创建的 DOM 内容不受 scoped
样式影响，但是你仍然可以通过深度作用选择器来为他们设置样式。</p>
<h2 id="还有一些要留意">还有一些要留意</h2>
<ul>
<li><strong>Scoped 样式中最好使用 class
选择器</strong>。考虑到浏览器渲染各种 CSS 选择器的方式，当
<code>p &#123; color: red &#125;</code> 是 scoped 时 (即与特性选择器组合使用时)
会慢很多倍。如果你使用 class 或者 id 取而代之，比如
<code>.example &#123; color: red &#125;</code>，性能影响就会消除。</li>
<li><strong>在递归组件中小心使用后代选择器!</strong> 对选择器
<code>.a .b</code> 中的 CSS 规则来说，如果匹配 <code>.a</code>
的元素包含递归子组件，则所有的子组件中的 <code>.b</code>
都将被这个规则匹配。</li>
</ul>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a
href="https://vue-loader.vuejs.org/zh/guide/scoped-css.html#混用本地和全局样式">Scoped
CSS | Vue Loader (vuejs.org)</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 的值与单位</title>
    <url>/posts/2022/3JC8V28.html</url>
    <content><![CDATA[<p>本文主要总结了 CSS 中的值和单位。</p>
<span id="more"></span>
<h2 id="值类型">值类型</h2>
<table>
<colgroup>
<col style="width: 18%" />
<col style="width: 81%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">数值类型</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>&lt;integer&gt;</code></td>
<td
style="text-align: left;"><code>&lt;integer&gt;</code>是一个整数，比如1024或-55。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>&lt;number&gt;</code></td>
<td
style="text-align: left;"><code>&lt;number&gt;</code>表示一个小数——它可能有小数点后面的部分，也可能没有，例如0.255、128或-1.2。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>&lt;dimension&gt;</code></td>
<td
style="text-align: left;"><code>&lt;dimension&gt;</code>是一个<code>&lt;number&gt;</code>，它有一个附加的单位，例如45deg、5s或10px。<code>&lt;dimension&gt;</code>是一个伞形类别，包括<code>&lt;length&gt;</code>、<code>&lt;angle&gt;</code>、<code>&lt;time&gt;</code>和<code>&lt;resolution&gt;</code>类型。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>&lt;percentage&gt;</code></td>
<td
style="text-align: left;"><code>&lt;percentage&gt;</code>表示一些其他值的一部分，例如
50%。百分比值总是相对于另一个量，例如，一个元素的长度相对于其父元素的长度。</td>
</tr>
</tbody>
</table>
<h2 id="长度单位">长度单位</h2>
<h3 id="绝对长度单位">绝对长度单位</h3>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">单位</th>
<th style="text-align: left;">名称</th>
<th style="text-align: left;">等价换算</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>cm</code></td>
<td style="text-align: left;">厘米</td>
<td style="text-align: left;">1cm = 96px/2.54</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>mm</code></td>
<td style="text-align: left;">毫米</td>
<td style="text-align: left;">1mm = 1/10th of 1cm</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>Q</code></td>
<td style="text-align: left;">四分之一毫米</td>
<td style="text-align: left;">1Q = 1/40th of 1cm</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>in</code></td>
<td style="text-align: left;">英寸</td>
<td style="text-align: left;">1in = 2.54cm = 96px</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>pc</code></td>
<td style="text-align: left;">十二点活字</td>
<td style="text-align: left;">1pc = 1/16th of 1in</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>pt</code></td>
<td style="text-align: left;">点</td>
<td style="text-align: left;">1pt = 1/72th of 1in</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>px</code></td>
<td style="text-align: left;">像素</td>
<td style="text-align: left;">1px = 1/96th of 1in</td>
</tr>
</tbody>
</table>
<h3 id="相对长度单位">相对长度单位</h3>
<p>相对长度单位相对于其他一些东西，比如父元素的字体大小，或者视图端口的大小。使用相对单位的好处是，经过一些仔细的规划，可以使文本或其他元素的大小与页面上的其他内容相对应。</p>
<p>下表列出了web开发中一些最有用的单位。</p>
<table>
<colgroup>
<col style="width: 9%" />
<col style="width: 90%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">单位</th>
<th style="text-align: left;">相对于</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>em</code></td>
<td style="text-align: left;">在 font-size
中使用是相对于父元素的字体大小，在其他属性中使用是相对于自身的字体大小，如
width</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>ex</code></td>
<td style="text-align: left;">字符“x”的高度</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>ch</code></td>
<td style="text-align: left;">数字“0”的宽度</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>rem</code></td>
<td style="text-align: left;">根元素的字体大小</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>lh</code></td>
<td style="text-align: left;">元素的line-height</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>vw</code></td>
<td style="text-align: left;">视窗宽度的1%</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>vh</code></td>
<td style="text-align: left;">视窗高度的1%</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>vmin</code></td>
<td style="text-align: left;">视窗较小尺寸的1%</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>vmax</code></td>
<td style="text-align: left;">视图大尺寸的1%</td>
</tr>
</tbody>
</table>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a
href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Values_and_units">CSS的值与单位</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>从字意上理解 CSS 中的 justify 和 align</title>
    <url>/posts/2023/17Q11CW.html</url>
    <content><![CDATA[<p>在进行 CSS 样式编写时，经常会遇到 <code>align</code> 和
<code>justify</code> 这两个单词，比如：<code>justify-content</code>
、<code>justify-items</code>、<code>align-content</code>、
<code>align-items</code> 等。</p>
<p>在开发中，这个两个词意思相近，总是记不牢它们的用法，因此本文从其字面意思上梳理这两个单词的区别，方便记忆。</p>
<span id="more"></span>
<p>利用百度进行翻译：</p>
<p><a href="https://fanyi.baidu.com/#en/zh/justify">justify</a>:
调整使全行排满;使每行排齐;使齐行</p>
<p><a href="https://fanyi.baidu.com/#en/zh/align">align</a>:
排列;校准;排整齐;(尤指)使成一条直线;使一致</p>
<p>结合 css 中 flex 的用法，我们可以总结到如下结论：</p>
<ol type="1">
<li>justify 是左右对齐</li>
<li>align 是上下对齐</li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>[object Object]</tag>
      </tags>
  </entry>
  <entry>
    <title>父元素仅设置max-height，子元素高度百分之100，溢出后如何显示滚动条</title>
    <url>/posts/2023/27DHP6N.html</url>
    <content><![CDATA[<p>本文介绍了如何实现：</p>
<p>父元素仅设置 max-height，子元素的高度为
100%，跟随父元素高度的变化而变化，且当达到最大高度后，子元素显示滚动条。</p>
<span id="more"></span>
<h2 id="思路">思路</h2>
<ol type="1">
<li>由于父元素没有设置 <code>height</code> 属性，因此子元素不能使用
<code>height:100%</code> 来跟随父元素的变化</li>
<li>通过 flex 布局，将子元素设置成 <code>flex:1</code>
来让其与父元素同高</li>
<li>再设置子元素 <code>overflow:auto;flext-wrap:nowrap;</code>
来显示滚动条</li>
</ol>
<h2 id="实现">实现</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span>    </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#app</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;  </span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="comment">/* height: 100%; 此处不能使用这个属性，因为父类没有设置 height,因此无法计算高度*/</span></span><br><span class="line">  <span class="attribute">flex</span>:<span class="number">1</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="演示">演示</h2>
<p><a
href="https://runjs.work/projects/8ad36ef2669942a5">父元素设置max-height，子元素高度100%实现
(runjs.work)</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>flex 布局中在 flex-grow 元素里显示滚动条</title>
    <url>/posts/2023/3FEED8Y.html</url>
    <content><![CDATA[<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230727230710866.png"
alt="image-20230727230710866" />
<figcaption aria-hidden="true">image-20230727230710866</figcaption>
</figure>
<p>本文介绍了如何实现：</p>
<p>容器的高度随内容增加而增高，且某个元素使用 <code>flex:1</code>
占满剩余空间，当达到最大值时，若该元素溢出后则显示滚动条。</p>
<span id="more"></span>
<h2 id="思路">思路</h2>
<ol type="1">
<li>使用 <code>column</code> 进行列布局</li>
<li>对容器设置最大高度或者固定高度</li>
<li>对需要占满剩余空间的元素设置 <code>flex:1</code></li>
</ol>
<h2 id="实现">实现</h2>
<p><strong>HTML：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-expand&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>CSS：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item-expand</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="演示">演示</h2>
<p><a
href="https://runjs.work/projects/d7311531ffcd4c0a">单击查看演示：flex-grow
中显示滚动条</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>关于时间的用法总结</title>
    <url>/posts/2020/2KKWR4A.html</url>
    <content><![CDATA[<p>在工作中，经常使用 C# 和 JS
混合编程，当两者时间混用的时候，如果不理解，会遇到各种坑，特此记录下对于时间的理解。</p>
<span id="more"></span>
<h2 id="什么是-utc-时间">什么是 UTC 时间？</h2>
<p>世界协调时间（<strong>C</strong>oordinated <strong>U</strong>niversal
<strong>T</strong>ime）。</p>
<h2 id="生成时间">生成时间</h2>
<h3 id="原生js">原生js</h3>
<p><code>new Date()</code> 的参数如下：</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Date(&quot;month dd,yyyy hh:mm:ss&quot;);  </span><br><span class="line">new Date(&quot;month dd,yyyy&quot;);  </span><br><span class="line">new Date(&quot;yyyy/MM/dd hh:mm:ss&quot;);  </span><br><span class="line">new Date(&quot;yyyy/MM/dd&quot;);  </span><br><span class="line">new Date(yyyy,mth,dd,hh,mm,ss);  </span><br><span class="line">new Date(yyyy,mth,dd);  </span><br><span class="line">new Date(ms);</span><br></pre></td></tr></table></figure></p>
<h3 id="moment.js">moment.js</h3>
<p>moment.js
里面的时间转换比较强大，具体可以参考：https://momentjs.com/docs/#/parsing/</p>
<h3 id="moment-转原生-date">moment 转原生 Date</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">moment.<span class="title function_">toDate</span>()</span><br></pre></td></tr></table></figure>
<h2 id="获取时间戳">获取时间戳</h2>
<h3 id="原生js-1">原生js</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">var</span> timestamp = <span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">var</span> timestamp = (<span class="keyword">new</span> <span class="title class_">Date</span>()).<span class="title function_">valueOf</span>();</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="keyword">var</span> timestamp=<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br></pre></td></tr></table></figure>
<h3 id="moment.js-1">moment.js</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">moment</span>().<span class="title function_">valueOf</span>()</span><br></pre></td></tr></table></figure>
<h3 id="csharp">CSharp</h3>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> DateTimeOffset(fileSystemInfo.LastWriteTimeUtc).ToUnixTimeMilliseconds();</span><br></pre></td></tr></table></figure>
<h2 id="从时间戳中获取时间">从时间戳中获取时间</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 时间戳为ms</span><br><span class="line">var d = new Date(时间戳)</span><br><span class="line">var day = d.getDay()</span><br><span class="line">var month = d.getMonth() + 1</span><br><span class="line">var year = d.getFullYear()</span><br><span class="line">var hour = d.getHours()</span><br><span class="line">var minute = d.getMinutes()</span><br><span class="line">var second = d.getSeconds()</span><br><span class="line">var milliseconds = d.getMilliseconds()</span><br></pre></td></tr></table></figure>
<h2 id="字符串转时间">字符串转时间</h2>
<p>moment: https://momentjs.com/docs</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">moment(string)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DateTime</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>cpp</tag>
        <tag>c#</tag>
      </tags>
  </entry>
  <entry>
    <title>纯 css 实现 placehoder 效果</title>
    <url>/posts/2024/2YJ7VJZ.html</url>
    <content><![CDATA[<p>如何使用 CSS 实现当内容为空时，显示 placeholder 呢？</p>
<p>代码如下：</p>
<p><strong>html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;css-placeholder&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;editor&quot;</span> <span class="attr">contentEditable</span>=<span class="string">&quot;true&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入内容...&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>scss</strong></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#css-placeholder</span>&#123;</span><br><span class="line">  <span class="selector-attr">[contentEditable=<span class="string">&#x27;true&#x27;</span>]</span><span class="selector-pseudo">:empty</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">attr</span>(placeholder);</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>演示地址</strong>: <a
href="https://code.juejin.cn/pen/7367607879429259318">css placeholder -
码上掘金 (juejin.cn)</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>eggjs 单机热更新解决方案</title>
    <url>/posts/2023/QKCR7T.html</url>
    <content><![CDATA[<p>后端采用 eggjs 作为框架，由于项目体量小，没有采用集群部署，而是将
nginx 和
eggjs、前端都部署到了一台机器上，由于更新频繁，导致用户经常断线、响应错误，用户体验非常不好，造成程序不稳定的印象。</p>
<blockquote>
<p>用户内心
OS：什么垃圾程序员，写的程序经常出问题，还强制退出，烦死了~</p>
</blockquote>
<p>因此，不论如何，为了尊严，一定得实现热更新！</p>
<span id="more"></span>
<h2 id="百度大法">百度大法</h2>
<p>要解决问题，按照习俗，肯定是先问下百度。</p>
<p>一通查找，发现官方<a
href="https://github.com/eggjs/egg/issues/2826#issuecomment-406589330">建议使用
SLB 来实现热更新</a>，那我不具备这个条件咋办，然后又发现一个新的思路 <a
href="https://juejin.cn/post/6844903602205491213">eggjs
的单机热部署</a>，但作者已不再维护，因此根据 <a
href="https://github.com/airyland/egg-deploy">egg-deploy</a>
思路，自己进行一些优化实现了eggjs 的单机热更新。</p>
<h2 id="解决思路">解决思路</h2>
<p>热更新的总体思路与集群热更新的方式一致，只不是实现方式不一样，核心思想是：</p>
<p>在服务器上启动临时 eggjs 实例，然后通过 nginx 的 reload
将流量切到临时实例后，更新主服务，再将 nginx 切换加主服务上。</p>
<p>按思路，首先要考虑 2 个问题：</p>
<ol type="1">
<li>schedule 任务可能在临时实例上执行</li>
<li>在关闭服务时，可能还存在未完成的连接，导致用户端响应错误</li>
</ol>
<p>对于第 1 个问题，可以将 schedule
单独用一个实例去承载。由于是一些定时任务，不会频繁地去更新，即使关闭重启，对用户的使用完全没有影响。</p>
<p>对于第 2 个问题，据 <a
href="https://github.com/eggjs/egg/issues/1425#issuecomment-329137753">官方回复</a>，eggjs
有做优雅退出，因此该问题不需要进行处理。</p>
<h2 id="完整方案">完整方案</h2>
<h3 id="独立-schedule">独立 Schedule</h3>
<p>schedule 服务单独使用一个实例来承载。因此，在使用
<code>egg-scripts start</code>启动时，要向 eggjs
传递启动参数，来区分实例的类型。可以通过下列两个方式来实现：</p>
<ol type="1">
<li>如果是 eggjs3.x 的话，可以在启动时，传递一个 <code>--env</code>
来指定环境变量，从而调用指定的配置文件来初始化
eggjs，这个时候就可以在指定的配置文件中增加配置来表明当前实例的类型</li>
<li>在 eggjs2.x 中，则无法修改 <code>--env</code>，因此只能通过
<code>process.argv</code> 的第 3 个参数来进行判断</li>
</ol>
<p>下面介绍一下在 eggjs2.x 的实例类型识别方法</p>
<p>在 eggjs 实例中，<code>process.argv[2]</code> 是由 egg-scripts
传递的参数，它是一个 json 字符串，我们可以通过其中的 title 或者 port
来区分实例的类型，在 <code>configWillLoad()</code>
钩子函数中将增加实例类型的配置。</p>
<p>最后在定义 schedule 时，根据配置来判断是否启动该 schedule。</p>
<p>代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">configWillLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 此时 config 文件已经被读取并合并，但是还并未生效</span></span><br><span class="line">  <span class="comment">// 这是应用层修改配置的最后时机</span></span><br><span class="line">  <span class="comment">// 注意：此函数只支持同步调用</span></span><br><span class="line">  <span class="comment">//   // 例如：参数中的密码是加密的，在此处进行解密</span></span><br><span class="line">  <span class="comment">//   this.app.config.mysql.password = decrypt(this.app.config.mysql.password);</span></span><br><span class="line">  <span class="comment">//   // 例如：插入一个中间件到框架的 coreMiddleware 之间</span></span><br><span class="line">  <span class="comment">//   const statusIdx = this.app.config.coreMiddleware.indexOf(&#x27;status&#x27;);</span></span><br><span class="line">  <span class="comment">//   this.app.config.coreMiddleware.splice(statusIdx + 1, 0, &#x27;limit&#x27;);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据启动命令设置 deploy 环境</span></span><br><span class="line">  <span class="title function_">setStartupEnv</span>(<span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">config</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// setStartupEnv 定义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setStartupEnv</span>(<span class="params">config</span>) &#123;  </span><br><span class="line">  <span class="keyword">const</span> startupEnv = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(process.<span class="property">argv</span>[<span class="number">2</span>])</span><br><span class="line">  <span class="comment">// 不覆盖设置</span></span><br><span class="line">  <span class="keyword">if</span> (config.<span class="property">deploy</span> || config.<span class="property">env</span> === <span class="string">&#x27;local&#x27;</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (startupEnv.<span class="property">port</span> === <span class="number">7010</span>) &#123;</span><br><span class="line">    config.<span class="property">deploy</span> = &#123;</span><br><span class="line">      <span class="attr">env</span>: <span class="string">&#x27;schedule&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// shedule 定义</span></span><br><span class="line"><span class="comment">// 如果不是采用这种方式的，可以参考思路</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123; schedule &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../utils/scheduleBase&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">schedule</span>: <span class="title function_">schedule</span>(</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">interval</span>: <span class="string">&#x27;1s&#x27;</span>, <span class="comment">// 每天凌晨4点执行</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;worker&#x27;</span>, <span class="comment">// 指定某一个 worker 执行</span></span><br><span class="line">        <span class="attr">env</span>: [<span class="string">&#x27;local&#x27;</span>],</span><br><span class="line"></span><br><span class="line">        <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="comment">// 不开机启动</span></span><br><span class="line">        <span class="attr">disable</span>: <span class="literal">true</span>, <span class="comment">// 不启动，只采用手动调用</span></span><br><span class="line">        <span class="attr">running</span>: <span class="literal">false</span>, <span class="comment">// 是否正在运行</span></span><br><span class="line">        <span class="attr">lastTime</span>: <span class="number">0</span> <span class="comment">// 上次触发时间</span></span><br><span class="line">      &#125;,</span><br><span class="line">      app</span><br><span class="line">    ),</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">task</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;testSchedule start()&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// scheduleBase.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包裹 schedule 设置定义</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">scheduleOptions</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">app</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">schedule</span>(<span class="params">scheduleOptions, app</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> enable = <span class="title function_">enableSchedule</span>(app.<span class="property">config</span>)</span><br><span class="line">  <span class="keyword">if</span> (enable) <span class="keyword">return</span> scheduleOptions</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 修改 disable 属性</span></span><br><span class="line">  scheduleOptions.<span class="property">disable</span> = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">return</span> scheduleOptions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="主服务热更新流程">主服务热更新流程</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line"></span><br><span class="line">Nginx -&gt;&gt; Eggjs—Instance1: 连接主服务</span><br><span class="line">Eggjs—Instance2 --&gt;&gt; Eggjs—Instance2: 启动临时服务</span><br><span class="line">Nginx --&gt;&gt; Eggjs—Instance2: 切换到临时服务</span><br><span class="line">Eggjs—Instance1 -&gt;&gt; Eggjs—Instance1: 重启主服务</span><br><span class="line">Nginx -&gt;&gt; Eggjs—Instance1: 切换到主服务</span><br><span class="line">Eggjs—Instance2 --&gt;&gt; Eggjs—Instance2: 关闭临时服务</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="nginx-流量切换实现">Nginx 流量切换实现</h3>
<p>nginx 中使用 upstream 来进行流量切换。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> backend_stream &#123;</span><br><span class="line">    // <span class="attribute">eggjs</span> 主服务</span><br><span class="line">    server <span class="number">127.0.0.1:7001</span>;</span><br><span class="line">    // <span class="attribute">eggjs</span> 临时服务</span><br><span class="line">    server <span class="number">127.0.0.1:7002</span> down;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span>;</span><br><span class="line">    <span class="attribute">server_name</span> test.demo.com;</span><br><span class="line">    <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">1m</span>;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> HIGH:!aNULL:!MD5;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">	<span class="comment"># 头信息</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Server <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">	<span class="comment"># location请求映射规则，/ 代表一切请求路径</span></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">600</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://backend_stream;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过修改 upstream 中的服务启用或关闭来进行流量切换，切换后，需要使用
<code>nginx -s reload</code> 来重载配置。</p>
<p>具体的实施代码可以参考：<a
href="https://github.com/airyland/egg-deploy/blob/master/lib.js">egg-deploy</a></p>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<p><a
href="https://github.com/eggjs/egg/issues/2826">eggjs生产环境可以热更新吗？</a></p>
<p><a href="https://juejin.cn/post/6844903602205491213">eggjs
的单机热部署</a></p>
<p><a href="https://github.com/airyland/egg-deploy">egg-deploy</a></p>
<p><a
href="https://www.zhihu.com/question/20790576">大公司里怎样开发和部署前端代码？
- 知乎 (zhihu.com)</a></p>
<p><a href="https://juejin.cn/post/7203262276571381817">前端非覆盖式发布
- 掘金 (juejin.cn)</a></p>
<p><a
href="https://github.com/kekobin/blog/issues/67">eggjs优雅重启策略</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Deploy</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Deploy</tag>
      </tags>
  </entry>
  <entry>
    <title>色彩搭配方法</title>
    <url>/posts/2022/2K21HCS.html</url>
    <content><![CDATA[<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220401215806742.png"
alt="image-20220401215806742" />
<figcaption aria-hidden="true">image-20220401215806742</figcaption>
</figure>
<p>本文主要记录在平时使用中的一些配色技巧，方便使用。</p>
<span id="more"></span>
<h2 id="理解色彩">理解色彩</h2>
<h3 id="色彩的构成">色彩的构成</h3>
<h4 id="什么是色彩">什么是色彩</h4>
<p><code>印刷品设计</code>：色彩就是可见光在物体颜料上除去被吸收的光后，散射出来的光的颜色，是一种「反射色」</p>
<p><code>互联网设计</code><strong>：</strong>色彩就是白色光透过带颜色的电子屏幕后，表现出来的光的颜色，是一种「透过色」</p>
<h4 id="色彩的构成-1">色彩的构成</h4>
<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/色环.png" width=200 alt="色环" align=center/></p>
<p><code>色相(Hue)</code>：用于区分色彩的首要特征，比如红、黄、蓝等颜色</p>
<p><code>纯度(Purity)</code>：纯度用来表现色彩的鲜艳和深浅</p>
<p><code>明度(Lightness)</code>：明度是指色彩的亮度或明度</p>
<blockquote>
<p>十二色相环是由<a
href="https://baike.baidu.com/item/原色">原色</a>（primary hues），<a
href="https://baike.baidu.com/item/二次色">二次色</a>（secondary
hues）和<a
href="https://baike.baidu.com/item/三次色">三次色</a>（tertiary
hues）组合而成。</p>
<ul>
<li><p>色相环中的<a
href="https://baike.baidu.com/item/三原色">原色</a>是红、黄、蓝色，彼此势均力敌，在环中形成一个等边三角形。</p></li>
<li><p>二次色是橙、紫、绿色，处在三原色之间，形成另一个等边三角形。红橙、黄橙、黄绿、蓝绿、蓝紫和红紫六色为三次色。</p></li>
<li><p>三次色是由原色和二次色混合而成。</p></li>
</ul>
</blockquote>
<h3 id="冷色与暖色">冷色与暖色</h3>
<p>色彩学上根据心理感受，把颜色分为 3 种色调。</p>
<ul>
<li>暖色调（红、橙、黄）</li>
<li>冷色调（青、蓝）</li>
<li>中性色调（紫、绿、黑、灰、白）</li>
</ul>
<h3 id="色彩印象坐标">色彩印象坐标</h3>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/配色印象评价.jpg"
alt="配色印象评价" />
<figcaption aria-hidden="true">配色印象评价</figcaption>
</figure>
<table>
<thead>
<tr class="header">
<th>象限</th>
<th>说明</th>
<th>常用颜色搭配</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>给人<code>静态柔和</code>的感觉</td>
<td>通常是隐约柔和颜色之间的搭配</td>
</tr>
<tr class="even">
<td>2</td>
<td>给人<code>动态柔和</code>的感觉</td>
<td>通常是鲜亮颜色间的搭配</td>
</tr>
<tr class="odd">
<td>3</td>
<td>给人<code>动态生硬</code>的感觉</td>
<td>通常是鲜亮和浑浊暗淡颜色之间的搭配</td>
</tr>
<tr class="even">
<td>4</td>
<td>给人<code>静态生硬</code>的感觉</td>
<td>通常是灰冷颜色之间的搭配</td>
</tr>
</tbody>
</table>
<p>在“配色印象空间”中，相距较远的颜色之间的印象会有较大的差异，而距离较近的颜色之间的印象会比较相近，也就是说<strong>颜色间的距离与印象的差异程度成正比关系</strong>。</p>
<h2 id="协调配色">协调配色</h2>
<h3 id="按色相一致配色">按色相一致配色</h3>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/色相一致.jpg"
alt="色相一致" />
<figcaption aria-hidden="true">色相一致</figcaption>
</figure>
<p>主色和辅色都在同一个色相上。</p>
<p>优点：这种配色方法往往会给人页面很一致化，容易营造出一种较为梦幻的感觉。</p>
<p>缺点：但因较为朴素也就不容易引人注目，而且会给人一种单调的感觉。</p>
<h3 id="按明度一致配色">按明度一致配色</h3>
<p>明度一致的配色，即使是使用多种颜色也能让整体富有均衡的印象。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/same-lightness.png"
alt="same-lightness" />
<figcaption aria-hidden="true">same-lightness</figcaption>
</figure>
<p>明度即表示色彩的明亮程度。不管使用什么样的色调，只要色彩的明度相合就能表现出统一感。比起纯度以及色相，明度是让眼睛更容易感觉到变化的色彩要素。</p>
<p>将明度统合，其意义等同于不在设计物上做出特别突显或醒目的部分。明度一致的设计，能使整体有均衡而平面的印象。</p>
<p>蓝色和红色本来明度就偏低，而黄色原本就是明度高的颜色，正因为色彩本身即带有明度的特性，统合色彩明度的工作便格外困难。</p>
<h3 id="按纯度一致配色">按纯度一致配色</h3>
<p>纯度，表示色彩的鲜艳程度。相比“明度”跟“色相”，纯度更容易对人的心理印象造成影响。</p>
<p>其中，纯度越高，越是让人感到鲜艳刺激（图1）；纯度越低，越是让人感觉平静沉稳（图2）；而高低纯度混合的配色是难以统合的（图3）。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/颜色纯度.png"
alt="颜色纯度" />
<figcaption aria-hidden="true">颜色纯度</figcaption>
</figure>
<h2 id="强调配色">强调配色</h2>
<h3 id="按色相对比配色">按色相对比配色</h3>
<p>色相对比，是把不同色相的色彩组合在一起并借助颜色的不同来营造对比效果。</p>
<h3 id="按明度对比配色">按明度对比配色</h3>
<p>由于人的目光容易被鲜艳的色彩所吸引，所以可以使用高纯度的色彩来用作强调作品的某一部分。</p>
<p>高纯度的色彩组合容易形成一种花哨的感觉，因此亮眼的作品需要在使用纯度高的颜色来凸显某一部分的同时压低周边元素的色彩纯度，然后还需考虑如何引导视线如何做排版。</p>
<h3 id="按纯度对比配色">按纯度对比配色</h3>
<p>人的眼睛对明度差异的敏感度比其他任何一种对比都要高，所以明度间的对比很强烈。</p>
<h2 id="色彩搭配方式">色彩搭配方式</h2>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/配色方式.png"
alt="配色方式" />
<figcaption aria-hidden="true">配色方式</figcaption>
</figure>
<h3 id="色相差形成的配色方式">色相差形成的配色方式</h3>
<p>根据主色与辅色的色相差不同，可以分为以下各种类型：</p>
<h4 id="同色系配色">同色系配色</h4>
<p>色相环上相差 15 度左右。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/同系色配色.jpg"
alt="同系色配色" />
<figcaption aria-hidden="true">同系色配色</figcaption>
</figure>
<h4 id="邻近色配色">邻近色配色</h4>
<p>色带上相邻近的颜色。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/邻近色配色.png"
alt="邻近色配色" />
<figcaption aria-hidden="true">邻近色配色</figcaption>
</figure>
<h4 id="类似色配色">类似色配色</h4>
<p>在色轮上90度角内相邻接的颜色。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/类似色.jpg"
alt="类似色" />
<figcaption aria-hidden="true">类似色</figcaption>
</figure>
<h4 id="中差色配色">中差色配色</h4>
<p>中差色对比是色相环上呈90度角的色彩组合。中差色对比相对突出，色彩对比明快，容易呈现饱和度高的色彩。但容易产生沉闷感。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/中差色配色.jpg"
alt="中差色配色" />
<figcaption aria-hidden="true">中差色配色</figcaption>
</figure>
<h4 id="对比色互补色配色">对比色（互补色）配色</h4>
<p>在色相环中每一个颜色对面(180度对角)的颜色。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/对比色配色.jpg"
alt="对比色配色" />
<figcaption aria-hidden="true">对比色配色</figcaption>
</figure>
<h4 id="中性色配色">中性色配色</h4>
<p>用一些中性的色彩作为基调搭配，常应用在信息量大的网站，突出内容，不会受不必要的色彩干扰。这种过配色比较通用，非常经典。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/中性色配色.png"
alt="中性色配色" />
<figcaption aria-hidden="true">中性色配色</figcaption>
</figure>
<h4 id="多色搭配下的配色">多色搭配下的配色</h4>
<p>主色和其他搭配色之间的关系会更丰富，可能有类似色、中差色、对比色等搭配方式，但其中某种色彩会占主导。</p>
<h3 id="色调调和而形成的配色方式">色调调和而形成的配色方式</h3>
<p>在纯色中加入统一的颜色，让整体的色调在视觉上达到统一。</p>
<p>深色调和暗色调等类似色调搭配也可以形成同样的配色效果。即使出现多种色相，只要保持色调一致，画面也能呈现整体统一性。</p>
<ol type="1">
<li>清澈的色调</li>
<li>阴暗的色调</li>
<li>明亮色调</li>
<li>深暗色调</li>
<li>雅白色调</li>
</ol>
<h2 id="配色网站">配色网站</h2>
<p><a href="http://www.peisebiao.com/">配色表 peisebiao.com</a></p>
<h2 id="其它教程">其它教程</h2>
<ol type="1">
<li>红色篇：<a
href="http://www.uisdc.com/designer-review-color-red">《设计师的读书笔记！带你重新全面认识色彩系列之红色篇》</a></li>
<li>橙色篇：<a
href="http://www.uisdc.com/designer-review-color-orange">《深入浅出学配色！带你重新全面认识色彩系列之橙色篇》</a></li>
<li>黄色篇：<a
href="http://www.uisdc.com/designer-review-color-yellow">《深入浅出学配色！带你重新全面认识色彩系列之黄色篇》</a></li>
<li>绿色篇：<a
href="http://www.uisdc.com/designer-review-color-green">《深入浅出学配色！带你重新全面认识色彩系列之绿色篇》</a></li>
<li>蓝色篇：<a
href="http://www.uisdc.com/designer-review-color-blue">《深入浅出学配色！带你重新全面认识色彩系列之蓝色篇》</a></li>
<li>紫色篇：<a
href="http://www.uisdc.com/designer-review-color-purple">《深入浅出学配色！带你重新全面认识色彩系列之紫色篇》</a></li>
<li>橙色进阶：<a
href="http://www.uisdc.com/comprehensive-understanding-of-orange">《带你重新全面认识色彩系列之橙色进阶篇》</a></li>
<li>蓝色+红色进阶：<a
href="http://www.uisdc.com/comprehensive-understanding-red-blue">《超多案例！零基础学配色系列之红色+蓝色篇》</a></li>
</ol>
<h2 id="参考">参考</h2>
<ol type="1">
<li>《色彩设计原理》</li>
<li><a
href="https://www.uisdc.com/color-design-reading-notes-1">新手学配色，看这篇《色彩设计原理》读书笔记就够了（一）</a></li>
<li><a
href="https://www.jianshu.com/p/99d97e913af6">如何取得协调的配色</a></li>
<li><a
href="https://baijiahao.baidu.com/s?id=1678943509942368945">配色不要慌！色彩搭配原理只有三条！</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>色彩搭配</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>前端好用工具</title>
    <url>/posts/2022/1QF32WJ.html</url>
    <content><![CDATA[<p>本文主要收集一些好用的前端开发工具，方便在开发中使用。</p>
<span id="more"></span>
<p>站酷：https://www.zcool.com.cn/search/folder/fix?word=%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F</p>
<p>icon：https://remixicon.com/ 、https://iconic.app/aerial/ 、
https://fontawesome.com/v5.15/icons?d=gallery&amp;p=2&amp;m=free</p>
<p>调色板：https://arco.design/palette/list</p>
<p>插画：https://undraw.co/illustrations 、
https://icons8.cn/illustrations/style--pale</p>
<p>动画库：vue版本https://motion.vueuse.org/
、react版本https://motion.ant.design/language/transition-cn</p>
<p>美工吧：https://www.meigong8.com/</p>
<p>css指南集合：https://tsejx.github.io/css-guidebook/concept/selector/
、https://chokcoco.github.io/CSS-Inspiration/#/</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>FrontEnd</category>
      </categories>
      <tags>
        <tag>FrontEnd</tag>
      </tags>
  </entry>
  <entry>
    <title>类关系图简记</title>
    <url>/posts/2022/2AJRA04.html</url>
    <content><![CDATA[<p>类关系记忆技巧总结如下表所示：</p>
<table>
<colgroup>
<col style="width: 36%" />
<col style="width: 27%" />
<col style="width: 36%" />
</colgroup>
<thead>
<tr class="header">
<th>分类</th>
<th>箭头特征</th>
<th>记忆技巧</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>箭头方向</td>
<td>从子类指向父类</td>
<td>定义子类需要通过 extends
关键字指定父类子类一定是知道父类定义的，但父类并不知道子类的定义只有知道对方信息时才能指向对方箭头的方向是从子类指向父类</td>
</tr>
<tr class="even">
<td>继承/实现</td>
<td>用线条连接两个类； 空心三角箭头表示继承或实现</td>
<td>实线表示继承，是is-a的关系，表示扩展，不虚，很结实</td>
</tr>
<tr class="odd">
<td>虚线表示实现，虚线代表“虚”无实体</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>关联/依赖</td>
<td>用线条连接两个类； 普通箭头表示关联或依赖</td>
<td>虚线表示依赖关系：临时用一下，若即若离，虚无缥缈，若有若无表示一种使用关系，一个类需要借助另一个类来实现功能一般一个类将另一个类作为参数使用，或作为返回值</td>
</tr>
<tr class="odd">
<td>实线表示关联关系：关系稳定，实打实的关系，“铁哥们”表示一个类对象和另一个类对象有关联通常一个类中有另一个类对象作为属性</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>组合/聚合</td>
<td>用菱形表示：像一个盛东西的器皿（如盘子）</td>
<td>聚合：空心菱形，代表空器皿里可以放很多相同的东西，聚集在一起（箭头方向所指的类）整体和局部的关系，两者有独立的生命周期，是
has-a 的关系弱关系，消极的词：弱-空</td>
</tr>
<tr class="odd">
<td>组合：实心菱形，代表器皿里已经有实体结构的存在，生死与共整体与局部的关系，和聚合关系对比，关系更加强烈，两者具有相同的生命周期，contains-a
的关系强关系，积极的词；强-满</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<span id="more"></span>
<h2 id="类图">类图</h2>
<p>下图是对动物衍生关系描述的类图。这个图非常有技术含量也非常经典。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/类关系图.jpg"
alt="类关系图" />
<figcaption aria-hidden="true">类关系图</figcaption>
</figure>
<h2 id="依赖与关联的区别">依赖与关联的区别</h2>
<p>类与类之间由弱到强关系是: 没关系 &gt;依赖 &gt; 关联 &gt; 聚合 &gt;
组合</p>
<h3 id="依赖">依赖</h3>
<p>可以简单的理解，就是一个 类A 使用到了另一个
类B，而这种使用关系是具有偶然性的、临时性的、非常弱的，但是 B类
的变化会影响到 A；</p>
<p>比如某人要过河，需要借用一条船，此时人与船之间的关系就是依赖；</p>
<p>表现在代码层面，为 类B 作为参数被 类A 在某个 method方 法中使用。</p>
<p>用带虚线的箭头。</p>
<h3 id="关联">关联</h3>
<p>他体现的是两个类、或者类与接口之间语义级别的一种<strong>强依赖关系</strong>，比如我和我的朋友；这种关系比依赖更强、不存在依赖关系的偶然性、关系也不是临时性的，一般是长期性的，而且双方的关系一般是平等的、关联可以是单向、双向的；</p>
<p>表现在代码层面，为被关联类B以类属性的形式出现在关联 类A
中，也可能是关联 类A 引用了一个类型为被关联 类B 的全局变量；</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DesignPattern</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>C# 优雅编程</title>
    <url>/posts/2022/54B652.html</url>
    <content><![CDATA[
]]></content>
      <categories>
        <category>Develop</category>
        <category>DesignPattern</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>掌握设计原则，打磨编程基本功</title>
    <url>/posts/2024/3D3WTKJ.html</url>
    <content><![CDATA[<p>随着开发经验的增加，总感觉自己的代码风格有些混乱，同时伴随着一些困惑，如：</p>
<ol type="1">
<li>功能扩展性差，经常需要被重构</li>
<li>编码时无法对设计模式进行灵活使用</li>
<li>代码不够优雅</li>
</ol>
<p>虽然代码风格见人见智，但是好的代码，总会让人眼前一亮，<strong>低耦合、高内聚、高复用、易扩展、易维护</strong>，于己于人，都是一份优雅。</p>
<p>作者从入门开始，就开始阅读设计模式，有系统地研读过，也有零零散散看过其他人的心得，但总是不能达到天人合一，运用自如的状态。今朝又心有所动，于是下定决心，稳扎稳打，以愚公移山之劲，重学设计模式，打磨编程基本功。</p>
<span id="more"></span>
<h2 id="概述">概述</h2>
<p>面向对象开发，要主遵循七大设计原则，这七在原则，是编程的核心纲要，是编程的根基，因此必须滚瓜烂熟。</p>
<p>这七大原则的核心目录其实就一个：封装变化。</p>
<table>
<colgroup>
<col style="width: 32%" />
<col style="width: 39%" />
<col style="width: 27%" />
</colgroup>
<thead>
<tr class="header">
<th>设计原则</th>
<th>一句话归纳</th>
<th>目的</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>单一职责原则(Single Responsibility Principle，SRP)</td>
<td>一个类只干一件事，实现类要单一</td>
<td>便于理解，提高代码的可读性</td>
</tr>
<tr class="even">
<td>开闭原则(Open-Closed Principle，OCP)</td>
<td>对扩展开放，对修改关闭</td>
<td>降低维护带来的新风险</td>
</tr>
<tr class="odd">
<td>里氏替换原则(Liskov Substitution Principle， LSP)</td>
<td>派生类（子类）对象可以在程序中代替其基类（超类）对象。</td>
<td>防止继承泛滥</td>
</tr>
<tr class="even">
<td>接口隔离原则(Interface Segregation Principle，ISP)</td>
<td>一个接口只干一件事，接口职责要精简单一</td>
<td>功能解耦，高聚合、低耦合</td>
</tr>
<tr class="odd">
<td>依赖倒置原则(Dependence Inversion Principle，DIP)</td>
<td>高层不应该依赖低层，应面向接口编程<br />应依赖于抽象而不是一个实例</td>
<td>更利于代码结构的升级扩展</td>
</tr>
<tr class="even">
<td>合成复用原则(Composite Reuse Principle，CRP)</td>
<td>尽量使用组合或者聚合关系实现代码复用，少使用继承</td>
<td>降低代码耦合</td>
</tr>
<tr class="odd">
<td>迪米特法则(Law of Demeter，LoD)</td>
<td>一个软件实体应当尽可能少地与其他实体发生相互作用，一个类应该保持对其它对象最少的了解，降低耦合度</td>
<td>只和朋友交流，不和陌生人说话，减少代码臃肿</td>
</tr>
</tbody>
</table>
<blockquote>
<p>上述可简记为：迪米特、开单里、接依合（<strong>迪米特 开</strong> 车到
<strong>3（单谐音） 里</strong> 路外，去接 <strong>依 合</strong>）</p>
<p>也可以简记为： <strong>SOLID CD（固体CD）</strong></p>
</blockquote>
<h2 id="单一职责原则s">单一职责原则(S)</h2>
<h3 id="定义">定义</h3>
<p>单一职责原则（Single Responsibility
Principle，SRP）又称单一功能原则，由罗伯特·C.马丁（Robert C.
Martin）于《敏捷软件开发：原则、模式和实践》一书中提出的。这里的职责是指类变化的原因，单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分（There
should never be more than one reason for a class to change）。</p>
<p>该原则提出对象不应该承担太多职责，如果一个对象承担了太多的职责，至少存在以下两个缺点：</p>
<ol type="1">
<li>一个职责的变化可能会削弱或者抑制这个类实现其他职责的能力；</li>
<li>当客户端仅需要该对象的某一个职责时，不得不将其他不需要的职责全都包含进来，从而造成冗余代码或代码的浪费。</li>
</ol>
<h3 id="优点">优点</h3>
<p>单一职责原则的核心就是控制类的粒度大小、将对象解耦、提高其内聚性。如果遵循单一职责原则将有以下优点。</p>
<ol type="1">
<li>降低类的复杂度</li>
</ol>
<p>一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多。</p>
<ol start="2" type="1">
<li>提高类的可读性</li>
</ol>
<p>复杂性降低，自然其可读性会提高。</p>
<ol start="3" type="1">
<li>提高系统的可维护性</li>
</ol>
<p>可读性提高，那自然更容易维护了。</p>
<ol start="4" type="1">
<li>变更引起的风险降低</li>
</ol>
<p>变更是必然的，如果单一职责原则遵守得好，当修改一个功能时，可以显著降低对其他功能的影响。</p>
<h3 id="实现方法">实现方法</h3>
<p>单一职责原则是最简单但又最难运用的原则，需要设计人员发现类的不同职责并将其分离，再封装到不同的类或模块中。而发现类的多重职责需要设计人员具有较强的分析设计能力和相关重构经验。</p>
<ol type="1">
<li>不同的应用场景，对同一个类的职责是否单一的判定，是不一样的。我们需要具体场景具体分析</li>
<li>一个类的设计可能已经满足单一职责原则了，但可能随着需求的迭代在未来的某个时候就不再满足单一职责原则了，此时我们没必要过于未雨绸缪，过度设计。可以先满足业务需求。随着业务的发展，如果类变得越来越庞大，代码越来越多，不再满足单一职责，这个时候，再把这个类持续进行重构拆分。</li>
</ol>
<h3 id="不满足单一职责的坏味道">不满足单一职责的坏味道</h3>
<p>随着开发经验的积累，我们是很容易嗅到一些不满足单一职责的坏味道的</p>
<ol type="1">
<li>类的代码行数过多</li>
<li>类依赖的其他类过多</li>
<li>过长的方法</li>
<li>私有方法过多</li>
<li>不容易给类起名字，类名中包含两个或以上的名词</li>
</ol>
<h2 id="开闭原则o">开闭原则(O)</h2>
<h3 id="定义-1">定义</h3>
<p>开闭原则（Open Closed Principle，OCP）由勃兰特·梅耶（Bertrand
Meyer）提出，他在 1988 年的著作《面向对象软件构造》（Object Oriented
Software Construction）中提出：Software entities like classes,modules
and functions should be open for extension but closed for
modifications，软件实体应当对扩展开放，对修改关闭。</p>
<p>这里的软件实体包括以下几个部分：</p>
<ol type="1">
<li>项目中划分出的模块</li>
<li>类与接口</li>
<li>方法</li>
</ol>
<h3 id="实现方法-1">实现方法</h3>
<p>需求总是变化的，
可是对于软件设计者来说，如何才能做到不对原有系统修改的前提下，实现灵活的扩展，使其满足新的需求。</p>
<p>在开发过程中，应面向相对稳定的类型编程，一般认为，以下类型都属于相对稳定的类型：</p>
<ol type="1">
<li>接口</li>
<li>抽象类</li>
<li>功能类</li>
<li>其它不变化的类</li>
</ol>
<p>因为抽象不包含具体实现，所以灵活性好，适应性广，只要抽象得合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。</p>
<blockquote>
<p>有的同学可能会有这样的疑惑：新派生一个类后，要如何初始化后应用到系统中？</p>
<p>一般有以下方式：</p>
<ol type="1">
<li>使用依赖注入框架。</li>
<li>使用反射技术。将初始化的具体类型名称写入到配置文件，程序通过读取配置来初始化对应类</li>
</ol>
</blockquote>
<h3 id="作用">作用</h3>
<p>开闭原则是面向对象程序设计的终极目标，它使软件实体拥有一定的适应性和灵活性的同时具备稳定性和延续性。具体来说，其作用如下。</p>
<ol type="1">
<li><p>对软件测试的影响</p>
<p>软件遵守开闭原则的话，软件测试时只需要对扩展的代码进行测试就可以了，因为原有的测试代码仍然能够正常运行。</p></li>
<li><p>可以提高代码的可复用性</p>
<p>粒度越小，被复用的可能性就越大；在面向对象的程序设计中，根据原子和抽象编程可以提高代码的可复用性。</p></li>
<li><p>可以提高软件的可维护性</p>
<p>遵守开闭原则的软件，其稳定性高和延续性强，从而易于扩展和维护。</p></li>
</ol>
<h2 id="里氏替换原则l">里氏替换原则(L)</h2>
<h3 id="定义-2">定义</h3>
<p>里氏替换原则（Liskov Substitution
Principle，LSP）由麻省理工学院计算机科学实验室的里斯科夫（Liskov）女士在
1987
年的“面向对象技术的高峰会议”（OOPSLA）上发表的一篇文章《数据抽象和层次》（Data
Abstraction and Hierarchy）里提出来的，她提出：Inheritance should ensure
that any property proved about supertype objects also holds for subtype
objects，继承必须确保超类所拥有的性质在子类中仍然成立。</p>
<p>里氏替换原则主要阐述了有关继承的一些原则，是对多态应用的一种规范约束。</p>
<h3 id="规则">规则</h3>
<ol type="1">
<li>子类方法不能违背父类方法对输入输出异常的约定
<ol type="1">
<li>前置条件（输入参数）更宽松</li>
<li>后置条件（返回结果）更严格</li>
<li>不能新增异常类型</li>
</ol></li>
<li>子类方法不能违背父类方法定义的功能</li>
<li>子类必须完全实现父类的抽象方法</li>
</ol>
<h3 id="作用-1">作用</h3>
<p>里氏替换原则的主要作用如下。</p>
<ol type="1">
<li>里氏替换原则是实现开闭原则的重要方式之一。</li>
<li>它克服了继承中重写父类造成的可复用性变差的缺点。</li>
<li>它是动作正确性的保证。即类的扩展不会给已有的系统引入新的错误，降低了代码出错的可能性。</li>
<li>加强程序的健壮性，同时变更时可以做到非常好的兼容性，提高程序的维护性、可扩展性，降低需求变更时引入的风险。</li>
</ol>
<h3 id="实现方法-2">实现方法</h3>
<p>里氏替换原则通俗来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。也就是说：<strong>子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法</strong>。</p>
<p>根据上述理解，对里氏替换原则的定义可以总结如下：</p>
<ul>
<li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法</li>
<li>子类中可以增加自己特有的方法</li>
<li>当子类的方法重载父类的方法时，方法的前置条件（即方法的输入参数）要比父类的方法更宽松</li>
<li>当子类的方法实现父类的方法时（重写/重载或实现抽象方法），方法的后置条件（即方法的的输出/返回值）要比父类的方法更严格或相等</li>
</ul>
<p>通过重写父类的方法来完成新的功能写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的概率会非常大。</p>
<h2 id="接口隔离原则i">接口隔离原则(I)</h2>
<h3 id="定义-3">定义</h3>
<p>接口隔离原则（Interface Segregation
Principle，ISP）要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法。</p>
<p>2002 年罗伯特·C.马丁给“接口隔离原则”的定义是：Clients should not be
forced to depend on methods they do not
use，即客户端不应该被迫依赖于它不使用的方法。该原则还有另外一个定义：The
dependency of one class to another one should depend on the smallest
possible interface，一个类对另一个类的依赖应该建立在最小的接口上。</p>
<p>以上两个定义的含义是：要为各个类建立它们需要的专用接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。</p>
<p>接口隔离原则和单一职责都是为了提高类的内聚性、降低它们之间的耦合性，体现了封装的思想，但两者是不同的：</p>
<ul>
<li>单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离。</li>
<li>单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建。</li>
</ul>
<h3 id="优点-1">优点</h3>
<p>接口隔离原则是为了约束接口、降低类对接口的依赖性，遵循接口隔离原则有以下
5 个优点。</p>
<ol type="1">
<li>将臃肿庞大的接口分解为多个粒度小的接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。</li>
<li>接口隔离提高了系统的内聚性，减少了对外交互，降低了系统的耦合性。</li>
<li>如果接口的粒度大小定义合理，能够保证系统的稳定性；但是，如果定义过小，则会造成接口数量过多，使设计复杂化；如果定义太大，灵活性降低，无法提供定制服务，给整体项目带来无法预料的风险。</li>
<li>使用多个专门的接口还能够体现对象的层次，因为可以通过接口的继承，实现对总接口的定义。</li>
<li>能减少项目工程中的代码冗余。过大的大接口里面通常放置许多不用的方法，当实现这个接口的时候，被迫设计冗余的代码。</li>
</ol>
<h3 id="实现方法-3">实现方法</h3>
<p>在具体应用接口隔离原则时，应该根据以下几个规则来衡量。</p>
<ul>
<li>接口尽量小，但是要有限度。一个接口只服务于一个子模块或业务逻辑。</li>
<li>为依赖接口的类定制服务。只提供调用者需要的方法，屏蔽不需要的方法。</li>
<li>了解环境，拒绝盲从。每个项目或产品都有选定的环境因素，环境不同，接口拆分的标准就不同深入了解业务逻辑。</li>
<li>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。</li>
</ul>
<h2 id="依赖倒置原则d">依赖倒置原则(D)</h2>
<h3 id="定义-4">定义</h3>
<p>依赖倒置原则（Dependence Inversion Principle，DIP）是 Object Mentor
公司总裁罗伯特·马丁（Robert C.Martin）于 1996 年在 <a
href="http://c.biancheng.net/cplus/">C++</a> Report 上发表的文章。</p>
<p>依赖倒置原则的原始定义为：High level modules should not depend upon
low level modules. Both should depend upon abstractions. Abstractions
should not depend upon details. Details should depend upon
abstractions，即高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。其核心思想是：要面向接口编程，不要面向实现编程。</p>
<p>依赖倒置原则是实现开闭原则的重要途径之一，它降低了客户与实现模块之间的耦合。</p>
<p>由于在软件设计中，细节具有多变性，而抽象层则相对稳定，因此以抽象为基础搭建起来的架构要比以细节为基础搭建起来的架构要稳定得多。这里的抽象指的是接口或者抽象类，而细节是指具体的实现类。</p>
<p>使用接口或者抽象类的目的是制定好规范和契约，而不去涉及任何具体的操作，把展现细节的任务交给它们的实现类去完成。</p>
<h3 id="作用-2">作用</h3>
<p>依赖倒置原则的主要作用如下。</p>
<ol type="1">
<li>降低类间的耦合性。</li>
<li>提高系统的稳定性。</li>
<li>减少并行开发引起的风险。</li>
<li>提高代码的可读性和可维护性。</li>
</ol>
<h3 id="实现方法-4">实现方法</h3>
<p>依赖倒置原则的目的是通过要面向接口的编程来降低类间的耦合性，所以我们在实际编程中只要遵循以下
4 点，就能在项目中满足这个规则。</p>
<ul>
<li>每个类尽量提供接口或抽象类，或者两者都具备。</li>
<li>变量的声明类型尽量是接口或者是抽象类。</li>
<li>任何类都不应该从具体类派生。</li>
<li>使用继承时尽量遵循里氏替换原则。</li>
<li>依赖注入：通过构造函数、方法参数或属性注入的方式，将低层模块的实例传递给高层模块</li>
</ul>
<h2 id="合成复用原则c">合成复用原则(C)</h2>
<h3 id="定义-5">定义</h3>
<p>合成复用原则（Composite Reuse
Principle，CRP）又叫组合/聚合复用原则（Composition/Aggregate Reuse
Principle，CARP）。它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。</p>
<p>如果要使用继承关系，则必须严格遵循里氏替换原则。合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范。</p>
<h3 id="重要性">重要性</h3>
<p>通常类的复用分为 <strong>继承复用</strong> 和
<strong>合成复用</strong>
两种，继承复用虽然有简单和易实现的优点，但它也存在以下缺点。</p>
<ol type="1">
<li><p>破坏了类的封装性。</p>
<p>因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为“白箱”复用。</p></li>
<li><p>子类与父类的耦合度高。</p>
<p>父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护。</p></li>
<li><p>它限制了复用的灵活性。</p>
<p>从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化。</p></li>
</ol>
<p>采用组合或聚合复用时，可以将已有对象纳入新对象中，使之成为新对象的一部分，新对象可以调用已有对象的功能，它有以下优点。</p>
<ol type="1">
<li><p>它维持了类的封装性。</p>
<p>因为成分对象的内部细节是新对象看不见的，所以这种复用又称为“黑箱”复用。</p></li>
<li><p>新旧类之间的耦合度低。</p>
<p>这种复用所需的依赖较少，新对象存取成分对象的唯一方法是通过成分对象的接口。</p></li>
<li><p>复用的灵活性高。</p>
<p>这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象。</p></li>
</ol>
<h3 id="实现方法-5">实现方法</h3>
<p>合成复用原则是通过将已有的对象纳入新对象中，作为新对象的成员对象来实现的，新对象可以调用已有对象的功能，从而达到复用。</p>
<h2 id="迪米特法则d">迪米特法则(D)</h2>
<h3 id="定义-6">定义</h3>
<p>迪米特法则（Law of Demeter，LoD）又叫作最少知识原则（Least Knowledge
Principle，LKP)，产生于 1987 年美国东北大学（Northeastern
University）的一个名为迪米特（Demeter）的研究项目，由伊恩·荷兰（Ian
Holland）提出，被 UML
创始者之一的布奇（Booch）普及，后来又因为在经典著作《程序员修炼之道》（The
Pragmatic Programmer）提及而广为人知。</p>
<p>迪米特法则的定义是：只与你的直接朋友交谈，不跟“陌生人”说话（Talk only
to your immediate friends and not to
strangers）。其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。</p>
<p>迪米特法则中的“朋友”是指：</p>
<ol type="1">
<li>当前对象本身</li>
<li>当前对象的成员对象</li>
<li>当前对象所创建的对象</li>
<li>当前对象的方法参数等</li>
</ol>
<p>这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法。</p>
<blockquote>
<p>也可以理解为只能使用一个 <code>.</code> 访问的资源。比如可以使用
<code>person.age</code>，但不能使用 <code>person.Friend.age</code></p>
</blockquote>
<h3 id="优点-2">优点</h3>
<p>迪米特法则要求限制软件实体之间通信的宽度和深度，正确使用迪米特法则将有以下两个优点。</p>
<ol type="1">
<li>降低了类之间的耦合度，提高了模块的相对独立性。</li>
<li>由于亲合度降低，从而提高了类的可复用率和系统的扩展性。</li>
</ol>
<p>但是，过度使用迪米特法则会使系统产生大量的中介类，从而增加系统的复杂性，使模块之间的通信效率降低。所以，在釆用迪米特法则时需要反复权衡，确保高内聚和低耦合的同时，保证系统的结构清晰。</p>
<h3 id="实现方法-6">实现方法</h3>
<p>从迪米特法则的定义和特点可知，它强调以下两点：</p>
<ol type="1">
<li>从依赖者的角度来说，只依赖应该依赖的对象。</li>
<li>从被依赖者的角度说，只暴露应该暴露的方法。</li>
</ol>
<p>所以，在运用迪米特法则时要注意以下 6 点：</p>
<ol type="1">
<li>在类的划分上，应该创建弱耦合的类。类与类之间的耦合越弱，就越有利于实现可复用的目标。</li>
<li>在类的结构设计上，尽量降低类成员的访问权限。</li>
<li>在类的设计上，优先考虑将一个类设置成不变类。</li>
<li>在对其他类的引用上，将引用其他对象的次数降到最低。</li>
<li>不暴露类的属性成员，而应该提供相应的访问器（set 和 get 方法）。</li>
<li>谨慎使用序列化（Serializable）功能。</li>
</ol>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<p><a href="https://zh.wikipedia.org/wiki/SOLID_(面向对象设计)">SOLID
(面向对象设计) - 维基百科，自由的百科全书</a></p>
<p><a
href="https://refactoringguru.cn/design-patterns/catalog">设计模式目录：22种设计模式</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DesignPattern</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>编程风格指南</title>
    <url>/posts/2022/1BXSKSD.html</url>
    <content><![CDATA[<p>本文总结了 C# 中的编程风格，使编写的代码更加优雅。</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DesignPattern</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>Color 颜色对照表</title>
    <url>/posts/2019/3QMZ3K8.html</url>
    <content><![CDATA[<p>Color 颜色对照表。</p>
<span id="more"></span>
<table border="1" cellspacing="0">
<tbody>
<tr>
<td align="left" valign="middle">
<pre>Color.<a name="A"></a>AliceBlue</pre>
</td>
<td align="center" valign="middle" bgcolor="#F0F8FF">
<pre>240,248,255</pre>
</td>
<td align="left" valign="middle">
<pre>Color.LightSalmon</pre>
</td>
<td align="center" valign="middle" bgcolor="#FFA07A">
<pre>255,160,122</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.AntiqueWhite</pre>
</td>
<td align="center" valign="middle" bgcolor="#FAEBD7">
<pre>250,235,215</pre>
</td>
<td align="left" valign="middle">
<pre>Color.LightSeaGreen</pre>
</td>
<td align="center" valign="middle" bgcolor="#20B2AA">
<pre>32,178,170</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.Aqua</pre>
</td>
<td align="center" valign="middle" bgcolor="#00FFFF">
<pre>0,255,255</pre>
</td>
<td align="left" valign="middle">
<pre>Color.LightSkyBlue</pre>
</td>
<td align="center" valign="middle" bgcolor="#87CEFA">
<pre>135,206,250</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.Aquamarine</pre>
</td>
<td align="center" valign="middle" bgcolor="#7FFFD4">
<pre>127,255,212</pre>
</td>
<td align="left" valign="middle">
<pre>Color.LightSlateGray</pre>
</td>
<td align="center" valign="middle" bgcolor="#778899">
<pre>119,136,153</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.Azure</pre>
</td>
<td align="center" valign="middle" bgcolor="#F0FFFF">
<pre>240,255,255</pre>
</td>
<td align="left" valign="middle">
<pre>Color.LightSteelBlue</pre>
</td>
<td align="center" valign="middle" bgcolor="#B0C4DE">
<pre>176,196,222</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.<a name="B"></a>Beige</pre>
</td>
<td align="center" valign="middle" bgcolor="#F5F5DC">
<pre>245,245,220</pre>
</td>
<td align="left" valign="middle">
<pre>Color.LightYellow</pre>
</td>
<td align="center" valign="middle" bgcolor="#FFFFE0">
<pre>255,255,224</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.Bisque</pre>
</td>
<td align="center" valign="middle" bgcolor="#FFE4C4">
<pre>255,228,196</pre>
</td>
<td align="left" valign="middle">
<pre>Color.Lime</pre>
</td>
<td align="center" valign="middle" bgcolor="#00FF00">
<pre>0,255,0</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.Black</pre>
</td>
<td align="center" valign="middle" bgcolor="#000000">
<pre>0,0,0</pre>
</td>
<td align="left" valign="middle">
<pre>Color.LimeGreen</pre>
</td>
<td align="center" valign="middle" bgcolor="#32CD32">
<pre>50,205,50</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.BlanchedAlmond</pre>
</td>
<td align="center" valign="middle" bgcolor="#FFFFCD">
<pre>255,255,205</pre>
</td>
<td align="left" valign="middle">
<pre>Color.Linen</pre>
</td>
<td align="center" valign="middle" bgcolor="#FAF0E6">
<pre>250,240,230</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.Blue</pre>
</td>
<td align="center" valign="middle" bgcolor="#0000FF">
<pre>0,0,255</pre>
</td>
<td align="left" valign="middle">
<pre>Color.<a name="M"></a>Magenta</pre>
</td>
<td align="center" valign="middle" bgcolor="#FF00FF">
<pre>255,0,255</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.BlueViolet</pre>
</td>
<td align="center" valign="middle" bgcolor="#8A2BE2">
<pre>138,43,226</pre>
</td>
<td align="left" valign="middle">
<pre>Color.Maroon</pre>
</td>
<td align="center" valign="middle" bgcolor="#800000">
<pre>128,0,0</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.Brown</pre>
</td>
<td align="center" valign="middle" bgcolor="#A52A2A">
<pre>165,42,42</pre>
</td>
<td align="left" valign="middle">
<pre>Color.MediumAquamarine</pre>
</td>
<td align="center" valign="middle" bgcolor="#66CDAA">
<pre>102,205,170</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.BurlyWood</pre>
</td>
<td align="center" valign="middle" bgcolor="#DEB887">
<pre>222,184,135</pre>
</td>
<td align="left" valign="middle">
<pre>Color.MediumBlue</pre>
</td>
<td align="center" valign="middle" bgcolor="#0000CD">
<pre>0,0,205</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.<a name="C"></a>CadetBlue</pre>
</td>
<td align="center" valign="middle" bgcolor="#5F9EA0">
<pre>95,158,160</pre>
</td>
<td align="left" valign="middle">
<pre>Color.MediumOrchid</pre>
</td>
<td align="center" valign="middle" bgcolor="#BA55D3">
<pre>186,85,211</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.Chartreuse</pre>
</td>
<td align="center" valign="middle" bgcolor="#7FFF00">
<pre>127,255,0</pre>
</td>
<td align="left" valign="middle">
<pre>Color.MediumPurple</pre>
</td>
<td align="center" valign="middle" bgcolor="#9370DB">
<pre>147,112,219</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.Chocolate</pre>
</td>
<td align="center" valign="middle" bgcolor="#D2691E">
<pre>210,105,30</pre>
</td>
<td align="left" valign="middle">
<pre>Color.MediumSeaGreen</pre>
</td>
<td align="center" valign="middle" bgcolor="#3CB371">
<pre>60,179,113</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.Coral</pre>
</td>
<td align="center" valign="middle" bgcolor="#FF7F50">
<pre>255,127,80</pre>
</td>
<td align="left" valign="middle">
<pre>Color.MediumSlateBlue</pre>
</td>
<td align="center" valign="middle" bgcolor="#7B68EE">
<pre>123,104,238</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.CornflowerBlue</pre>
</td>
<td align="center" valign="middle" bgcolor="#6495ED">
<pre>100,149,237</pre>
</td>
<td align="left" valign="middle">
<pre>Color.MediumSpringGreen</pre>
</td>
<td align="center" valign="middle" bgcolor="#00FA9A">
<pre>0,250,154</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.Cornsilk</pre>
</td>
<td align="center" valign="middle" bgcolor="#FFF8DC">
<pre>255,248,220</pre>
</td>
<td align="left" valign="middle">
<pre>Color.MediumTurquoise</pre>
</td>
<td align="center" valign="middle" bgcolor="#48D1CC">
<pre>72,209,204</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.Crimson</pre>
</td>
<td align="center" valign="middle" bgcolor="#DC143C">
<pre>220,20,60</pre>
</td>
<td align="left" valign="middle">
<pre>Color.MediumVioletRed</pre>
</td>
<td align="center" valign="middle" bgcolor="#C71570">
<pre>199,21,112</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.Cyan</pre>
</td>
<td align="center" valign="middle" bgcolor="#00FFFF">
<pre>0,255,255</pre>
</td>
<td align="left" valign="middle">
<pre>Color.MidnightBlue</pre>
</td>
<td align="center" valign="middle" bgcolor="#191970">
<pre>25,25,112</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.<a name="D"></a>DarkBlue</pre>
</td>
<td align="center" valign="middle" bgcolor="#00008B">
<pre>0,0,139</pre>
</td>
<td align="left" valign="middle">
<pre>Color.MintCream</pre>
</td>
<td align="center" valign="middle" bgcolor="#F5FFFA">
<pre>245,255,250</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.DarkCyan</pre>
</td>
<td align="center" valign="middle" bgcolor="#008B8B">
<pre>0,139,139</pre>
</td>
<td align="left" valign="middle">
<pre>Color.MistyRose</pre>
</td>
<td align="center" valign="middle" bgcolor="#FFE4E1">
<pre>255,228,225</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.DarkGoldenrod</pre>
</td>
<td align="center" valign="middle" bgcolor="#B8860B">
<pre>184,134,11</pre>
</td>
<td align="left" valign="middle">
<pre>Color.Moccasin</pre>
</td>
<td align="center" valign="middle" bgcolor="#FFE4B5">
<pre>255,228,181</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.DarkGray</pre>
</td>
<td align="center" valign="middle" bgcolor="#A9A9A9">
<pre>169,169,169</pre>
</td>
<td align="left" valign="middle">
<pre>Color.<a name="N"></a>NavajoWhite</pre>
</td>
<td align="center" valign="middle" bgcolor="#FFDEAD">
<pre>255,222,173</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.DarkGreen</pre>
</td>
<td align="center" valign="middle" bgcolor="#006400">
<pre>0,100,0</pre>
</td>
<td align="left" valign="middle">
<pre>Color.Navy</pre>
</td>
<td align="center" valign="middle" bgcolor="#000080">
<pre>0,0,128</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.DarkKhaki</pre>
</td>
<td align="center" valign="middle" bgcolor="#BDB76B">
<pre>189,183,107</pre>
</td>
<td align="left" valign="middle">
<pre>Color.<a name="O"></a>OldLace</pre>
</td>
<td align="center" valign="middle" bgcolor="#FDF5E6">
<pre>253,245,230</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.DarkMagena</pre>
</td>
<td align="center" valign="middle" bgcolor="#8B008B">
<pre>139,0,139</pre>
</td>
<td align="left" valign="middle">
<pre>Color.Olive</pre>
</td>
<td align="center" valign="middle" bgcolor="#808000">
<pre>128,128,0</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.DarkOliveGreen</pre>
</td>
<td align="center" valign="middle" bgcolor="#556B2F">
<pre>85,107,47</pre>
</td>
<td align="left" valign="middle">
<pre>Color.OliveDrab</pre>
</td>
<td align="center" valign="middle" bgcolor="#6B8E2D">
<pre>107,142,45</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.DarkOrange</pre>
</td>
<td align="center" valign="middle" bgcolor="#FF8C00">
<pre>255,140,0</pre>
</td>
<td align="left" valign="middle">
<pre>Color.Orange</pre>
</td>
<td align="center" valign="middle" bgcolor="#FFA500">
<pre>255,165,0</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.DarkOrchid</pre>
</td>
<td align="center" valign="middle" bgcolor="#9932CC">
<pre>153,50,204</pre>
</td>
<td align="left" valign="middle">
<pre>Color.OrangeRed</pre>
</td>
<td align="center" valign="middle" bgcolor="#FF4500">
<pre>255,69,0</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.<a name="DarkRed"></a>DarkRed</pre>
</td>
<td align="center" valign="middle" bgcolor="#8B0000">
<pre>139,0,0</pre>
</td>
<td align="left" valign="middle">
<pre>Color.Orchid</pre>
</td>
<td align="center" valign="middle" bgcolor="#DA70D6">
<pre>218,112,214</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.DarkSalmon</pre>
</td>
<td align="center" valign="middle" bgcolor="#E9967A">
<pre>233,150,122</pre>
</td>
<td align="left" valign="middle">
<pre>Color.<a name="P"></a>PaleGoldenrod</pre>
</td>
<td align="center" valign="middle" bgcolor="#EEE8AA">
<pre>238,232,170</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.DarkSeaGreen</pre>
</td>
<td align="center" valign="middle" bgcolor="#8FBC8F">
<pre>143,188,143</pre>
</td>
<td align="left" valign="middle">
<pre>Color.PaleGreen</pre>
</td>
<td align="center" valign="middle" bgcolor="#98FB98">
<pre>152,251,152</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.DarkSlateBlue</pre>
</td>
<td align="center" valign="middle" bgcolor="#483D8B">
<pre>72,61,139</pre>
</td>
<td align="left" valign="middle">
<pre>Color.PaleTurquoise</pre>
</td>
<td align="center" valign="middle" bgcolor="#AFEEEE">
<pre>175,238,238</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.DarkSlateGray</pre>
</td>
<td align="center" valign="middle" bgcolor="#284F4F">
<pre>40,79,79</pre>
</td>
<td align="left" valign="middle">
<pre>Color.PaleVioletRed</pre>
</td>
<td align="center" valign="middle" bgcolor="#DB7093">
<pre>219,112,147</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.DarkTurquoise</pre>
</td>
<td align="center" valign="middle" bgcolor="#00CED1">
<pre>0,206,209</pre>
</td>
<td align="left" valign="middle">
<pre>Color.PapayaWhip</pre>
</td>
<td align="center" valign="middle" bgcolor="#FFEFD5">
<pre>255,239,213</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.DarkViolet</pre>
</td>
<td align="center" valign="middle" bgcolor="#9400D3">
<pre>148,0,211</pre>
</td>
<td align="left" valign="middle">
<pre>Color.PeachPuff</pre>
</td>
<td align="center" valign="middle" bgcolor="#FFDA9B">
<pre>255,218,155</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.DeepPink</pre>
</td>
<td align="center" valign="middle" bgcolor="#FF1493">
<pre>255,20,147</pre>
</td>
<td align="left" valign="middle">
<pre>Color.Peru</pre>
</td>
<td align="center" valign="middle" bgcolor="#CD853F">
<pre>205,133,63</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.DeepSkyBlue</pre>
</td>
<td align="center" valign="middle" bgcolor="#00BFFF">
<pre>0,191,255</pre>
</td>
<td align="left" valign="middle">
<pre>Color.Pink</pre>
</td>
<td align="center" valign="middle" bgcolor="#FFC0CB">
<pre>255,192,203</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.DimGray</pre>
</td>
<td align="center" valign="middle" bgcolor="#696969">
<pre>105,105,105</pre>
</td>
<td align="left" valign="middle">
<pre>Color.Plum</pre>
</td>
<td align="center" valign="middle" bgcolor="#DDA0DD">
<pre>221,160,221</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.DodgerBlue</pre>
</td>
<td align="center" valign="middle" bgcolor="#1E90FF">
<pre>30,144,255</pre>
</td>
<td align="left" valign="middle">
<pre>Color.PowderBlue</pre>
</td>
<td align="center" valign="middle" bgcolor="#B0E0E6">
<pre>176,224,230</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.<a name="F"></a>Firebrick</pre>
</td>
<td align="center" valign="middle" bgcolor="#B22222">
<pre>178,34,34</pre>
</td>
<td align="left" valign="middle">
<pre>Color.Purple</pre>
</td>
<td align="center" valign="middle" bgcolor="#800080">
<pre>128,0,128</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.FloralWhite</pre>
</td>
<td align="center" valign="middle" bgcolor="#FFFAF0">
<pre>255,250,240</pre>
</td>
<td align="left" valign="middle">
<pre>Color.<a name="R"></a>Red</pre>
</td>
<td align="center" valign="middle" bgcolor="#FF0000">
<pre>255,0,0</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.ForestGreen</pre>
</td>
<td align="center" valign="middle" bgcolor="#228B22">
<pre>34,139,34</pre>
</td>
<td align="left" valign="middle">
<pre>Color.RosyBrown</pre>
</td>
<td align="center" valign="middle" bgcolor="#BC8F8F">
<pre>188,143,143</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.Fuschia</pre>
</td>
<td align="center" valign="middle" bgcolor="#FF00FF">
<pre>255,0,255</pre>
</td>
<td align="left" valign="middle">
<pre>Color.RoyalBlue</pre>
</td>
<td align="center" valign="middle" bgcolor="#4169E1">
<pre>65,105,225</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.<a name="G"></a>Gainsboro</pre>
</td>
<td align="center" valign="middle" bgcolor="#DCDCDC">
<pre>220,220,220</pre>
</td>
<td align="left" valign="middle">
<pre>Color.<a name="S"></a>SaddleBrown</pre>
</td>
<td align="center" valign="middle" bgcolor="#8B4513">
<pre>139,69,19</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.GhostWhite</pre>
</td>
<td align="center" valign="middle" bgcolor="#F8F8FF">
<pre>248,248,255</pre>
</td>
<td align="left" valign="middle">
<pre>Color.Salmon</pre>
</td>
<td align="center" valign="middle" bgcolor="#FA8072">
<pre>250,128,114</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.Gold</pre>
</td>
<td align="center" valign="middle" bgcolor="#FFD700">
<pre>255,215,0</pre>
</td>
<td align="left" valign="middle">
<pre>Color.SandyBrown</pre>
</td>
<td align="center" valign="middle" bgcolor="#F4A460">
<pre>244,164,96</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.Goldenrod</pre>
</td>
<td align="center" valign="middle" bgcolor="#DAA520">
<pre>218,165,32</pre>
</td>
<td align="left" valign="middle">
<pre>Color.SeaGreen</pre>
</td>
<td align="center" valign="middle" bgcolor="#2E8B57">
<pre>46,139,87</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.Gray</pre>
</td>
<td align="center" valign="middle" bgcolor="#808080">
<pre>128,128,128</pre>
</td>
<td align="left" valign="middle">
<pre>Color.Seashell</pre>
</td>
<td align="center" valign="middle" bgcolor="#FFF5EE">
<pre>255,245,238</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.Green</pre>
</td>
<td align="center" valign="middle" bgcolor="#008000">
<pre>0,128,0</pre>
</td>
<td align="left" valign="middle">
<pre>Color.Sienna</pre>
</td>
<td align="center" valign="middle" bgcolor="#A0522D">
<pre>160,82,45</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.GreenYellow</pre>
</td>
<td align="center" valign="middle" bgcolor="#ADFF2F">
<pre>173,255,47</pre>
</td>
<td align="left" valign="middle">
<pre>Color.Silver</pre>
</td>
<td align="center" valign="middle" bgcolor="#C0C0C0">
<pre>192,192,192</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.<a name="H"></a>Honeydew</pre>
</td>
<td align="center" valign="middle" bgcolor="#F0FFF0">
<pre>240,255,240</pre>
</td>
<td align="left" valign="middle">
<pre>Color.SkyBlue</pre>
</td>
<td align="center" valign="middle" bgcolor="#87CEEB">
<pre>135,206,235</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.HotPink</pre>
</td>
<td align="center" valign="middle" bgcolor="#FF69B4">
<pre>255,105,180</pre>
</td>
<td align="left" valign="middle">
<pre>Color.SlateBlue</pre>
</td>
<td align="center" valign="middle" bgcolor="#6A5ACD">
<pre>106,90,205</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.<a name="I"></a>IndianRed</pre>
</td>
<td align="center" valign="middle" bgcolor="#CD5C5C">
<pre>205,92,92</pre>
</td>
<td align="left" valign="middle">
<pre>Color.SlateGray</pre>
</td>
<td align="center" valign="middle" bgcolor="#708090">
<pre>112,128,144</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.Indigo</pre>
</td>
<td align="center" valign="middle" bgcolor="#4B0082">
<pre>75,0,130</pre>
</td>
<td align="left" valign="middle">
<pre>Color.Snow</pre>
</td>
<td align="center" valign="middle" bgcolor="#FFFAFA">
<pre>255,250,250</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.Ivory</pre>
</td>
<td align="center" valign="middle" bgcolor="#FFF0F0">
<pre>255,240,240</pre>
</td>
<td align="left" valign="middle">
<pre>Color.SpringGreen</pre>
</td>
<td align="center" valign="middle" bgcolor="#00FF7F">
<pre>0,255,127</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.<a name="K"></a>Khaki</pre>
</td>
<td align="center" valign="middle" bgcolor="#F0E68C">
<pre>240,230,140</pre>
</td>
<td align="left" valign="middle">
<pre>Color.SteelBlue</pre>
</td>
<td align="center" valign="middle" bgcolor="#4682B4">
<pre>70,130,180</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.Lavender</pre>
</td>
<td align="center" valign="middle" bgcolor="#E6E6FA">
<pre>230,230,250</pre>
</td>
<td align="left" valign="middle">
<pre>Color.<a name="T"></a>Tan</pre>
</td>
<td align="center" valign="middle" bgcolor="#D2B48C">
<pre>210,180,140</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.LavenderBlush</pre>
</td>
<td align="center" valign="middle" bgcolor="#FFF0F5">
<pre>255,240,245</pre>
</td>
<td align="left" valign="middle">
<pre>Color.Teal</pre>
</td>
<td align="center" valign="middle" bgcolor="#008080">
<pre>0,128,128</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.LawnGreen</pre>
</td>
<td align="center" valign="middle" bgcolor="#7CFC00">
<pre>124,252,0</pre>
</td>
<td align="left" valign="middle">
<pre>Color.Thistle</pre>
</td>
<td align="center" valign="middle" bgcolor="#D8BFD8">
<pre>216,191,216</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.LemonChiffon</pre>
</td>
<td align="center" valign="middle" bgcolor="#FFFACD">
<pre>255,250,205</pre>
</td>
<td align="left" valign="middle">
<pre>Color.Tomato</pre>
</td>
<td align="center" valign="middle" bgcolor="#FD6347">
<pre>253,99,71</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.LightBlue</pre>
</td>
<td align="center" valign="middle" bgcolor="#ADD8E6">
<pre>173,216,230</pre>
</td>
<td align="left" valign="middle">
<pre>Color.Turquoise</pre>
</td>
<td align="center" valign="middle" bgcolor="#40E0D0">
<pre>64,224,208</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.LightCoral</pre>
</td>
<td align="center" valign="middle" bgcolor="#F08080">
<pre>240,128,128</pre>
</td>
<td align="left" valign="middle">
<pre>Color.<a name="V"></a>Violet</pre>
</td>
<td align="center" valign="middle" bgcolor="#EE82EE">
<pre>238,130,238</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.LightCyan</pre>
</td>
<td align="center" valign="middle" bgcolor="#E0FFFF">
<pre>224,255,255</pre>
</td>
<td align="left" valign="middle">
<pre>Color.<a name="W"></a>Wheat</pre>
</td>
<td align="center" valign="middle" bgcolor="#F5DEB3">
<pre>245,222,179</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.LightGoldenrodYellow</pre>
</td>
<td align="center" valign="middle" bgcolor="#FAFAD2">
<pre>250,250,210</pre>
</td>
<td align="left" valign="middle">
<pre>Color.White</pre>
</td>
<td align="center" valign="middle" bgcolor="#FFFFFF">
<pre>255,255,255</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.LightGreen</pre>
</td>
<td align="center" valign="middle" bgcolor="#90EE90">
<pre>144,238,144</pre>
</td>
<td align="left" valign="middle">
<pre>Color.WhiteSmoke</pre>
</td>
<td align="center" valign="middle" bgcolor="#F5F5F5">
<pre>245,245,245</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.LightGray</pre>
</td>
<td align="center" valign="middle" bgcolor="#D3D3D3">
<pre>211,211,211</pre>
</td>
<td align="left" valign="middle">
<pre>Color.<a name="Y"></a>Yellow</pre>
</td>
<td align="center" valign="middle" bgcolor="#FFFF00">
<pre>255,255,0</pre>
</td>
</tr>
<tr>
<td align="left" valign="middle">
<pre>Color.LightPink</pre>
</td>
<td align="center" valign="middle" bgcolor="#FFB6C1">
<pre>255,182,193</pre>
</td>
<td align="left" valign="middle">
<pre>Color.YellowGreen</pre>
</td>
<td align="center" valign="middle" bgcolor="#9ACD32">
<pre>154,205,50</pre>
</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>.NET</tag>
      </tags>
  </entry>
  <entry>
    <title>C# 中获取 Graphics 对象的方法</title>
    <url>/posts/2019/5JY0NS.html</url>
    <content><![CDATA[<p>在做自定义控件时或者GDI+的时候经常会遇到获取Graphics实例的问题。一般有
4 种获取方式。</p>
<span id="more"></span>
<h2 id="正文">正文</h2>
<ol type="1">
<li><p>从Paint事件的参数中获取。
窗体和许多控件都有一个Paint事件，有一个PaintEventArgs类型的参数e
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_Paint</span>(<span class="params"><span class="built_in">object</span> sender,System.Windows.Forms.PaintEventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">           <span class="comment">//获取Graphic对象</span></span><br><span class="line">           Graphics g = e.Graphics;</span><br><span class="line">         <span class="comment">//书写绘图代码</span></span><br><span class="line">            g.DrawLine(<span class="keyword">new</span> Point(<span class="number">0</span>,<span class="number">0</span>),<span class="keyword">new</span> Point(<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">            <span class="comment">//释放Graphic对象占用的资源</span></span><br><span class="line">            g.Dispose();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>用CreateGraphics方法创建
如果需要在Paint方法以外绘图，可以通过控件或窗体的CreateGraphics方法来获取Graphics对象
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span>(Graphics g=<span class="keyword">new</span> Control().CreateGraphics())</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>对Image对象调用Graphics.FromImage获取 <figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建Image对象</span></span><br><span class="line">Bitmap image1 = <span class="keyword">new</span> Bitmap(<span class="string">&quot;football.jpg&quot;</span>);</span><br><span class="line"><span class="comment">//窗体的绘图对象</span></span><br><span class="line">Graphics formE = e.Graphics;</span><br></pre></td></tr></table></figure></p></li>
<li><p>通过Graphics的FromHwnd函数 <figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">HandleRef NullHandleRef = <span class="keyword">new</span> HandleRef(<span class="literal">null</span>, IntPtr.Zero);</span><br><span class="line"><span class="keyword">using</span> (Graphics g = Graphics.FromHwnd(NullHandleRef.Handle))</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
</ol>
<h2 id="致谢">致谢</h2>
<p>本文转载于 <a
href="https://www.bbsmax.com/A/Gkz1ony25R/">https://www.bbsmax.com/A/Gkz1ony25R/</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>.NET</tag>
      </tags>
  </entry>
  <entry>
    <title>C# 中获取 Graphics 对象的方法</title>
    <url>/posts/2020/5JY0NS.html</url>
    <content><![CDATA[<p>在做自定义控件时或者GDI+的时候经常会遇到获取Graphics实例的问题。一般有
4 种获取方式。</p>
<span id="more"></span>
<h2 id="正文">正文</h2>
<ol type="1">
<li><p>从Paint事件的参数中获取。
窗体和许多控件都有一个Paint事件，有一个PaintEventArgs类型的参数e
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_Paint</span>(<span class="params"><span class="built_in">object</span> sender,System.Windows.Forms.PaintEventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">           <span class="comment">//获取Graphic对象</span></span><br><span class="line">           Graphics g = e.Graphics;</span><br><span class="line">         <span class="comment">//书写绘图代码</span></span><br><span class="line">            g.DrawLine(<span class="keyword">new</span> Point(<span class="number">0</span>,<span class="number">0</span>),<span class="keyword">new</span> Point(<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">            <span class="comment">//释放Graphic对象占用的资源</span></span><br><span class="line">            g.Dispose();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>用CreateGraphics方法创建
如果需要在Paint方法以外绘图，可以通过控件或窗体的CreateGraphics方法来获取Graphics对象
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span>(Graphics g=<span class="keyword">new</span> Control().CreateGraphics())</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>对Image对象调用Graphics.FromImage获取 <figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建Image对象</span></span><br><span class="line">Bitmap image1 = <span class="keyword">new</span> Bitmap(<span class="string">&quot;football.jpg&quot;</span>);</span><br><span class="line"><span class="comment">//窗体的绘图对象</span></span><br><span class="line">Graphics formE = e.Graphics;</span><br></pre></td></tr></table></figure></p></li>
<li><p>通过Graphics的FromHwnd函数 <figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">HandleRef NullHandleRef = <span class="keyword">new</span> HandleRef(<span class="literal">null</span>, IntPtr.Zero);</span><br><span class="line"><span class="keyword">using</span> (Graphics g = Graphics.FromHwnd(NullHandleRef.Handle))</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
</ol>
<h2 id="致谢">致谢</h2>
<p>本文转载于 <a
href="https://www.bbsmax.com/A/Gkz1ony25R/">https://www.bbsmax.com/A/Gkz1ony25R/</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>.NET</tag>
      </tags>
  </entry>
  <entry>
    <title>在可以调用 OLE 之前，必须将当前线程设置为单线程单元(STA)模式</title>
    <url>/posts/2020/16SCXPH.html</url>
    <content><![CDATA[<p>用 C# 写了一个服务，为了能够方便调试，于是又写了一个 winform
程序。当我在这个程序中打开一个文件对话框时，出现了如下错误。</p>
<figure>
<img data-src="https://img2018.cnblogs.com/i-beta/1857359/201911/1857359-20191106115153805-1080565665.png"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<span id="more"></span>
<h2 id="解决方案">解决方案</h2>
<p>通过寻找相关资料，了解到了STA单元模式和COM对象，总的来说：winform中，很多控件是COM对象，这样的对象只能被sta模式中的线程所调用。</p>
<p>解决办法有两种：</p>
<ul>
<li><p>第一种：在主方法上加上[STAThread]特性标签</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">STAThread</span>]</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">  Application.EnableVisualStyles();</span><br><span class="line">  Application.SetCompatibleTextRenderingDefault(<span class="literal">false</span>);</span><br><span class="line">  Application.Run(<span class="keyword">new</span> LogInForm());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>第二种：将线程的单元状态设置为单线程单元，thread.SetApartmentState(ApartmentState.STA)</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Thread th = <span class="keyword">new</span> Thread(()=&gt; <span class="keyword">new</span> Form1().ShowDialog());</span><br><span class="line">th.SetApartmentState(ApartmentState.STA);</span><br><span class="line">th.Start();</span><br></pre></td></tr></table></figure></li>
</ul>
<p>在代码里面，我的 Main 已经声明了 <code>[STAThread]</code>
特性，但是依然报错，我想，可能是因为是服务的问题。最后采用了第二种方法解决了。</p>
<p>特此记录，以免今后遗忘。</p>
<h2 id="致谢">致谢</h2>
<p>本文摘抄至：<a
href="https://www.cnblogs.com/qwfy-y/archive/2004/01/13/11804599.html">妄揽明月</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>.NET</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Winform、WPF 中使用 Font Awesome</title>
    <url>/posts/2019/1TFVRP.html</url>
    <content><![CDATA[<h2 id="序">序</h2>
<p>今天在 github 上发现了一个可以在 Winform、WPF 中使用 Font Awesome
的项目，本项目不需要自己安装 Font Awesome 字体，用起来很方便。</p>
<span id="more"></span>
<p>项目地址：<a
href="https://github.com/awesome-inc/FontAwesome.Sharp">https://github.com/awesome-inc/FontAwesome.Sharp</a></p>
<h2 id="安装">安装</h2>
<p>在包管理器中添加 nuget 安装包。</p>
<blockquote>
<p>Install-Package FontAwesome.Sharp</p>
</blockquote>
<h2 id="功能">功能</h2>
<p>将 FontAwesome 图标生成图片和 Icon 图标</p>
<h2 id="winform-上使用">Winform 上使用</h2>
<ol type="1">
<li>在 Winform 上可以使用下列类
<ul>
<li>IconButton,</li>
<li>IconToolStripButton,</li>
<li>IconDropDownButton,</li>
<li>IconMenuItem,</li>
<li>IconPictureBox 或者</li>
<li>IconSplitButton</li>
</ul></li>
<li>当然，如果你只想为 icon 生成
bitmap，可以使用<code>ToBitmap()/ToImageSource</code>的扩展。如下：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var bitmap = IconChar.BatteryEmpty.ToBitmap(16, Color.Black); // Windows Forms</span><br><span class="line">var image = IconChar.BatteryEmpty.ToImageSource(Brushes.Black, 16); // WPF</span><br><span class="line"></span><br><span class="line">var customFontBitmap = MyCustomFont.ToBitmap(MyEnum.SomeIcon, 16, Color.Black); // Windows Forms, custom font</span><br><span class="line">var customFontImage = MyCustomFont.ToImageSource(MyEnum.SomeIcon, Brushes.Black, 16); // WPF, custom font</span><br></pre></td></tr></table></figure>
<h2 id="wpf-上使用">WPF 上使用</h2>
<p>此处因为不需要，便暂时未做翻译，请直接参考：<a
href="https://github.com/awesome-inc/FontAwesome.Sharp">https://github.com/awesome-inc/FontAwesome.Sharp</a></p>
<h2 id="致谢">致谢</h2>
<ol type="1">
<li>本文来源于:https://github.com/awesome-inc/FontAwesome.Sharp</li>
<li>图片来源于网络</li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>.NET</tag>
      </tags>
  </entry>
  <entry>
    <title>VS 中 C# 开发语法糖</title>
    <url>/posts/2021/BKEMB5.html</url>
    <content><![CDATA[<p>在进行C#开发的过程中，有一些语法糖，可以提升开发体验和提高代码阅读性，特作此总结。</p>
<span id="more"></span>
<h2 id="弃用-out-值">弃用 out 值</h2>
<p>如果一个方法有多个 out 参数，当在使用时，不需要某些参数时，可以使用
<code>out _</code> 进行占位放弃。示例：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">IsRebar</span>(<span class="params">Element ele,<span class="keyword">out</span> <span class="built_in">string</span> reason,<span class="keyword">out</span> <span class="built_in">double</span> diameter</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...实现代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Element ele;</span><br><span class="line">    <span class="comment">// 第一个 reason 不需要，所以使用 out _ 来占位，表示弃用</span></span><br><span class="line">    If(IsRebar(ele,<span class="keyword">out</span> _,<span class="keyword">out</span> <span class="built_in">double</span> diameter))</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>开发技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>有价值文章汇总</title>
    <url>/posts/2022/1T9FB4F.html</url>
    <content><![CDATA[<p>本文主要收集了 DotNET
相关的一些有价值的网络文章，形成系统的知识网，供查询使用。</p>
<span id="more"></span>
<h2 id="内存">内存</h2>
<ol type="1">
<li><a
href="https://www.cnblogs.com/murongxiaopifu/p/12894385.html">可能会导致.NET内存泄露的8种行为</a></li>
</ol>
<h2 id="效率">效率</h2>
<p>1.<a href="https://developer.aliyun.com/article/622636">C#
快速高效率复制对象的方式</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
      </categories>
      <tags>
        <tag>开发</tag>
        <tag>DotNET</tag>
      </tags>
  </entry>
  <entry>
    <title>.NET Standard 项目单元测试时测试不运行</title>
    <url>/posts/2023/GDQD0X.html</url>
    <content><![CDATA[<p>使用 .NET Standard 2.1
编写了一个类库，运行单元测试后，在测试资源管理器中，所有的单元测试方法都显示未运行。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230312143919494.png"
alt="image-20230312143919494" />
<figcaption aria-hidden="true">image-20230312143919494</figcaption>
</figure>
<span id="more"></span>
<p>在测试函数处点击蓝色感叹号，选择“在测试资源管理器中显示”，左下角会提示:
"找不到所选测试。可能需要生成测试项目才能发现测试。"</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230312144030008.png"
alt="image-20230312144030008" />
<figcaption aria-hidden="true">image-20230312144030008</figcaption>
</figure>
<p>被这个问题困扰很久，google
了很久，大家都提到，可能是程序无法正常运行导致的。当我准备重装
<code>MSTest.TestFramework</code> 时，终于发现了问题所在。</p>
<blockquote>
<p>原来，是因为<strong>框架不支持</strong>导致的</p>
</blockquote>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230312144608350.png"
alt="image-20230312144608350" />
<figcaption aria-hidden="true">image-20230312144608350</figcaption>
</figure>
<p>从描述中，可以看到，它不支持 <code>.net standard 2.1</code>，由于通过
VS
自动创建的单元测试项目框架与目标库框架一致，因此导致测试项目的框架也为
<code>.net standard 2.1</code>了。</p>
<p>因此，只需要将框架改成 <code>.NET Core</code> 就可以了。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230312144924927.png" alt="image-20230312144924927" style="max-width:min(100%,300px)" /></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
      </categories>
      <tags>
        <tag>.NET</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>PropertyGrid 中实现动态的下拉选项</title>
    <url>/posts/2020/3GJFFVV.html</url>
    <content><![CDATA[<p>在使用 PropertyGrid 控件中，有时候我们在属性的上面添加类型转换特性
(TypeConverterAttribute) 来自定义下拉选项。</p>
<p>这个时候，我们可能会有这样的要求，一个属性的改变会导致另一个属性的候选项发生改变，也就是说，我们需要为特定属性设置动态的下拉选项。</p>
<span id="more"></span>
<p>此处以 StringConverter 为例。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RebarDiameterConverter</span>:<span class="title">StringConverter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;<span class="built_in">string</span>&gt; _diameters = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;() &#123; <span class="string">&quot;φ8&quot;</span>,<span class="string">&quot;φ10&quot;</span>,<span class="string">&quot;φ12&quot;</span>, <span class="string">&quot;φ14&quot;</span>, <span class="string">&quot;φ16&quot;</span>, <span class="string">&quot;φ18&quot;</span>, &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//true enable,false disable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">GetStandardValuesSupported</span>(<span class="params">ITypeDescriptorContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> StandardValuesCollection <span class="title">GetStandardValues</span>(<span class="params">ITypeDescriptorContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(context!=<span class="literal">null</span> &amp;&amp; context.Instance <span class="keyword">is</span> ISwRebarProperty rebar)</span><br><span class="line">        &#123;</span><br><span class="line">            _diameters = swOpenRoadsSDK.ParseSpecificationXml.Instance.GetSpecifications(rebar.FeatureName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StandardValuesCollection(_diameters.ToArray()); <span class="comment">//编辑下拉框中的items</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//true: disable text editting.    false: enable text editting;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">GetStandardValuesExclusive</span>(<span class="params">ITypeDescriptorContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 GetStandardValues 方法中，会传递下来一个 context, 而
context.Instance
就是调用该转换器的实例，所以，将它转换成相应的对象，然后利用对象里面的值来动态生成下拉选项。</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>.NET</tag>
      </tags>
  </entry>
  <entry>
    <title>C#编写控制台程序最佳实践</title>
    <url>/posts/2023/2RY2W0D.html</url>
    <content><![CDATA[<p>本文以自己的经验总结了在 C# 中编写控制台程序的最佳实践方法。</p>
<span id="more"></span>
<p>在这之前，作者曾经使用过 <a
href="https://github.com/commandlineparser/commandline">CommandLineParser</a>，最终选择了以下方案。</p>
<h2 id="程序集">程序集</h2>
<ul>
<li><p>命令行解析</p>
<p><a
href="https://github.com/dotnet/command-line-api">dotnet/command-line-api:
Command line parsing, invocation, and rendering of terminal output.
(github.com)</a></p></li>
<li><p>进度条</p>
<p><a
href="https://github.com/spectreconsole/spectre.console">spectreconsole/spectre.console:
A .NET library that makes it easier to create beautiful console
applications. (github.com)</a></p></li>
</ul>
<h2 id="实例">实例</h2>
<p>通过上述技术，作者实现了一个具有插件功能的控制台工具，请跳转到查看效果。</p>
<p><a href="https://github.com/GalensGan/OneDo">GalensGan/OneDo
(github.com)</a></p>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<p><a
href="https://learn.microsoft.com/zh-cn/dotnet/standard/commandline/">System.CommandLine
概述 | Microsoft Learn</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
      </categories>
      <tags>
        <tag>DotNET</tag>
        <tag>Console</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>Js 开发常用 npm 包合集</title>
    <url>/posts/2023/1KT0Y3S.html</url>
    <content><![CDATA[<p>本文根据日常开发需求，通过对比现有各个包，总结出在个人认知范围内认为最为合适的
npm 包。方便在后续项目中应用。</p>
<span id="more"></span>
<h2 id="excel">Excel</h2>
<p><a
href="https://github.com/exceljs/exceljs/blob/master/README_zh.md">exceljs</a></p>
<p><strong>参考：</strong></p>
<ol type="1">
<li><a
href="https://jstool.gitlab.io/zh-cn/demo/exceljs-vs-sheetjs-vs-xlsx-populate/">Exceljs
与 Sheetjs(xlsx.js)、 xlsx-populate.js
解析xlsx表格的性能对比、耗时对比</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javasript</tag>
      </tags>
  </entry>
  <entry>
    <title>UzonMail(宇正群邮) 使用说明</title>
    <url>/posts/2020/2QMK677.html</url>
    <content><![CDATA[<h2 id="简介">🥝简介</h2>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/uzon-mail-login-2.png"
alt="uzon-mail-login-2" />
<figcaption aria-hidden="true">uzon-mail-login-2</figcaption>
</figure>
<p>本软件名为 “宇正群邮
(UZonMail)"，是一款开源免费的邮件群发软件。它具有非常强大的邮件正文定制能力，可快速实现
"千人千面" 式地批量群发，使每一封邮件都让人觉得很温暖。</p>
<p>原生多线程处理能力，极尽压榨每一核 CPU
性能，让发件体验纵享丝滑，盏茶间，群发任务灰飞烟灭，独怅惘，无件可发何时休。</p>
<p>常见的应用场景有：</p>
<ol type="1">
<li>财务批量向员工发送每个人对应的工资条</li>
<li>外贸批量群发营销邮件</li>
</ol>
<blockquote>
<p>开源地址：<a
href="https://github.com/GalensGan/SendMultipleEmails">UZonMail</a></p>
</blockquote>
<span id="more"></span>
<h2 id="特点">🍎特点</h2>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240614121857800.png"
alt="image-20240614121857800" />
<figcaption aria-hidden="true">image-20240614121857800</figcaption>
</figure>
<ol type="1">
<li><p>支持多个发件人同时发件</p>
<p>可以添加多个<strong>不同的</strong>发件人，同时发件，提高发件效率。</p></li>
<li><p>支持多个收件人批量收件</p>
<p>可以添加多个收件人，实现批量发送</p></li>
<li><p>支持邮件内容模板自定义</p>
<p>模板完全可自定义，可根据需要定义自己所需的模板，并保存到模板库，实现模板的复用。</p>
<p>模板板采用 html
格式定义，程序也提供可视化界面进行编辑，对于新手和大神都很友好。</p></li>
<li><p>支持无限变量，邮件封封不同</p>
<p>可以在模板中引入变量，在发送的过程中，会自动将变量值替换成其真实的值进行发送，可以实现同一套模板，不同的收件人，接收的具体内容不同。</p></li>
<li><p>多线程并发发送，日发可达 10 万+</p>
<p>每个发件人采用单独的线程进行发送，当一个发件箱出问题之后并不会使发件停止，会由其它发件的所在线程继续发件。</p>
<p>若有足够多的发件箱，日发 10 万不是问题。</p></li>
<li><p>失败自动重发</p>
<p>当有多个发件箱时，若 A 发件箱发件失败后，会转由 B
发件箱继续进行发送。</p>
<p>如果仅有一个发件箱，当发件失败后，会在其它邮件发送完成后，再次发送，可重发次数最大为5次。</p></li>
<li><p>支持失败手动重发</p>
<p>所有的发送过程都有记录，对于未发送成功的邮件，可以在发送任务完成后，手动进行重发。</p></li>
<li><p>支持发件箱每日发件总量限制</p></li>
<li><p>支持抄送、密送</p>
<p>支持多封邮件抄送到特定邮箱或者不同邮件抄送到不同的邮箱。</p></li>
</ol>
<h2 id="环境要求">🍇环境要求</h2>
<ol type="1">
<li>Windows 7 及以上</li>
<li>.NET Framework 4.6.2 及以上，下载地址：<a
href="https://dotnet.microsoft.com/download/dotnet-framework">dotnet-framework</a></li>
<li>Webview2 环境，下载地址：<a
href="https://developer.microsoft.com/zh-cn/microsoft-edge/webview2/">microsoft-edge/webview2/</a></li>
<li>ASP.NET Core 环境，下载地址：<a
href="https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/runtime-aspnetcore-8.0.6-windows-hosting-bundle-installer">runtime-aspnetcore-8.0.6-windows-hosting-bundle-installer</a></li>
</ol>
<h2 id="windows-安装使用">🌱Windows 安装使用</h2>
<h3 id="环境安装">环境安装</h3>
<p><strong>Win7</strong>:</p>
<ol type="1">
<li>.NET Framework 4.6.2
及以上（这个一般都有，可以不用安装），下载地址：<a
href="https://dotnet.microsoft.com/download/dotnet-framework">dotnet-framework</a></li>
<li>Webview2 环境，下载地址：<a
href="https://share.weiyun.com/RAh0rLTA">microsoft-edge/webview2/-腾讯微云</a></li>
<li>ASP.NET Core 环境，下载地址：<a
href="https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/runtime-aspnetcore-8.0.6-windows-hosting-bundle-installer">runtime-aspnetcore-8.0.6-windows-hosting-bundle-installer</a></li>
</ol>
<blockquote>
<p>温馨提示：</p>
<p>win7 与 win10 使用的 webview2 版本不一致</p>
</blockquote>
<p><strong>Win10 及以上</strong>：</p>
<ol type="1">
<li>.NET Framework 4.6.2 及以上，下载地址：<a
href="https://dotnet.microsoft.com/download/dotnet-framework">dotnet-framework</a></li>
<li>Webview2 环境，下载地址：<a
href="https://developer.microsoft.com/zh-cn/microsoft-edge/webview2/">microsoft-edge/webview2/</a></li>
<li>ASP.NET Core 环境，下载地址：<a
href="https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/runtime-aspnetcore-8.0.6-windows-hosting-bundle-installer">runtime-aspnetcore-8.0.6-windows-hosting-bundle-installer</a></li>
</ol>
<p><strong>网页版</strong>：</p>
<ol type="1">
<li>ASP.NET Core 环境，下载地址：<a
href="https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/runtime-aspnetcore-8.0.6-windows-hosting-bundle-installer">runtime-aspnetcore-8.0.6-windows-hosting-bundle-installer</a></li>
</ol>
<h3 id="直接下载安装包">直接下载安装包</h3>
<p><a
href="https://gitee.com/galensgan/UZonMail/releases/latest">UZonMail-gitee</a></p>
<p>或者加 QQ 群 877458612 在群文件下载 (更新速度更快)</p>
<h3 id="自己手动编译">自己手动编译</h3>
<ol type="1">
<li><p>克隆仓库，切换到 <code>master</code> 分支；</p></li>
<li><p>使用命令行进入到项目根目录，执行 <code>./build.ps1</code>
开始编译，编译结果在 <code>build</code> 目录中。</p>
<p>编译成功截图：</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240616124656131.png"
alt="image-20240616124656131" />
<figcaption aria-hidden="true">image-20240616124656131</figcaption>
</figure></li>
</ol>
<blockquote>
<p>手动编译时，会自动检测环境，若没有相关环境，请根据提示进行安装。</p>
</blockquote>
<h3 id="使用">使用</h3>
<p>本节只讲述通过安装包的使用方式。</p>
<ol type="1">
<li>下载安装包</li>
<li>安装对应方式所需要的环境</li>
</ol>
<p>直接使用：</p>
<p>解压后，直接打开文件 <code>UzonMailDesktop.exe</code>
即可开始使用</p>
<p>网页端使用：</p>
<ol type="1">
<li>首先启动服务：打开 <code>UzonMailDesktop.exe</code> 或
<code>service/UZonMailService.exe</code> 文件</li>
<li>在浏览器中输入地址：<code>http://localhost:22345</code>
打开网页</li>
</ol>
<h2 id="发件步骤">🍒发件步骤</h2>
<ol type="1">
<li>添加发件箱（已添加请忽略）</li>
<li>添加收件箱（已添加请忽略）</li>
<li>导入所需模板（已添加请忽略）</li>
<li>打开【新建发件】，输入主题 --&gt; 选择收件人 --&gt; 选择模板 --&gt;
选择数据 --&gt;预览确认发件数量和模板正确性 --&gt; 退出预览
--&gt;点击【发送】</li>
<li>如果提示发送失败，转到【发件历史】，进行重发</li>
</ol>
<h3 id="邮件经常进发件箱怎么办">邮件经常进发件箱怎么办</h3>
<p>可以使用 <a href="https://www.mail-tester.com/">Newsletters spam test
by mail-tester.com</a> 检查待发邮件的内容。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220428140629151.png"
alt="image-20220428140629151" />
<figcaption aria-hidden="true">image-20220428140629151</figcaption>
</figure>
<h2 id="功能介绍">🥑功能介绍</h2>
<h3 id="功能概览">功能概览</h3>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240614121857800.png"
alt="image-20240614121857800" />
<figcaption aria-hidden="true">image-20240614121857800</figcaption>
</figure>
<p>软件主要由以下功能模块组成：</p>
<ul>
<li><p>首页</p>
<p>数据统计展示</p></li>
<li><p>邮箱管理</p>
<p>管理发件箱、收件箱</p></li>
<li><p>模板管理</p>
<p>管理正文模板</p></li>
<li><p>发件管理</p>
<p>新建发件和历史发件查询</p></li>
<li><p>系统设置</p>
<ul>
<li><p>用户管理</p>
<p>增加其它使用用户</p></li>
<li><p>基础设置</p>
<p>发件相关的全局设置</p></li>
<li><p>代理管理</p>
<p>配置发件代理</p></li>
</ul></li>
<li><p>支持作者</p>
<p>赞助页面</p></li>
<li><p>使用说明</p>
<p>帮助页</p></li>
</ul>
<p>下面开始按模块进行详细介绍。</p>
<h3 id="登陆界面">登陆界面</h3>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/uzon-mail-login-2.png"
alt="uzon-mail-login-2" />
<figcaption aria-hidden="true">uzon-mail-login-2</figcaption>
</figure>
<p>默认用户名和密码为：admin/admin1234</p>
<h3 id="首页">首页</h3>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240614231957130.png"
alt="image-20240614231957130" />
<figcaption aria-hidden="true">image-20240614231957130</figcaption>
</figure>
<p>首页主要展示的内容有：</p>
<ul>
<li>发件箱数量直方图</li>
<li>收件箱数量直方图</li>
<li>每月发件量折线图</li>
</ul>
<h3 id="系统设置">系统设置</h3>
<h4 id="用户管理">用户管理</h4>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240612122713293.png"
alt="image-20240612122713293" />
<figcaption aria-hidden="true">image-20240612122713293</figcaption>
</figure>
<p>系统默认的用户名为 admin，默认密码为
admin1234，这是一个管理员账号，该账号具有【管理用户】的权限。</p>
<p>【用户管理】模块用于增加不同的用户。桌面版本的多用户功能仅限本机使用，若要多人同时使用，则需要使用服务器版本。</p>
<p>服务器版本可联系作者获取。</p>
<p><strong>新增用户：</strong></p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240612123329057.png"
alt="image-20240612123329057" />
<figcaption aria-hidden="true">image-20240612123329057</figcaption>
</figure>
<p>单击左上角的新增，即可新增用户。</p>
<p>用户新增完成后，可对用户进行操作，比如重置密码，删除等</p>
<p>重置后的密码为：<code>uzonmail123</code>，在重置时会有提示。</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240612123429178.png"
alt="image-20240612123429178" />
<figcaption aria-hidden="true">image-20240612123429178</figcaption>
</figure>
<p><strong>修改密码和头像：</strong></p>
<p>可以通过右上角的个人信息界面对头像和密码进行修改。</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240612125131168.png"
alt="image-20240612125131168" />
<figcaption aria-hidden="true">image-20240612125131168</figcaption>
</figure>
<h4 id="基础设置">基础设置</h4>
<p>基础设置中，主要设置全局的发件间隔，最大发件量等。</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240612125859579.png"
alt="image-20240612125859579" />
<figcaption aria-hidden="true">image-20240612125859579</figcaption>
</figure>
<ul>
<li><p>单个邮箱每日最大发件量</p>
<p>控制单个邮箱每日发件的总数，避免因发件数量超过每个邮件服务提供商规定的每日发件量，从而导致发件失败。</p>
<p>为 0 时表示不限制</p></li>
<li><p>单个发件箱最小(最大)发件间隔</p>
<p>单位：秒</p>
<p>为了避免因频繁发送邮件而导致被服务器认为是垃圾邮箱，所以，发送两封邮件之间需要有一定的时间间隔，为了使得发送时间间隔具有不规律性，用间隔范围来进行控制：</p>
<p>实际发件间隔值 = 最小值 + （0，1）之间的随机数*（最大值-最小值）</p>
<p>最大值小于等于最小值时，表示不限制</p></li>
<li><p>合并发件最大数量</p>
<p>当同时向多个收件箱发送相同内容时，可以将收件箱合并成一封邮件发送，这个参数即控制合并的最大数量。</p>
<p>每个邮件服务商允许的最大数量不一样，最大数包含抄送和密送的数量</p>
<p>为 0 时，表示不合并</p></li>
</ul>
<h4 id="代理管理">代理管理</h4>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240612131312091.png"
alt="image-20240612131312091" />
<figcaption aria-hidden="true">image-20240612131312091</figcaption>
</figure>
<p>代理管理模块主要针对使用国外邮箱的情况，允许针对某一类或者某个发件箱指定代理。</p>
<p>该功能一般用于服务器部署的情况，本机使用时，可以打开全局代理。</p>
<p><strong>新增代理</strong>：</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240612130111084.png"
alt="image-20240612130111084" />
<figcaption aria-hidden="true">image-20240612130111084</figcaption>
</figure>
<p>新增代理参数说明：</p>
<ul>
<li><p>名称</p>
<p>必填项。在发件箱界面，可通过名称选择指定代理</p></li>
<li><p>代理地址</p>
<p>代理的地址、用户名和密码。格式为：<code>协议:\\username:password@host</code>，示例：</p>
<ol type="1">
<li>完整格式：<code>http:\\admin:admin1234@127.0.0.1:7890</code></li>
<li>无密码格式: <code>http:\\127.0.0.1:7890</code></li>
<li>其它协议：<code>socket5:\\127.0.0.1:7890</code></li>
</ol>
<p>目前支持的协议有：<code>http、https、socks4、socks4a、socket5</code></p></li>
<li><p>匹配规则</p>
<p>若发件箱没有指定代理，则会从代理管理的列表中根据规则自动匹配，若匹配到，则使用。</p>
<p>该规则的语法为正则表达式</p>
<p><code>.*</code> 表示所有的邮件都匹配</p></li>
<li><p>优先级</p>
<p>规则匹配的优先级</p></li>
<li><p>是否共享</p>
<p>共享后，系统内所有人都可使用这个代理</p></li>
</ul>
<blockquote>
<p>代理安全提示</p>
<p>代理是明文存储在服务器中的，因此管理员可以查看代理的信息，可能会造成代理泄露风险，请谨慎添加个人代理</p>
</blockquote>
<h3 id="邮箱管理">邮箱管理</h3>
<h4 id="发件箱">发件箱</h4>
<p>【发件箱】模块用于管理发件人信息。下面列出在使用中需要注意的功能进行说明：</p>
<p><strong>组管理：</strong></p>
<p>增加发件箱时，必须先建立发件组。</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240612131552355.png"
alt="image-20240612131552355" />
<figcaption aria-hidden="true">image-20240612131552355</figcaption>
</figure>
<p>在 "发件箱" 上右键，可新增发件组。</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240612131711338.png"
alt="image-20240612131711338" />
<figcaption aria-hidden="true">image-20240612131711338</figcaption>
</figure>
<p>新增时，"序号" 表示发件组的排序号，仅用于排序。</p>
<p>当新建组完成后，可以在组名上右键，对组进行管理</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240612131916319.png"
alt="image-20240612131916319" />
<figcaption aria-hidden="true">image-20240612131916319</figcaption>
</figure>
<p><strong>新增发件箱</strong>：</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240612132056895.png"
alt="image-20240612132056895" />
<figcaption aria-hidden="true">image-20240612132056895</figcaption>
</figure>
<p>本软件采用的是 SMTP 协议发件，因此发件时，需要将自己的邮箱开通 SMTP
服务，可自行查阅资料。以下对一些重要参数说明：</p>
<ul>
<li><p>发件人名称</p>
<p>若有，当发给对方后，不显示邮箱，而是显示名称</p></li>
<li><p>smtp 密码</p>
<p>发件采用的 SMTP
服务器，所以，它的密码并不是邮箱的密码，而是登陆邮箱后，自己申请的 SMTP
密码。</p>
<p>比如，163邮箱 SMTP
密码获取方式如下：https://www.yisu.com/zixun/97973.html</p></li>
<li><p>smtp 地址</p>
<p>smtp 的地址，每种类型的地址不一样，可百度查找</p></li>
<li><p>smtp 端口</p>
<p>该端口与是否【启用 SSL】有关，默认为 25，若启动 SSL，一般为
465，需要自动查找确认。</p></li>
<li><p>启用 SSL</p>
<p>是在发件时，采用 SSL 加密，打开这个可以提升发件的安全性。</p></li>
<li><p>代理</p>
<p>若有需要，可以为其指定代理，可用代理候选项在【代理管理】中定义。</p></li>
</ul>
<blockquote>
<p>密码安全提示</p>
<p>服务器没有直接存储 smtp
密码，而是存储了通过密钥加密后的密文，密钥由前端生成，当有需要时，由前端传递给后端解密。</p>
<p>因此，即使数据库泄露了，也不会造成 smtp 的密码被盗的问题</p>
</blockquote>
<p><strong>从EXCEL导入：</strong></p>
<p>通过【导入】功能可批量从 Excel 中导入发件箱。</p>
<p>可以通过【模板】按钮下载导入模板。</p>
<p>在使用批量添加发件人功能时，Excel 表中第一行为表头，必须包含
<code>smtp邮箱</code>、<code>smtp密码</code>、<code>smtp地址</code>、<code>smtp端口</code>
列。</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240614123302248.png"
alt="image-20240614123302248" />
<figcaption aria-hidden="true">image-20240614123302248</figcaption>
</figure>
<h4 id="收件箱">收件箱</h4>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240614124814856.png"
alt="image-20240614124814856" />
<figcaption aria-hidden="true">image-20240614124814856</figcaption>
</figure>
<p>该模块主要用于对收件箱的分组和管理，使用方式、注意要点与发件人一致。</p>
<p>收件箱只需要姓名和邮箱即可，姓名是可选的。</p>
<h3 id="模板管理">模板管理</h3>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240614125056768.png"
alt="image-20240614125056768" />
<figcaption aria-hidden="true">image-20240614125056768</figcaption>
</figure>
<p>在【正文模板】用于管理用户下的所有模板，它是 html 格式。</p>
<h4 id="新增模板">新增模板</h4>
<p>使用两种方式进行添加：</p>
<ul>
<li><p>导入 HTML</p>
<p>先在外面用 html
定义好模板，然后通过上述中的【导入模板】功能将定义的模板导入到系统。对于自定义的
html 模板，要求其中的 css 必须为行内 css。可以通过
http://automattic.github.io/juice/ 自动将 html 文件中 css 转换成行内的
css。</p></li>
<li><p>直接编辑</p>
<p>通过单击【新增】按钮新增模板。</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240614125417120.png"
alt="image-20240614125417120" />
<figcaption aria-hidden="true">image-20240614125417120</figcaption>
</figure></li>
</ul>
<h4 id="模板编辑">模板编辑</h4>
<p>通过单击模板名称或者在模板上右键，然后选择【编译】跳转到模板修改界面。</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240614125609679.png"
alt="image-20240614125609679" />
<figcaption aria-hidden="true">image-20240614125609679</figcaption>
</figure>
<h4 id="模板变量">模板变量</h4>
<p>在模板的编写过程中，可以使用双花括号（<code>&#123;&#123;变量名&#125;&#125;</code>）来标记为变量，在发件的过程中，程序会在数据中查找该变量，如果查找到，就会使用实际的数据将变量替换掉。</p>
<p>变量定义的格式是为：。</p>
<blockquote>
<p>在发件中，模板也可以因发件人而异，需要在数据中增加 templateId
列来覆盖通用的模板。具体参考发件篇。</p>
</blockquote>
<h3 id="发件管理">发件管理</h3>
<h4 id="新建发件">新建发件</h4>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240614125845479.png"
alt="image-20240614125845479" />
<figcaption aria-hidden="true">image-20240614125845479</figcaption>
</figure>
<p>新建发件用于添加发件任务，通过不同的参数组合，它可以实现以下功能：</p>
<ol type="1">
<li><p>一对一发件</p>
<p>一个发件箱，一个收件箱</p></li>
<li><p>一对多发件</p>
<p>一个发件箱，多个收件箱</p></li>
<li><p>多对多发件</p>
<p>多个发件箱，多个收件箱</p></li>
<li><p>主题变化、正文变化发件</p>
<p>同时支持主题和正文根据收件人不同而变化</p></li>
</ol>
<h5 id="主题">主题</h5>
<p>发件的主题是必须的，主有两个作用：一是为邮件的主题，二是同一次发件将会归到一个发件历史记录中，该主题为历史记录组的名称。</p>
<p>多个主题使用英文分号（<code>;</code>）或者换行进行分隔。</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240614130827129.png"
alt="image-20240614130827129" />
<figcaption aria-hidden="true">image-20240614130827129</figcaption>
</figure>
<p>若有多个主题，系统在发件时，会随机使用一个主题（若在数据中指定了主题，则会固定使用数据的主题）。</p>
<p>主题也支持变量声明，比如：-工资明细，<code>日期</code>
即为定义的变量，在发送邮件时，它将被替换成 Excel 表中的实际数据。</p>
<h5 id="模板">模板</h5>
<p>模板相当于是正文的一个草稿，它可以让你快速发送正文，而不需要每次都在正文处输入。</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240614131034812.png"
alt="image-20240614131034812" />
<figcaption aria-hidden="true">image-20240614131034812</figcaption>
</figure>
<p>可以选择多个模板。若有多个模板时，系统将随机选择一个模板来发件（若在数据中指定了模板，则会固定使用数据中的模板）</p>
<h5 id="正文">正文</h5>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240614131326894.png"
alt="image-20240614131326894" />
<figcaption aria-hidden="true">image-20240614131326894</figcaption>
</figure>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240614225842011.png"
alt="image-20240614225842011" />
<figcaption aria-hidden="true">image-20240614225842011</figcaption>
</figure>
<p>软件支持用户手动输入正文。</p>
<p>若用户指定了正文，则不会使用模板作为邮件正文。</p>
<p>正文的格式与模板一样，同样支持变量。</p>
<h5 id="发件人">发件人</h5>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240614131606189.png"
alt="image-20240614131606189" />
<figcaption aria-hidden="true">image-20240614131606189</figcaption>
</figure>
<p>单击发件人右侧的 + 号，选择发件人。</p>
<p>发件人允许有多个，若有多个发件人，发件时，将会把邮件随机给其中一个发件人发件。</p>
<p>在一次任务中，一封邮件只会被其中一个发件箱成功发送，不会多次发送。</p>
<h5 id="收件人">收件人</h5>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240614131851665.png"
alt="image-20240614131851665" />
<figcaption aria-hidden="true">image-20240614131851665</figcaption>
</figure>
<p>单击收件人右侧的 + 号，选择收件人。</p>
<p>单次发件任务中，允许添加多个收件人，每个收件都会收到一款邮件。</p>
<h5 id="抄送人">抄送人</h5>
<p>若选择抄送人，每一封邮件都会抄送到每一个抄送人处。</p>
<h5 id="附件">附件</h5>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240614214517919.png"
alt="image-20240614214517919" />
<figcaption aria-hidden="true">image-20240614214517919</figcaption>
</figure>
<p>若邮件中需要添加附件，可以在此添加附件。</p>
<p>允许添加多个附件，但是请注意，每封邮件都会携带相同的附件。</p>
<h5 id="数据">数据</h5>
<p>支持数据发件功能是该软件的灵魂。通过导入数据，可以实现一次发件中，为不同的收件箱发送不同的内容。</p>
<p>当将鼠标聚焦在数据栏，右侧会出现下载模板的图标，单击该图标即可下载模板。</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240614215520531.png"
alt="image-20240614215520531" />
<figcaption aria-hidden="true">image-20240614215520531</figcaption>
</figure>
<p>数据格式大致如下：</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240614220243117.png"
alt="image-20240614220243117" />
<figcaption aria-hidden="true">image-20240614220243117</figcaption>
</figure>
<p><strong>数据的效果</strong>：</p>
<p>模板内容:</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240614222544153.png"
alt="image-20240614222544153" />
<figcaption aria-hidden="true">image-20240614222544153</figcaption>
</figure>
<p>模板赋予数据后的正文预览：</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240614222617857.png"
alt="image-20240614222617857" />
<figcaption aria-hidden="true">image-20240614222617857</figcaption>
</figure>
<p><strong>数据的作用</strong>：</p>
<ol type="1">
<li>为模板提供变量</li>
<li>快速实现精准的批量发送</li>
</ol>
<p><strong>数据中系统保留变量</strong>：</p>
<table>
<colgroup>
<col style="width: 15%" />
<col style="width: 5%" />
<col style="width: 78%" />
</colgroup>
<thead>
<tr class="header">
<th>变量名</th>
<th>必须</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>inbox</td>
<td>是</td>
<td>指定收件邮箱。该字段必须存在，程序依靠该变量进行发件匹配。若为空，则该行数据无效。</td>
</tr>
<tr class="even">
<td>inboxName</td>
<td>否</td>
<td>设置收件人名称。</td>
</tr>
<tr class="odd">
<td>subject</td>
<td>否</td>
<td>指定主题。若指定，则会忽略界面中输入的主题。</td>
</tr>
<tr class="even">
<td>outbox</td>
<td>否</td>
<td>指定发件箱。若不指定，则使用用户在界面中选择的发件箱。<br />该发件箱必须是在【邮箱管理/发件箱】中添加的邮箱地址。其它邮箱则视为无效。</td>
</tr>
<tr class="odd">
<td>outboxName</td>
<td>否</td>
<td>设置发件箱名称。若不指定，则使用发件箱管理中的名称。</td>
</tr>
<tr class="even">
<td>cc</td>
<td>否</td>
<td>指定抄送人。多个抄送人使用逗号分隔。</td>
</tr>
<tr class="odd">
<td>templateId</td>
<td>否</td>
<td>指定邮件的模板 Id。该模板 Id
可在模板管理中查看，是一个数字。<br />若不指定，则从用户选择的模板中随机取一个使用。</td>
</tr>
<tr class="even">
<td>templateName</td>
<td>否</td>
<td>指定邮件的模板名称。该名称可在模板管理中查看。templateName
的优先级低于 templateId。当两者同时指定时，以 templateId
为主。<br />若不指定，则从用户选择的模板中随机取一个使用。</td>
</tr>
<tr class="odd">
<td>body</td>
<td>否</td>
<td>指定邮件的正文内容。该优先级大于 templateId 和 templateName。</td>
</tr>
</tbody>
</table>
<p><strong>数据的优先级</strong>：</p>
<ul>
<li><p>主题</p>
<p>【Excel数据/subject】 &gt; 【界面/主题】</p></li>
<li><p>正文</p>
<p>【Excel数据/body】 &gt; 【Excel数据/templateId】 &gt;
【Excel数据/templateName】 &gt; 【界面/正文】 &gt;【 界面/模板
】</p></li>
<li><p>发件人</p>
<p>【Excel数据/outbox 】&gt;【 界面/发件人】</p></li>
<li><p>收件人</p>
<p>【Excel数据/inbox 】&gt; 【界面/收件人】</p></li>
<li><p>抄送人</p>
<p>【Excel数据/cc】 &gt; 【界面/抄送人】</p></li>
<li><p>附件</p>
<p>附件目前无法通过数据指定</p></li>
</ul>
<h4 id="发件历史">发件历史</h4>
<p>发件历史显示历次所发的所有邮件记录，一次发送任务为一条历史。</p>
<p>单击 ID 或者右键【详细】可查看具体发件项。</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240614225346191.png"
alt="image-20240614225346191" />
<figcaption aria-hidden="true">image-20240614225346191</figcaption>
</figure>
<p>发件明细：</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240614231145776.png"
alt="image-20240614231145776" />
<figcaption aria-hidden="true">image-20240614231145776</figcaption>
</figure>
<h2 id="技术栈">🪺技术栈</h2>
<p>本系统采用前后端分离的模式进行开发。</p>
<p><strong>前端：</strong></p>
<p>typescript+vue3+quasar</p>
<p><strong>后端：</strong></p>
<p>C# + WPF +ASP.NET Core+webview2</p>
<p>使用 ASP.NET Core 实现服务端，桌面端使用 WPF 开发</p>
<h2 id="服务器部署">🍄服务器部署</h2>
<h3 id="简易版">简易版</h3>
<ol type="1">
<li>安装 ASP.NET Core 环境，下载地址：<a
href="https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/runtime-aspnetcore-8.0.6-windows-hosting-bundle-installer">runtime-aspnetcore-8.0.6-windows-hosting-bundle-installer</a></li>
<li>启动 <code>service/UZonMailService.exe</code></li>
</ol>
<p>至此，即可通过 <code>http://you-ip:22345</code> 进行访问了</p>
<h3 id="前后端分离部署">前后端分离部署</h3>
<p>到这一步，我相信您已经具备专业的知识，可以自己处理安装，此处只简述下前后端各部分内容：</p>
<ol type="1">
<li>后端位于 <code>service</code> 目录</li>
<li>前端位于 <code>service/wwwroot</code> 目录</li>
</ol>
<p>您可以配置 nginx 进行反向代理，配置负载均衡</p>
<h3 id="前后端配置说明">前后端配置说明</h3>
<p>前端的配置位于 <code>service/wwwroot/app.config.ts</code>
文件中，若是对外提供服务，则需要修改后端接口地址，即
<code>baseUrl</code>：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 默认配置</span></span><br><span class="line">  <span class="attr">default</span>: &#123;</span><br><span class="line">    <span class="attr">baseUrl</span>: <span class="string">&#x27;http://localhost:22345&#x27;</span>,</span><br><span class="line">    <span class="attr">api</span>: <span class="string">&#x27;/api/v1&#x27;</span>,</span><br><span class="line">    <span class="attr">signalRHub</span>: <span class="string">&#x27;/hubs/uzonMailHub&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生产配置</span></span><br><span class="line">  <span class="attr">prod</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开发配置</span></span><br><span class="line">  <span class="attr">dev</span>: &#123;&#125;</span><br><span class="line">&#125; <span class="keyword">as</span> <span class="title class_">Record</span>&lt;<span class="string">&#x27;default&#x27;</span> | <span class="string">&#x27;prod&#x27;</span> | <span class="string">&#x27;dev&#x27;</span>, <span class="built_in">any</span>&gt;</span><br></pre></td></tr></table></figure>
<p>后端的配置位于
<code>service/wwwroot/appsettings.json</code>，可以在这里配置：</p>
<ul>
<li>日志</li>
<li>授权密钥</li>
<li>系统参数</li>
<li>接口 Http 参数</li>
<li>Websocket 参数</li>
<li>数据库参数</li>
<li>初始用户参数</li>
<li>跨域</li>
<li>文件存储</li>
<li>定时任务</li>
</ul>
<p>请查看配置文件进行理解。</p>
<h2 id="反馈与建议">🌵反馈与建议</h2>
<p>如果你在使用中发现了 bug,
或者对该软件有任何建议，都欢迎联系我，让我们将这款软件一起变得更优秀吧！</p>
<p>bug 反馈优先选择<a
href="https://github.com/GalensGan/SendMultipleEmails/issues">Github
Issues</a>，这样我能第一时间知道。</p>
<p>如果有紧急问题，请通过邮件联系。</p>
<p>QQ 和 QQ 群会不定时查看，所以不会很及时。</p>
<h2 id="联系方式">🌶️联系方式</h2>
<p>QQ群：877458612</p>
<p>邮箱：260827400@qq.com</p>
<p>GitHub：<a
href="https://github.com/GalensGan/UZonMail">GalensGan/UZonMail
(github.com)</a></p>
<p>个人主页：<a
href="https://galens.uamazing.cn">https://galens.uamazing.cn</a></p>
<h2 id="致谢名单">🍉致谢名单</h2>
<p>感谢老铁们对该软件的肯定，感谢大家的支持与鼓励！</p>
<p>感谢 QQ 用户 <code>来了来了</code>、<code>Me</code> 协助管理 QQ
群。</p>
<p>感谢以下用户的赞助（按先后时间排序）：</p>
<p>磊、鹏</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>MyIdeas</category>
      </categories>
      <tags>
        <tag>UzonMail</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>developer-lazy-tool</title>
    <url>/posts/2021/3NEM1KV.html</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<p>该工具出现的原因是这样的：</p>
<p>每次发布前端版本到服务器，都需要经过编译，然后打开远程桌面，拷贝更新的文件到服务器这一过程。</p>
<p>这一过程，虽然简单，但是一通操作下来，挺费时间的，有时间，复制还容易出错。</p>
<p>所以，我就想，要是可以一句命令行来实现就好了~</p>
<p>于是，develop-lazy-tool 就这样诞生了。</p>
<span id="more"></span>
<h2 id="安装">安装</h2>
<h3 id="手动">手动</h3>
<p>下载安装包后，在安装包根目录打开命令行，运行 <code>dlt install</code>
安装</p>
<h3 id="scoop">scoop</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scoop bucket add my-bucket https://gitee.com/noctiflorous/galens-bucket.git</span><br><span class="line">scoop install developer-lazy-tool</span><br></pre></td></tr></table></figure>
<h2 id="卸载">卸载</h2>
<h3 id="手动-1">手动</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dlt uninstall</span><br></pre></td></tr></table></figure>
<p>然后删除安装目录即可。</p>
<h2 id="定位">定位</h2>
<p>不重复造轮子，只提供一个聚合方式，使得可以用一条命令完成所有任务。</p>
<h2 id="程序目录">程序目录</h2>
<ul>
<li><p>data 存放用户数据</p></li>
<li><p>config 存放系统配置</p></li>
<li><p>system</p>
<p>系统除配置外的文件</p></li>
<li><p>script 所有脚本</p></li>
</ul>
<h2 id="功能">功能</h2>
<h3 id="安装install">安装(install)</h3>
<ol type="1">
<li>将程序添加到用户变量中</li>
</ol>
<h3 id="卸载uninstall">卸载(uninstall)</h3>
<ol type="1">
<li>从用户变量中移除本程序</li>
<li>提示删除安装目录</li>
</ol>
<h3 id="打开配置config">打开配置(config)</h3>
<ul>
<li>用户配置(--user || -u)</li>
<li>系统配置(--system || -s)</li>
<li>打开脚本目录(--scriptdir)</li>
<li>打开安装目录(--setupdir)</li>
</ul>
<h3 id="ftp上传ftp">FTP上传(ftp)</h3>
<p><strong>参数说明：</strong></p>
<table>
<colgroup>
<col style="width: 19%" />
<col style="width: 69%" />
<col style="width: 5%" />
<col style="width: 5%" />
</colgroup>
<thead>
<tr class="header">
<th>参数名</th>
<th>作用</th>
<th>可选</th>
<th>默认</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>--name || -n</td>
<td>指定后，上传 name 相应设置中的文件，不区分大小写。</td>
<td>是</td>
<td>是</td>
</tr>
</tbody>
</table>
<p><strong>配置说明：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;ftps&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;front-dist&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.23.11&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">21</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;whfy8888&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;localPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;E:\\galensShare\\Develop\\swToolsFrontEnd\\dist\\&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remotePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
<h3 id="执行脚本es">执行脚本(es)</h3>
<p><strong>动词说明：</strong></p>
<p><code>es</code> 是 <code>execute script</code>
的缩写，该动词可以省略。假设配置中有名为
<code>zip-Dlt</code>，则完整命令行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dlt es --name zip-Dlt</span><br></pre></td></tr></table></figure>
<p>简化的命令行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dlt zip-Dlt</span><br></pre></td></tr></table></figure>
<p><strong>参数说明：</strong></p>
<table>
<colgroup>
<col style="width: 19%" />
<col style="width: 69%" />
<col style="width: 5%" />
<col style="width: 5%" />
</colgroup>
<thead>
<tr class="header">
<th>参数名</th>
<th>作用</th>
<th>可选</th>
<th>默认</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>--name || -n</td>
<td>指定后，执行 name 相应配置中的脚本，不区分大小写。</td>
<td>否</td>
<td>是</td>
</tr>
</tbody>
</table>
<p><strong>配置说明：</strong></p>
<p>执行根目录默认在 script 目录，暂不支持修改.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="comment">// 可以直接运行命令</span></span><br><span class="line">    <span class="comment">// 使用 7z 打包 developer-lazy-tool</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zip-Dlt&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;fileName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;arguments&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a -t7z E:/DeveloperLazyTool/bin/Release/developer-lazy-tool.7z E:/DeveloperLazyTool/bin/Release/*&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;successFlag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Everything is Ok&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 也可以运行脚本文件</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cd-backend&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;fileName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cd-backend.ahk&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span>    </span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<h2 id="列出配置list">列出配置(list)</h2>
<p><strong>参数说明：</strong></p>
<table>
<colgroup>
<col style="width: 21%" />
<col style="width: 66%" />
<col style="width: 6%" />
<col style="width: 6%" />
</colgroup>
<thead>
<tr class="header">
<th>参数名</th>
<th>作用</th>
<th>可选</th>
<th>默认</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>--name || -n</td>
<td>获取指定名称的配置，比如 <code>dlt list scripts</code></td>
<td>否</td>
<td>是</td>
</tr>
</tbody>
</table>
<h3 id="聚合">聚合</h3>
<p>聚合功能要求每项有 name
属性，这样，才能给管道中每次成果命名，方便后面的管道使用。如果不设置
name，则命名为空，不能指定参数名来引用。</p>
<h2 id="todo">ToDo</h2>
<ul class="task-list">
<li><input type="checkbox" checked="" />安装 install</li>
<li><input type="checkbox" checked="" />卸载 uninstall</li>
<li><input type="checkbox" checked="" />打开配置文件</li>
<li><input type="checkbox" checked="" />ftp上传 ftp</li>
<li><input type="checkbox" checked="" />执行脚本 es</li>
<li><input type="checkbox" />聚合 aggregate</li>
<li><input type="checkbox" />更新 update 更新自己</li>
</ul>
]]></content>
      <categories>
        <category>Develop</category>
        <category>MyIdeas</category>
      </categories>
      <tags>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>网络编程入门</title>
    <url>/posts/2020/WXDAQ3.html</url>
    <content><![CDATA[<p>领导突然提出要将原来的 C/S 客户端转成 Web, 作为一个 web
小白，只好使用百度和谷歌大法疯狂学习。</p>
<p>在过程中遇到了很多疑惑，于是记录下来，以作分享：</p>
<span id="more"></span>
<h2 id="关于前后端如何协同">关于前后端如何协同</h2>
<p>根据公司的要求，今后可能会有更多的产品采用 web
端，那么我不仅要完成自己负责这部分的改造，还要未未来的产品打下一个基础。首先，我就想到了前后端分离。</p>
<p>但是前后端是怎么协同的工作呢？</p>
<figure>
<img data-src="https://images2018.cnblogs.com/blog/1384940/201809/1384940-20180902231016369-1580837558.jpg"
alt="图片" />
<figcaption aria-hidden="true">图片</figcaption>
</figure>
<p>在网上找到了 <a
href="https://home.cnblogs.com/u/yunshangwuyou/">云上丶无忧</a>
关于它的描述，通俗易懂。</p>
<p>看完之后，有一种恍然大悟的感觉：</p>
<p>原来前后端分离是要部署两套服务器的，当然也可以在一个服务器上，安装两个
web 服务。</p>
<h2 id="关于后端代码用什么语言">关于后端代码用什么语言</h2>
<p>我认为后端主要处理的是数据库和一些逻辑问题，对于界面展示基本等于无，所以，我认为用
Javal, ASP.NET 区别不大。本人因为长期使用的是
C#，所以自然的，后端就计划用 ASP.NET 了。</p>
<h2 id="前后端开发需要用到的技术">前后端开发需要用到的技术</h2>
<h3 id="前后端-api-管理">前后端 API 管理</h3>
<p>前后端 API 管理采用 YApi, 它可以进行内网部署，很方便</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>最全最详细 http 状态码介绍</title>
    <url>/posts/2020/25EQ87B.html</url>
    <content><![CDATA[<p>HTTP 响应状态代码指示特定 <a
href="https://developer.mozilla.org/zh-cn/HTTP">HTTP</a>
请求是否已成功完成。响应分为五类：信息响应(<code>100</code>–<code>199</code>)，成功响应(<code>200</code>–<code>299</code>)，重定向(<code>300</code>–<code>399</code>)，客户端错误(<code>400</code>–<code>499</code>)和服务器错误
(<code>500</code>–<code>599</code>)。状态代码由 <a
href="https://tools.ietf.org/html/rfc2616#section-10">section 10 of RFC
2616</a>定义</p>
<span id="more"></span>
<h2 id="信息响应">信息响应</h2>
<ul>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/100"><code>100 Continue</code></a></p>
<p>这个临时响应表明，迄今为止的所有内容都是可行的，客户端应该继续请求，如果已经完成，则忽略它。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/101"><code>101 Switching Protocol</code></a></p>
<p>该代码是响应客户端的 <a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Upgrade"><code>Upgrade</code></a>
标头发送的，并且指示服务器也正在切换的协议。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/102"><code>102 Processing</code></a>
(<a
href="https://developer.mozilla.org/en-US/docs/Glossary/WebDAV">WebDAV</a>)</p>
<p>此代码表示服务器已收到并正在处理该请求，但没有响应可用。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/103"><code>103 Early Hints</code></a></p>
<p>此状态代码主要用于与<a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Link"><code>Link</code></a>
链接头一起使用，以允许用户代理在服务器仍在准备响应时开始预加载资源。</p></li>
</ul>
<h2 id="成功响应">成功响应</h2>
<ul>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/200"><code>200 OK</code></a></p>
<p>请求成功。成功的含义取决于HTTP方法：</p>
<ul>
<li>GET：资源已被提取并在消息正文中传输。</li>
<li>HEAD：实体标头位于消息正文中。</li>
<li>POST：描述动作结果的资源在消息体中传输。</li>
<li>TRACE：消息正文包含服务器收到的请求消息</li>
</ul></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/201"><code>201 Created</code></a></p>
<p>该请求已成功，并因此创建了一个新的资源。这通常是在POST请求，或是某些PUT请求之后返回的响应。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/202"><code>202 Accepted</code></a></p>
<p>请求已经接收到，但还未响应，没有结果。意味着不会有一个异步的响应去表明当前请求的结果，预期另外的进程和服务去处理请求，或者批处理。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/203"><code>203 Non-Authoritative Information</code></a></p>
<p>服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超集。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200
OK的情况下才是合适的。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/204"><code>204 No Content</code></a></p>
<p>服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/205"><code>205 Reset Content</code></a></p>
<p>服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/206"><code>206 Partial Content</code></a></p>
<p>服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或者迅雷这类的
HTTP
下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。该请求必须包含
Range 头信息来指示客户端希望得到的内容范围，并且可能包含 If-Range
来作为请求条件。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/207"><code>207 Multi-Status</code></a>
(<a
href="https://developer.mozilla.org/en-US/docs/Glossary/WebDAV">WebDAV</a>)</p>
<p>由WebDAV(RFC
2518)扩展的状态码，代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/208"><code>208 Already Reported</code></a>
(<a
href="https://developer.mozilla.org/en-US/docs/Glossary/WebDAV">WebDAV</a>)</p>
<p>在 DAV 里面使用: propstat
响应元素以避免重复枚举多个绑定的内部成员到同一个集合。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/226"><code>226 IM Used</code></a>
(<a href="https://tools.ietf.org/html/rfc3229">HTTP Delta
encoding</a>)</p>
<p>服务器已经完成了对资源的 GET
请求，并且响应是对当前实例应用的一个或多个实例操作结果的表示。</p></li>
</ul>
<h2 id="重定向">重定向</h2>
<ul>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/300"><code>300 Multiple Choice</code></a></p>
<p>被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/301"><code>301 Moved Permanently</code></a></p>
<p>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个
URI
之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/302"><code>302 Found</code></a></p>
<p>请求的资源现在临时从不同的 URI
响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/303"><code>303 See Other</code></a></p>
<p>对应当前请求的响应可以在另一个 URI 上被找到，而且客户端应当采用 GET
的方式访问那个资源。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/304"><code>304 Not Modified</code></a></p>
<p>如果客户端发送了一个带条件的 GET
请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304
响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。</p></li>
<li><p><code>305 Use Proxy</code></p>
<p>被请求的资源必须通过指定的代理才能被访问。Location
域中将给出指定的代理所在的 URI
信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能建立305响应。</p></li>
<li><p><code>306 unused</code></p>
<p>在最新版的规范中，306 状态码已经不再被使用。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/307"><code>307 Temporary Redirect</code></a></p>
<p>请求的资源现在临时从不同的URI
响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/308"><code>308 Permanent Redirect</code></a></p>
<p>这意味着资源现在永久位于由 <code>Location:</code> HTTP Response
标头指定的另一个 URI。 这与 <code>301 Moved Permanently HTTP</code>
响应代码具有相同的语义，但用户代理不能更改所使用的 HTTP
方法：如果在第一个请求中使用 <code>POST</code>，则必须在第二个请求中使用
<code>POST</code>。</p></li>
</ul>
<h2 id="客户端响应">客户端响应</h2>
<ul>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/400"><code>400 Bad Request</code></a></p>
<p>1、语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。</p>
<p>2、请求参数有误。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/401"><code>401 Unauthorized</code></a></p>
<p>当前请求需要用户验证。该响应必须包含一个适用于被请求资源的
WWW-Authenticate
信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization
头信息的请求。如果当前请求已经包含了 Authorization
证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。</p></li>
<li><p><code>402 Payment Required</code></p>
<p>此响应码保留以便将来使用，创造此响应码的最初目的是用于数字支付系统，然而现在并未使用。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/403"><code>403 Forbidden</code></a></p>
<p>服务器已经理解请求，但是拒绝执行它。与 401
响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个
HEAD
请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个
404 响应，假如它不希望让客户端获得任何信息。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/404"><code>404 Not Found</code></a></p>
<p>请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/405"><code>405 Method Not Allowed</code></a></p>
<p>请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow
头信息用以表示出当前资源能够接受的请求方法的列表。 鉴于 PUT，DELETE
方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/406"><code>406 Not Acceptable</code></a></p>
<p>请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/407"><code>407 Proxy Authentication Required</code></a></p>
<p>与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个
Proxy-Authenticate 用以进行身份询问。客户端可以返回一个
Proxy-Authorization 信息头用以验证。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/408"><code>408 Request Timeout</code></a></p>
<p>请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/409"><code>409 Conflict</code></a></p>
<p>由于和被请求的资源的当前状态之间存在冲突，请求无法完成。这个代码只允许用在这样的情况下才能被使用：用户被认为能够解决冲突，并且会重新提交新的请求。该响应应当包含足够的信息以便用户发现冲突的源头。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/410"><code>410 Gone</code></a></p>
<p>被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。这样的状况应当被认为是永久性的。如果可能，拥有链接编辑功能的客户端应当在获得用户许可后删除所有指向这个地址的引用。如果服务器不知道或者无法确定这个状况是否是永久的，那么就应该使用
404 状态码。除非额外说明，否则这个响应是可缓存的。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/411"><code>411 Length Required</code></a></p>
<p>服务器拒绝在没有定义 <code>Content-Length</code>
头的情况下接受请求。在添加了表明请求消息体长度的有效
<code>Content-Length</code> 头之后，客户端可以再次提交该请求。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/412"><code>412 Precondition Failed</code></a></p>
<p>服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/413"><code>413 Payload Too Large</code></a></p>
<p>服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。如果这个状况是临时的，服务器应当返回一个
<code>Retry-After</code>
的响应头，以告知客户端可以在多少时间以后重新尝试。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/414"><code>414 URI Too Long</code></a></p>
<p>请求的URI
长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。这比较少见，通常的情况包括：本应使用POST方法的表单提交变成了GET方法，导致查询字符串（Query
String）过长。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/415"><code>415 Unsupported Media Type</code></a></p>
<p>对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/416"><code>416 Range Not Satisfiable</code></a></p>
<p>如果请求中包含了 Range 请求头，并且 Range
中指定的任何数据范围都与当前资源的可用范围不重合，同时请求中又没有定义
If-Range 请求头，那么服务器就应当返回416状态码。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/417"><code>417 Expectation Failed</code></a></p>
<p>此响应代码意味着服务器无法满足 <a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Expect"><code>Expect</code></a>
请求标头字段指示的期望值。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/418"><code>418 I'm a teapot</code></a></p>
<p>服务器拒绝尝试用 <code>“茶壶冲泡咖啡”</code>。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/421"><code>421 Misdirected Request</code></a></p>
<p>该请求针对的是无法产生响应的服务器。
这可以由服务器发送，该服务器未配置为针对包含在请求 URI
中的方案和权限的组合产生响应。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/422"><code>422 Unprocessable Entity</code></a>
(<a
href="https://developer.mozilla.org/en-US/docs/Glossary/WebDAV">WebDAV</a>)</p>
<p>请求格式良好，但由于语义错误而无法遵循。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/423"><code>423 Locked</code></a>
(<a
href="https://developer.mozilla.org/en-US/docs/Glossary/WebDAV">WebDAV</a>)</p>
<p>正在访问的资源被锁定。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/424"><code>424 Failed Dependency</code></a>
(<a
href="https://developer.mozilla.org/en-US/docs/Glossary/WebDAV">WebDAV</a>)</p>
<p>由于先前的请求失败，所以此次请求失败。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/425"><code>425 Too Early</code></a></p>
<p>服务器不愿意冒着风险去处理可能重播的请求。</p></li>
<li></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/426"><code>426 Upgrade Required</code></a></p>
<p>服务器拒绝使用当前协议执行请求，但可能在客户机升级到其他协议后愿意这样做。
服务器在 426 响应中发送 <a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Upgrade"><code>Upgrade</code></a>
头以指示所需的协议。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/428"><code>428 Precondition Required</code></a></p>
<p>原始服务器要求该请求是有条件的。
旨在防止“丢失更新”问题，即客户端获取资源状态，修改该状态并将其返回服务器，同时第三方修改服务器上的状态，从而导致冲突。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/429"><code>429 Too Many Requests</code></a></p>
<p>用户在给定的时间内发送了太多请求（“限制请求速率”）。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/431"><code>431 Request Header Fields Too Large</code></a></p>
<p>服务器不愿意处理请求，因为它的 请求头字段太大（ Request Header Fields
Too Large）。 请求可以在减小请求头字段的大小后重新提交。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/451"><code>451 Unavailable For Legal Reasons</code></a></p>
<p>用户请求非法资源，例如：由政府审查的网页。</p></li>
</ul>
<h2 id="服务端响应">服务端响应</h2>
<ul>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/500"><code>500 Internal Server Error</code></a></p>
<p>服务器遇到了不知道如何处理的情况。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/501"><code>501 Not Implemented</code></a></p>
<p>此请求方法不被服务器支持且无法被处理。只有<code>GET</code>和<code>HEAD</code>是要求服务器支持的，它们必定不会返回此错误代码。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/502"><code>502 Bad Gateway</code></a></p>
<p>此错误响应表明服务器作为网关需要得到一个处理这个请求的响应，但是得到一个错误的响应。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/503"><code>503 Service Unavailable</code></a></p>
<p>服务器没有准备好处理请求。 常见原因是服务器因维护或重载而停机。
请注意，与此响应一起，应发送解释问题的用户友好页面。
这个响应应该用于临时条件和
<code>Retry-After</code>：如果可能的话，HTTP头应该包含恢复服务之前的估计时间。
网站管理员还必须注意与此响应一起发送的与缓存相关的标头，因为这些临时条件响应通常不应被缓存。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/504"><code>504 Gateway Timeout</code></a></p>
<p>当服务器作为网关，不能及时得到响应时返回此错误代码。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/505"><code>505 HTTP Version Not Supported</code></a></p>
<p>服务器不支持请求中所使用的HTTP协议版本。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/506"><code>506 Variant Also Negotiates</code></a></p>
<p>服务器有一个内部配置错误：对请求的透明内容协商导致循环引用。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/507"><code>507 Insufficient Storage</code></a></p>
<p>服务器有内部配置错误：所选的变体资源被配置为参与透明内容协商本身，因此不是协商过程中的适当端点。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/508"><code>508 Loop Detected</code></a>
(<a
href="https://developer.mozilla.org/en-US/docs/Glossary/WebDAV">WebDAV</a>)</p>
<p>服务器在处理请求时检测到无限循环。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/510"><code>510 Not Extended</code></a></p>
<p>客户端需要对请求进一步扩展，服务器才能实现它。服务器会回复客户端发出扩展请求所需的所有信息。</p></li>
<li><p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/511"><code>511 Network Authentication Required</code></a></p>
<p>511 状态码指示客户端需要进行身份验证才能获得网络访问权限。</p></li>
</ul>
<h2 id="浏览器兼容性">浏览器兼容性</h2>
<p><a href="https://github.com/mdn/browser-compat-data">Update
compatibility data on GitHub</a></p>
<table>
<colgroup>
<col style="width: 23%" />
<col style="width: 5%" />
<col style="width: 5%" />
<col style="width: 5%" />
<col style="width: 9%" />
<col style="width: 5%" />
<col style="width: 5%" />
<col style="width: 5%" />
<col style="width: 6%" />
<col style="width: 7%" />
<col style="width: 6%" />
<col style="width: 5%" />
<col style="width: 6%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;"></th>
<th style="text-align: center;">Desktop</th>
<th style="text-align: center;">Mobile</th>
<th style="text-align: center;"></th>
<th style="text-align: center;"></th>
<th style="text-align: center;"></th>
<th style="text-align: center;"></th>
<th style="text-align: center;"></th>
<th style="text-align: center;"></th>
<th style="text-align: center;"></th>
<th style="text-align: center;"></th>
<th style="text-align: center;"></th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: center;">Chrome</td>
<td style="text-align: center;">Edge</td>
<td style="text-align: center;">Firefox</td>
<td style="text-align: center;">Internet Explorer</td>
<td style="text-align: center;">Opera</td>
<td style="text-align: center;">Safari</td>
<td style="text-align: center;">Android webview</td>
<td style="text-align: center;">Chrome for Android</td>
<td style="text-align: center;">Firefox for Android</td>
<td style="text-align: center;">Opera for Android</td>
<td style="text-align: center;">Safari on iOS</td>
<td>Samsung Internet</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/100"><code>100</code></a></td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full support12</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td>Full supportYes</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/200"><code>200</code></a></td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full support12</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td>Full supportYes</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/201"><code>201</code></a></td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full support12</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td>Full supportYes</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/204"><code>204</code></a></td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full support12</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td>Full supportYes</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/206"><code>206</code></a></td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full support12</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td>Full supportYes</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/301"><code>301</code></a></td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full support12</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td>Full supportYes</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/302"><code>302</code></a></td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full support12</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td>Full supportYes</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/303"><code>303</code></a></td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full support12</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td>Full supportYes</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/304"><code>304</code></a></td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full support12</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td>Full supportYes</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/307"><code>307</code></a></td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full support12</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td>Full supportYes</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/308"><code>308</code></a></td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full support12</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYesNotes打开</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td>Full supportYes</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/401"><code>401</code></a></td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full support12</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td>Full supportYes</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/403"><code>403</code></a></td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full support12</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td>Full supportYes</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/404"><code>404</code></a></td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full support12</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td>Full supportYes</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/406"><code>406</code></a></td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full support12</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td>Full supportYes</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/407"><code>407</code></a></td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full support12</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td>Full supportYes</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/409"><code>409</code></a></td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full support12</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td>Full supportYes</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/410"><code>410</code></a></td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full support12</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td>Full supportYes</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/412"><code>412</code></a></td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full support12</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td>Full supportYes</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/416"><code>416</code></a></td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full support12</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td>Full supportYes</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/418"><code>418</code></a></td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full support12</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td>Full supportYes</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/425"><code>425</code></a></td>
<td style="text-align: center;">?</td>
<td style="text-align: center;">?</td>
<td style="text-align: center;">Full support58</td>
<td style="text-align: center;">?</td>
<td style="text-align: center;">?</td>
<td style="text-align: center;">?</td>
<td style="text-align: center;">?</td>
<td style="text-align: center;">?</td>
<td style="text-align: center;">Full support58</td>
<td style="text-align: center;">?</td>
<td style="text-align: center;">?</td>
<td>?</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/451"><code>451</code></a></td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full support12</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td>Full supportYes</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/500"><code>500</code></a></td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full support12</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td>Full supportYes</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/501"><code>501</code></a></td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full support12</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td>Full supportYes</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/502"><code>502</code></a></td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full support12</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td>Full supportYes</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/503"><code>503</code></a></td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full support12</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td>Full supportYes</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/504"><code>504</code></a></td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full support12</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td style="text-align: center;">Full supportYes</td>
<td>Full supportYes</td>
</tr>
</tbody>
</table>
<h2 id="致谢">致谢</h2>
<p>本文摘抄至：https://www.runoob.com/http/http-status-codes.html</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>配置 HTTPS</title>
    <url>/posts/2021/2VVGDH0.html</url>
    <content><![CDATA[<p>免费申请证书来配置 https。</p>
<span id="more"></span>
<h2 id="httpsssl证书关系">HTTPS,SSL,证书关系</h2>
<ul>
<li>HTTPS 是通过 HTTP + SSL 组成</li>
<li>SSL 的实现是通过安装数字证书来实现</li>
<li>CA 签发数字证书</li>
<li>数字证书包含了加解密的算法</li>
<li>数字证书用于建立信任并且分发公钥</li>
</ul>
<h2 id="软件">软件</h2>
<ul>
<li><p>openssl</p>
<p>用于生成密钥</p></li>
<li><p>cerbot或者acme</p>
<p>本文采用 <code>win-acme</code> 来获取证书</p></li>
</ul>
<blockquote>
<p>上述两个软件均可用 scoop 安装</p>
</blockquote>
<h2 id="通过openssl制作证书">通过openSSL制作证书</h2>
<p>在说明证书制作过程前，先说明制作证书时，用到的几类文件的作用： .key
文件：私钥 .csr
文件：证书签名请求文件，含有公钥信息，<code>certificate signing request</code>
的缩 .crt 文件：用 .csr 生成的证书文件，certificate
的缩写,这就是数字证书</p>
<p>生成自签名根证书：就是模仿证书权威机构的作用，给用户提供一个权威机构的根证书。在真实场景中，根证书是CA认证中心给自己颁发的证书,是信任链的起始点。任何安装CA根证书的服务器都意味着对这个CA认证中心是信任的。</p>
<ol type="1">
<li><p>生成CA 的私钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out ca.key 2048</span><br></pre></td></tr></table></figure></li>
<li><p>生成CA 证书请求文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl req -new -key ca.key -out ca.csr</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：</p>
<ul>
<li>如果要用 https，那么 common name
那里应该是域名，否则会引起浏览器警告</li>
<li>密码可以不输入</li>
</ul>
</blockquote>
<p><strong>设置密码后的影响</strong></p>
<p>我们在生成 RSA 私钥，即 ca.key
时设置了密码，这样会导致在启动nginx服务时，每次需要输入密码。</p>
<p>可能通过下列方式删除密码，生成一个没有密码的 RSA key：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl rsa -in ca.key -out ca_no_pass.key</span><br></pre></td></tr></table></figure></li>
<li><p>生成CA证书</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl x509 -req -days 365 -in ca.csr -signkey ca_no_pass.key -out ca.crt</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="用win-acme给-windows-服务器添加ssllets-encrypt证书">用win-acme给
windows 服务器添加SSL（Let's Encrypt）证书</h2>
<p>见参考 <a
href="https://www.cnblogs.com/Gxiaopan/p/11872433.html">2</a></p>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<ol type="1">
<li><p>https://www.jianshu.com/p/449047437697</p></li>
<li><p><a
href="https://www.cnblogs.com/Gxiaopan/p/11872433.html">用win-acme给windows服务器添加SSL（Let's
Encrypt）证书</a></p></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>HTTPS</tag>
      </tags>
  </entry>
  <entry>
    <title>电脑无法更新Let&#39;sEncrypt根证书的解决办法</title>
    <url>/posts/2021/G2SGMF.html</url>
    <content><![CDATA[<p>网站使用了 Let's Encrypt 数字证书，随着 DST Root CA X3 根证书于
2021年09月30日过期，有的电脑可能会无法将网站的根证书更新到新的根节点（ISRG
Root X1），导致在访问网站时提示网站不安全或者无法访问。</p>
<span id="more"></span>
<h2 id="如何判断出现是根证书问题">如何判断出现是根证书问题</h2>
<p>在浏览器中打开【证书窗口】，切换到【证书路径】，查看证书路径中根节点的状态。如果没有更新的话，根节点为
DST Root CA X3。</p>
<h2 id="手动更新根证书">手动更新根证书</h2>
<p>先在正常使用的电脑上面导出 ISRG Root X1
证书，然后在有问题的电脑中导入即可。</p>
<p>如果在 mmc 中导入证书无效时，可以通过 IE
进行导入。具体导入方法见视频：https://youtu.be/scaPxbWy_2E</p>
<h2 id="导出证书">导出证书</h2>
<p><img data-src="https://s2.loli.net/2022/01/20/GwV9IXjN7JdEMmB.png" /></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>let&#39;s encrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 win-acme 申请泛域名证书</title>
    <url>/posts/2023/1ZNRJSW.html</url>
    <content><![CDATA[<p>win-acme 是一个可以在 Windows
系统上运行的免费、开源的证书申请工具，支持申请 Let's Encrypt 签发的
SSL/TLS 证书，包括泛域名证书。</p>
<p>本文详细讲解如何在 Windows 系统中使用 win-acme，基于 Cloudflare
申请泛域名证书。</p>
<span id="more"></span>
<h2 id="为什么使用泛域名证书">为什么使用泛域名证书？</h2>
<p>泛域名证书和单域名证书的区别在于它们可以保护的域名范围不同。单域名证书只能保护一个具体的域名，而泛域名证书则可以保护一个域名下的所有子域名。</p>
<p>举例来说，假设你有一个域名
example.com，单域名证书只能保护该域名，而泛域名证书可以保护 example.com
及其所有子域名，例如 blog.example.com、shop.example.com 等。</p>
<p>使用泛域名证书可以大大简化证书管理工作，特别是当你有多个子域名需要保护时。使用单域名证书需要为每个子域名分别申请和维护证书，而泛域名证书可以一次申请并保护所有子域名。</p>
<p>因此推荐使用泛域名证书。</p>
<h2 id="win-acme-下载安装">win-acme 下载安装</h2>
<blockquote>
<p>本文使用的 win-acme 版本为：win-acme.v2.2.6.1571.x64.pluggable</p>
</blockquote>
<ol type="1">
<li><p>下载 win-acme</p>
<p>可以从 win-acme
官网（https://www.win-acme.com/）下载最新版本的工具，下载完成后解压到某个目录下。</p>
<p>特别注意，由于要使用 cloudflare 插件，因此一定要下载
<code>pluggable</code> 版本。</p>
<p>github 上最新版本地址：<a
href="https://github.com/win-acme/win-acme/releases/latest">github
release latest</a></p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20231007093040579.png"
alt="image-20231007093040579" />
<figcaption aria-hidden="true">image-20231007093040579</figcaption>
</figure></li>
<li><p>下载 plugin.validation.dns.cloudflare</p>
<p>该插件用于在申请证书时，使用 cloudflare API 进行证书验证。</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20231007093245979.png"
alt="image-20231007093245979" />
<figcaption aria-hidden="true">image-20231007093245979</figcaption>
</figure></li>
</ol>
<h2 id="创建-cloudflare-dns">创建 Cloudflare DNS</h2>
<p>在 <a
href="https://www.cloudflare.com/zh-cn/application-services/products/dns/">Cloudflare
DNS</a> 中添加域名解析。</p>
<p>如果域名解析服务是阿里、华为等服务商，需要将域名的解析切换到
Cloudflare，具体方法可以在网上搜索下，此处不赘述。</p>
<h2 id="生成-cloudflare-api-token">生成 Cloudflare API Token</h2>
<p>从 <a
href="https://dash.cloudflare.com/profile/api-tokens">我的个人资料</a>
里创建 API 令牌。</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20231007112322249.png"
alt="image-20231007112322249" />
<figcaption aria-hidden="true">image-20231007112322249</figcaption>
</figure>
<h2 id="开始生成证书">开始生成证书</h2>
<ol type="1">
<li><p>使用 <code>wacs --verbose</code> 启动 win-acme</p>
<p>使用 <code>--verbose</code> 启动时，可以查看 cloudflare
插件是否加载成功。</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20231007111038989.png"
alt="image-20231007111038989" />
<figcaption aria-hidden="true">image-20231007111038989</figcaption>
</figure></li>
<li><p>选择创建方式</p>
<p>输入 <code>m</code> 使用完整选项的方式来创建。</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20231007111152620.png"
alt="image-20231007111152620" />
<figcaption aria-hidden="true">image-20231007111152620</figcaption>
</figure></li>
<li><p>选择指定域名的方式</p>
<p>输入 <code>2</code> 来手动输入</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20231007111515006.png"
alt="image-20231007111515006" />
<figcaption aria-hidden="true">image-20231007111515006</figcaption>
</figure></li>
<li><p>手动输入泛域名</p>
<p>泛域名的格式为
<code>*.domain</code>，例如：<code>*.uamazing.cn</code></p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20231007111638681.png"
alt="image-20231007111638681" />
<figcaption aria-hidden="true">image-20231007111638681</figcaption>
</figure></li>
<li><p>选择证书保存的方式</p>
<p>输入 <code>1</code> 来将同一个域名保存到同一个文件中</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20231007111826853.png"
alt="image-20231007111826853" />
<figcaption aria-hidden="true">image-20231007111826853</figcaption>
</figure></li>
<li><p>选择 DNS 验证方式</p>
<p>输入 <code>6</code> 使用 Cloudflare DNS 验证，然后会让你输入
Cloudflare DNS API Token。将上方中生成的 Token 复制到命令行中即可。</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20231007112020384.png"
alt="image-20231007112020384" />
<figcaption aria-hidden="true">image-20231007112020384</figcaption>
</figure></li>
<li><p>选择加密方式和保存位置</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20231007112456225.png"
alt="image-20231007112456225" />
<figcaption aria-hidden="true">image-20231007112456225</figcaption>
</figure></li>
<li><p>设置密码和其它保存位置</p>
<p>都选择无</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20231007112603424.png"
alt="image-20231007112603424" />
<figcaption aria-hidden="true">image-20231007112603424</figcaption>
</figure></li>
<li><p>选择是否执行其它操作</p>
<p>输入 <code>3</code>，表示不进行操作</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20231007112825338.png"
alt="image-20231007112825338" />
<figcaption aria-hidden="true">image-20231007112825338</figcaption>
</figure>
<p>这一步输入完成后，就会在指定的目录里自动生成相应的证书。</p></li>
<li><p>添加任务计划定时自动更新证书</p>
<p>若要添加任务计划自动更新证书，需要使用管理员身份启动命令行，否则会报如下错误：</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20231007123855656.png"
alt="image-20231007123855656" />
<figcaption aria-hidden="true">image-20231007123855656</figcaption>
</figure></li>
</ol>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a
href="https://www.win-acme.com/reference/plugins/validation/dns/cloudflare">cloudflare
validation</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>win-acme</tag>
        <tag>SSL</tag>
        <tag>Let&#39;s Encrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 中使用 acme.sh 申请泛域名证书</title>
    <url>/posts/2024/2TMXKG9.html</url>
    <content><![CDATA[<p>本文将介绍如何在 Ubuntu 系统中使用 <code>acme.sh</code> 通过
cloudflare 的 api 方式申请泛域名。</p>
<span id="more"></span>
<h2 id="为什么使用泛域名证书">为什么使用泛域名证书？</h2>
<p>泛域名证书和单域名证书的区别在于它们可以保护的域名范围不同。单域名证书只能保护一个具体的域名，而泛域名证书则可以保护一个域名下的所有子域名。</p>
<p>举例来说，假设你有一个域名
example.com，单域名证书只能保护该域名，而泛域名证书可以保护 example.com
及其所有子域名，例如 blog.example.com、shop.example.com 等。</p>
<p>使用泛域名证书可以大大简化证书管理工作，特别是当你有多个子域名需要保护时。使用单域名证书需要为每个子域名分别申请和维护证书，而泛域名证书可以一次申请并保护所有子域名。</p>
<p>因此推荐使用泛域名证书。</p>
<h2 id="安装-acme.sh">安装 acme.sh</h2>
<p>安装很简单, 一个命令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://get.acme.sh | sh -s email=my@example.com</span><br></pre></td></tr></table></figure>
<h2 id="生成-ssl">生成 SSL</h2>
<h3 id="创建-token">创建 Token</h3>
<p>根据官方 <a
href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi#1-cloudflare-option">CloudFlare
Option</a> 介绍，推荐使用限制权限的 Token，申请地址为：<a
href="https://dash.cloudflare.com/profile/api-tokens">cloudflare api
token</a></p>
<blockquote>
<p>cloudflare 右上角可以切换成中文</p>
</blockquote>
<p>依次选择【创建令牌】/ 编辑区域 DNS【使用模板】，如图所示：</p>
<figure>
<img data-src="C:\Users\galens\AppData\Roaming\Typora\typora-user-images\image-20240409222129668.png"
alt="image-20240409222129668" />
<figcaption aria-hidden="true">image-20240409222129668</figcaption>
</figure>
<p>其中，该 Token 需要有 DNS 的【编辑】权限。</p>
<p>单击后，生成的 token 是一个长度为 40 的字符串，示例如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Y_jpG9AnfQmuX5Ss9M_qaNab6SQwme3HWXNDzRWs</span><br></pre></td></tr></table></figure>
<h3 id="开始生成">开始生成</h3>
<p>在 shell 中执行下列命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置环境变量</span></span><br><span class="line">export CF_Token=&quot;Y_jpG9AnfQmuX5Ss9M_qaNab6SQwme3HWXNDzRWs&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果是单个 DNS 区域，需要设置区域 <span class="built_in">id</span>, 该 <span class="built_in">id</span> 可以进入到具体的 DNS 配置中右则查找</span></span><br><span class="line">export CF_Zone_ID=&quot;763eac4f1bcebd8b5c95e9fc50d010b4&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果是多个 DNS 区域，需要设置账户 <span class="built_in">id</span> 方便 acme.sh 识别，区域 ID 可不设置</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">账户 <span class="built_in">id</span> 可以在登陆后，跳转到主页 https://dash.cloudflare.com/，最后一级即为 <span class="built_in">id</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如：https://dash.cloudflare.com/763eac4f1bcebd8b5c95e9fc50d010b4</span></span><br><span class="line">export CF_Account_ID=&quot;763eac4f1bcebd8b5c95e9fc50d010b4&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入到 .acme.sh 目录</span></span><br><span class="line">cd ~/.acme.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成证书</span></span><br><span class="line">./acme.sh --issue --dns dns_cf -d example.com -d &#x27;*.example.com&#x27;</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<ol type="1">
<li><p><a
href="https://github.com/acmesh-official/acme.sh/wiki/说明">说明 ·
acmesh-official/acme.sh Wiki (github.com)</a></p></li>
<li><p><a
href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi">dnsapi ·
acmesh-official/acme.sh Wiki (github.com)</a></p></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>SSL</tag>
        <tag>Let&#39;s Encrypt</tag>
        <tag>acme</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>自然守恒论</title>
    <url>/posts/2015/R4FXSA.html</url>
    <content><![CDATA[<h2 id="理论假设">理论假设</h2>
<p>首先，假设如下理论，即<strong>对称理论：</strong></p>
<p>我们生活的空间由两个世界组成，一个是显化在物质界的真实世界，称为<code>三元宇宙</code>，另一个是显化在精神世界的精神世界，称之为<code>虚无界</code>。真实的世界和虚无的世界呈函数映射关系，其具有一一对应的关系。当真实世界产生的那一刻起，虚拟界也跟着生成。</p>
<span id="more"></span>
<h2 id="能量守恒">能量守恒</h2>
<p><strong>物质界的能量守恒的定义：</strong></p>
<p>能量可以从一个物体传递给另一个物体，而且能量的形式也可以互相转换，但能量永远不会消失。</p>
<p><strong>虚拟界的元能守恒</strong>：
元能的定义：在虚拟的精神世界，有这么一种精神能量，叫做元能。它就像物质界的能量一样，永远不会消散，只能够相互转移。</p>
<p><strong>元能守恒</strong>：</p>
<p>元能可以从物质界的一个所有者转移到另一个所有者，而且元能可以相互吸收和转化，但永远不会消失。</p>
<h2 id="虚拟界">虚拟界</h2>
<p>虚拟界可以假想成一个倒的金字塔形状。从最底端到最高端，有无数个能量等级，而每一个能量等级就有一个无穷大的空家供该等级的元能反应。</p>
<p>低等级的元能可以通过吸收其他元能从而成长，跳跃到高等级。而物质界的任何一件事情，任何一个行为，任何一个有能量的物质体，都对应着虚拟界的一份自己的元能机器，这个机器有初始元能，初始元能通过借用这个机器（或者说通过它本身的特性）完成对其他元能的作用。每个初始元能的性质不一样，等级不一样。</p>
<p>元能之间的作用称之为共鸣。</p>
<h2 id="实例">实例</h2>
<p>用对称的能量守恒来解释：<code>杀人者最后被人杀，杀猪者则不会被猪所杀</code></p>
<p>智慧的人的初始元能等级相对较高，假设位于“倒金字塔”的 30
层，人一出生就有很多的权利，因为你的能量等级是
30，可以在同等级和低等级的范围内活动而不会引起其他元能的负效应。</p>
<p>一个人由小到大，通过沐浴阳光，吃饭喝水，学习工作等，现实中的每一个行动，虚拟界中，自己的初始元能机器也相应的吸收转化其他元能，然后不断升级。然而有的人在现实生活中因为各种“原因”，走上犯罪的道路，在虚拟界的映射就是在转化这些“原因”的元能的时候，元能机因为某些原因未能够完全转化，导致虚拟界对应自己的那份初始元能不能够很好的协调运转，积少成多（假设这时他的元能等级为
100），当这份等级为 100 的能在 100
以及以下的虚拟界移动时，对其他的元能产生负效应，最后引发杀人动机，杀了人。</p>
<p>杀人之后，除了钱财什么的，更重要的是他的元能机吸收了该遇害者的初始元能，这将为自己的元能机埋下更大的隐患，最后元能机要么自己不能工作（崩溃自杀），要么被其他元能机感应到（被发现排斥），要么被更强大的元能机吞掉（他杀）。</p>
<p><strong>然而，一个人杀个猪并不会怎么样，为什么呢？</strong></p>
<p>因为你的初始元能等级比猪高，所以吸收了猪的初始元能，能够顺利的转化。保持自身元能机器的正常运转。</p>
<p>可以用这个解释很多东西。虚拟界的元能模式在我们现实世界来说，就是冥冥中的因果关系。</p>
<p>如果一个人（虚拟界的元能机）可以完美吸收其他元能（吸收元能你不能改变它的性质，只能吸收它，融合它，通过其他途径转化它），只要连续不断的去吸收，那么，在物质界的你，也一定能够达到自己的目标（对应着，在虚拟界的你，将有更广阔的空间让元能机去“走动”。</p>
<h2 id="总结">总结</h2>
<p>守恒，是所有世界的通用法则，得并不应定失，不断努力，方可不断得。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2016年及以前</category>
      </categories>
      <tags>
        <tag>生活感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>人当有梦</title>
    <url>/posts/2016/2YSA5Z7.html</url>
    <content><![CDATA[<p>一杆老笔，一个人，两个默默地在纸上疾书，但思绪却飘出窗外，飘到阳光下，飘到明天的以后，直到很远，很远......</p>
<span id="more"></span>
<p>一个模糊的影子，住在方方正正的屋子里，好像计算机的无限循环，在上下班之间不断加一。对了，过年过节，会陪着亲人，玩着，乐着，偶尔遇见老同学，会去喝几杯，聊聊天，谈谈工作，家庭，孩子，然后又继续回归到每天的上班，下班......</p>
<p>很久很久之后，这个影子终于慢慢的清晰了，突然一惊，它竟然是我自己。</p>
<p>时光慢慢倒回，回到中学的教室，回到小学的方块字，回到我的第一个呼吸，是无奈，是惊醒，是冲动...我的前半生，竟然都只是在做一件事情，为了养活自己，十几年的学习，最后是为了找份工作，养活自己，养活家人，然后慢慢的老去，化为一抔黄土，随风消散，无人相思，更无人相忆。</p>
<p>不禁让人思考，自己的一生究竟该怎么度过？</p>
<p>学习为了什么，</p>
<p>工作为了什么，</p>
<p>娶妻生子为了什么，</p>
<p>那人活着，是为了什么，</p>
<p>.....</p>
<p>活完就是一生，生与死是上天赋予每个生灵的最大使命，而不同的人用不同的方式把它走完，在这段旅程中，怎么过，唯心乐则是最好的活法。</p>
<p>善者好施，是以为乐，</p>
<p>恶者行凶，是以为乐，</p>
<p>豪者嗜酒，是以为乐，</p>
<p>侠者仗义，是以为乐，</p>
<p>而我以众人乐，为乐！</p>
<p>怎么活，只是个人的爱好和梦想。只要自己在人生路上的时候，抬头看路，低头做事，怎么活，都很精彩！</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2016年及以前</category>
      </categories>
      <tags>
        <tag>生活感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>关于《挑山夫另解》</title>
    <url>/posts/2013/1F4T3C2.html</url>
    <content><![CDATA[<p>走路之间，偶有灵感，突然回忆起《挑山夫》一文中的挑山工，突然发现，他的做法从能量角度来讲，是不可取的。</p>
<span id="more"></span>
<p>很多人都很疑惑，为什么呢？不是重力做功与路径无关吗？这个思想我们从初中一直到现在，都是这样认为的，也是这样做的。很多人都有疑惑，其实，重力做功与去确实与路径无关。
而对于人，对于生物，我们不仅仅只受重力，还受到各方面的力，宏观到地对脚的摩擦力，微观到地球磁场对身体分子，而对于自己消耗能量从而获得动能的生物来说，我们处处受力，处处需要能量，只要动（宏观上的运动和抽象的思考），一切，都需要能量来维系。</p>
<p>所以，挑山工的行动是需要能量的，他在上山的过程中的心灵思考，各种停留，也是要消耗能量的
。一方面，假如他沿着阶梯的梯度往上走，虽然过程比较累，但是这只是因为他的身体产能跟不上消耗的结果，但是，这样，他所消耗的时间变短了，节省了他水平移动时候的能量消耗。另一方面，一个人的思维，也是需要能量的，当他上山时间越长，心灵就会越疲惫，用于控制身体的思维就会发散，也可能导致能量多损耗。</p>
<p>就像骑自行车，你遇到一个上坡，当你调档到费力的时候，你的速度起来了，通过相同路程的时间变短了，你的能量消耗假设为Q；那么当你调档到省力的时候，你所花的时间延长了，在这个延长的时间里，你的积累消耗能量用于通过路程的也为Q，但是，在△t内，时间效应（在△t时间内的附加能量消耗）会消耗能量q，所以，后者消耗能量更多。</p>
<p>综上，我觉得小学课文中的《挑山夫》挑山夫的做法从能量角度看，不可取。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2016年及以前</category>
      </categories>
      <tags>
        <tag>生活感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>爱得不够深沉</title>
    <url>/posts/2016/3VN0XNQ.html</url>
    <content><![CDATA[<p>我为什么我的眼里常含泪水，因为我对这片土地爱得深沉——艾青</p>
<p>时间把这暖暖的阳光分成了两半，一半留在上午，另一半，正在懒懒的洒向大地。思绪把我也分成了两半，一半留在自习室，另一半，正在深情的慨叹。</p>
<span id="more"></span>
<p>我在思考，为什么在文人的眼里，我们的起居之所何以被如此赞扬，山河，江山，社稷，国......而这些大气磅礴的词语，被文人们用出来，却是那么的贴切，自然。羡慕他们，羡慕他们总能够一步一景，一步一喟叹。不论是小桥的流水，还是残破的老屋，亦或是凋零的花草，这些文人们，总能感受到它们的磁场，与之共鸣，然后又把自己留在那儿。</p>
<p>这不禁让我想起了自己的一位好友，他的风格我很喜欢，文字细腻而平淡，读他的文章，你会分外的宁静，然后由着他把你带进他的世界，再安安静静的送你出来，不食烟火，但回味无穷。他笔下的每一个地方，在他那里都有着满满的故事。我很喜欢这种感觉，走一个地方，就是一个故事。</p>
<p>我在思考，为什么自己外出游玩，总是万般风景旧曾谙，最后留下的，只是给记忆多点流逝的内容。这个问题困惑了我很久，脑袋一直不开窍，想不通，想不明白。今天突然看到艾青的这句诗，突然顿悟了：因为我对这个世界爱得还不够深沉。</p>
<p>是啊，屈原发出”路漫漫其修远兮，吾将上下而求索”的感叹，是因为他对他的国爱得炽热，李白潇洒挥墨”飞流直下三千尺，疑是银河落九天”，是因为他对这片景爱得深沉，徐志摩感叹”只求在最美的年华里，遇到你”,是因为他对你早已爱得痴迷。读着这些诗，每个文字，都承载着诗人浓浓的感情。情是船，文字是船夫，一船，一人，静静的在时间的河流上驶着，我想，时间尽了，它也不会停下。</p>
<p>只要爱得深沉，任它天穹星月轮转，任它大地沧海桑田，你的江山，就是你的国，闭眼，睁眼，刹那也是芳华。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2016年及以前</category>
      </categories>
      <tags>
        <tag>生活感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>君子之道</title>
    <url>/posts/2016/2H6KWG8.html</url>
    <content><![CDATA[<p>天行健，君子以自强不息，地势坤，君子以厚德载物。古之圣人，俯仰天地，早已道出何以为君子，历代大文豪对此也不吝赞美，沿着历史，我们可以看到，总有一大批人在寻求君子之道，以致圣人之境。</p>
<span id="more"></span>
<p>春天的阳光好像有一种神秘的力量，今天出门的那一瞬，阳光仿佛空灵的仙气，扑面而来，随之而至的，是我顿悟了。悟出了一种为人之道——人之立世，当拾一颗君子之心。</p>
<p>是的，立世，当为君子。心中坦荡，为人诚于心，为事而无所怠，自然正气浩荡，鬼神莫敢欺。但是人总会有属于自己的私心，这种大爱天下的境界让我们求之不得，但前赴后继。</p>
<p>生活在当代这个大熔炉之中，如何臻至这无上之境呢？一个词语就足矣，问心无愧。
培养浩然之气，不在乎邪，不在乎正，而在乎心。每个人为人处世，心中自有一杆秤，即使这杆秤在别人看来是违反秩序的，但是与己，那就是自己行事的准则，该做不做，不该做而为之，都会使你违背心中的那杆秤，从而产生心魔，埋藏于心，好比在心中制造了一个小小的黑暗地带，吞噬心中正气。但是如果你能事事顺心，那么便无心魔滋生，心之世界一片朗朗乾坤，浩然之气聚集，由内至外，使自己心无所畏惧，坚韧不拔，一言一行，大开大合，心旷神怡，做事自然事半功倍。</p>
<p>顿悟真的很美妙，在那一瞬间，你的心突然就开阔了，就像北冥之鱼，突然化身鲲鹏，扶摇九天之上的那种感觉，又若醍醐灌顶，从此进入一种大自在的世界，从此看红尘，可为大千，亦可为尘埃，在这转换之间，直透本心，明了为与不为。</p>
<p>当为君子，纳存粹之心，感念周遭万物。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2016年及以前</category>
      </categories>
      <tags>
        <tag>生活感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>RESTful API 规范</title>
    <url>/posts/2020/K6BTSD.html</url>
    <content><![CDATA[<p>HTTP状态码：</p>
<p>摘抄至：</p>
<p>http://www.ruanyifeng.com/blog/2014/05/restful_api.html</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>RESTful</tag>
      </tags>
  </entry>
  <entry>
    <title>人的终点在何处</title>
    <url>/posts/2016/3FADRYM.html</url>
    <content><![CDATA[<p>每一个晚上我都会进入另一个世界。这个世界有好人，也有坏人，有善良，也有丑恶，但是这个世界中的我才是最真实的。这个世界是梦。</p>
<p>我有这一个疑惑：如果我们每晚做的梦是连续的，那么现实与梦境了，哪一个才是真实存在的，这就像庄周梦蝶，是现实入到梦里还是梦里梦见了现实呢？</p>
<span id="more"></span>
<p>春秋二十多年，梦就像另一份经历一样，时常在记忆中荡起涟漪，又归于平静。以前都是从别人那儿知道日有所思，夜有所梦，亦或是神经衰弱等等之类的，但是有时候自己做的梦，天方夜谭，有些名词，有些场景却是自己想象不出来的，这不禁让我产生了思考，什么是梦，什么是现实，什么为真？</p>
<p>几年前看过一部电影《盗梦空间》
，讲述了一个梦中梦的精彩故事，而我们或多或少的也有过梦中梦的经历，那么，我们可以推论，现实的我们可以做梦，在梦中的我们也可以做梦，无限循环，反过来讲，在梦中梦醒来是梦，在梦中醒来时现实，那在现实醒来是什么？我称之为超现实。如下图：</p>
<figure>
<img data-src="http://a1.qpic.cn/psb?/fcf16dbb-54fe-4313-b291-ea062676f62f/IpNu32c4rlVsFnkuvpSFBs5tyNy1Dxb7ULk7pAafqNI!/b/dKgAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=UgRNAAAAAAAFADg!&amp;t=5&amp;tl=3&amp;su=04711249&amp;tm=1566100800&amp;sce=0-12-12&amp;rf=2-9"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<figure>
<img data-src="http://a4.qpic.cn/psb?/fcf16dbb-54fe-4313-b291-ea062676f62f/zRF4QXv7TfEToKjPWH8uCSPJXKFqCyJUEORe5p.prLc!/b/dKsAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=JgPhAQAAAAAFAOY!&amp;t=5&amp;tl=3&amp;su=054936609&amp;tm=1566100800&amp;sce=0-12-12&amp;rf=2-9"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<p>因为我们是以一重梦境中的自己为变量，所以，纵轴x代表自己的本质能量。</p>
<p>现实世界的函数y==1，不论自身本质如何强大，这个世界的丰富和精彩程度不会因为你一个人的意志而发生特别大的波动，总会在y=1的附近保持平衡，或者说，你的精彩是你的，对我的影响不会非常大。因为我们生活在由万事万物共同组成的社会里面，一个人不可能有掌控所有事物的能力，也就是他不会有打破现实世界平衡的能力。</p>
<p>一重梦境的函数为y=x，一重梦境世界丰富程度与本质能量成正比，所以，一个人见多识广，他的本质能量越大，离现实世界y=1就越远，说明一重梦境世界越丰富，则所梦见的东西也可能会更离奇。</p>
<p>二重梦境世界的函数y=x2，如第一重梦境世界一样，但是变化更大，就是说即使一个人的本质能量比较小，他的二重梦境也可能会很丰富。</p>
<p>超现实的函数为y=x-1，是一反比例函数，就是说，如果一个人本质能量越大，则超现实世界的丰富程度就越低，最后会低于现实世界。我想可以这样理解，超现实世界因为种种原因，环境发生大改变，不适合人类交流活动，只能通过一个游戏头盔进入到了现实世界进行交互。而从他们那一批人开始之后的现实世界每个出生的孩子，都是现实世界原生的数据。</p>
<p>当现实世界的人的本质能量强大到一定程度之后，会逐渐遗忘回到超现实世界的这个念头。就像我们在梦里一样，开心的时候不会想起来自己是在做梦。</p>
<p>每个人本质能量和起所处的每个世界的丰富程度有上面的函数关系，如果我们对每个函数进行积分：<img data-src="http://a3.qpic.cn/psb?/fcf16dbb-54fe-4313-b291-ea062676f62f/77DY8JsJRIxMMSC.xQLYQ7O*yiR4t6Qwt3mVgj2m2us!/b/dPoAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=agAgAAAAAAAFAGk!&amp;t=5&amp;tl=3&amp;su=013059665&amp;tm=1566100800&amp;sce=0-12-12&amp;rf=2-9"
alt="img" />，表示自身本质能量与各个世界的关联程度之间的关系。 <img data-src="http://a2.qpic.cn/psb?/fcf16dbb-54fe-4313-b291-ea062676f62f/VjtRqGNxz5Vj0ymaIgmTDsg683Ht9ui6m99mVfyYLwQ!/b/dKUAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=6AOxAAAAAAAFAHk!&amp;t=5&amp;tl=3&amp;su=075615121&amp;tm=1566100800&amp;sce=0-12-12&amp;rf=2-9"
alt="img" /></p>
<p>函数图像如下： <img data-src="http://a4.qpic.cn/psb?/fcf16dbb-54fe-4313-b291-ea062676f62f/kcfCnz360rcQLSGsSln1cCdE3Tf0KF5nFa4BS.LgSDY!/b/dKsAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=ggLvAQAAAAAFAE0!&amp;t=5&amp;tl=3&amp;su=0174818641&amp;tm=1566100800&amp;sce=0-12-12&amp;rf=2-9"
alt="img" /></p>
<p>由图像我们可知：</p>
<p>本质能量越大，你和现实世界，一重梦境世界，二重梦境世界的关联就越强。一个本质能量较弱的人，他与他的这三个世界的联系都不是很大，所以，对于这个世界来说，他是没有什么存在感的，做梦的时候，也大多是以第三人称的方式出现的，而本质能量强的人，他所做的梦，大多是自己在主导，可以称之为本能，我称之为本质能量够强大。</p>
<p>对于超现实世界，一个人的本质能量越强大，他的超现实世界的关联程度的绝对值就越小，就是说，梦里开心，不会想到现实世界，现实世界有成就感，也不会想到超现实世界，自然，对另一个世界的关联程度就低了。</p>
<p>但是，当人到老年，生命流逝的时候，我们的本质能量归为0了，这个时候，和超现实世界的本质联系就是无穷大。所以，我想，一个人的终点不是灭亡，而是梦醒，回到永远到不了的另一个世界，超现实世界，然后在那个世界回忆自己这一生的点点滴滴，然后开始又不一样的人生。</p>
<p>一梦一世界，一叶一菩提。梦什么，在哪个世界，都不重要，重要的是，每一个世界都是你自己。做一个本质能量强大的人，在每个世界都精彩地静待梦醒。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2016年及以前</category>
      </categories>
      <tags>
        <tag>生活感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>最殇别离,记湘江一桥</title>
    <url>/posts/2016/201Z6G7.html</url>
    <content><![CDATA[<figure>
<img data-src="http://a1.qpic.cn/psb?/fcf16dbb-54fe-4313-b291-ea062676f62f/jXX86TMgPMkOfczeHqs5w0aXyfJr41X70.JH*ovMQFY!/b/dAABAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=GgHTAAAAAAAFAOs!&amp;tl=3&amp;su=0128858353&amp;tm=1566100800&amp;sce=0-12-12&amp;rf=2-9"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<p>众里寻他千百度，蓦然回首，那人却在灯火阑珊处。四年一蓦然，四年才回首，那烟火绚烂处的湘江一桥竟然已经陪了我四个春秋。</p>
<span id="more"></span>
<p>近来天气总有一种雨恨云愁的味道，偶尔拾得放晴时光，约几好友，游于湘江堤上，更别有一番味道：</p>
<p>白鸟芳草引画桡，垂杨影里见一桥，欲寻往事已魂销</p>
<p>遥指洲头潇湘路，断鸿无数水迢迢，离愁分付湘江潮</p>
<p>离别的人最是伤感，一彳一亍，皆有万般情愫。我就那么静静一立，仿佛立在了时间的河里。伟人一幕幕，涓涓的淌在心里。毛泽东少年豪情，问苍茫大地，谁主沉浮；美景不胜收，看万山红遍，层林尽染，我循着北去的湘江，望穿千年，湘江竟然一直与岳麓学府相伴。</p>
<p>颔首，长桥卧波。湘江一桥以其优美的双曲拱线条，优雅的展示着她的魅力。她的美，是属于奇迹，她的美，羞了长沙几代的少女，美人早已易逝去，而惟她不老。</p>
<p>第一次与她邂逅，是四年前。那年，懵懂的我在校车里，极目远眺，眼里装着橘子洲，装着湘江水，装着若隐若现的湖南大学，余光里，也有她的影子。</p>
<p>再次相遇不知期已几何，唯有洲头烟花一万重。她在漫天的花火中若隐若现，披着夜色，把这观火人秒秒分分的时光都记在了日记本里。当时的情景已经模糊了，我只记得眼中全是炫丽的烟花，对于一桥，好像她只是在该出现的时候出现，自自然然。</p>
<p>就这样，两年，半烟半雨洲头桥边，我和她重了又逢，离了又别......</p>
<p>大三，偶然发现课本里夹了一张她的老照片，有点泛黄，应该是上个世纪70年代拍的，看着看着，竟然迷了一节课。晚些时候，一个人，带着心情，来到了桥上。感受着她的呼吸，感受着风拂过她的脸颊，她在颤抖，在抑制不住的颤动，我静默的体会着，那一瞬间，我懂了。那是心跳的节奏，是久逢知己的酣畅，是终得一人心的喜悦。这一刻，我眼中的湘江一桥，古朴，厚重而又伟大。她化作孤独，横越一个世纪的距离，呵护着每个往来的旅人；她优雅而美丽，绽放着桥梁的魅力。</p>
<p>四载匆匆，湘江一桥，那完美的双曲线拱桥，那完美得是奇迹的美，依然惊艳，而我，无奈岁月，只手道离别，即将离开这陪伴了我一个大学的一桥，不舍别离，又殇别离。</p>
<p>阅尽天涯离别苦，离人最是人间留不住。桥梁，湖大，湘江一桥，不忍别，别了盼相聚。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2016年及以前</category>
      </categories>
      <tags>
        <tag>生活感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>游沅江有感</title>
    <url>/posts/2017/HPBWTD.html</url>
    <content><![CDATA[<p>今天是2017年4月15日。</p>
<p>本周轮到我值夜班，今天早早的就起来了，也没有了平时的睡意。我记得睁开眼大约是8:30
分左右，懒了一会儿床，起来就9点了。本想着做一篇西安的攻略，可是想想，好像时间还蛮多，应该出去走走。在益阳的半年里，很多地方都已经去了，漫无目的在网上浏览者，在地图上惊鸿一瞥，发现沅江是个好地方。洗漱完，想做个攻略再走，但是担心时间不够，所以直接拎着包和相机就出门了。</p>
<span id="more"></span>
<p>到达车站之前，我都不知道车票是多少，后来一买票才知道，只需要10块。心里还是蛮高兴，走对了，应该不远，一天来来回回够了。</p>
<p>约3刻钟的样子，就到了沅江。初识的沅江给人印象并不是很好，车站很破，楼房全部散布着暮年的气息，慵懒的在街边立着。沅江的交通我最是不喜欢，公交不会报站，特别是在网上查不到公交的信息，对于我一个陌生人来讲，这是比较麻烦的事。</p>
<p>但沅江有她自己的魅力。每一块土地拥抱着湖泊，每一个湖泊躺在一块土地上。多水的沅江，尽是柔柔的美。这儿的人过得很惬意，面里总是带着欢快，在他们的身上看不到生活的压力，舒缓的节奏，那么自然。</p>
<p><strong>后记：</strong></p>
<p>这篇游记并未完成，但是却反应了才毕业不久的自己不甘工地的平淡生活，从时间缝里去拥抱世界的精神，这也为后来的辞职作下了铺垫。</p>
<p>同时，这种精神，都值得现在的自己学习：心有抱负，积极阳光。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2017年</category>
      </categories>
      <tags>
        <tag>散文</tag>
      </tags>
  </entry>
  <entry>
    <title>因为匆匆</title>
    <url>/posts/2017/3C2G7GH.html</url>
    <content><![CDATA[<p>又是一次天色渐晚，吃过晚饭，听着音乐，打发闲着的时间，只有在这一刻，我才感觉到，光阴是在身边流淌。工作的时候，时间逝得很快，快得都分不出来是时间超过了我们，还是我们越过了时间。</p>
<p>我想，大概是我们走得太快，时间也跟不上了。</p>
<span id="more"></span>
<p>走得太快，便错过了路上的风景。昨天出门没有看天气预报，便没有带伞，出了门，回家的时候，天突然下起了淅淅沥沥的小雨，淋着雨，一路跑了回来，换了身衣服，略有后悔，要是早一点回来，就不会淋湿了。今天回想起来，昨日的自己却是错了一场浪漫的雨。</p>
<p>从前的自己，很喜欢下雨。让雨落在头发上，打在湿了的衣服上，脚踩在路边的小水洼里，然后溅起一滩泥水，随性而为的放松，让人痴迷。现在因为匆匆的自己，下了雨，却没了感受的心，遗憾的错了雨的一厢情愿。</p>
<p>不知道这是不是很多人的感觉，当阳光透过窗子，照在你的桌子上，你用笔尖在阳光下写着承载着自己思想的文字，这一刻，世界是那么安静，一刻好似永恒。而现在，因为匆匆，已经有很长一段时间没有见过黄昏了。家里的玻璃，成了冰冷的窗户，窗帘，埋葬了如诗的生活。</p>
<p>庆幸自己偶然慢了下来，可以让思想驰骋去更广阔的世界。</p>
<p>听着舒缓的音乐，闭着眼睛，细细品味着每个音符的跳动，一切的烦恼和压力，随之消散，此时的声音，便是最好的天籁。走得慢了，也就走进心里去了。这让我想起了一个朋友曾经讲过的一句话，“真不敢相信自己是在西安旅游，感觉就是在家旁边逛了一个古镇”。是的，走心的生活，一行一亍，都是美好，空间里没了时间。</p>
<p>天快黑了，夜晚开始慢慢苏醒，天上稀稀落落的星慢慢探出头来，他们来到地球，是走得快还是慢呢？</p>
<figure>
<img data-src="http://a1.qpic.cn/psb?/V118G3dh0IatwX/9L6Ke8THGDn7r6fjRXzbOHSLv9*IpLvG.H2cJFj5*ks!/b/dDwBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=2wFYAgAAAAABELc!&amp;t=5&amp;tl=3&amp;su=0159330929&amp;tm=1566104400&amp;sce=0-12-12&amp;rf=2-9"
alt="图片" />
<figcaption aria-hidden="true">图片</figcaption>
</figure>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2017年</category>
      </categories>
      <tags>
        <tag>生活感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>向心而行</title>
    <url>/posts/2017/218KCWH.html</url>
    <content><![CDATA[<p>从益阳到武昌，再次踏上了去武汉的旅途，这是六月份第二次奔赴武汉。</p>
<span id="more"></span>
<p>清晰的记得6月1号，我瞒着所有人，包里塞着一套西装，就登上了去武汉的列车。这是工作以后买的第一张硬座，仿佛又回到了读书的时候，天南海北的人挤在一个车厢里，三连座的位置总会留一个屁股给陌生人，列车员说着麻利的顺口溜，宣传着自己的产品，一切那么的熟悉。车厢里的我，工作已经快一年了，但对于面试，依旧紧张和青涩。我心底是迷茫的，不知道面试自己的公司是什么样的，我要选择什么样的公司，我想，我只是为了证明，自己有实力可以进设计院。</p>
<p>在武汉呆了10多个小时，匆匆的去，匆匆的回，面试完之后，没有期待，暗暗告诉自己，这次你终于任性了一把，随性而为，释放了内心的想法，现在心愿已了，可以回去踏踏实实工作了。</p>
<p>现在又一次奔赴武汉，心情很平静，迈出这一步，我知道今后的生活会很艰辛。从今以后，得考虑柴米油盐这些问题，打的会心疼，吃肯德基会心疼，过节会心疼，再也没有足够的资金支撑自己旅游的愿望了。自己又将从一个小虾米开始奋斗，将职业生涯用橡皮擦擦掉，一切，又从头开始。</p>
<p>这样做，我不清楚究竟好或不好，但是我知道，一旦选择，将再无退路，今后不论如何艰辛，我也必须咬牙扛过去，选择了就不后悔，我愿用十倍的努力，弥补这一年的青春。</p>
<p>曾经看过一部电影，七月与安生。七月活成了安生，安生却成了七月。我想，我就那个七月，内心向往着自由豪放的生活，期待着激情似火的世界，爱好充满无限可能和挑战的生活，但是环境影响，我把它们都埋在了心底。</p>
<p>这应该就是自己选择更换工作的原因。寻着心的呼唤，努力走好每一步。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2017年</category>
      </categories>
      <tags>
        <tag>散文</tag>
      </tags>
  </entry>
  <entry>
    <title>一次思想的旅行</title>
    <url>/posts/2017/3T2T8EN.html</url>
    <content><![CDATA[<p>这个梦发生在今天下午，因为周日，下午无事，便睡了个饱觉，于是，诞生了一个神奇的梦，我称之为思想的旅行。</p>
<span id="more"></span>
<p>睡了一会儿，醒了，便起床去洗把脸，发现脸是麻木的，有一种不真实的感觉，不论怎么用水洗都是这样，瞬间觉得不对，反应过来，应该这是一个梦，我应该还没醒。然后就挣扎着起来，换了个睡觉的姿势，奋力直腰，最后终于起了，当洗脸的时候，脸还是麻木，我知道，这是又没起来…挣扎了很多次，每次都没能真正的醒，每次都在重复相同的事情，然后再挣扎着。渐渐的，没了起床的心思，睡熟了。</p>
<p>这次做了另一个梦，和朋友趁着周末，来到了伦敦。我们出现的地方是泰晤士河旁边，朋友说：“这条河好熟悉啊！”我立马回答了一句：“这是莱茵河”。</p>
<p>游着游着，朋友觉得有些困，便提前回去休息了，我趁着夕阳西下的时光，欣赏着两侧的风景。第一印象便是这儿有一座桥，没看到叫什么名字，是一座拱桥，拱座外面贴了灰色的瓷砖，瓷砖与瓷砖之间的缝隙刚刚好，错落有致，仔细看，每一块砖的砌筑，不多一寸，不偏一分，这才代表工匠的水平。还有一个印象是，这儿的景观布局也很精致，柳条垂落，不论从哪个角度看，都那么整齐，赏心悦目。</p>
<p>朋友有一个好友，叫做Toms ---
Timy,中间还有一个字，记不清了。在我给这个桥拍照的时候，他找到了我，然后还用中文和我交流，我当时想，至少得用英文问一下名字，然后脑袋就在搜索“请问怎么称呼”用英文怎么讲呢，思考无果，只得讲中文，有点尴尬。他给我讲，这条河叫做泰晤士河，然后领着我在旁边走了走。</p>
<p>这儿的建筑也是很精致，充满着历史感和独特的人文气息。每一栋房子，虽然有着浓浓的历史痕迹，但仔细一看，每一个细节，都那么吸引人，其中的工艺更是不得不让人佩服，我随手用手机量了下，每一块板的厚度都完全一样，让人觉得不可思议，让人震撼，让人佩服。</p>
<p>游着游着，天色渐晚，夕阳缓缓西下，此时另有一番风景，夕阳的光线很柔，逆光更是美到极致。难得的景致，我拿出手机，横着屏幕拍下了这美好的一瞬。</p>
<figure>
<img data-src="http://a2.qpic.cn/psb?/V118G3dh0IatwX/9GmnsmHxJnxtQhxBKNsGCGgnXgS6giAvXOoV5aOYfco!/b/dD0BAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=kAEAAZABAAEDIAU!&amp;tl=1&amp;su=0132749553&amp;tm=1566104400&amp;sce=0-12-12&amp;rf=2-9"
alt="图片来自网络" />
<figcaption aria-hidden="true">图片来自网络</figcaption>
</figure>
<p>（光和图片类似，但是当时太阳更低）</p>
<p>接下来的事情便是几经波折，回到酒店休息，结束了这美好的一天。</p>
<p>梦到这儿就结束了，醒来之后，一切历历在目，无比清晰，翻了下手机相册，略有失望。</p>
<p>我在思考，旅行，究竟是为了什么，答案应该是去一个美好的地方，放松自己的心灵，这个梦，让思想进行了一次旅行。</p>
<p>身在闹市，不为车马喧，我们自己的世界，应由自己来丰富。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2017年</category>
      </categories>
      <tags>
        <tag>生活感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>五分钟的世界</title>
    <url>/posts/2017/3Y49VDP.html</url>
    <content><![CDATA[<p>不久前，搬来了新的住处，离公司比较近，便喜欢在午饭之后，回家小憩。于是中午定了一个
13:45
的闹钟，但这个时间却是有点尴尬，上班的时候，如果运气好，楼下可以找到“小黄车”，那么就会准时到达公司，但如果不被眷顾，就只能跑着去了，生怕来不及，只有到达公司楼下的时候，忐忑的心才能放下。当然，被眷顾的概率极低，通常我都是在做跑步运动。</p>
<span id="more"></span>
<p>有时候，不禁好奇，这些人都是什么时候去上班的呢，为什么回来的时候那么多“小黄”，而走的时候却一辆也没了，难道他们都不用午休吗？我带着纳闷，保持着几乎每天跑步上班的节奏，“坚持”了快一个月，直到今天。</p>
<p>今天很惊喜，比闹钟早醒了5分钟，下楼之后，门口居然惊现一辆“小橙”，赶快扫码，心情瞬间大好。走了几步，左边一辆，右边还有一辆。心里有点莫名，今天发生了什么，居然还有这么多空车。因为早了5分钟，上班也不用急着赶，慢悠悠的踩着脚踏板，沐着阳光，把心灵放空虚，听着风语，思考今天的安排，编织着放假的精彩，不用狂野的奔跑，不用担心迟到，一切很惬意。而路上行人或匆匆，或焦虑，或笑逐言开，走着的有，小跑着的亦有，千姿百态，红尘人生，这好像就是从前的自己。</p>
<p>这种感觉甚是奇妙，他们是自己，又不是自己，站在他们的角度折射生活，站在自己的角度思考未来。仔细一琢磨，每个人都在自己的圈子忙碌着，这个圈子只有那么几个名字，只有那么几件东西，有的人，一直在这个圈子往返，直到生命消散，有的人，知道何处是远方，往返皆是精彩。</p>
<p>惊奇的发现，自己与所好奇的人的世界，只是隔了5分钟的距离。因为这5分钟，便是一册不一样的人生，两个迥异的世界。拥有它的人，从容而淡定，睿智而优雅，失去它的人，无奈和落寞。但即便是这么短的距离，我亦靠着偶然堪破。</p>
<p>这个事实让我醍醐灌顶，或许我们离所追求的人生也只有一个5分钟，走上巅峰，只是需要比现在多努力那么一点。</p>
<p>5分钟的差距，星星与星空的格局。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2017年</category>
      </categories>
      <tags>
        <tag>生活感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>老卓的礼物</title>
    <url>/posts/2017/05KG8X.html</url>
    <content><![CDATA[<p>一个来自银城益阳，一个则来自山城重庆；一个沉默寡言，一个却活泼开朗，50岁的电梯操作手老卓与24岁的技术员小甘于中交二航局益阳大桥项目部入职半年也相识了半年，性格迥异的二人谈笑间在旁人看来关系密切的很。春节前，二人约定在节后复工后互相送给对方一份新年礼物。</p>
<span id="more"></span>
<p>节后二人相遇几句嘘寒问暖后，均立马投身到了紧张的岗位工作中，并把玩笑似的约定抛在了脑后。小甘负责10号主塔虽已封顶，可下塔柱还有一些后期工作需完善，每天仍有许多施工人员在塔上作业。而老卓的主要工作便是通过操纵施工电梯，把包括甘明昔在内的建设者们安全送达目的地。</p>
<p>老卓言语不多，他的工作责任心也如此，如他人有意让其违规操作，也是不必多言。根据项目规定，益阳大桥施工电梯限载九人，硕大的“九”字贴在电梯狭小的空间内，是老卓始终的坚守。这天天色已晚，本想着站完最后一班岗就可以换班回宿舍休息，速去速回是最好了，小甘就带领着包括他在内的一行10人进入了电梯门。</p>
<p>“老卓，上去吧！”说完甘明昔已经关上了电梯门。</p>
<p>心存侥幸的一行人沉默了足有两分多钟，电梯依然不见启动。其实谁都知道这班电梯也许是开不了了，但有老卓的好友小甘在也许会不一样。众人期盼中小甘终于开了口：“老卓啊，你让大家早点做完早点下班，就多一个，不要紧的，走吧！”</p>
<p>友情在原则面前并无一丝作用-电梯仍无任何声响。小甘心中顿生不悦，正当他准备找老卓理论时，不擅言辞的老卓却挤出一句话来：“限载九人你们看不到吗？多一个人我都不会载你们上去，你们自己下去一个，等下我再跑一趟。”言语朴实又坚定，众人还未听完便开始商量着谁先下去，因为他们知道面对这种情况老卓自然是不会让步一寸的。</p>
<p>还未等大家商议出来，小甘自己打开电梯门走了出去。包括老卓在内，大家都认为小甘肯定是怒不可竭，要去告他老卓的状了。而众人也不愿意多猜测，还是赶紧上去做好手头的事情当作什么也没发生为上策。</p>
<p>事情就这样过去了，老卓后来的几天工作虽照常，但谁都看得出来是有心事。最后他鼓起勇气拿着自己从老家带来特产趁着下班时间敲开了小甘的房门：“这不是答应了过年来给你一份新年礼物吗？你瞧，我拿来了，那天的事情你知道我嘴笨......”</p>
<p>还没等老卓说完，小甘哭笑不得，“老卓，你并没有做错什么，错的是我咧！”</p>
<p>原来那天老卓说出口的话并没有让小甘生气，而是震惊了许久。面对着眼前的老卓，小甘继续补充到：“做人做事要有原则、有底线，施工安全更是如此，任何时候都不能动摇，感谢你通过这样的一句话教会我了这个道理，这个新年礼物来的比什么都要珍贵哩！”</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2017年</category>
      </categories>
      <tags>
        <tag>散文</tag>
      </tags>
  </entry>
  <entry>
    <title>三世</title>
    <url>/posts/2017/BPMA7E.html</url>
    <content><![CDATA[<p>期望有轮回，却一直在轮回。</p>
<span id="more"></span>
<p><strong>1 前世</strong></p>
<p>前世，他出生在偏僻的小山村。只有一条泥泞的小路，穿过小河，然后从这个村子旁边经过，在他的记忆中，这条路，承载了整个村子的故事，塞满了他的童年。村落中的人家，如果算上脚趾头，那就是屈指可数了，村子里也没什么文物之类的，上了年纪的，除了老人，就是屋顶一片片的青瓦了，还有在山里头老李家的牛。</p>
<p>他的年纪小，脑袋里放不住记忆，每天似乎过得很平淡，但也似乎很快乐，那个时候没有时间的概念，连年龄都是爸爸妈妈帮着保管。他每天有一个任务，就是把家里的小牛牵到草长得好的山坡上，让它饱饱的，好好的吃一顿，这头牛很挑剔，但是很喜欢和他在一起。有时候，他会想，这牛一点也不好养，草老了不吃，树叶也不吃，要是养只羊该多好，什么都吃，有时候也很喜欢，因为可以把它丢到山上，等到时间差不多了，就“哞～哞…”的学着叫几声，带着起伏，它就自己回来了。牛也很有脾气，一般不让人骑，他想到一个好法子，出门的时候，憋一泡尿，等走的时候撒在草地上，牛会吃得很开心，恨不得把泥土也吃进去，这时候，他的愿望就实现了。不过，快到家了，还是得下来，被人看到了回去肯定要挨一顿家长的狠揍。</p>
<p>就这样过了几年，村里迎来了第一台电视机，是黑白的，电视机很古老，调频没有遥控器，需要手去拧上面的按钮。跟着电视机一起到来的，是孙悟空，是腾云驾雾，是肝胆相照，是外面精彩的世界。每天晚上，是他最期待的时间，因为可以去电视的主人家那儿看电视。如果去得晚了，就倚在门边，从大人们之间的空隙去发现外面的故事。他觉得生命真是渺小，拍一部电视剧有那么多人死亡和受伤。</p>
<p>那时候的他，很认真，很单纯，没有人告诉他们电视里的真假，不过这都不打紧，因为它开始向往外面的世界了。大人告诉他，只要努力读书，就会一步步的走出去的。在村里读小学，在镇里念初中，在城里上高中，然后到市里读大学，他想不到然后要到哪儿去，要去干什么了。所以，他就一直走一直走，越走越远，越走越远，走过了一生。</p>
<p><strong>2 今生</strong>
今生，他穿越成一个毕业的小伙子。彷徨的在没有家的地方沉浮，好像是生于这个世界，但又融不进任何一个地方。他的第一份工作是在建设的前线。到公司报到之后，有一个为期七天的培训，这七天过得很充实，有讲座，有素质拓展，还有各种丰富的活动，他以为这便是工作。培训到最后一天，团委书记很怜惜的对他和新同事讲，你们要好好珍惜此时此刻，这可能将会是你们今后唯一一次参与这样的活动了。当时的他满怀着一腔热血，不怕苦，不怕难。</p>
<p>工作中的人，有的可爱，有的又是可恨，有的紧着小家，但却失了大家。工作环境的复杂，不是外部，而是人心。老张是施工队的负责人，在他的眼中，大多数时候只有利益。在需要别人的时候，卑躬屈膝，当找他帮忙时，便笑里藏刀，表面答应得好好的，可是转身就抛之脑后。这是最为可恶的行径了，忍不住让人感叹。老张时常在嗟叹，生活之不易，可是却忘了，大家的生活都是不易的，他只顾着自己了，从没想过，在人生的路上，相互扶持，是他的无奈呢，还是他本无心。</p>
<p>他，耐不了人与人之间的这些不真诚，便悄悄地决定走了，每天做着浪费生命的毫无意义的人际交往，这本也不是他期待的生活。其他人都说，搞工程四海为家，而他却觉得那个只是宿舍。换了新工作，他看到了希望，同时又出现了新的绝望。现在住的地方不叫宿舍了，但也不叫家，对于他来说那只是落脚点。他时常一个人发着呆，不胜感慨，诺大的城市，容得下他的，只有几个平米。没有经历过，便都是向往，以前的他，只知隔行如隔山，可是却不懂得，每座山中都有虎。生活的无奈，已经不是无病呻吟的句子，而是赤裸裸的现实。他也不知剩下的光阴是或喜，只是一步一步，走下去。</p>
<p><strong>3 来世</strong> 若是有来世，他希望，一切都好。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2017年</category>
      </categories>
      <tags>
        <tag>散文</tag>
      </tags>
  </entry>
  <entry>
    <title>想念挚友</title>
    <url>/posts/2017/1AJP2Y0.html</url>
    <content><![CDATA[<p>三毛说：“最好的爱情就是相处不累”。我觉得这句话也可以用来形容友谊，最好的友情也便是相处不累。</p>
<span id="more"></span>
<p>去年夏末的时候，我和他相识。他初给我的印象是很阳光，脸上的轮廓略显刚毅，戴着一副黑框眼镜，又显得很斯文。他说话时带着一点甘肃的口音，总是把”yun”读作“yong”，当时听到这个口音的时候，很是亲切，大约是大学有一个好友，也是甘肃的缘故吧。</p>
<p>和他第一次见面是在施工现场的办公室，我不认识他，他也不认识我，虽然见了面，好像也没打招呼。就这样呆了一两个月，慢慢地变得熟悉，熟悉彼此的性格，熟悉彼此的价值观，熟悉对方有没有女朋友，然后就成为了好朋友。</p>
<p>有句话说得很对，只有当失去了，你才会懂得珍惜。我离开之后，才发现那段青葱的岁月，如此值得怀念。自换了工作已有两月余，面对新环境，我战战兢兢的生活和工作着，一个人，一座城，默默地打拼。每天拼命的学习，认识了另外的人，做另外的事，一切，都很累。静下来的时候，总会很想念以前的日子。</p>
<p>我和他的床是对着的，中间隔了一张桌子，是少强留下的，后来又有一张，好像是李伟的。我俩把它们拼在了一起，我在上面放了个简易书架，还养了一盆“小家碧玉”。有时候我会给它拍拍照，他会浇浇水，虽然是我买的，好像更是他的宝贝。</p>
<p>夏天的时候，外面很热，他去买水的时候，总会捎上我的一份，有时候桌上的纸巾用完了，他会多拿出一卷，一卷放在他那儿，一卷放在我这边。上次出去把妹，他还和我商量着暗号，要是钱不够了，打个电话给他，他立马给我想办法，在电话里就问，拆迁怎么样了，拆了一栋就是一千，两栋就是两千，免得被姑娘听见自己借钱，很窘迫，我笑他，我这是举朋友之力追妹子啊。我知道，要是我真这样给他打电话，他肯定会马上帮我解决的。我们的交情不需要在意金钱，只是彼此肝胆相照。</p>
<p>大学就很喜欢吃鱼，有一次，拽着他去了工艺美大旁边吃了那儿的纸包鱼，很鲜嫩，这是第一次吃纸包鱼，后来在其他地方也吃过，可是没那味道，好像从那时候起，他也迷上吃鱼了。有一天，咱俩就约着，把益阳的鱼尝个遍。为了吃一次鱼，我俩先是转了一趟公交，然后打了快半个小时的车，才到城院的小吃街那边，鱼店很多，觅着一家烤鱼店就窜进去了，那儿的鱼也很好吃。</p>
<p>已经离开益阳有一段时间了，有一天晚上，微信振动，是他发来的消息，有一个定位，然后来了句想你了。初听这话，以为他是开玩笑的，居然写得那么肉麻，然后点开定位，突然发现，那是我们第一次吃鱼的位置，他在那边喝酒，应该是喝了有几分了，此时，虽然和他隔了一个省的距离，但仍能感受到那如浓酒般的思愁。我也非常怀念彼此共同度过的岁月，真挚而又轻松，快乐而又写意。人生又哪能轻易找到几个这样的知心朋友呢？</p>
<p>等他来到我的地方，等我去到他的城市，等和他在远方遇见，不醉不归。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2017年</category>
      </categories>
      <tags>
        <tag>散文</tag>
      </tags>
  </entry>
  <entry>
    <title>无邪</title>
    <url>/posts/2017/331FR19.html</url>
    <content><![CDATA[<figure>
<img data-src="http://a3.qpic.cn/psb?/V118G3dh0IatwX/RFVyULh.H0c9rl6Ilz*0ceqAN62hc5Lww1yxWjGIswk!/b/dI4BAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=wAOAAgAAAAAREGY!&amp;t=5&amp;tl=3&amp;su=092052705&amp;tm=1566104400&amp;sce=0-12-12&amp;rf=2-9"
alt="图片" />
<figcaption aria-hidden="true">图片</figcaption>
</figure>
<p>我痴痴的，寻寻觅觅，那扰人心弦的美。那种美，是一日不见，如三秋兮的思念，是力拔山兮气盖世的豪迈，是谈笑间，樯橹灰飞烟灭的壮阔，是一种，可以让心铭记的画面。</p>
<span id="more"></span>
<p>生命中，见过很多的美，但总是昙花一现，让人抓不住，留不下，又念不起。夕阳西下时分，一对老人相互依偎着，身后的影子，随着斜阳，拖得老长老长，却始终形影不离，这是岁月的美；自习室里，女孩安静的写着作业，风乱了发，男孩瞧见了，便宠溺的将女孩的发丝揽回耳畔，这是青春的美；三两岁的小孩，得到一颗糖就可以开心很久，笑的时候无拘无束，哭的时候撕心裂肺，这是天真的美.…..美无形无相，它可以是感动，可以是伤情，可以是一幅画，也可以是一阵风。</p>
<p>以前，见到美的物或人，便是心旷神怡，然后感叹一句“好美啊”，随后就丢在了记忆的角落里。闲下来的时候，就思考着，究竟什么是美？周末的时候，云儿在天上睡着了，丝丝缕缕阳光便遛了下来，于是决定到昙华林走走。很幸运，遇到了两份让人难忘的美好，瞬间明白了美的真谛。</p>
<p>路过一个小店门前，一只灰色的小猫正匍在地上，头快耷拉到了地板，心情很低落，一点也不搭理路过的人。一位女生从店里准备离开，看到了它，便蹲下身，用手抚摸着猫的脑袋，宽慰这只小猫，似乎感受到了猫的心情，她的神情带着淡淡的忧伤。过了一会儿，小猫扭过头来，心情好了很多，女生收回手，小猫静静地看着她，她也温柔看着小猫，最后，小猫耐不住羞，喵了一声，把头撇了过去，女孩忍俊不禁，扑哧一下笑出来了声。这弯笑容，穿过午后的空气，涤荡在我的心头，至今萦绕在脑海中，不曾消散。我想，这便是一份美，一份善良的美。</p>
<p>女孩后来和同伴消失在了人海，我缓缓的踏着步子，认真的呼吸着每一口空气，收拾着刚刚的好心情，惬意地静静地享受着此刻的时光。走着走着，一家小店吸引了我，不是因为它的名字，而是店的门边栓了一直可爱的小狗。一身金黄色的卷卷的毛，搭着深灰色的流行款式，两只炯炯有神的眼眸，好奇的看着往来的行人，也不知它心里在想着些什么。这时，一个小孩看到了小狗，她手里拎着一小袋零食，准备和小狗分享。可是离得远，于是她想踏上台阶再递给小狗。虽然台阶不高，但对于才学会走路的她来说，很有难度，只能用两只手，平衡摇摇晃晃的身体。小狗见着了，露出期待，小女孩上了两级阶梯，可以够着了，但她想走到平坦的地方，专注的迈着最后一步。这时，小狗的脑袋有点转不动，呆呆的扭过头看着女孩，思考着，她为什么还不停下呢？这画面，虽然简简单单的，却觉得是另一番说不出的美。</p>
<figure>
<img data-src="http://a1.qpic.cn/psb?/V118G3dh0IatwX/sTp3n6IDydjCLq8BEElqDouWpFBLDU2ciN4Xe7Vj7Yc!/b/dOAAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=wAOAAgAAAAAREGY!&amp;t=5&amp;tl=3&amp;su=059248945&amp;tm=1566104400&amp;sce=0-12-12&amp;rf=2-9"
alt="图片" />
<figcaption aria-hidden="true">图片</figcaption>
</figure>
<p>女生的眼中，只有猫的失落，她便留下来宽慰；女孩的世界，有台阶和小狗，她便先忘了小狗，小心仔细地踏着步子。美，大约就是如此，简单而专注，不参杂丝毫的杂质，天真无邪。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2017年</category>
      </categories>
      <tags>
        <tag>生活感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>你好！2020</title>
    <url>/posts/2019/3MYBQJA.html</url>
    <content><![CDATA[<p><img data-src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1577126718013&amp;di=7764408ec3187f9f8117fcc0184d55aa&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.e4221.com%2Fuploads%2Fallimg%2F1912%2F2-19121G34055162.jpg"
alt="你好，2020" /> ## 你好，新年；你好，2020</p>
<span id="more"></span>
<p>新年的钟声已经敲响</p>
<p>时光的车轮又留下一道深深的印痕</p>
<p>伴随着冬日里温暖的阳光</p>
<p>2020年如约而至</p>
<hr />
<p>一元开始，万象呈新</p>
<p>元旦</p>
<p>新年的第一天</p>
<p>在万声的祝福中正一步一步地走着</p>
<p>走向我们</p>
<hr />
<p>新年</p>
<p>有她美好的样子</p>
<p>有她美好的憧憬</p>
<hr />
<p>新年</p>
<p>就像春天一样</p>
<p>万物复苏之前</p>
<p>让我们重新开始</p>
<hr />
<p>新年</p>
<p>就像小孩一样</p>
<p>无忧无虑玩耍</p>
<p>让我们重回最初</p>
<hr />
<p>新年</p>
<p>就像老人一样</p>
<p>如期而至的到来</p>
<p>让我们重新感受</p>
<hr />
<p>新年</p>
<p>就是这么一个喜庆的日子</p>
<p>就是这么一个特殊的日子</p>
<p>我将所有美好的祝福与心愿</p>
<p>写在2020年的扉页</p>
<hr />
<p>让我们在新的一年里</p>
<p>把祝福传给祖国</p>
<p>愿祖国更加繁荣昌盛</p>
<hr />
<p>让我们在新的一年里</p>
<p>把祝福传给亲人</p>
<p>祝愿亲人们身体安康</p>
<p>岁岁平安</p>
<hr />
<p>让我们在新的一年里</p>
<p>把祝福传遍所有的朋友</p>
<p>祝愿朋友们</p>
<p>不忘初心，各自安好</p>
<hr />
<p>让我们在新的一年里</p>
<p>让自己更快乐</p>
<p>用最好的状态</p>
<p>迎接新年的到来</p>
<hr />
<p>新的一年</p>
<p>新的开始</p>
<p>新的祝福</p>
<p>新的起点</p>
<hr />
<p>让我们拥抱阳光</p>
<p>开启幸福的2020</p>
<hr />
<p>祝大家元旦快乐，新年快乐</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2019年</category>
      </categories>
      <tags>
        <tag>散文</tag>
      </tags>
  </entry>
  <entry>
    <title>缘起西塘</title>
    <url>/posts/2017/3DKZM8Z.html</url>
    <content><![CDATA[<p><img data-src="http://a2.qpic.cn/psb?/V118G3dh0IatwX/dLmA1CQbAy8TIWYz5sckfgkAwaXbKqXQX0zUOWOzK1A!/b/dIUBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=wAOAAgAAAAAREGY!&amp;t=5&amp;tl=3&amp;su=0188921169&amp;tm=1566104400&amp;sce=0-12-12&amp;rf=2-9"
alt="图片" />3年前，初听到西塘这个名字的时候，便烙在了灵魂里，虽从未与她邂逅，但从那个时候开始，就已经喜欢上了西塘。印象中的西塘，应是庭院深深深几许的宁静，是夜船吹笛雨潇潇的惆怅，是巧笑倩兮，美目盼兮的温婉。三年间，去了很多的古镇，只为寻找心中的西塘。到过最大的古镇便是乌镇了，乌镇很美，但是却牵不起一丝记忆的涟漪，自那以后，每看一个古镇，便失望一分，天下的古镇好像都是那般，禁不住深情。</p>
<span id="more"></span>
<p>这个国庆，因为行程改到了上海，便顺道去了西塘，对于古镇，已经近乎失望成绝望，我想，三年前因西塘两字缘起古镇，此刻便从西塘结束吧。尽管烟雨朦胧，风细柳斜，但已心观赏，幸得朋友的陪伴和宽慰，也就不那么在意了。</p>
<p>票是请青旅老板买的，便宜了很多，在老板的带领下，我们走进了西塘，步入古巷的那一瞬间，仿佛空间穿过了时间，回到了千年前的江南。小桥流水人家，古道白墙灰瓦，夕阳西下，佳人腮凝桃花，这才是心中的那个古镇，以前对西塘的误会瞬间释然了，一直误会了西塘这个美丽的地方，误会了西塘这么美的名字。</p>
<p>西塘的美，不似乌镇的雕栏画栋，是一种天然去修饰的朴素。西塘的美，一个人赏，两个人赏，或者一群人，不管你是南方，还是来自北方，都是适宜的。西塘，完全满足了我对古镇的幻想，静若处子，动若脱兔。</p>
<p>落住的的青旅很别致，入口处散落着很多盆栽，高的矮的，有的开着小花，有的松松懒懒的扶在墙上，好像是老板疏于打理，又像是盆栽自己任性，显得那么自由和轻松。推开暗红的大门，便是这间店的大厅，大厅右边一角是登记入住的柜台，不过更像是一个吧台，啤酒，白酒，红酒俱全，精致的玻璃杯，还有几支高脚凳，让人有一种坐上去，和朋友一醉方休，向老板谈天说地的冲动。挨着吧台不远处，摆放着一套茶具，如果喜欢，以茶会友，亦有一样风情。扭过头来，墙上挂着大大的屏幕，放着王者荣耀的比赛，惊险的对战，激情的解说，玩或不玩，都会立足几分钟，细细的感受那份青春的激情。还有一角，立着两个书柜，上面放着当下盛销的书籍。看到这个布局，让人惊讶和兴奋，相互矛盾的东西，在这儿自然的融为一体了。在这家深藏巷子里的店里，你可以自由自在的放纵自己，也可以安静的捧着书卷，心是怎样，就活成怎样，真是一种别样的享受。</p>
<p>西塘的昼，小桥流水，轻舟翩翩，宛如散落在人间的桃源，又如豆蔻的少女，羞红了脸。而夜晚的西塘，性感而奔放，最著名的便是酒吧一条街，各富特色的酒吧挤满了一巷子。踏上这条街的瞬间，一股活力四射的狂野铺面而来，街道两侧，灯光妖娆，烟雾缭绕，音乐在巷子里肆意的宣泄，你可以喝着啤酒，装成失意的少年，搭讪身边的美女，你可以站在舞台上，酣畅的摇摆，你也可以染着爆炸头，穿着拖鞋，在大厅里嚎叫。此时此刻，你便是自己心中的，心底深处的自己。这条街会在晚上十一点准时关门，是想告诉往来的旅人，疯狂之后，及时回家。这便是这条街的魅力。</p>
<p>绕过酒吧一条街，世界又一下子安静了，灯笼红彤彤的，静静的挂在长廊上，很多精致的小店傍水而卧，可以打尖，可以住店。有家店叫做“奶奶家客栈”，以前这位奶奶常被邻居欺负，于是倾尽毕生积蓄，开了这家店，有了生意，生活慢慢变好了，也少了人欺负。还有一家店叫做“西塘记忆”，店里面人很多，但一点也不喧闹，大家静静的听着歌，暖暖的感受着此刻宁静的心情。还有很多店，很多的名字，五姑娘客栈，猫的魔法城堡，声声慢……每一个名字，都有一个让人感动故事。此时，你可以觅一处石凳，静静的坐着，慢慢的品味西塘的夜，让时光随着灯光，留在西塘。</p>
<p>西塘，宁静而淡雅，美好得似一幅泼墨的山水画，舒展在江南的烟雨里。她用一个名字，便醉了一世游人。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2017年</category>
      </categories>
      <tags>
        <tag>生活感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>个人经验总结</title>
    <url>/posts/2020/3905HA6.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容">
  <script id="hbeData" type="hbeData" data-hmacdigest="6b3ffaac8718c1855fbb56cb87344fcd14cc59f79329772dedbdedb3fd8e51a8">0813600775e6fdeda6d3c9905e8745039ee48aad99a9c510ed2d1061115ee38ad780143ed5fe4bd81954c497d5c6be4ce0dbd6513b052c0698de7293571f26db4c96d49e425c0579ba0837091e0bdf03e5bcf75548b7d4b4698ab3bc4aa56f976aae1b07f4a65bffe8a49a6ea232292dfa5ec0c4f8a0ea0a7188b1888550dc356b41854e3ccfee0f56b75b3e97f2342f6468af738a8f69d026d2a72b21d26eff28a2f8035bab83bdbca1175c37fd99b7776a86eabf31aa62ac69ee6da834e9902e9f50c4d3fbaa684854e6ac118d147a0f2c069934cf02b8ba043878149ae5879c4989c9834a783688268ca9e7585cd4b03aa80e159c35b2e767b9c2a63e56f116df42741adaa5fd7e5d1a88e1aba3cc21ba0329a959905b39fb17aa206e2dd9a7092cc860070d8bb095594e597c25f58baa46a92f97cc8b86ceb57372081358bf3c4a02194e2271fc5e6fc4b6de7e1bbfb64356fe0ada9984f4fd5328de01ce289a20f3b7812beff1c50ce7c1b8675a1c6d7b469cdadeaf3c46e2817351feaac585cba255443cea6fa3677baefb4c0fe11c6a7808a5d99503ae2f4e23889e41c2fb5fb9d8bee7c2a767961f32a02939cf9eb15a15a7dce9f15e552017de0799</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">当前文档已加密，请输入密码查看</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Essay</category>
        <category>2020年</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>静夜随笔</title>
    <url>/posts/2020/2RT0R7Q.html</url>
    <content><![CDATA[<p>今夜，雨又清清凉凉地落了下来。我躺在阳台上的椅子上，全身空灵，用每一颗细胞去细细地感受着这雨中的世界。</p>
<span id="more"></span>
<p>抬头，目光从布满铁栏杆的阳台穿过，直抵那无边无际的天空，灵魂随之出窍，在雨的夜空里自由地翱翔，在电闪雷鸣的乌云里随意翻腾，深深吸一口，湿润的空气里，还有浅浅的超脱味道。</p>
<p>多么自由的气息啊，无拘无束，无因无果，潇潇洒洒，仿佛又回到了曾经那个仗剑天涯的少年状态。</p>
<p>这份感受好久都没有过了，记忆中似曾相似的感觉，不知不觉已经过去了一年多。</p>
<p>此刻，突然惊醒，自己正慢慢地陷入滚滚红尘里，迷醉在忙忙碌碌地的“生活”里。我生活的影子，越来越像剧本那样，规规矩矩，没有期待，也没有回忆，也成了大家喜闻乐见的活在当下。</p>
<p>简单的生活，只用肉体就能很好地生活了，我渐渐地，悄无声息地将内心给尘封在角落，不再让它去参与生活，不再去感觉春夏秋冬，不再去感受阴晴雨雪。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2020年</category>
      </categories>
      <tags>
        <tag>散文</tag>
      </tags>
  </entry>
  <entry>
    <title>孙少安的人格魅力</title>
    <url>/posts/2020/QQM15G.html</url>
    <content><![CDATA[<p>合上《平凡的世界》，书中的一幕幕仍在脑海中回荡。</p>
<span id="more"></span>
<p>故事发生在陕西北部，旧时代的西北地区，荒蛮的贫瘠缓缓蔓延在每一寸广袤的土地上，贫穷，给无数的普通人民灌溉起生活的磨难。而这份厌人的磨难下，也生长起许多鲜活动人的生命。每一个平凡的人，都得为自己存在的世界而战斗,看似平静的世界在普通民众的生活里不断的掀起惊涛骇浪。这种大时代的贫穷，让人们负重前行，绽放出极致而纯净的美好品德。</p>
<h2 id="责任担当">责任担当</h2>
<p>六岁之前，小少安的生活虽然贫穷，但是充满着无限的欢乐。春天，当桃花盛开时，他和润叶一起到阳土坡上刨刚刚发芽的“蛮蛮草”根；夏天，一入三伏，他和村里的小娃娃便成天泡在东拉河里耍水；秋天，他又和一群小孩子去野外找吃的，常常把肚皮撑得饱饱的；而冬天，他又去寻找打碎的瓷器片，作为自己的玩具。</p>
<p>一年年过去，快乐的时光在六岁的时候突然没了，小少安开始慢慢承担起家庭的责任。他父亲给他起了一把小镢头，然后还给他盘了一根小绳，让他和他一起去砍柴，分担家里的劳动。</p>
<p>随着自己年龄的长大，这一天终是到来了，他也知道，自己家家穷业薄，就父亲一人拉扯一家子，很不容易，便每天为家里干一些活。</p>
<p>在他读小学期间，成绩一直很优异，升入高小的考试中，他位列全公社第一，可是上完两年的高小后，他家再也供不上他上中学了。他主动向父亲提出，要回家劳动。然后他说：“我想进一回初中的考场，我想证明，我不上中学，不是因为我考不上”。</p>
<p>当我读到这一部分时，那个场景仿佛活了过来般，我变成了孙少安，说着这热血激昂的话，我又变成了孙少安的父亲，心中无限愧疚，却又无能为力。</p>
<p>我有些哽咽，少安为了这个家，他牺牲得太多了。长兄为父，身为长子，他自然而然的接受和担负着家庭的责任，为了这个光景“一烂包”家庭，为了弟弟和妹妹能够走得更远，可以上中学，上大学，他只能选择将自己的骄傲和志气埋藏在心底，从此在农村踏踏实实劳动，帮着父亲，维持着这个风雨飘摇的家庭，仿佛一叶扁舟，在那个惨烈而贫穷的年代里，摇曳前行。</p>
<h2 id="吃苦耐劳">吃苦耐劳</h2>
<p>书中有一段是这样说的：”由于他的精明强悍和可怕的吃苦精神，在十八岁那年，一队的队员就一致推选他当了队长“。我们可以想象，他真正参加劳动的时候，是
13 岁，才劳动 5
年，就能在一群几十岁的老庄稼汉中间，获得认可，那他吃的苦，到了多么可怕的程度。</p>
<p>他的吃苦耐劳，除了在队里身先士卒外，还表现在对家里的事的操心上面。他要趁队里人休息的时候，经营自留地，种上夏土豆、西红柿、黄瓜，将来卖零钱用。队里、家里完了，还要帮一个人种地的姐姐，一年到头，忙里忙外，真是辛苦。</p>
<p>孙少安为改变生活，到县城拉砖的那一幕，也让我记忆犹新。他住的地方是一个没门没窗的烂窑洞，还不如一个狗窝。天不明的时候，他就开始去拉砖。在上坡的时候，他就使出浑身的劲拼命拉车，两只手都快要趴在地上了；牲口和他都大汗淋漓，气喘得像两只风箱。</p>
<p>一个男人为了家庭，默默受苦受累的精神让我敬佩不已。</p>
<p>孙少安吃的苦太多太多了，但是从字里行间里，我们却找不到他身在苦中而畏苦的描写，他的形象永远像一头勤劳踏实的老牛，一步一步地，稳健地耕耘着他那份土地。</p>
<h2 id="勇于革新">勇于革新</h2>
<p>年轻人身上，总不缺少激情。但是孙少安身上，不仅有激情，还有改革创新的智慧和勇气。</p>
<p>为什么这样说呢？</p>
<p>十八岁成为双水村最年轻最有能力的生产队队长，生产一队在他的带领下，生产量年年稳居第一。孙少安在拉砖的时候，他留意到当时到处在搞建设，砖瓦是紧缺材料，因此他拿着准备置办新窑洞的钱，开办了一个砖窑。而当乡公社砖厂面临倒闭时，他深思熟虑后，毅然承包过来，大刀阔斧的改革后，终于转亏为盈，事业更上一层楼。</p>
<p>他从小生活在农村，小学毕业，发家之前到过最远的地方就是当地的县城，而在这样环境中，它却干了一件又一件大事。我想，这就是因为他身上有一种其他农民所没有的品质，持续思考，并付诸勇气和实践，最后才能冲破环境的约束，走向成功。</p>
<h2 id="善良仁爱">善良仁爱</h2>
<p>他很早熟，上面我们也提到，本来学习成绩很好的他，“不用父亲说，也知道家中供不起，不能再读书了”，他知道，他和父亲两个人劳动，一定要把少平和兰香的书供成”，这时，他才十三岁。</p>
<p>单是想想，就觉得不可思议，13
岁的小孩主动做出牺牲。归根到底，我认为这是一种心灵的仁爱，对父亲，对弟妹，对整个家庭。</p>
<p>书中例子很多。但最好的一个，是看着乡亲们没地方赚钱买化肥，就给大家提供工作。不幸砖厂倒闭，付不起工钱，被村民们逼迫要钱，他一边承担着压力，一边想着怎么才能付给乡亲们，让他们有钱买化肥。</p>
<p>后来幸运砖厂重开，当时逼迫要钱的人又来找工作，“秀莲（妻子）在感情上转不过弯，坚决不同意......但少安是个软心肠，他知道这些要来干活的村民，实在是没有办法才又求他。他不能见死不救”。他很善良，也不计较。</p>
<h2 id="他平凡的地方">他平凡的地方</h2>
<p>当然，他到底还是一个平凡的人。他身上有许多缺点，也不是说，有缺点不好。相反，孙少安的缺点，让这个平凡的人更真实，也更可爱，更加成为我们日常生活中能经常遇到的人。或者，他的这些缺点，就在我们身上存在，本来就是平凡的人难以避免的缺点。</p>
<p>孙少安面对爱情拿不起、放不下，畏惧挑战，不算好男儿。读孙少安的故事，最憋屈的就是他和田润叶的爱情了。</p>
<p>他和润叶青梅竹马一起长大，由于家庭条件限制，他初中后没去上高中。田润叶高中毕业在县城当了小学老师。他在双水村当一队队长。他们经常联系。田润叶喜欢孙少安，孙少安也喜欢田润叶。</p>
<p>田润叶几次叫人捎信，叫他来商良大事，他都假装不明白。田润叶直接写信“少安哥，我愿意一辈子和你好”。</p>
<p>他就站在马路上，呆住了！田润叶不见他回复，又来找他。他却疯狂而贪婪地干一天活，不见面。田润叶没办法坐汽车回去了，他却嘴里喃喃地说“对不起你，润叶，我对不起你”。</p>
<p>人家这么主动，他却唯唯诺诺，一点不像个大男人，要是我，克服千难万难也要接受了。他却没有，为了逃避，干脆到外地找了个人当老婆。</p>
<p>不顾一切的爱情，那是理想主义者，是超人，是小说家写精彩的情节来骗人的，少安终究是平凡的人，我们也终究是平凡的人。我们不想看到这样的结果，但这就是平凡人的世界。</p>
<h2 id="总结">总结</h2>
<p>读《平凡的世界》，自己仿佛身临其境般，真真切切地地体会到了 70
年代时，农村的贫苦生活，也让我感受到人性的美好和纯真。书中有角色很多，很多人过得很苦，但是不论环境怎么样，他们和孙少安一样，都保持着自己善良仁爱，热爱劳动，爱护家庭，友爱邻居。</p>
<p>作为一个平凡的人，读平凡的故事更容易引起共鸣，如果将心灵鸡汤比作快餐，那《平凡的世界》就像烹饪精致的美食，让人念念不忘。他带给我的是一种信念，一种在平凡的生活坚持下去，脚踏实地，努力拼搏的信念。</p>
<p>最后，也希望大家将《平凡世界》中的艰苦奋斗精神融化在自己的信念里，踏踏实实，一步步走出自己的天涯。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2020年</category>
      </categories>
      <tags>
        <tag>散文</tag>
      </tags>
  </entry>
  <entry>
    <title>浮沉喧嚣不惊觉，一朝醒来入凡心</title>
    <url>/posts/2023/1N11HYC.html</url>
    <content><![CDATA[<p>很长一段时间没有提笔了，今日突然心有所感，借此机会便将脑中那飘渺的灵感记录下来，摘一段时光，以供未来思忆。</p>
<span id="more"></span>
<p>新冠疫情终于渐渐淡化，笼罩在心头的无尽的阴霾也慢慢散去，这个周末，春光正好，于是和老婆小孩一起，到东湖赏梅散心。</p>
<p>我们是开车去的，快到东湖入口时，便已经堵着走不动了，我便留意起从旁边经过的行人，他们之中有的是情侣，有的是一家人，有的是大学生，三五成群，或是步行，或是骑着自行车，有说有笑，朝着东湖前行。</p>
<p>我面无表情地坐在车里，感受着他们的喜悦，脑海深处仿佛有一股躁动正在挣脱束缚，想要喷涌而出。我循着这似曾相识的场景渐渐回忆，霎那间，仿佛大江决堤，山崩地裂，那股躁动终于奔腾而出，熟悉的感觉重回身体，我心中突然明悟了：曾经的自己也和他们一样，生命在热烈地绽放，曾几何时，我却丢掉了它们。</p>
<p>以前，自己也和他们一样，喜欢用脚丈量大地，喜欢微风轻拂面颊，喜欢享受旅途风景，喜欢用真诚去体悟生命。</p>
<p>曾经的自己，可以一念起，横空数千公里，南下丽江赏秋雪；可以心意动，恕爬十几小时，登顶峨嵋观云海；可以兴致至，跨越千万山水，西行茶卡照天镜。</p>
<p>然而，随着新冠的出现，连续几年的抗疫，再加 2022
年底防疫的彻底放开，全家感染，自己渐渐疲于奔命，迷失在了忙忙碌碌地的生活里，虽然每天依然吃饭喝水、上班下班、买菜做饭，但总感觉少了些什么。直到今天，我突然明悟过来，是少了一缕光，一缕绽放生命的光。</p>
<p>真是浮沉喧嚣不惊觉，一朝醒来入凡心，好在重拾初心志犹在，上揽苍穹下关月。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2023年</category>
      </categories>
      <tags>
        <tag>散文</tag>
        <tag>心有所感</tag>
      </tags>
  </entry>
  <entry>
    <title>两个人的上海</title>
    <url>/posts/2017/3B8ZFDY.html</url>
    <content><![CDATA[<blockquote>
<p>本文仅作纪念</p>
</blockquote>
<p>有一种旅行，不为跋涉千里的向往，只为漫无目的的闲逛，不为人山人海的名胜，只为怡然自乐的街景。或走，或停，都是美丽的心情，这就是我喜欢的旅行。</p>
<span id="more"></span>
<p>国庆之前，计划着去黄山，然后就问同行的伙伴的意愿，她是深圳的，祖国的南方了，我问她，咱们先去合肥，然后去黄山吧，她想都没想，就说：“好”，她当时都不知道合肥会有多远，她可能也不是很喜欢爬山，但就是那么干脆的答应了，我想，她也喜欢这样的旅行，不是走路，而是走心。后来，黄山的票没了，便改了行程，去了上海。</p>
<p>到一个地方，总会想去看看最出名的学校，所以，我们的第一站，就是交大。步入交大，一种学府的厚重气息瞬间扑面而来，里面“康白渡式”的建筑风格处处透露着学府的严谨，散发着求知的精神，虽然它历史源远，但是又让人觉着亲切。只是，我和她对这个没一点研究，就是觉得想去看看交大，即使去看一眼校门，即使留下一个脚印在那片土地上，也是满足的。进了校园以后，她就是觉得好看，我也不问，问了怕她形容不出来，问了怕坏了景致，而我就是乱按一通快门，因为觉得每个角度，都是一幅画，直到后来，她惊讶的说，这是体育馆，你也拍？我就拍得没那么放肆了。现在想想，我当时脑袋应该是短路了，我怎么不拍啊，又不是像湖大，旁边还有一个厕所。不知道她当时为什么惊讶，难道是和我一样，想到了湖大的体育馆？</p>
<p>就这样，两个人，四个脚印，从交大的一头到了另一头。现在的记忆，大部分已经落在了照片里，剩下的，只是一段蜿蜒的路，两个背着包的身影，还有那段静谧的时光。
我和她去的第二个地方，算得上是偶遇吧。乘地铁到人民路站下车，她问我，要怎么走，我说，我也不清楚，那随便选一个吧，她欣然接受了，彼此都不在乎景点在哪儿，因为觉得行过的地方，就是最舒适的风景。出乎意料，我们的选择是一份惊喜，那个出口记录着大上海曾经的故事，拉黄包车的师傅，卖栀子花的小姑娘，还有很多，记不住了…让人如痴如醉。经过一个民国时期的火车站台时，她带着好奇，天真的看着泛着光晕的穹顶，那画面让人感动，我静静地站着，呼吸缓缓的，生怕残了那幅唯美的画，她的景，是那些光，而我的景，是她和光。</p>
<p>穿过人民广场的时候，阳光还是浅浅的，斜着透过大厦，铺到地面，给人干净清新的感觉，看一眼，就着迷了，同行的她瞬间被感染，脚步无拘无束，时而欢快，时而袅袅，仿佛误入了仙境的公主，剩下的只有快乐。我端着相机，她就负责把快乐放在风景里。两个人，玩着玩着便忘了时间，忘了下一站是哪儿，等惊醒的时候，两人会心一笑，背着包，又消失在人海。
后面还去了很多地方，</p>
<p>到了外滩，看了万国建筑，还有东方明珠塔。每个景点都游得很浅，但我们不在乎，她饿了，就陪着她去吃饭，我想看夜景，她便耐心的同行，这已经就是旅行了。</p>
<p>国庆的上海，风景和人各占了一半，而我们眼中的上海，就只有两个人。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2017年</category>
      </categories>
      <tags>
        <tag>散文</tag>
      </tags>
  </entry>
  <entry>
    <title>七月与安生</title>
    <url>/posts/2017/2P24YP8.html</url>
    <content><![CDATA[<p>有一对闺蜜，一个叫七月，另一个是安生，七月安静，在大人面前表现得很乖，安生开朗，七月妈妈说她什么都好，只是缺了点运气。安生没考上大学，出去闯荡，换了很多男朋友，最后找了个老实人结了婚，过上了相夫教子的幸福生活，七月和男友同一所大学，毕业后谈婚论嫁，所有人都认为他们是最合适的一对，会很幸福，但是他不够爱她，在结婚的时候离去，七月终于找到借口出去闯荡。</p>
<span id="more"></span>
<p>七月过成了安生，安生活成了七月。</p>
<p>恰好，我也有两个朋友，一个叫七月，另一个是安生，他俩是基友。七月成绩一直优秀，初中出去上通宵，第二天考试拿了年级第一，高中走路都在看小说，成绩也还不错，大学成绩差点保研，在所有人眼中他会很有出息；安生浪荡，也很贪玩儿，初中留了级，高中辍学出去潇洒，大学挂科，他有自己的想法，没毕业，自己赚钱买了一辆车。</p>
<p>安生给七月打电话。</p>
<p>“七月，工作怎么样？”</p>
<p>“工作很累，没有休息的时间，感觉整天都在工作，不是我想要的生活。”</p>
<p>“工资怎么样？”</p>
<p>“不怎么样，有点低……”七月心里其实还有一点自豪，因为他的很多朋友工资没他高
“确实有点低啊。我在学校旁边和人开了一个点，每天能赚个2000左右吧。”</p>
<p>七月第一年工作回去和安生见了一面，是安生开车来接的他，安生的车技很好，放的歌不像七月听的那样安静，很激昂。安生很忙，他们吃了一碗面就分开了，安生给七月带去了震撼，七月也想要一辆车，想要安生的潇洒生活。</p>
<p>安生活成了七月想的那样。</p>
<p>七月想去环游世界，想有一辆车，一幢房子，想给父母好的生活......</p>
<p>七月在挣脱。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2017年</category>
      </categories>
      <tags>
        <tag>散文</tag>
      </tags>
  </entry>
  <entry>
    <title>让心驰骋在木兰草原之上</title>
    <url>/posts/2021/8Z3TAG.html</url>
    <content><![CDATA[<p>2021年11月27日，设计四所、BIM中心和经营部在木兰草原联合举办了具有草原风情的团建活动。滑草、骑马、射箭，不论老少，玩得不亦乐乎。</p>
<p><strong>合照</strong></p>
<p>一进入木兰草原，一股厚重的苍茫感就迎面扑来，它挟着初冬的一丝凛冽，将春夏的苍翠，华作漫天枯黄。走在小道上，呼吸着微风中淡淡的青草味，看着远山上朦朦胧胧的牛马食草，感受着四周无边无际的草原，木兰草原在这一刻，仿佛有了生命，一下子将我们拉进了
“天似穹庐，笼盖四野”
的壮阔草原里，置身此情此景，我们不禁惊叹住了，这正是我们想象中的草原的样子：“天苍苍，野茫茫，风吹草低见牛羊”</p>
<p><strong>写大家释放激情</strong></p>
<p><strong>写大家放松与交流</strong></p>
<p>本次活动，似湖面上溅起的一缕涟漪，荡漾起了大家内心深处的激情澎湃；又如冬日里绽放的暖阳，治愈了每个人精神上的紧绷与疲惫；也像大地上溪流汇成的江河，消融了彼此间的陌生，增进了彼此的感情，在未来，我们将携手同行，扬帆大海。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2021年</category>
      </categories>
      <tags>
        <tag>散文</tag>
        <tag>团建</tag>
      </tags>
  </entry>
  <entry>
    <title>家庭服务器被网络攻击后, 日均下载流量 2T</title>
    <url>/posts/2024/HPDBE7.html</url>
    <content><![CDATA[<p>近日，发现家里网络非常慢，但是测速时，速度又很正常，于是进后台看看看，一看不要紧，看了后吓一跳，好家伙，网络被攻击了，最近几天日均下载量高达
2T。</p>
<p>不禁生起一阵感慨，裸奔的网络太凶险了！</p>
<p>大致的原因是这样的，在此做一个记录，与大家共警！</p>
<span id="more"></span>
<p>家里的服务器由二级路由管理，家庭的设备接入都在一级路由分配的网段里，所以为了方便自己连接服务器上的代理，于是将二级路由上的代理端口
7890 暴露给了一级路由。</p>
<p>由于一级路由是一个传统的路由器，没有防火墙，因此同时相当于将服务器的
7890 端口暴露在公网上了。</p>
<p>就这样，悲剧开始发生了。</p>
<p>应该是被网络攻击请求嗅探到了这是一个代理，连续几天都使用它进行高负载地代理操作，由于家里是千兆网络，因此每日的下载流量达到了
2 T。</p>
<figure>
<img data-src="https://oss.223434.xyz:2234/public/files/images/image-20241104163332882.png"
alt="image-20241104163332882" />
<figcaption aria-hidden="true">image-20241104163332882</figcaption>
</figure>
<figure>
<img data-src="https://oss.223434.xyz:2234/public/files/images/image-20241104163351362.png"
alt="image-20241104163351362" />
<figcaption aria-hidden="true">image-20241104163351362</figcaption>
</figure>
<figure>
<img data-src="https://oss.223434.xyz:2234/public/files/images/image-20241104163411312.png"
alt="image-20241104163411312" />
<figcaption aria-hidden="true">image-20241104163411312</figcaption>
</figure>
<p>当发现是代理端口问题后，使用火绒的网络监控进行排查，发现请求的 IP
来自各个国家，有美国、立陶宛等国家。</p>
<p>通过分析流量请求频率，发现一般是夜间在请求。</p>
<figure>
<img data-src="https://oss.223434.xyz:2234/public/files/images/流量异常.png"
alt="流量异常" />
<figcaption aria-hidden="true">流量异常</figcaption>
</figure>
<p>在这之前，网络攻击都只存在于防火墙的拦截报告里，没想到自己真切地体验了一把，所幸及时发现问题，没造成什么影响。</p>
<p>经此一事，深感网络世界的凶险，对于暴露在公网下的服务，都要慎之又慎！</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2024年</category>
      </categories>
  </entry>
  <entry>
    <title>兰州</title>
    <url>/posts/2018/202BKMX.html</url>
    <content><![CDATA[<p>未见得兰州，便已入了迷。单是念着这个名字，脑中便不自觉的浮现出她的身影，仿佛一位慧质兰心的女子，一袭碎花长裙，恬静地立在黄河边上。兰州，是和大理一样浪漫的地方，未识得时想念，遇见了眷念，离开后又是挂念。大理的浪漫是邂逅和放纵，多是妖娆。兰州的浪漫，则是细水源长，缠缠绵绵，秀气而清纯。</p>
<span id="more"></span>
<p>喜欢兰州，就像爱一个人，不是因为她美得惊艳，而是她懂你的心，她的味道是你喜欢的，她的样子是你喜欢的，她的性格也是你喜欢的。初到兰州时，天灰蒙蒙的，她就像伊斯兰教的女子，用头巾掩了自己的美丽，不想让人瞧见了。想到这儿，我不禁婉尔一笑，看来只能自己慢慢去体会了。</p>
<p>第一个接触的是兰州拉面。拉面馆就餐的流程和南方不大一样。你需要先在前台为自己的食物埋单，然后服务员会根据你点的东西给你相应的小票，凭借小票到相应的区域领取食物。做拉面一般有三个伙计，一个揉面，一个拉面，最后一个负责煮面。揉面是一个体力活，有的伙计比较瘦小，便将面团放在案板上，左手按着面团，右手盖于左手，然后猛的跳起，借着落地的动能加成，将面团揉匀。拉面的师傅技术高超，往往一团面上手，一拉一折，面条就已经成形了，侧身便把它投入沸水中。煮面师傅估摸着时间捞面，然后两勺面汤，一把葱花，一撮牛肉，三勺辣椒油，一碗地地道道的兰州牛肉拉面便成了。</p>
<p>在冬天里吃一碗牛肉面是最幸福的事情了。用筷子挑起几丝面条，还没送到嘴里，你的所有细胞便已被牛肉面的香味征服了。此时，也顾不得谦谦君子，窈窕淑女了，只想一口接一口地吃下去，末了，还得喝下去半碗汤才感觉到知足。兰州牛肉面就这样牵走了每一个陌生人的心。</p>
<p>兰州的美食，大多为清蒸，这样的烹饪方法，保证了食材最天然的味道，清香又自然。手抓羊肉便是另一道美食，羊肉不加任何佐料，只是放了盐，但是却没有羊肉的膻味，惊叹兰州人可以把烹饪简化得如此极致。吃手抓肉也是有讲究的，剥一瓣生大蒜，挑一大块肉，一起放进嘴里，蒜去了羊肉的腻，羊肉则缓了蒜的辛辣，但又都保留着彼此的原汁原味，实在是一番美妙的体验。兰州的美食，不像南方总是藏在深巷子里，你只需找一家清蒸餐厅，便可揽尽大部分美食了。羊膝盖泡饭、凉拌小葱、牛奶煮鸡蛋、还有脏脏梨（这是一个朋友这样叫的，原名叫软儿梨）都让人回味无穷。</p>
<p>谈到兰州，除了吃，一定少不了的就是中山桥了。对于桥，我总是有一份特别的感情，走在桥上时候，仿佛可以感受到它跨过一个又一个岁月的艰辛和倔强。长江上的大桥，冷得让人难以亲近，而中山桥，虽然是用冷冰冰的钢铁建成，但是它却用那厚重的历史，压住了钢桥的凌厉，一眼望去，便是它的浪漫和故事。明朝开始，人们便在这儿建起浮桥，把船码成一排连好，在上面钉上木板，方便人们的出行，在当时称为镇远浮桥。1907年，由陕甘总督升允牵头，美国人设计，德国人制造材料，中国人建造，历时三年，耗费三十万六千两白银终于建成了当时黄河上真正意义上的现代桥梁，素有“天下黄河第一桥”的美称。</p>
<p>中山桥从风雨飘摇的晚清走到了现在，他亲眼见证了泱泱大清的坠落，和苦难的中国人民一起经历着漫长的销烟和战火，看着一个又一个熟悉的人辞世，剩下了他一个人失落和寂寞，我想，今后再也没人能够绘声绘色地讲中山桥的故事了。一座桥，走过苍桑的岁月，一座桥，跨越百年的历史，当你缓缓地走在上面，手指轻轻拂过一颗颗螺钉，仿佛时光倒转，你能够切切真真地感受到已经翻过去的一页页历史。</p>
<p>兰州另一个让人忘不掉的地方要数五泉山了，五泉山全部由黄土堆积而成，但却呈山之宏伟之势，绵延起伏，雄伟壮阔。未亲至，是很难想象得出它的震撼。五泉山因有五口山泉而得名，五泉之中，数摸子泉最为有趣。摸子泉位于摸子洞中，洞深14米，两侧石壁上凿有佛龛，到洞最里面之后，再下5级台阶，就到了泉边。泉为方形，水深约半米。以前寺内僧人在泉中置石子和瓦片，求子者摸到石子生男，摸到瓦片生女。常有信男善女钻进洞中，用手在泉水中摸索，刘尔炘曾在洞门口书一对联，嘲讽这种迷信行为是“糊糊涂涂将佛脚抱来，求为父母；明明白白把石头拿去，说是儿孙。”</p>
<p>五泉山的建筑多为佛教古建筑，层楼叠阁，采用歇山式屋顶，建筑斗拱飞檐，雕梁画栋，结构精巧，气势庄严。楼阁依山而建，错落有致地立在黄土坡上。每一处都是一幅精美的画，初见时，总会想挑最好的先看了，但又觉得每一处都有各自和妙处，舍不得落下任何一个角落。</p>
<p>兰州，最让作为南方人的我欢喜的便是在太阳高挂的时候，还可以看到厚厚的冰了。有的冰很薄，你可以一边沐着阳光，一边踩着冰，一脚下去，冰便伴着呲呲的声音，脆裂开来，此时心中所有的思绪都跟着冰的破裂化了，纯净又无拘无束，真想一直就这样挥洒着烂漫的时光。</p>
<p>去到兰州，一定要感受一次西北的烈酒，一口下去，那种粗犷豪放的味道，拔动你的灵魂，你心中只剩下一个念头，喝不过我还吐不过吗。一方水土养一方人，这句话一点也没错，才到兰州两天，我就已经迷恋上了大口吃肉，大口喝酒的畅快了。到主人家做客时，动筷之前，热情的主人会用一个盘子，盛好6杯烈酒，端至你面前，表达他们对客人欢迎和祝福。如果席间恰好有兰州姑娘在，她们便会打着节拍，用兰州话唱着简单的调子，为客人助兴，宜杯呀宜杯…量杯呀量杯…
三杯呀三杯……盛情难却，只好一杯接一本杯，不负主人家的热情。</p>
<p>兰州的魅力，在山里，在水里，在可爱的文化里。轻轻至兰州，浅浅地邂逅，魂牵梦萦
。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2018年</category>
      </categories>
      <tags>
        <tag>生活感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>一生一世相依</title>
    <url>/posts/2018/36GBYZE.html</url>
    <content><![CDATA[<p>哐铛哐铛……绿皮火车缓缓地往北驶去。我和老伯坐在小板凳上，静静地听他回忆着自家大壮和妞妞的故事，渐渐地入了迷。</p>
<figure>
<img data-src="http://a3.qpic.cn/psb?/V118G3dh0IatwX/vZdnSXHuXlmDjOP*1p25nzis9X1HeDgfZ.r*d646w*w!/b/dHYBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=dwJkAXcCZAEDIAU!&amp;tl=1&amp;su=0171831425&amp;tm=1566104400&amp;sce=0-12-12&amp;rf=2-9"
alt="图片" />
<figcaption aria-hidden="true">图片</figcaption>
</figure>
<p>那年初夏，春刚走，还未来得及带走绵绵的细雨，他正欲拢上窗子时，两只鸽子扑腾着翅膀从眼前掠过，匆匆地赶到了对面的飘窗下避着雨。一只鸽子的体型稍小，雪白的羽毛，应该是雌鸽，另一只是雄鸽，体型很壮，羽毛也很漂亮。雄鸽落地后，警惕地左右张望着，等确认安全了才放松下来，它往雌鸽边上挪了几步，雌鸽也向它的身边紧了紧。雌鸽的羽毛被雨扰得有些乱了，它便用嘴给雌鸽梳理羽毛，雌鸽会偶尔抖抖身子，然后又亲昵地蹭蹭雄鸽的脖子。</p>
<span id="more"></span>
<p>他以为雨停了，这两只鸽子便会离开。可是不久后，两只鸽子却叼来树枝和小草，开始筑巢。筑巢安家是很辛苦的，但它们还是很开心，累了便依在一起，靠着自己的小窝，幸福地期待着。过了些日子，他突然发现鸽子夫妇俩已经开始孵窝了，这说明它们已经结下了爱情的种子，白天鸽爸爸留在巢里孵卵，让鸽妈妈出去觅食，天快黑的时候，鸽妈妈便来替它。</p>
<p>这样的日子平平淡淡，但是也洋溢着幸福。这天，鸽爸爸如往常一样，一边细心地呵护着宝宝，一边期待着妻子归来，太阳已经完全落下了，鸽妈妈的身影还是未出现，鸽爸爸等着等着，便着急了。夜里，他只听见振翅声无数次焦急地划破夜空，还有归巢后的哽咽。第二天起床打开窗户看去，鸽爸爸已然憔悴了，身上的羽毛乱乱的，早已经无心打理，只是呆呆地孵着它们共同的宝宝，眼里满是神伤，鸽妈妈应该是遇难了。它偶尔会出去觅食，但几分钟便又回来了。</p>
<p>他是爱鸽人，也养鸽，看着这对野生的鸽子夫妇，原本美满的生活就这样支离破碎，凄凄惨惨，他不禁惋伤。有时候打开窗子，一看就是几个小时。这天他如往常一样，走到窗前准备打开窗子，鸽爸爸见到他出现后，扑腾一下，落在了他家的窗子前，看着他，然后扭过头去看看自己的宝宝，又对着他咕咕两声，便飞回巢去了。一会儿，鸽爸爸起身，好像是去觅食，但才飞到半空，盘旋着又飞了回来，看了一眼未出生的宝宝，又朝着他看了一眼，然后一声凄鸣，冲天而去，再也没回来。</p>
<p>听到这儿，我很是震惊，原来鸽子的爱情是这么坚贞。回过神来，我问到：“那大壮和妞妞是它们俩的名字吗？”</p>
<p>“大壮和妞妞啊，不是。大壮是它们俩的孩子，妞妞是大壮的伴侣”。我知道故事还有很长，便听着他断续讲下去。</p>
<p>那天他见鸽爸爸久久没回来，大概也猜到了，可能它是再也不回来了。他想，毕竟看着这俩孩子在这儿成家立业，一起度过了那么久的时光，也是有些感情，鸽爸爸也算是临终遗孤，便去对面邻居家，把那两个鸽蛋取了回来，让自家的鸽子帮着孵化。</p>
<p>几天之后，一个蛋的壳破裂了，那对鸽子夫妇的生命终于得到了延续。而另一个蛋则再也没有动静，大约已经见到它的父母了。他见到这个小家伙出生，很是欣喜，给它取了个名字，叫大壮，希望它能够健康地长大。</p>
<p>大壮是个好孩子，一个月之后就可以在天空飞翔了。他给大壮做了一个名字的二维码，系在它的脚踝上，养鸽子的一般都会这么做，只是别的鸽子的二维码信息都备注有父母是谁，而大壮却是没有。大壮很争气，它对于新技能总是能很快的掌握，从熟悉巢房到信号辨识，从掌握飞翔到识别方向归巢，它总能很快地学会。令他印象深刻的是，还未满一周岁，它已经能够从300公里之外自行回家了。</p>
<p>鸽子能够飞300公里，说明血统很优秀了，于是他寻思着是给它找个优秀的伴侣，便把妞妞介绍给了大壮，他把它们放在一个鸽舍里，促进彼此交流。大壮和妞妞第一次见面，便一见钟情，但彼此都很羞涩，呆立在笼中一动不动，谁也不先搭理对方。这时，他想到一个好办法，分别在他们俩身上洒上一些水，大壮和妞妞觉得身上不舒服，都梳理着自己的羽毛，我抬头看看你，你抬头看看我，两只鸽子看着对方的举动，都觉得对方对自己有意思，然后这就成了。</p>
<p>从此，他们成双成对，形影不离。闲的时候，彼此拾掇着羽毛，调皮的妞妞会偶尔啄一下大壮的头，等大壮正要怒时，又把整个身体凑过去，给一个安慰的拥抱。大壮在放飞训练中，总会照顾着妞妞，总是一直跟着妞妞，怕它找不到回家的方向。放飞时间，是它们最浪漫的旅行。在那段时光里，大壮和妞妞是鸽群中最幸福的一对了。</p>
<p>我打断他的话问到：“你养了那么多鸽子，他们不会去找别的鸽子相好吗？”</p>
<p>“鸽子和我们一样，也是一夫一妻制的。”说完他继续回忆着。</p>
<p>他家在山东，一次受朋友之邀去重庆的时候，他便把大壮和妞妞带在身边，到了重庆，就让它们各自飞回家。等他回到家时，只有妞妞一只鸽在鸽笼里神情郁郁，含泪伤心。过了一个月，再也没见到大壮的影子，他知道，大壮是在途中遇难了。而此时的妞妞，连叫唤也不会了，身体也越来越虚弱，不久，它便满足地离开了这个世界。</p>
<p>至此，他的故事讲完了，随着火车的哐铛声，缓缓睡去，而我则久久地沉默了。它们没有法律的约束，没有道德的谴责，却忠诚着爱情，一生一世，至死不渝。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2018年</category>
      </categories>
      <tags>
        <tag>生活感悟</tag>
        <tag>鸽子的爱情</tag>
      </tags>
  </entry>
  <entry>
    <title>触及灵魂的旅行</title>
    <url>/posts/2018/39BM7K7.html</url>
    <content><![CDATA[<figure>
<img data-src="http://a1.qpic.cn/psb?/V118G3dh0IatwX/HI0e*GgQwNLpAqtbM8Or5NWQK5zg2Tjcm92Ym405zI0!/b/dPQAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;t=5&amp;tl=3&amp;su=0256159089&amp;tm=1566104400&amp;sce=0-12-12&amp;rf=2-9"
alt="图片" />
<figcaption aria-hidden="true">图片</figcaption>
</figure>
<p>元旦之前和朋友定好去宏村，因朋友有事，便不能同行，自己期待的元旦计划就这样搁浅了。大约自己是一个执拗的人吧，说好的出行，如果不去做，便如哽在喉，念头不通。于是便决定一个人去登泰山，体验“岱宗夫如何？齐鲁青未了”的雄浑壮阔。</p>
<span id="more"></span>
<p>就这样，一人，一个念头，一张票，便随着火车的哐当声，在墨色的夜里缓缓地朝着北国而去。先是去济南，坐火车大约要14个小时，因为是临时起意，只有站票了。上车的时候，车里挤满了人，费了老力，才上得了车，虽然过道里很挤，挤得只能容下两只脚，但大家的脸上却洋溢着幸福和满足，因为坐上车就代表着离自己期待的地方越来越近。我想，自己能够有一张票，也很幸运了。</p>
<p>毕业之后，就很少坐K开头的车了，却是不知不觉的，学生时候的乐趣也慢慢隐去了。读书那会儿，只能买得起普通火车，遇上节日时候，不好买票，只得站着去学校，一次就是10多个小时，当时也不觉着难受，毕竟咱都是从艰苦环境下磨砺出来的孩子。工作后，反而更喜欢普通火车了，高铁什么的反而觉着无趣。在火车上，最幸福的事便是遇见，遇见天南海北的人，遇见不同的故事，遇见一段美好的回忆。</p>
<p>火车上有趣的事情可多着呢，要是周围同龄人较多，则大家相互邀请一下，凑一桌便开始玩游戏，我是很期待遇到很多人，这样就可以玩狼人杀，这游戏让人入迷，往往是旅途结束之时，意犹未尽。如果全是伯伯婶婶，那也是美好的一次经历，可以感受他们经历岁月沉淀之后的人格魅力，有人若泰山稳重，有人似鲲鹏洒脱，有人又如烈火炙热。在火车上，我是你的路人，你是我的过客，每位旅客，便如人之初生，与周遭无因无果，但每一个人，又从心底里散发着善良，见着站票的，大家会挤挤，空出一个位置，实在不能挤了，有人会在中途起身活动活动，让个位置给需要的人休息，这种在艰苦环境下体现出来的人性，便是旅途中最美的风景。</p>
<p>途中和一位伯伯一见如故，和他聊了大半宿，相聊甚欢。他从少年聊到中年，从山东聊到益阳，从烧瓷聊到养鸽，听着他娓娓道来的经历，自己好似淌在他的时光里，感受了另一番生活的精彩。旅行不在乎终点，当你踏上远方的路时，旅行就已经开始了。</p>
<p>到济南的第一个景点，是趵突泉。趵突泉，是藏在记忆中的美，在小学时，便已初闻其名，现在记忆已经模糊了，若平时不经人提及，断然没有它的印象。但当你与之邂逅时，那尘封的记忆仿佛破茧化蝶，悉数涌来，“一溪活水，清浅，鲜洁，由南向北的流着”，老舍笔下的趵突泉印象在这一刻和现实完美地契合了。它的美，就像它的泉水，秀气中带着婉约，走得稍急，便会与它擦肩而过。</p>
<p>趵突泉于我来说，景致未有多么惊艳，只是如愿以偿吧。但是到大明湖一游，让我一下就满足了。湖岸垂柳依依，仿佛纤纤女子，微风轻拂，便摇曳着身姿，清扬婉兮。柳隙间，亭台楼阁若隐若现，走近细看，却是红柱青瓦，雕梁画栋，古朴而典雅。置身其中，好似时空错乱，让人觉得是在江南的画里。放眼望去，碧波浩淼，别有一番味道。大明湖不似西湖的水，柔情，又不像天池的水，超然，而是带着一种皇家的贵气。</p>
<p>痴迷于眼前的如诗如画，心中念着“大明湖”这几个字，总觉得似曾相识，直至湖畔，才应景而出一句“皇上，您还记得十八年前大明湖畔的夏雨荷么”，恍然大悟，原来这便就是那个大明湖啊。夏雨荷在这儿邂逅了她的爱情，但这爱情却让她等了一辈子，恨了一辈子，怨了一辈子，想了一辈子，可她依然感激上苍，因为有这个可等、可恨、可怨、可想的人，让生命不再是一口枯井，不再了无生趣。大明湖的爱情，让人不觉得凄凉，更多的是感动。</p>
<p>太阳渐渐落下，温暖的金黄洒满了整个湖面，然后夹着波光，挤满了每位游人的眼。我看过去的时候，夕阳正停在柳梢，配着冬日淡淡的青，颇有一种村廓斜阳醉晚归的味道。我沿着湖堤，悠然地迈着步子。时而思绪飘远，鱼跃为鲲，翱翔九天，有一种吾身非本身的超脱；时而眷恋红尘，一木一草，行人纷纷，移步是景，如此是随意，是惬意。</p>
<p>一个人旅行时，时间完全是自己的，可以恣意地懒床，可以被风吹得潇潇洒洒，可以过得像吟游诗人一样，天大地大，海阔天空，自由自在而不拘一格。</p>
<p>到泰山山脚时，已经上午11点了。泰山之途，不似华山险峻，十八盘是泰山最险的一条山路，共有石阶1600余级，两山崖壁如削，陡峭的盘路镶嵌其中，远远望去，恰似天门云梯，蔚为壮观。登顶泰山之后，首先经过南天门，然后是天街，最后上至玉皇顶，登泰山，就如凡人修仙，达至南天门便为修成正果，然后每再往上一处，视野和体验又不一样，但每一个地方，都浸染着浓厚的道教文化。玉皇顶是泰山最高处，耸入天际，顶上建了一个院落，中间置着一个香炉，据说在此祭拜，可直达天听。</p>
<p>有人问我，年末是最冷的时候，你为什么要选择去爬山，不怕冷吗？我说，在最冷的时候，登上周围最高的地方，感受着刺骨的寒冷，这是一种体验，也是精神的升华。是的，迎难而上，战而胜之，这是最美好的事情。</p>
<p>太阳快下山时，泰山上的温度骤降，但是我们依然留在观月台，陪着2017年最后一个夕阳缓缓落下，然后对着它大喊，太阳再见，2017再见！登最有名的山，喝最寒冷的风，观最珍贵的日落，这一切是如此的美好。</p>
<p>夏丐尊先生在《生活的艺术》中写道：在弘一法师的世界里，百衲衣，破毛席，毛巾一样好；青菜，萝卜，白开水同样好。旅行于我来说，亦如是，不观景，只过心。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2018年</category>
      </categories>
      <tags>
        <tag>生活感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>即使再微末，也要幸福的活着</title>
    <url>/posts/2018/38WXA9N.html</url>
    <content><![CDATA[<p>蝼蚁尚且偷生，可偷来的生命有何意义，只是活着吗？</p>
<p>俯仰天地，大地和星空一样寂静。车如流，来来往往，从归处去，便又从去处归；人若蜉蝣，纷纷扰扰，用百年光阴，在历史中苦苦争渡；苍生无力，沧海桑田，只任大势起起落落。太多的活着，最后都是轻轻地走了。</p>
<span id="more"></span>
<p>我有些恐惧了，恐惧平凡而没有思想地活着。假如时光可以跳跃，我希望去我离开的那天，问问自己：“这一生，是否溅起了生命的涟漪”。</p>
<p>春节回家时，遇到了两件事，仿佛晴天霹雳，霹散了心中一直的迷惑，让我明白，生命的意义不在于活得重，而是活得幸福。</p>
<p>一个文静的女孩，扎着精致的马尾，独自拖着不大不小的行李箱，走到一家周黑鸭的店前停了下来，服务员微笑着问道：“您好！请问需要什么？”女孩点了下头，没有接话，而是扫了一眼柜台，发现一张清单台卡，径直地走过去认真地看了几秒钟。见服务员等着自己，她便用手指着两个名称，示意她的需求。服务员会意，把东西打包好之后，礼貌地递给女孩，然后露出询问的表情说到“一共44块，支付宝还是微信？”，女孩失了听力，不能听见，但是很郑重地点了下头，好像在说“好的，我知道了”。接着掏出手机，扫了码之后，又让服务员输入金额，顺利地完成了这次购物。</p>
<p>我从未敢想，一个失聪的女孩可以如此独立和坚强。她眼眸中的那份宁静，浸人心扉，让人有一种感觉，仿佛在她的心里，有她自己的一方国。那个国度，纯净，安宁，幸福。</p>
<p>在排队取票时，又一幕画面扣动了我的心弦。一位清洁工老爷爷，正在收拾栏杆旁边的垃圾，他大约6旬有余了，胡渣和头发都有些花白，岁月在他身上留下了深深地痕迹。这时一位老奶奶，蹒跚着向着他走去，老奶奶一只脚以前受过伤，左脚偏低，走路有些吃力。他抬头间不经意看到了她，于是放下手里的活儿，一手扶着扫把，立在那儿一直看着她，眼神中是柔情，又是担心。</p>
<p>老奶奶走到跟前，从衣兜里掏出一瓶酸奶递给他，他推脱不肯要，她就佯装不悦，他一下没法了，笑了笑，只好把它放进衣兜里，她见了，一下子笑逐颜开，又跛着脚去忙了。等我取完票，见他正坐在旁边的凳子上，喝着酸奶，静静地看着她离开的方向，嘴角偶尔勾起一弯会心的微笑。</p>
<p>他们虽然干着脏乱的工作，拿着微末的工资，过着紧巴巴日子，但是他们相互温暖、相互给予、相濡以沫，又相守一生。</p>
<p>以前觉得幸福是在天上，站高了才够得着，现在发现幸福其实就在身边。即使再微末，活得认真了，便是幸福。读一本书是幸福，行一里路是幸福，发一阵呆也是幸福……</p>
<p>我想，假如我是一只蝼蚁，我也会想要活着。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2018年</category>
      </categories>
      <tags>
        <tag>生活感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>黄山游记</title>
    <url>/posts/2018/2TJN1ZF.html</url>
    <content><![CDATA[<figure>
<img data-src="http://a2.qpic.cn/psb?/V118G3dh0IatwX/GrM3PWyhwsSSbbrE*X*grTq.3s9KKdyFt4JAkXTCRtk!/b/dCEBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=OARUBgAAAAARIHk!&amp;t=5&amp;tl=3&amp;su=087375409&amp;tm=1566104400&amp;sce=0-12-12&amp;rf=2-9"
alt="图片" />
<figcaption aria-hidden="true">图片</figcaption>
</figure>
<p>薄海内外，无如徽之黄山，登黄山天下无山，观止矣！</p>
<p>去年国庆之时，便心心念念地想一揽黄山美景，今清明时节，终如愿以偿。未至黄山，便被诗人的描述掳了所有的心思，峰峰寒列簇芙蕖，静想嵩阳秀不如。清明多雨，天公好似为了应景，举国降温。一下车，便是一股寒气扑面而来，透过衣裳，冷了每一寸肌肤。如此天气，有些让人失望，心想，虽然明天的黄山之旅可能无所收获了，但既来之，则安之，若不去走走，又空留遗憾。</p>
<span id="more"></span>
<p>睡得早，起得也早。6：00左右就出发去了换乘中心，排了一小会儿队，买了票便乘大巴前往景区大门口。黄山上山有两条主流的路线，一是前山路线，另一条是后山路线。因为一个人，所以基本没有做攻略，只有一份不完全的地图，但人大胆子粗，任它天大地大，我亦仗剑天涯，稍一考量，就往后山奔去了。</p>
<p>因为山大而时间紧，所以我选择索道上山，步行下山。刚下索道，所有风景便若大江决堤，奔腾汹涌而至。那一刻，我才真正体会到，黄山的美，不是清秀，不是婉约，而是波澜壮阔。下索道的第一个地方是白鹅岭，站在它的观光台向下远眺整个黄山，只见巨峰与天穹对峙，虽各有高低，但无一不巍峨雄伟，峰峰拔地而起，顶天立地。云雾穿梭缭绕，雾借山势，山依雾浑，风起而雾涌，只一眼，心中便顿生万丈豪情，人生纵是千磨万难，我当以一力破之。</p>
<p>感谢路人朋友这么好的技术</p>
<p>到的第一个著名景点是石笋是一个动人心魄的地方。石笋矼在黄山始信峰与仙人峰之间。矼上怪石参差，犹如雨后春笋。石笋缸的观景台削峰而成，上下皆虚空，不知几千丈。正当我惊叹于大自然的鬼斧神工之时，突然生起一阵狂风，风势比山势更险，转瞬之间，谷底云雾上涌，无边无际，于上观景，真是飘飘然如遗世独立，羽化而登仙。</p>
<p>[图片](http://a3.qpic.cn/psb?/V118G3dh0IatwX/YK3fQrxUz9oOaG1SuMXpo*zIz4VuD2JhzZdA6OQhSHw!/b/dCIBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=gAc4BAAAAAAREJw!&amp;t=5&amp;tl=3&amp;su=0144353185&amp;tm=1566104400&amp;sce=0-12-12&amp;rf=2-9
“石笋缸云雾汹涌”）</p>
<p>从石笋缸往前走一小段，便是著名的始信峰。入画境，似幻而真，凸起于绝壑之上“”</p>
<p>黄山另一处胜景是西海大峡谷。峡谷步道多是在险峻的崖壁上人工挑梁，然后铺以面板而成。其险可比华山，但又不让人生惧，你可以坦坦然行立，施施然观景。在谷中放眼四顾，只见山依山、山套山，层次分明、壮阔奇特，令人叹为观止。初至此地，初见此景时，心中不禁万分欢喜，风景太美了，刚揽一处胜景，又迫不及待地期待前面的惊喜，一不留神便从山顶走到了谷底，最后只能一步一步从谷底爬回到山顶。</p>
<p>[图片](http://a3.qpic.cn/psb?/V118G3dh0IatwX/vnTQhNNiNr4hkLQcW2dtORfN2W4a9qwcNEgfwsjRDjw!/b/dCIBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=VAY4BAAAAAAREEk!&amp;t=5&amp;tl=3&amp;su=0228506593&amp;tm=1566104400&amp;sce=0-12-12&amp;rf=2-9
“西海大峡谷”）</p>
<p>到黄山，飞来石是必须要去的地方。女娲补天，红楼梦，天外之石，一个个尘封的记忆便瞬间喷涌而出，时空倒转，本是虚幻，却又那么真实，你与它千载轮回修得。倚于飞来石，俯仰之间，不禁相叹，人力有尽，造化无穷绝。</p>
<p>黄山另一特色便是它的水。山间清泉叮咚，山伴水的温柔，水染山的苍翠，移步间，或是清泉侧畔，或是潺潺声绕耳，即便是人工开凿的小道旁，也会偶尔拾得一泓泉水。要是渴了，便掬几捧山泉，痛饮而下，它是那么地甘甜，清冽，夹着自然的清新。游黄山，便当是这样，身与心与之交融，这比任何纪念品都有意义，让人永远地记住了它的味道。</p>
<p>每登一座山，便是一个故事。登徵之黄山，若红尘入仙境，洗涤心灵，又好似在那泼墨的山水画中惊世一梦，如梦幻泡影，美得流连忘返。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2018年</category>
      </categories>
      <tags>
        <tag>生活感悟</tag>
        <tag>黄山</tag>
      </tags>
  </entry>
  <entry>
    <title>悟道武当</title>
    <url>/posts/2018/2HSM119.html</url>
    <content><![CDATA[<p>争渡凡尘三千丈，悟道武当尽斜阳。</p>
<p>武当之美，隐于不秀，不奇，不险，乍看之下，除去青葱，放眼尽是平凡。若是匆匆归去，大多是无所得，无所感。至武当，心中需是无涟无漪
，心与身融，身与山合，细细地品味它承载的精神。正如道德经中所述，常无欲，以观其妙，常有欲，以观其徼。
<img data-src="http://a2.qpic.cn/psb?/V118G3dh0IatwX/EH96t3bt3FT5oSY3cXdYg2hW4hjSKCijjlprGC9v4Fg!/b/dCEBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=VAY4BAAAAAARIHk!&amp;t=5&amp;tl=3&amp;su=0111001233&amp;tm=1566104400&amp;sce=0-12-12&amp;rf=2-9"
alt="图片" /></p>
<span id="more"></span>
<p>闻道，是从很小的时候开始的。父亲有一方道印，是爷爷传下来的，上面刻了一道符咒灵符，每当亲人远行之时，便会在印堂之处盖上一方，说是用以镇压气运，驱吉避凶。爷爷是一名道医，他还在世的时候，经常出门云游四方，途中遇上人家有人生病，有婚丧嫁娶的，都会请他去帮忙，或是治病，或是作法，亦或是算算黄道吉日。有时一去便是好几个月，孤身万里游，问路白云头，好不逍遥自在。</p>
<p>虽未入道门，却早有一颗道心。踏在武当山的大地上，一步一步，无思无想，慢慢地自己就进入了一种奇妙的境界。仿佛一下子踏过了红尘，无尘无垢，无忧无虑，心思登至处,目极仰苍穹。此时你会发现，自己的心已然入道，仿佛任它无尽岁月磨砺，依旧是亘古唯一，而周遭的纷杂，不再扰人，不在忧心，都是合乎道的美。有人抢座，也有人让座；有人骄横，也有人谦逊；善人行恶，恶人至孝，一张一驰，阴阳相济。当所有好的，不好的画面淌过你空明的心里，你会觉得这都是美好，是一份可遇不可求的生命印记。
<img data-src="http://a2.qpic.cn/psb?/V118G3dh0IatwX/qaCXKonHS.ZKYT0XagGCIaX4G3Wu*Dd4q5ymSGu7Ulo!/b/dCEBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=VAY4BAAAAAARIHk!&amp;t=5&amp;tl=3&amp;su=05109713&amp;tm=1566104400&amp;sce=0-12-12&amp;rf=2-9"
alt="图片" /></p>
<p>武当山，不知不觉便让人的心灵返璞归真。恰至逍遥谷，只见一溪活水，清澈如带，于山间叮咚而来。溪水浅浅，漫在大大小小的鹅卵石上，时急时缓。溪中小鱼数十,皆若空游无所依，日光下澈，影布石上，佁然不动；俶尔远逝，往来翕忽，似与游者相乐
。</p>
<p>邂逅此情此景，心中不胜欢喜。脱下鞋子，将裤角卷至小腿肚，无拘无束地淌着溪水。把脚丫埋进水中的细沙里，犁出两条长长地印记，静静地感受着沙子挤进趾间，然后又从脚背滑过，心底尘封的记忆一下喷涌而出，恍然大悟，这便是童年的味道。这个时候，几个小孩赤着脚丫来到水里，玩得不亦乐乎。有个小男孩，拿着一个空瓶在那儿专注地捉鱼，他把鱼赶到浅水边，然后用瓶口对着鱼儿，希望鱼儿自己主动钻进去，可是小鱼儿根本不理他，自顾地游了一会儿，便从旁边溜走了。小男孩见了，又去把它赶回来，一会儿，鱼儿又溜走了……鱼儿和男孩俩就这样，你来我往，乐此不彼。</p>
<p>平常人顿悟只是刹那，心中波澜一动，便又跌落凡尘，念三餐一宿，忧生老病死。我不禁忧思，余下人生漫漫，是否家人安康，是否事业有成，是否不负韶华？当在金顶看到朝阳冲破黎明的那一刻，我对于人生的恐惧一下释然了。破晓时分，天边渐渐发白，然后一道红霞倏忽出现，横跃于天际，一会儿功夫，整个东方便弥满了朝霞。太阳在此时睁开了眼，它出现的那瞬间，天下褪尽黑暗，它要有光，于是便有了光。
<img data-src="http://a3.qpic.cn/psb?/V118G3dh0IatwX/Q2J7N1vSi4IAAn5kHLRzkKOEH5CmNBDLPeqU9DiJ*MU!/b/dCIBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=gAc4BAAAAAAREJw!&amp;t=5&amp;tl=3&amp;su=0237467457&amp;tm=1566104400&amp;sce=0-12-12&amp;rf=2-9"
alt="图片" /></p>
<p>我要人生无憾，于是便无憾。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2018年</category>
      </categories>
      <tags>
        <tag>生活感悟</tag>
        <tag>武当</tag>
      </tags>
  </entry>
  <entry>
    <title>为她守护一束桅子花开</title>
    <url>/posts/2023/21AX3JT.html</url>
    <content><![CDATA[<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230717000711448.png"
alt="image-20230717000711448" />
<figcaption aria-hidden="true">image-20230717000711448</figcaption>
</figure>
<p>今天是周五，如往常一样，是徒步回家的一天。出发的时候，几滴小雨已经开始孤零零地落着，我没理会它们，循着回家的路，就在小道上“噔噔噔”地小跑起来。</p>
<p>跑出几公里后，在一个路口处，刚好遇到了红灯，就停了下来，霎那间，我觉自己仿佛一台过载地的发动机，从内到外都是如火地滚烫，不断地吭哧吭哧地向外冒着热气，空气一吸进肺里，就变得焦灼起来。突然间，一阵花香飘来，香气中带有一丝齁甜，浓郁而沁人心脾。</p>
<span id="more"></span>
<p>这种味道让我回忆起了中学的时候，每当春夏之际，路边总会有许许多多的游商，担着一个担子，担子两端分别系着一竹篓，里面盛着一满满篓筐的桅子花，当他们走过的时候，整条街都萦绕香甜的味道。那个时候，很想去买，但又没多少零钱，因此通常就只会饱饱地吸几口，然后就走了。长大后，有时又遇到卖桅子花的，还是小时候的味道，但是也不会去买，因为买了，也没有承载这份美好和欢喜的人。</p>
<p>但是，今天终于可以买一束桅子花了，我想将这束带着美好回忆的，象征着守候和坚持的花朵，送给如花香般甜蜜的爱情，送给亲爱的老婆。</p>
<p>这束花，只有几朵绽放得热烈，其它的都是含苞待放，我将它们拿在手里，小心地呵护着。因为还要继续小跑回家，便将花举到胸前，跑步的时候，就一直稳稳地端着。闻着阵阵的花香，我的嘴角不由地浮现出一窝浅笑，一弯幸福的笑。</p>
<p>我脑中开始萦绕出一幅幅深动的画面，老婆抱着小宝宝，望着回家的方向，正盼着自己回来，我将花藏在身后，出现在他们面前，故作神秘地道：“是不是发现有一种好闻的香味，嘿嘿~”，然后借着老婆转移注意力的时候，将花送到她面前，我想，她一定会非常开心，高兴得手舞足蹈，像个大小孩。然后我就抱着娃，一起看着她自己忙忙碌碌地倒腾着心爱的花花。</p>
<p>想着想着，不知不觉就跑了几公里，所过之处，尽皆残留着淡淡的桅子花香，每一阵花香，都是一段美好的记忆。</p>
<p>接近半程时，雨渐渐变得密集起来，一小会儿的功夫，就开始转为狂风暴雨。这雨转换得太突然，完全找不到避雨的地方，我只好一只手将T恤的领口撑开，另一只手将花从下向上放进衣服里护着，避免被大风大雨给打落了花瓣。就这样，我在瓢泼大雨中缓缓地前行着，有好几次想将花儿给拿出来，因为这样走路会轻松些，可以早点回家，但当闻到从领口传出来的花香，想到被风吹得光凸凸的花枝，就又放弃了这个念头，爱是需要被呵护的。</p>
<p>我护着这束桅子花，终于走到了小区门口。突然发现有两朵新花正在盛情绽放，花瓣亭亭玉立，香味浓郁幽长。看着这两朵惊艳的花，我会心地笑了，这一路走来，很值，我想她一定会很喜欢！</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2023年</category>
      </categories>
      <tags>
        <tag>散文</tag>
        <tag>生活</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>假如即将死去</title>
    <url>/posts/2018/27Y513A.html</url>
    <content><![CDATA[<p>刚好凌晨，往窗外一瞥，在玻璃里便遇见了思考的自己。我和他安安静静地对视着，他模仿的我表情，我复制他的动作，在这无尽的黑夜里，倒也是有趣。
<img data-src="http://a3.qpic.cn/psb?/V118G3dh0IatwX/2uWcjCUJex6gbl25TPAYR7dtIDIpfSyETOn6.gO9E0o!/b/dCIBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=VAY4BAAAAAAREEk!&amp;t=5&amp;tl=3&amp;su=023370129&amp;tm=1566108000&amp;sce=0-12-12&amp;rf=2-9"
alt="图片" /></p>
<p>他对我说，他在思考，假如现在即将死去，那生前的经历，是否足以瞑目？</p>
<span id="more"></span>
<p>我也在沉思这个问题，并努力地回想前二十几年的记忆，恍惚间，忽然发现我就像一名演员，一直在一个剧本中兜兜转转，吃饭，喝水，学习，工作，过着浅薄，空虚和充满麻烦的生活，本色地出演着红尘这部大戏。直至死亡时，可能自己都认为这就是人生。</p>
<p>越细想越觉得甚是恐怖，如果我们维度以外还有第四维的生物，那么我们存在的作用就像是在绘制一幅画卷而已。在四维生物的眼中，若把空间当作时间的因变量，那么每个人便仿佛一枝画笔，他的人生，只是一条弯弯扭扭，来回曲折的线条，出生是线条的起点，死亡是线条的终点，一个人，一条线，线的结束，于他们来说，只是画卷的一笔，对我们来说，却是人生的终止。</p>
<p>但又有线条不一样，同为线条，有的是五颜六色，引导着其他线条的走向，有的则是平平淡淡，碌碌无为，只能化为笔墨下的点缀。生命只有那么长，有的生命逝去了，就像他不留恋这世间一样，世间也渐渐抹去了他的痕迹；有的生命虽然消逝，但是他的印记却耐住了时间的磨炼，恒远流长。</p>
<p>究竟是什么造就了这么大的差异？是思想，是境界，是精神。</p>
<p>一代诗人屈原，虽然死在了几千年前，但却永远的活在了人们的心里，他的死亡，只是肉体的消散。而那个时代更多的人，死亡了，便就永远不在了。这就是自身精神境界的不一样，屈原的思想在肉体存在的时候，便可通透万古，最后化为千古绝叹，留传世间。想起一个朋友曾经说过，每个人的精神应该要一直在远行，我觉得这很有道理，人除了在现实生活中存在，还应该构建自己的精神国度，在精神国度中活着。虽然我们是一条线，身不由己，但是我们可以选择在自己的精神国度灿烂。</p>
<p>这让我想起一件往事：有一次和同事一起回家，路上偶然抬头看了一眼天空，只见晚霞和白云一齐落在天际，我不禁欢喜，掏出手机，拍了一张。同事问我“你很喜欢拍照啊？”。我当时镇了一下，他为什么问我这个问题，而不是被这个美景所感动呢？现在我大约明白了，一个人若是只跟着原始意识生活，而少了了精神上的生活，即便是置之美也浑然不知。相反，有精神生活的人，生活的艰难也难以在他的身上刻下烙印。</p>
<p>阅读则可以丰富我们的精神生活，读万卷书犹如行万里路，生命短暂，没有什么是比阅读更快的交通工具了，在有限的生命里，我们用阅读来延伸生命，用思考给精神提供远行的动力，让思想行过时间，行过空间，最后抵达永恒。</p>
<p>假如即将死去，我该要含恨了。庆幸的是，人生距离终点还很远，我可以好好走下去。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2018年</category>
      </categories>
      <tags>
        <tag>生活感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>表演</title>
    <url>/posts/2018/2E319BV.html</url>
    <content><![CDATA[<p>刚好凌晨，往窗外一瞥，在玻璃里便遇见了思考的自己。我和他安安静静地对视着，他模仿的我表情，我复制他的动作，在这无尽的黑夜里，倒也是有趣。</p>
<p>他对我说，他在思考，假如现在即将死去，那生前的经历，是否足以瞑目？</p>
<span id="more"></span>
<p>我也在沉思这个问题，并努力地回想前二十几年的记忆，恍惚间，忽然发现我就像一名演员，一直在一个剧本中兜兜转转，吃饭，喝水，学习，工作，过着浅薄，空虚和充满麻烦的生活，本色地出演着红尘这部大戏。直至死亡时，可能自己都认为这就是人生。</p>
<p>越细想越觉得甚是恐怖，如果我们维度以外还有第四维的生物，那么我们存在的作用就像是在绘制一幅画卷而已。在四维生物的眼中，若把空间当作时间的因变量，那么每个人便仿佛一枝画笔，他的人生，只是一条弯弯扭扭，来回曲折的线条，出生是线条的起点，死亡是线条的终点，一个人，一条线，线的结束，于他们来说，只是画卷的一笔，对我们来说，却是人生的终止。</p>
<p>但又有线条不一样，同为线条，有的是五颜六色，引导着其他线条的走向，有的则是平平淡淡，碌碌无为，只能化为笔墨下的点缀。生命只有那么长，有的生命逝去了，就像他不留恋这世间一样，世间也渐渐抹去了他的痕迹；有的生命虽然消逝，但是他的印记却耐住了时间的磨炼，恒远流长。</p>
<p>究竟是什么造就了这么大的差异？是思想，是境界，是精神。</p>
<p>一代诗人屈原，虽然死在了几千年前，但却永远的活在了人们的心里，他的死亡，只是肉体的消散。而那个时代更多的人，死亡了，便就永远不在了。这就是自身精神境界的不一样，屈原的思想在肉体存在的时候，便可通透万古，最后化为千古绝叹，留传世间。</p>
<p>想起一个朋友曾经说过，每个人的精神应该要一直在远行，我觉得这很有道理，人除了在现实生活中存在，还应该构建自己的精神国度，在精神国度中活着。虽然我们是一条线，身不由己，但是我们可以选择在精神的国度灿烂。</p>
<p>这让我想起一件往事：有一次和同事一起回家，路上偶然抬头看了一眼天空，当时晚霞和白云齐放，让我不禁欢喜，掏出手机，便拍了一张。同事问我“你很喜欢拍照啊？”。我当时镇了一下，他为什么对这么美的景致视而不见呢？现在我大约明白了，一个人要是只跟着原始意识生活，而少了了精神上的生活，即便是置之美也浑然不知。相反，有精神生活的人，生活的艰难也难以在他的身上刻下烙印。</p>
<p>阅读是精神生活的一部分，读万卷书犹如行万里路，生命短暂，没有什么是比阅读更快的交通工具了，在有限的生命里，我们用阅读来延伸生命，用思考给精神提供远行的动力，让行过时间，行过空间，最后抵达永恒。</p>
<p>假如我现在逝去，只能含恨了，原来只是个演员。</p>
<p>渡过今晚，便要重活一世。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2018年</category>
      </categories>
      <tags>
        <tag>散文</tag>
      </tags>
  </entry>
  <entry>
    <title>张家界游记</title>
    <url>/posts/2018/DRBTMR.html</url>
    <content><![CDATA[<p>2017
年的年假还没过完，便买了车票奔向项目部，因为年初的原因，直达的票很难买，我便取了个折中的办法，从黔江坐汽车，经过秀山，再途径张家界，最后坐火车到项目部。</p>
<span id="more"></span>
<p>自从毕业之后，就没有正正经经的出去玩过，趁着假期，到心心念念的张家界看看。为了这个心愿，特意买了一个单反，然后就坐着车抵达了。初五的下午抵达张家界，安顿好到之后，便一个人出去觅食，打了个的士，在地图上很近，但是居然要我10块钱，有一点不愿，但是想想，自己是出来玩儿的，为嘛那么斤斤计较，开心就好，便很高兴的上车了。</p>
<p>来到步行街，走了一大圈，居然都没有发现一个比较平民的能填饱肚子的地方。最后地儿是找到了，但是真的贼贵，一个茄子要10块，这导致我今天的晚餐就是一个茄子。</p>
<p>最后去超市买了一堆零食，然后看看时间还挺早的，就去网吧呆到11点的样子，玩儿了一会儿天刀，玩儿了几把英雄联盟，唯一的感受就是，卡蜜儿有时候厉害，有时候又是弱鸡。</p>
<p>回到住的地方已经12点了，折腾折腾wifi，看看电视剧，居然已经到3点了。心想，明天还要去天门山呢？这个状态怎么能够醒得来啊！简直了，然后设了两个闹钟，一个6:45的，一个7:10的，可是后面的一个闹钟没响，导致睡到了9点，起床洗漱，然后准备出发天门山。</p>
<p>来到售票大厅，我的天，那么长的队，得到天黑啊……干脆算了，去报个团，明天游一天吧，今天就回去上网好了。来到旅行社一了解，得知张家界森林公园这一个地方，于是又坐车到张家界森林公园。这儿的风景确实不错，一张门票可以使用四天，可是当我看到地图的时候，四天哪能够游完啊！沿着台阶，慢慢的登顶。因为天气冷，又下雨，地很滑，走得很慢，沿途的风景很美，山也很壮观。来到黄石寨顶的时候，眼前豁然开朗，有一种千里冰封，万里雪飘的爽飒和壮阔，有一种白装素裹的妖娆，有一种海阔天空的舒畅。</p>
<p>下山坐了一次索道，这是我人生中第一次坐索道，感觉很好，不是很怕，但是天气原因，雾气太重，看不清下面的风景，我想，夏天应该会很好。</p>
<p>晚上回到住处，发现没什么事儿干，去网吧happy到00:00，可是钱没用完，但也得走了，否则明天肯定起不来了，回去还是看看电视剧，又到3点了。起来得很晚，不过睡得还不错，第二天入口都已经14:00了，随便看看就回去吧，地图害了我，本来觉得一会儿就到的地方，要走很久，买的是18:16的票，最后几经周折，终于赶上火车，完美的结束了张家界之行。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2018年</category>
      </categories>
      <tags>
        <tag>散文</tag>
      </tags>
  </entry>
  <entry>
    <title>倾心音乐</title>
    <url>/posts/2018/268TABM.html</url>
    <content><![CDATA[<p>许久未听音乐了，今天一时兴起，带上耳机，当音乐响起的那瞬间，整颗心一下子被那久违的旋律掳了去，沉浸在音乐的世界里无法自拔，忽然有种喜极而泣的感动，那种感觉，就像吃了很久的清水煮白菜，突然吃到一次柠檬酸汤鱼，幸福感扑面而来。</p>
<span id="more"></span>
<p>我喜欢音乐，对于喜欢的歌曲，一首就可以听到手机换代，可是说来也奇怪，听了几十上百遍的歌曲，记不住歌词，记不得旋律，就连歌名也只是有个模糊的印象。后来仔细想了想这个问题，发现自己听歌的时候，心思根本不在它上面，而是思绪到处飘啊飘，天马行空，悠哉游哉。</p>
<p>音乐，有这么一种魔力，让我在纷纷挠挠的世界里，觅得一片自由自在。每当音乐响起时，周遭的一切在悠悠扬扬的旋律中，便渐行渐远，灵魂缓缓地从身体中剥离出来，穿过厚厚的混凝土墙壁，在大自然中无拘无束地徜徉。身于一隅，心无羁绊，这便是音乐的魅力，它为心灵构筑了一片纯净而自由的世界。</p>
<p>音乐于我，就像酒于诗人般，让人灵感迸发。诗人们喜欢饮酒作诗，大概是酒醉人心，让人再无余力旁念，遂得灵感吧。音乐的作用，和酒有异曲同工之妙，音乐一起，本是躁动的心便渐渐安静了下来，被杂念染了的思绪，如墨入宣，慢慢晕散开来，散而不乱，反倒是更兼神韵。此时的心，空灵纯净，一念一感，或是忧国忧民，或是文思泉涌，又或是壮志凌云，大有执一凡心，兼济天下的豪情。因为心净，是以对周围的物与景，有更真切的感受，思考更为发散，同时也兼备了一定的创造性。大家都不喜欢夏天，可是当我听着音乐，走在盛夏正午的太阳下时，却是另一番感受，不由得喜欢上了夏天。</p>
<p>音乐，一般代表着吵闹，但在我看来，音乐却是安静的，它让身边的本是喧嚣的世界，如流水般涓涓流淌，结庐在人境，而无车马喧。音乐的静，浸人心扉，让人察觉不出时间的流逝。</p>
<p>记忆比较深的是，去年元旦从泰山返汉在列车上的感受。从泰安到武汉，大约要16个小时，坐这么久的车，很多人可能会觉得无聊无趣，受不了这种长途跋涉，但我却很享受这种时光。上车的时候是凌晨，醒来时，天已渐亮，便找了个靠窗的位置，带上耳机，让音乐相伴，看着窗外的蒙眬的景致掠过，仿佛自己成了一辆奔驰的列车，从黎明到下一个黎明，从一片田野到另一片田野，从一个城市到下一个城市。</p>
<p>列车一直哐铛哐铛地驶向人们心中的方向，我在音乐的浸染下，念头不断蔓延，时而化作青山，被绿水萦绕，时而躺在田野，饱饱地沐浴阳光，到站台时，又挤进人群，感受人们的依依惜别与近乡情切。是音乐，给了我如此无拘无束的洒脱，让我第一次感受到，他人笔下描述的旅途。等到下车时，突然发现，时间过得很快，居然不知不觉过去了16个小时，有些意犹未尽之感。</p>
<p>不同的人对音乐，大概是不同的诠释，但有音乐相伴，定是美好的，我想，音乐也是这样想。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2018年</category>
      </categories>
      <tags>
        <tag>生活感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>被一颗无垢之心净化</title>
    <url>/posts/2018/1GY6GF5.html</url>
    <content><![CDATA[<p>在这一期的极限挑战里，读到了候媛丽小朋友写的一篇未完成的文章：一天晚上近处的花园里，传来了淡淡的青草香味。我寻着清香走到一块偏僻的角落，哎呀，这不是我最爱的百合花吗？看！它们波浪的花瓣，一片一片优雅的伸着。我贪婪地望着那一朵朵百合花，眼里充满了清香，它们纯洁优雅，不像牡丹那样爱夸耀自己，向来平平静静地看着人世……</p>
<span id="more"></span>
<p>虽仅百余字，但却极为传神，你会情不自禁地走进她笔下的夜晚，去发现那美极了的百合花。我初次看到这篇文章时，真是不胜感慨，备受触动，字里行间中，感受到的，是小女孩最真挚的情感流露，若清水出芙蓉，洁净无瑕，未沾染一丝岁月的无病呻吟。读罢，自己心灵深处好似有一颗种子，忽然间挣破混沌，吐出了新芽。这种感觉，就像是一身污垢生活了很久，突然有一天，变得清清爽爽，这时，你会觉得，满世界的味道，都那么让人满足，充满希望。</p>
<p>未完...</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2018年</category>
      </categories>
      <tags>
        <tag>散文</tag>
      </tags>
  </entry>
  <entry>
    <title>转角恋上夏天</title>
    <url>/posts/2018/JW1J07.html</url>
    <content><![CDATA[<p>这个城市里的夏天，没有“人散后，一钩淡月天如水”的夜色，也没有“绿树阴浓夏日长，楼台倒影入池塘”的夏景，更没有“落落疏帘邀月影，嘈嘈虚枕纳溪声”的闲适，有的，是铺天盖地的热和南方那如溺水般的闷。</p>
<span id="more"></span>
<p>盛夏是最热的时候，阳光肆意地从穹顶洒下来，夹着暴躁的热，摊铺到整个大地上。空气中混合着的水汽和热，把光扰得露了身影，远远朝着沥青路面看去，气浪层层叠叠，若隐若现。只一眼，便热去了一身的精气神，恰似古人之言，“天地一大窑，阳炭烹六月”。</p>
<p>如果从物理的角度来体验夏天，确实如炉火那般，热得实实在在，但你若是怀着一颗欣赏的心，慢慢地契合夏天的韵律，一定会情不自禁地爱上这个季节。</p>
<p>感受夏天的狂野，在炙热的中午是最好的。喝上一两升水，收拾好心情，就可以出门了。踏出小区的瞬间，强烈的阳光从四面八方蜂拥而至，每颗阳光的活力直透每一寸肌肤，让人觉得仿佛置身于圣洁的海洋，心中的负面能量犹如光明遇上黑暗，无处藏匿，消散一空。在你还未来得及感受内心的变化的时候，那无穷无尽的热浪便如龙卷风般，疯狂向你奔袭而来，一下侵袭了你的意识。此时，你只需深深地呼吸一口这原始的空气，细细地去口味，便一下子就喜欢上它的味道了。</p>
<p>夏天的空气，在高温和紫外线的照射下，空气中掺杂的其它成分被过滤，留下了最自然的味道，草地旁，空气是青草味的，田野里，空气是稻香味的，湖泊旁，空气又是清新的味道。品一口夏天的空气，如掇一口碳火温过的酒，裹着醇醇的芳香，暖暖入心脾。</p>
<p>行走在盛夏里，也是一番别样的感受，仿佛大厨烹小鲜，以天地为器，以人为材，选用最好的阳光，辅以热而不烫的火候，让每颗体表细胞都充分吸收日光的活力。你能够清晰地感受到，出门前喝下去的水，仿佛在身体里游走，焕发出勃勃生机。只需在日光下一小会儿，毛孔便开始舒张开来，身体里的水分顺着毛细孔，漫在体表，在阳光的照射下，晶莹剔透，此时的状态，就如打开了奇经八脉那般，通体舒畅。</p>
<p>夏是一个有生命力的季节。“接天莲叶无穷碧，映日荷花别样红”是莲在绽放自己的风采；“漠漠水田飞白鹭，阴阴夏木啭黄鹂”是飞鸟在展示自己的魅力；“梅子留酸软齿牙，芭蕉分绿与窗纱”是自然在表达夏季的到来。在夏天，我们也应当做一件有生命力的事情，可以在最热的时候，吃一顿最辣的火锅，跑一次最长的步，又或者喝一次最烈的酒，如此才不枉这大好的时节。</p>
<p>走进夏天，方觉迷上夏天。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2018年</category>
      </categories>
      <tags>
        <tag>生活感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>梦之阴阳相望</title>
    <url>/posts/2017/BSTRJW.html</url>
    <content><![CDATA[<p><strong>2017-2-7 晚</strong></p>
<p>昨晚做了这样一个神奇的梦：</p>
<p>梦里我有两个妹妹，一个是现在的妹妹，一个是难产出生的妹妹。这个妹妹很特殊，妈妈说，生她的时候难产，身体损坏了，医生把她的灵魂渡入到一个
iPad
里面。家里人很喜欢这个小家伙的出生，虽然不幸，但是很开心她能够陪伴在我们身边。</p>
<span id="more"></span>
<p>父亲每天对着平板聊天，呵护小孩子一样，我们也会时不时的去逗几句。有一天，我看到父亲在平板上写字，我问他在干嘛，他说他在教女儿写字。因为妹妹的特殊性，她其实是生活在阴间，但是可以通过这个
pad
沟通阳间，我就问她，你在那边生活得怎么样？她说，她和爹爹生活在一起，起码有亲人陪伴，还有爷爷奶奶们也都在。我当时想，原来人逝去时候也会在一起的。</p>
<p>然后我问，给你烧的钱你那儿能用吗？因为现实中自己经济拮据，我希望这个妹妹在另一个地方不用为经济而烦恼，我想多给她烧一些纸钱。她说，她生活的地方和我们住的地方一样，纸钱可以用，但是阳间是什么样子，阴间也就是什么样子！</p>
<p>我当时感觉好内疚，作为大哥，不能给弟弟妹妹们好的生活，去了之后还因为自己的原因而住的那么破旧。很难受，为了改变阳间，阴间的生活，我必须得加油奋斗了！</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>梦</category>
      </categories>
      <tags>
        <tag>梦</tag>
      </tags>
  </entry>
  <entry>
    <title>岁月静好，便是幸福</title>
    <url>/posts/2018/WHDN7Q.html</url>
    <content><![CDATA[<p>今天看到一个朋友在朋友圈中分享这样一个故事:妈妈说外公的手机里连表姐的电话号码都没存，就存了我的。他这两天在练习打电话，非要给我打。虽然讲话还很混乱，还是很努力地和我讲，最后还对我说，要过好日子。</p>
<span id="more"></span>
<p>读完这条分享的时候，虽未亲身感受，但却也觉得特别温馨，感动欲浸透心房。短短几语，便勾勒出了祖孙深深地感情，长者慈，幼者孝，和谐美满。我在想，她当时是怎样的心情呢，是幸福，是感动，还是未能陪伴的憾然？</p>
<p>幸福是怎样的？这位朋友定很幸福，有人惦记，有人关心，也刚刚好，她发现了这份幸福。芸芸众生中，有的人，一生幸福，也有的人，却半生凄苦半生难，而有的人，身于福中而觉苦。何谓幸福，幸福，是心的一种感觉，各人各不相同的理解。</p>
<p>幸福很小，有时候是暖暖地一杯水，有时候是脉脉的一回眸，有时候是浅浅地一声叮咛，幸福也很大，它是勇往直前地奋斗，是百折不挠地坚持，是一生一世地呵护。</p>
<p>7月初，挚友林结婚，便借此机会，与相知10多年的好友，好好聚了一番。当时天色已晚，乌云摭住了月光，夜色掩了乌云下的雨，我们从中学便相识相知的几个挚友，择了一清吧，点一壶铁观音，伴着缕缕茶香，共诉衷肠。有些老友，好几载未得相遇，有些老友，平日间从未互通安好，只一面，便依然如中学那般，情谊浓长。大家毕业后，去向了不同的岗位，承担着不一样的责任，有了不同的发展，再聚首，你依然是你，我还是我，彼此，还是熟悉的那个人。得一知己，共同走过漫长的岁月，是一种幸福。</p>
<p>一次中午回家，在一家清蒸餐厅吃饭时，见几个工人正在这家店吃饭。他们的工服沾满了建筑涂料，发丛中藏着缕缕白发，虽上了年纪，但很是硬朗。他们各自点了一大碗面，三三两两地坐在一起，也不讲话，就那么安安静静的大口吃着。做工程甚是辛苦，淋最大的雨，晒最烈的太阳，受着最冷的风，呼吸着糟糕的空气，还有永无休止的力气活。他们许是累了，但眼睛却炯炯有神，充满着执着和希冀。我想，他们心底是幸福的，有挂念的人，有人挂念，为家人努力着，岁月漫长，却有一个值得相守的希望。</p>
<p>上个夏天，在光谷等公交时，偶然收获了一份幸福的画面。一位母亲正带着她大约两岁的小孩在等车，母亲正在玩手机，此时，一只苍蝇停在了母亲的鞋上，孩子见到后，便蹲下去，一直守在母亲的脚边，苍蝇一过来，就被他赶走了，这位母亲直到上车也没发现她的孩子在帮她驱赶苍蝇。幸福很小，小到被忽略。</p>
<p>如果我外公仍在世，可能也开始学用手机了，会不会打一通电话，从一个省到另一个省，然后在我的耳边喃喃，嘱咐别委屈了自己。</p>
<p>岁月静好，珍惜拥有，拥有的便是幸福。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2018年</category>
      </categories>
      <tags>
        <tag>生活感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>活得更努力一点</title>
    <url>/posts/2018/29ZPVW.html</url>
    <content><![CDATA[<p><img data-src="http://a2.qpic.cn/psb?/V118G3dh0IatwX/Afzoaoi1RhWWN99Njwaqi0iisv9wAJ**DTKlopad5Ow!/b/dIUBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;t=5&amp;tl=3&amp;su=0168223841&amp;tm=1566108000&amp;sce=0-12-12&amp;rf=2-9"
alt="图片" /> 又是一年，又是新的困惑。</p>
<p>已经毕业两年了，却是变化不大，只不过是从不想学习，变成了不想工作。上班的时候工作，下班的时候加班，放假的时候就赶紧逃离熟悉的地方，在陌生的地方，加载一份新鲜的记忆，然后又是工作，如此的单调，如此的重复着。在这兜兜转转的生活中，我发现自己迷茫了，不知前路是遥向何方，但心里一直有个声音，活着不应止于此的简单。</p>
<span id="more"></span>
<p>每当旅行结束之余，总觉得心里有些空虚，像是疲惫，又像茫然。我在想，三两年之后，此次旅行的记忆定是会模糊到我曾经去过的程度了，那在途中的所历所闻，又有何意义呢？这个问题一直搁在心里，久久未能落下。</p>
<p>前几天到兰州考试，便顺道去了西宁，在旅行中，结识了一位出差借周末时间而旅行的伙伴。她是一个爱好旅行的人，去了很多的地方，长白山天池有她的倩影，三亚也有她的足迹，对于成都，更是如数家珍。她去过了很多地方，从她身上，看不到我遇到的迷茫，反倒是，她让我感受到了对生活热爱，她的每次旅行，都变成了她生活中精致的点缀。</p>
<p>途中聊天时，我开口问她：每一次旅行，所到过的每一个地方，最后总会沦为记忆，越来越模糊，你觉得旅行，对你的意义是什么呢？</p>
<p>她想了想，回答我道：“我觉得，旅行对于我的意义，更多的是调剂生活吧。”</p>
<p>紧接着她回忆到：毕业的这几年，我每年都在考注会，但是工作特别忙，还经常加班，所以为了准备考试，加完班一回到家便开始看书，一看就是到晚上12点，平时也没有任何的业余活动，超过半个小时的活动，我一般都拒绝参加。工作学习累了，就利用假期去旅行，把它当作给自己努力的鼓励，就这样连续几年，一边工作，一边看书，今年终于通过了所有考试。对于目的地，我不是很在意它的风景，行得轻松，住得干净就够了，因为我觉得可以在紧张的工作学习中出来散心，用心感受不同地方的味道，这就是最美好的旅行了，所以，我每到一个地方，都很开心。就是这样，工作的时候努力工作，然后一有空就拼命看书，压力太大的时候就出去走走，这么多年就这样挺过来了…”</p>
<p>听着她把自己的经历娓娓道来，心底那颗激情的种子开始迸发了绿芽，我终于明白，这种破釜沉舟的努力才是自己渴望的，也明白，为何每次出行之后会感到空虚，因为自己的生活，一直浮于表面，从没有认真的坚持过，工作中自以为的很努力，禁不起一丝认真，没有必须完成的目标，也没有日日夜夜地挑灯夜读，甚至连早起都很少做到，一切，努力得那么的无力。</p>
<p>想起十点读书里面提到的一个观点，每个人都当给自己“生一个孩子”，它可以是一本书，可以是一个梦想，又或者是一份坚持，这样，你的精神就有了寄托，生活也就变得丰富，便也少了恐惧远方的迷茫。但我想，光就生孩子这件事，也是很困难的，起码需得十月怀胎，所以“生孩子”不是一天两天的事，而是长长久久的坚持与呵护。</p>
<p>新的一年，还可以更努力一点。每天一步一步地前行，扛着艰难困苦，终有一天，会抵达诗和远方。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2018年</category>
      </categories>
      <tags>
        <tag>生活感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>战胜梦境</title>
    <url>/posts/2018/1945B98.html</url>
    <content><![CDATA[<p>藏匿在心底深处的东西，只有在意识薄弱的时候才会伺机而动，所以，当一个人意志低迷或者处于睡梦中的时候，心灵深处的本质便会暴露。此时，平时自己压制的一些缺点会被放大，害怕变成恐惧；踌躇变成退缩；小恶变成大恶。仔细一想，这确实是一件恐怖的事情，虽然我们努力成为一个正能量的人，但是可能在心底深处的本质依然没有改变。</p>
<figure>
<img data-src="http://a1.qpic.cn/psb?/V118G3dh0IatwX/4LiGAg4ynPUKdZazieuQ2YcNxZleOFhc1DpjRbCl4xI!/b/dPQAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;t=5&amp;tl=3&amp;su=0107458785&amp;tm=1566108000&amp;sce=0-12-12&amp;rf=2-9"
alt="图片" />
<figcaption aria-hidden="true">图片</figcaption>
</figure>
<p>昨晚做了一个梦，一个特殊的梦。</p>
<span id="more"></span>
<p>以前在梦里，总会处于劣势，要么被追杀，要么若蝼蚁，要么绝望而无助，然后每次醒来，总有些懊恼，恼在自己的梦里却如此憋屈，同时心里也期待，下次再遇到类似的梦，我一定要奋起反抗，大不了醒来又是一条好汉。可是，在梦里总是身不由。反复多次之后，我意识到，在梦里是不会带入自己的意志的，能进去的，只有自己心灵最本质的东西。</p>
<p>昨晚的这个梦，让我真正感受到了心灵力量的强大。</p>
<p>天色渐晚，夕阳未落，月华却已洒向人间。我背着包，有些着急的找着住宿的地方。沿途的街道到处在施工，人们只能在施工搭设的防护下面走着，外面是机器的轰鸣，里面是人们三三两两的谈笑，人群熙熙攘攘，整个环境显得嘈杂。匆匆一瞥之间，看到一家理发店，这家店门前约2米的地方直接被立了一堵墙，墙已经老旧得有些发黄，应该是有一段时间了，而理发店也关着门，但是在靠着墙的位置，一位中年男子正在为一位老爷爷理发，我看过去地时候，他正仔细地半蹲着身子，小心地给老爷爷刮着胡须。这一刻，心里很是触动，生活太不容易。</p>
<p>终于找到下榻地地方了，远远的望去，这家店除了大门前面是一条道路以外，其他地方要么是荒草漫野，要么是楼房拆除后剩下的断壁残垣，在这寂静的夜色中，它独自摇曳着昏黄的灯光。走进才发现，这家店是用青砖垒砌的三层小楼，呈四合院的形式分布，每层楼上零零散散的挂着各色的小旗子，但大部分颜色已经褪去，分不清了。院子里的灯显得很昏暗，朦朦胧胧的，中间有一口老井，应该是许久没用了，都爬满了苔痕。</p>
<p>散去一身疲倦，渐渐入睡。快至黎明，便被外面的尖叫声吵醒了，打开窗子一看，目之所及，全是铺天盖地的幽灵在肆虐。这些幽灵像极了昙华林卖的小铃铛，有一个圆圆的头，一个没有手脚的躯体，和女士们的婚纱形状类似，不过有些虚无，仿佛淡淡的烟，它们的头上只有两个眼眶孤零零的嵌着，眼眶中闪着猩红的光芒，欲择人而食。</p>
<p>我特别害怕，赶紧关了窗，打开朝向院子方向的门，准备去找别人求助。哪知刚一打开，一头幽灵便盯上了我，瞬间飘来，然后从我身体穿过，我只觉得一阵虚弱，回头一看，这家伙又飘过来了。在刹那间，我突然想起了曾经去武当山的一个画面，武当山南岩有一宫殿，名叫玄帝殿，当时我登上殿前一高台，对着苍天一拜，那一瞬间，我好似悟得道之真谛，心灵无穷极，心之所往，便可镇压一切魑魅魍魉。我默默地坚定自己地心神，相信心灵是有力量的，但仍旧很害怕，幽灵转瞬即至，又将夺体而过，在这千钧一发之际，我的体表一下迸发出微弱的金光，阻挡着幽灵穿体而过，这让我信心大增，试着挥出一拳，没想到直接把幽灵吓走了。</p>
<p>危险解除了，紧接着我又开始挣扎，想着是否冲进漫天的幽灵海中，帮助大家解决这次灾难，我心里完全没有底，不知自己能否抗住这么多的攻击，而且每个幽灵都自带恐惧效果，让人心底自然而然的畏惧，让人忍不住要退缩。回忆过去的一幕幕，想到自己在泰山顶时候的感受，当我立于山巅时，真是会当凌绝顶，一览纵山小，豪情万丈，当时的我觉得任世间千磨万难，我自当勇往直前，踏平一切困难险阻。于是，我毅然的跳入了幽灵海，跳下的瞬间，幽灵们仿佛洪水决堤，从四面八方向我涌来，铺天盖地，除了幽灵们红彤彤的眼睛，便是自己无边无际的恐惧，当时自己的豪迈全没了，就是害怕，还有倔强，不能放弃。我努力告诉自己，力量源自内心，心有多强大，能力就有多强。开始只能够堪堪的抵挡幽灵们穿体而过，后来，大约是破罐子破摔了，直接暴走，把幽灵们全部夷灭了。</p>
<p>后来天也亮了，便悠悠转醒，回到现实，整个人都很开心，因为自己终于战胜了梦境，梦中，从此我是主宰。</p>
<p>仔细思考，也弄不明白究竟是什么影响着梦里的自己，我想，大概就是每个人的心灵本质吧。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>梦</category>
      </categories>
      <tags>
        <tag>生活感悟</tag>
        <tag>梦</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次小孩住院吸取的教训</title>
    <url>/posts/2025/1C4RGF0.html</url>
    <content><![CDATA[<p>今天，小孩因连续高烧住院了，通过这个次住院经历，我学习到了一些诊断经验，也趟了一些住院的坑，在此总结反思，吸取教训，以此自勉。</p>
<span id="more"></span>
<h2 id="治疗经过">治疗经过</h2>
<p>整个治疗过程如下：</p>
<h3 id="第一天02-15"><strong>第一天</strong>（02-15）</h3>
<table>
<colgroup>
<col style="width: 19%" />
<col style="width: 35%" />
<col style="width: 45%" />
</colgroup>
<thead>
<tr class="header">
<th>时间</th>
<th>事件</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>02-15 00:30</td>
<td>第1次，突发发热至39度，吃退烧药</td>
<td></td>
</tr>
<tr class="even">
<td>02-15 06:00</td>
<td>第2次发烧，吃退烧药，决定就医</td>
<td></td>
</tr>
<tr class="odd">
<td>02-15 09:00</td>
<td>医生查手指血，说指标异常，需要住院</td>
<td></td>
</tr>
<tr class="even">
<td>02-15 10:30</td>
<td>成功办理住院，小孩再次高烧，护士使用退热栓退烧</td>
<td></td>
</tr>
<tr class="odd">
<td>02-15 11:30</td>
<td>做肺部 CT</td>
<td>小孩罕见咳嗽，且未闻干湿啰音，但是医生还是开了一个肺部
CT，最终结果显示正常</td>
</tr>
<tr class="even">
<td>02-15 15:30</td>
<td>静脉注射头孢消炎</td>
<td></td>
</tr>
<tr class="odd">
<td>02-15 06:00 ~ 02-16 09:00</td>
<td>不断反复高烧，通过美林进行退烧</td>
<td></td>
</tr>
<tr class="even">
<td>02-15 20:00</td>
<td>静脉注射消炎药</td>
<td></td>
</tr>
</tbody>
</table>
<p>入院第一天，医院未做其它检查，只是按病毒、细菌感染进行治疗。</p>
<p>个人认为，作为医生，应结合季节判断，初步定为病毒、细菌感染，就应该按这个方向安排一些检查进行排查。</p>
<h3 id="第二天02-16"><strong>第二天</strong>（02-16）</h3>
<table>
<colgroup>
<col style="width: 11%" />
<col style="width: 63%" />
<col style="width: 25%" />
</colgroup>
<thead>
<tr class="header">
<th>时间</th>
<th>事件</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>02-16 07:00</td>
<td>采血，进行以下检测：<br />血常规分析-1<br />大生化32项+心肌酶谱<br />降钙素原-1<br />DIC全套7项-1<br />免疫球蛋白补体
IgE6项<br />13种呼吸道病原体核酸检测<br />咽拭培养(一般细菌+嗜血杆菌)<br />小儿血培养</td>
<td>血型是主动要求的，不计入</td>
</tr>
<tr class="even">
<td>02-16 09:00</td>
<td>静脉注射头孢、氨溴索、激素</td>
<td></td>
</tr>
<tr class="odd">
<td>02-16 15:00</td>
<td>继续上述治疗方案</td>
<td></td>
</tr>
</tbody>
</table>
<p>今天早晨，安排采血，主要做了表中的 4 项检查。</p>
<p>由于从 15
号住院至今，小孩依旧反复发烧，因此医生开了激素用于阻断炎症因子继续扩大。</p>
<p>截止今天中午 12:00 已经没有出现发烧的情况，情况好转。</p>
<h3 id="第三天02-17">第三天（02-17）</h3>
<table>
<thead>
<tr class="header">
<th>时间</th>
<th>事件</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>02-17 08:30</td>
<td>血常规+CRP</td>
<td></td>
</tr>
<tr class="even">
<td>02-17 09:00</td>
<td>静脉注射头孢、氨溴索、激素</td>
<td></td>
</tr>
<tr class="odd">
<td>02-17 15:00</td>
<td>继续上述方案</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="第四天02-18">第四天（02-18）</h3>
<p>今天依旧是常规治疗，截止目前，小孩已经几乎恢复了，中午申请出院，医生说还要观察一天，但是今天治疗完后，也没有后续治疗了，回家观察也是一样，所以晚上直接回家。</p>
<h2 id="所有检查截图">所有检查截图</h2>
<figure>
<img data-src="https://oss.223434.xyz:2234/public/files/images/image-20250224175432218.png"
alt="image-20250224175432218" />
<figcaption aria-hidden="true">image-20250224175432218</figcaption>
</figure>
<h2 id="部分检查的作用">部分检查的作用</h2>
<p>通过询问 DeepSeek，了解到每项检查的作作用如下：</p>
<h3 id="血常规分析"><strong>血常规分析</strong></h3>
<ol type="1">
<li>区分感染类型
<ul>
<li><strong>细菌感染</strong>：通常表现为
<strong>白细胞总数升高</strong>（尤其是中性粒细胞增多），可能伴随
<strong>C反应蛋白（CRP）</strong> 或 <strong>降钙素原（PCT）</strong>
明显升高。</li>
<li><strong>病毒感染</strong>：白细胞总数可能正常或降低，淋巴细胞比例相对增高（如EB病毒、流感等）。</li>
<li><strong>其他病原体</strong>：如支原体感染可能表现为白细胞正常或轻度升高，但淋巴细胞比例增加。</li>
</ul></li>
<li>评估炎症反应
<ul>
<li><strong>C反应蛋白（CRP）</strong> 和 <strong>血沉（ESR）</strong>
等指标可反映体内炎症活跃程度，帮助判断感染严重性。</li>
<li>某些重症感染（如脓毒症）可能伴随血小板减少或异常白细胞形态。</li>
</ul></li>
</ol>
<h3 id="大生化32项心肌酶谱"><strong>大生化32项+心肌酶谱</strong></h3>
<p>大生化32项包括肝肾功能、电解质、血糖、蛋白质等指标。对于发烧的小孩，这些指标能帮助评估是否有器官损伤，比如肝脏或肾脏问题。例如，如果孩子有脱水，电解质可能异常；如果持续高烧，可能影响肝功能，转氨酶升高。此外，血糖异常可能提示代谢问题或严重感染。</p>
<p>大生化检查涵盖
<strong>肝功能、肾功能、电解质、血糖、蛋白质、血脂、酶类</strong>
等多项指标，帮助评估以下问题：</p>
<ol type="1">
<li><strong>评估脏器功能</strong>
<ul>
<li><strong>肝功能</strong>（如ALT、AST、胆红素）：排除肝炎、药物性肝损伤或EB病毒等感染引起的肝损害。</li>
<li><strong>肾功能</strong>（如肌酐、尿素氮）：判断是否因脱水、感染或肾炎导致肾功能异常。</li>
<li><strong>心肌酶谱</strong>（如CK-MB、LDH）：结合心肌酶谱检查，进一步筛查心肌损伤（见下文）。</li>
</ul></li>
<li><strong>发现电解质紊乱</strong>
<ul>
<li>发热伴呕吐、腹泻可能导致
<strong>低钠、低钾</strong>，严重时引发抽搐或心律失常。</li>
<li>长期食欲不振或脱水时，需监测 <strong>钙、镁</strong>
等电解质平衡。</li>
</ul></li>
<li><strong>识别代谢异常</strong>
<ul>
<li><strong>血糖异常</strong>：严重感染可能引发应激性高血糖，或低血糖（如脓毒症、代谢性疾病）。</li>
<li><strong>白蛋白降低</strong>：长期发热或营养不良可能导致低蛋白血症，影响免疫力。</li>
</ul></li>
<li><strong>辅助诊断特定疾病</strong>
<ul>
<li><strong>肌酸激酶（CK）升高</strong>：提示肌肉损伤（如肌炎、横纹肌溶解）。</li>
<li><strong>乳酸脱氢酶（LDH）升高</strong>：可能提示组织损伤（如溶血、心肌炎、某些肿瘤）。</li>
</ul></li>
</ol>
<p>心肌酶谱主要检查心肌损伤的标志物，比如CK-MB、肌钙蛋白。小孩发烧有时会并发心肌炎，特别是病毒感染后，比如柯萨奇病毒。心肌酶谱升高可能提示心肌受损，需要及时处理，避免病情加重。</p>
<p>心肌酶谱主要检测
<strong>CK-MB（肌酸激酶同工酶）、肌钙蛋白（cTnI/cTnT）、乳酸脱氢酶（LDH）</strong>
等，用于：</p>
<ol type="1">
<li><strong>筛查心肌炎</strong>
<ul>
<li>病毒感染（如柯萨奇病毒、流感病毒）可能引发心肌炎，表现为
<strong>胸痛、心悸、乏力</strong>，严重时导致心力衰竭。</li>
<li><strong>CK-MB和肌钙蛋白升高</strong>
是心肌损伤的标志，需结合心电图、心脏超声进一步确诊。</li>
</ul></li>
<li><strong>评估心肌损伤程度</strong>
<ul>
<li>持续高热可能增加心脏负荷，原有心脏疾病患儿风险更高。</li>
<li>心肌酶谱动态监测可判断病情进展或恢复情况。</li>
</ul></li>
<li><strong>鉴别其他疾病</strong>
<ul>
<li>某些全身性疾病（如川崎病、重症肺炎）可能继发心肌损伤，需及时干预。</li>
</ul></li>
</ol>
<p>这些检查通常在以下情况下考虑： ① 持续高热不退</p>
<p>② 伴随其他严重症状（如呕吐、乏力、尿少、水肿等）</p>
<p>③ 怀疑并发症（如心肌炎、肝肾损伤）</p>
<p>④ 常规治疗无效</p>
<p>当小孩发烧时，医生建议检测 <strong>降钙素原（PCT）</strong>
的主要目的是帮助
<strong>快速鉴别细菌感染与病毒感染</strong>，并评估感染的严重程度，从而指导抗生素的合理使用。以下是具体作用及临床意义：</p>
<h3 id="降钙素原pct">降钙素原（PCT）</h3>
<hr />
<h4 id="核心作用">核心作用</h4>
<ol type="1">
<li><strong>区分细菌感染 vs. 病毒感染</strong>
<ul>
<li><strong>细菌感染</strong>（尤其是全身性感染）： PCT水平
<strong>显著升高</strong>（例如脓毒症、肺炎链球菌肺炎、化脓性脑膜炎等）。</li>
<li><strong>病毒感染</strong>（如流感、普通感冒、手足口病）： PCT通常
<strong>正常或仅轻度升高</strong>（一般&lt;0.5 ng/mL）。</li>
<li><strong>非感染性炎症</strong>（如川崎病、幼年特发性关节炎）：
PCT通常不升高，有助于与细菌感染鉴别。</li>
</ul></li>
<li><strong>评估感染严重程度</strong>
<ul>
<li>PCT水平与细菌感染的严重程度呈正相关：
<ul>
<li><strong>轻度局部感染</strong>（如扁桃体炎）：PCT轻度升高（0.5-2
ng/mL）。</li>
<li><strong>严重细菌感染</strong>（如脓毒症、化脓性关节炎）：PCT显著升高（&gt;2
ng/mL，甚至&gt;10 ng/mL）。</li>
</ul></li>
<li>动态监测PCT可反映治疗效果：治疗有效时，PCT水平会快速下降。</li>
</ul></li>
<li><strong>指导抗生素使用</strong>
<ul>
<li><strong>高PCT水平</strong>：强烈提示细菌感染，需及时启动抗生素治疗。</li>
<li><strong>低PCT水平</strong>：若临床不支持细菌感染，可减少或避免不必要的抗生素使用，降低耐药风险。</li>
<li><strong>儿童脓毒症管理</strong>：PCT是国际指南推荐的脓毒症诊断和抗生素疗程调整的重要指标。</li>
</ul></li>
</ol>
<hr />
<h4
id="在儿童发热中的特殊价值"><strong>在儿童发热中的特殊价值</strong></h4>
<ol type="1">
<li><strong>早期识别脓毒症</strong> 儿童脓毒症进展迅速，PCT在感染后
<strong>2-4小时</strong>
即可升高，比CRP（C反应蛋白）更早反映全身性细菌感染，有助于早期干预。</li>
<li><strong>减少误诊风险</strong>
<ul>
<li>部分病毒感染（如腺病毒、EB病毒）可能引起高热和白细胞升高，易被误判为细菌感染，PCT可辅助鉴别。</li>
<li>对于 <strong>发热伴CRP升高但PCT正常</strong>
的患儿，需警惕病毒感染或非感染性炎症。</li>
</ul></li>
<li><strong>指导抗生素疗程</strong>
<ul>
<li>动态监测PCT（如每24-48小时检测）：
<ul>
<li>若PCT下降至正常范围，可考虑停用抗生素；</li>
<li>若PCT持续升高，需警惕治疗失败或并发症（如脓肿形成）。</li>
</ul></li>
</ul></li>
</ol>
<hr />
<h4 id="适用场景">适用场景</h4>
<p>医生可能在以下情况建议检测PCT：</p>
<ol type="1">
<li><strong>持续高热不退</strong>（&gt;3天），常规治疗无效。</li>
<li><strong>疑似严重细菌感染</strong>：如发热伴意识模糊、呼吸急促、皮肤瘀斑、四肢冰凉等脓毒症征象。</li>
<li><strong>复杂病情</strong>：如发热合并基础疾病（先天性心脏病、免疫缺陷）。</li>
<li><strong>术后或重症患儿</strong>：排查继发细菌感染。</li>
</ol>
<h3 id="dic-全套7项">DIC 全套7项</h3>
<p>主要目的是评估是否存在 <strong>弥散性血管内凝血（DIC）</strong>
——一种由严重感染、创伤或全身性疾病引发的凝血功能紊乱危重症。DIC可能导致全身广泛微血栓形成和出血倾向，若不及时干预可能危及生命。以下是具体作用及临床意义：</p>
<hr />
<h4 id="核心特征">核心特征</h4>
<p>DIC是多种疾病（如脓毒症、重症肺炎、中毒性休克）的并发症，表现为：</p>
<ol type="1">
<li><strong>凝血系统过度激活</strong>：全身微血管内血栓形成，消耗凝血因子和血小板。</li>
<li><strong>继发性纤溶亢进</strong>：血栓分解过程中引发异常出血（如皮肤瘀斑、黏膜出血、内脏出血）。</li>
<li><strong>多器官功能衰竭</strong>：微血栓阻塞导致器官缺血损伤（如肾衰竭、肝损伤、脑功能障碍）。</li>
</ol>
<hr />
<h4 id="检查的作用">检查的作用</h4>
<p>DIC检查通常包括以下指标（具体项目可能因医院略有差异）：</p>
<ol type="1">
<li><strong>血小板计数（PLT）</strong>
<ul>
<li><strong>意义</strong>：DIC时血小板被大量消耗，数值
<strong>进行性下降</strong>（&lt;100×10⁹/L提示风险）。</li>
<li><strong>注意</strong>：需动态监测，单次降低可能由其他原因（如感染）引起。</li>
</ul></li>
<li><strong>纤维蛋白原（FIB）</strong>
<ul>
<li><strong>意义</strong>：凝血过程中被消耗，DIC时
<strong>显著降低</strong>（&lt;1.5 g/L为危险信号）。</li>
<li><strong>例外</strong>：感染或炎症早期可能因应激反应暂时升高，需结合其他指标。</li>
</ul></li>
<li><strong>D-二聚体（D-Dimer）</strong>
<ul>
<li><strong>意义</strong>：反映纤溶活性，DIC时
<strong>显著升高</strong>（&gt;5 μg/mL提示高凝和纤溶亢进）。</li>
<li><strong>注意</strong>：其他血栓性疾病（如深静脉血栓）也会升高，需结合临床。</li>
</ul></li>
<li><strong>凝血酶原时间（PT）</strong>
<ul>
<li><strong>意义</strong>：外源性凝血途径异常时延长（DIC时通常
<strong>延长≥3秒</strong>）。</li>
</ul></li>
<li><strong>活化部分凝血活酶时间（APTT）</strong>
<ul>
<li><strong>意义</strong>：内源性凝血途径异常时延长（DIC时可能延长或正常）。</li>
</ul></li>
<li><strong>凝血酶时间（TT）</strong>
<ul>
<li><strong>意义</strong>：反映纤维蛋白原功能，DIC时因纤维蛋白原减少或异常而
<strong>延长</strong>。</li>
</ul></li>
<li><strong>抗凝血酶III（AT-III）</strong>
<ul>
<li><strong>意义</strong>：DIC时因过度消耗导致活性
<strong>降低</strong>（&lt;60%提示风险）。</li>
</ul></li>
</ol>
<h4 id="何时做">何时做</h4>
<p>医生在以下情况会高度警惕DIC风险，建议完善检查：</p>
<ol type="1">
<li><strong>严重感染</strong>：
<ul>
<li>脓毒症、重症肺炎、化脓性脑膜炎、坏死性筋膜炎等。</li>
<li>发热伴 <strong>皮肤瘀斑、穿刺点渗血、血便、血尿</strong>
等出血倾向。</li>
</ul></li>
<li><strong>休克或器官衰竭</strong>：
<ul>
<li>发热合并 <strong>血压下降、少尿、呼吸困难、意识障碍</strong>。</li>
</ul></li>
<li><strong>实验室预警信号</strong>：
<ul>
<li>血常规提示血小板进行性下降，或凝血功能（如PT/APTT）异常。</li>
</ul></li>
<li><strong>基础疾病加重</strong>：
<ul>
<li>白血病、实体瘤、严重肝病患儿发热时，DIC风险更高。</li>
</ul></li>
</ol>
<h2 id="总结">总结</h2>
<p>通过这次住院经历，首先学习了小孩发烧情况下，如何科学有效地处理。同时了解了各项检查的作用和使用场景，若再发生类似事件，今后可以做到心中有数。</p>
<p>从上面的检查项目中来看，有些项可以不必做，比如大生化32项、降钙素原等；有的项，可以提前做，比如13种呼吸道病原体核酸检测、咽拭培养(一般细菌+嗜血杆菌)这些不需要晨血的项目，可以帮助更早地定位病因。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2025年</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>《非暴力沟通》读书笔记</title>
    <url>/posts/2023/3KQXHMP.html</url>
    <content><![CDATA[<p><img data-src="https://picx.zhimg.com/v2-a806ce0971eddfde09491a2fdeac92fc_720w.jpg" /></p>
<p>读完《非暴力沟通》，略有所得，于是整理其中的阅读心得，以便在日常使用。</p>
<span id="more"></span>
<h2 id="总结">总结</h2>
<p>通读全书，其核心思想是：</p>
<p>不论什么场景（交流、愤怒、被别人感激等），我们都应该通过非暴力沟通的思想，先客观观察、接着体悟此时的感受、然后明确需要，最后根据需要提出请求。</p>
<p>通过非暴力沟通的 4
个步骤，使我们与人沟通时对事不对人，直指任务核心，提高沟通效率、降低情绪对自己的影响。</p>
<blockquote>
<p>重要的步骤再次重复一遍：</p>
<ol type="1">
<li>客观观察</li>
<li>表达感受</li>
<li>明确需要</li>
<li>提出请求</li>
</ol>
</blockquote>
<h2 id="第一章-让爱融入生活">第一章 让爱融入生活</h2>
<ul>
<li>转变谈话和岭听的方式，改用非暴力沟通</li>
<li>既诚实、清晰地表达自己，又尊重与倾听他人</li>
</ul>
<p><strong>非暴力沟通过程：</strong></p>
<ol type="1">
<li>先客观观察</li>
<li>接着表达感受</li>
<li>然后明确需要</li>
<li>最后提出请求</li>
</ol>
<h2 id="第二章-什么蒙蔽了爱">第二章 什么蒙蔽了爱?</h2>
<p>本章主要讲是什么让我们忽略了他人的感受，不知不觉地与他人在进行暴力沟通。</p>
<p>主要原因有：</p>
<ol type="1">
<li>用并道德标准去评判别人</li>
<li>与其它案例进行比较，达不到自己的期望</li>
<li>为了回避责任而失去理性</li>
<li>强人所难</li>
</ol>
<p>总结上述几条原因，可以归结为，我们习惯站在自己的角度看到问题，当他人未能达到自己的预期时，就会使自己容易失去理智，不自觉地产生暴力沟通。</p>
<h2 id="第三章-区分观察和评论">第三章 区分观察和评论</h2>
<p>观察：客观地对既有现象进行陈述</p>
<p>评论：带有主观意志地发表看法</p>
<p>以下面的一句话为例：</p>
<p><code>哥哥昨天无缘无故对我发脾气。</code></p>
<p>“无缘无故＂是评论。此外，我认为说哥哥发脾气了也是评论。他也可能是感到害怕、悲伤或别的。</p>
<p>以下例句描述了观察结果而不含任何评论：<code>哥哥告诉我他生气了</code>。</p>
<h2 id="第四章-体会和表达感受">第四章 体会和表达感受</h2>
<p>可以换位思考，细心地去体会对方的情绪，然后准确地表达自己的感受。</p>
<p><strong>感受与想法不一样，要注意区分：</strong></p>
<p>感受：描述自身客观的状态</p>
<p>例：<code>作为吉他手，我有些失落。</code></p>
<p>想法：通过主观加工后的表达</p>
<p>例：<code>我觉得我吉他弹得不好。</code></p>
<p>为了能够清楚表达自己的感受，可以借鉴以下词汇：</p>
<ol type="1">
<li>需要得到时满足时的感受：</li>
</ol>
<p>兴奋、喜悦、欣喜、甜蜜、精力充沛、兴高采烈、感激、感动、乐观、自信、振作、振奋、开心、高兴、快乐、愉快、幸福、陶醉、满足、欣慰、心旷神怡、喜出望外、平静、自在、舒适、放松、踏实、安全、温暖、放心、无忧无虑</p>
<ol start="2" type="1">
<li>需要没有得到满足时的感受：</li>
</ol>
<p>害怕、担心、焦虑、忧虑、着急、紧张、心神不宁、心烦意乱、忧伤、沮丧、灰心、气馁、泄气、绝望、伤感、凄凉、悲伤、恼怒、愤怒、烦恼、苦恼、生气、厌烦、不满、不快、不耐烦、不高兴、震惊、失望、困惑、茫然、寂寞、孤独、郁闷、难过、悲观、沉重、麻木、精疲力尽、委靡不振、疲惫不堪、昏昏欲睡、无精打采、槛勉、惭愧、内疚、妒忌、遗憾、不舒服</p>
<p>当听到不中听的话时，我们有四种选择：</p>
<ol type="1">
<li>责备自己</li>
<li>指责他人</li>
<li>体会白己的感受和需要</li>
<li>体会他人的感受和需要</li>
</ol>
<blockquote>
<p>根据场景选择不同的应对方式，第 3 和 4 会让人理智和客观</p>
</blockquote>
<h2 id="第五章-感受的根源">第五章 感受的根源</h2>
<p>感受的根源在于我们自身的需要(我觉得也可以理解成诉求)。通过了解我们自己的需要、愿望、期待以及想法，我们可以准确表达自己的感受。</p>
<p>当听到不中听的话时，我们就会去体会别人和自己的感受，然后进一步分析彼此的诉求，从而理智、客观地进行非暴力沟通。</p>
<h2 id="第六章-请求帮助">第六章 请求帮助</h2>
<p>当我们明确自己的需要后，要向对方提出具体的请求。为了使得请求更容易得到积极回应，我们可以：</p>
<ol type="1">
<li>提出的请求要具体。</li>
<li>在交流中明确谈话目的，不要跑题</li>
<li>主动请求反馈。可以主动问一句："我的意思楚了吗？"</li>
</ol>
<p>在实践中，我们要区分请求与命令的区别：—旦人们认为不答应就会受到责罚，他们就会把请求看作是命令。</p>
<p>因此，如果是领导对下属，可以提前清楚地表达自己无意强人所难，让避免让方将某个请求理解成命令。</p>
<h2 id="第七章-用全身心倾听">第七章 用全身心倾听</h2>
<p>为了倾听他人，我们需要先放下已有的想法和判断，全神贯注地体会对方，发现对方真实的需要。</p>
<p>倾听他人有助于对他人的理解和接纳。</p>
<p>有时，我们可以主动表达我们的理解，来帮助对方了解我们在何种程度上明白丁他的意思。</p>
<p>当我们痛苦得无法倾听他人时，我们需要：</p>
<ol type="1">
<li>体会自己的感受和需要</li>
<li>大声地提出请求</li>
<li>换—个环境</li>
</ol>
<h2 id="第八章-倾听的力量">第八章 倾听的力量</h2>
<ol type="1">
<li>通过倾听，我们将意识到他人的人性以及彼此的共通之处，这会使白我表达变得容易。</li>
<li>通过倾听，可以减少可能发生的潜在暴力</li>
<li>如果别人说“不”，有时候并不是拒绝，通过倾听，我们可以发现对方真实的诉求</li>
</ol>
<h2 id="第九章-爱自己">第九章 爱自己</h2>
<p>将非暴力沟通应用于自身，让自己与本我进行非暴力沟通，从而培育对自己的爱。</p>
<p>当我们的表现不完美时，我们可以通过体会忧伤和自我宽恕，来看清个人成长的方向，以及避免自我惩罚。</p>
<p>当评价自己的行为时，我们专注于尚未满足的需要。</p>
<p>在曰常生活中，我们主动根据需要和价值观来选择生活，用“选择做”来取代“不得不”，将被动转为主动。</p>
<blockquote>
<p>将【不得不做】做转换成【我选择做_<strong><em>，是因为我想</em></strong>_】，激发主观能动性</p>
</blockquote>
<h2 id="第十章-充分表达愤怒">第十章 充分表达愤怒</h2>
<p>非暴力沟通并不主张忽视或压抑愤怒，它认为，通过深入地了解愤怒，我们可以充分表达内心的渴望。</p>
<p>愤怒形成的原因：由于自身的感受和需要没有得到满足</p>
<p>在愤怒时，我们应专注于自己或他人的感受和需要，将愤怒化为满足需求的动力，而不是驱使我们去惩罚他人。</p>
<p>表达愤怒的步骤：</p>
<ol type="1">
<li>首先，停下来，除了呼吸，什么都别做，我们避免采取行动去指责或惩罚对方。我们只是静静地体会自己</li>
<li>想—想是什么想法使我们生气了</li>
<li>了解自己想要满足的需要</li>
<li>表达感受和尚未满足的需要</li>
</ol>
<h2 id="第十一章-运用强制力避免伤害">第十一章 运用强制力避免伤害</h2>
<p>在有些情形中，我们没有机会和他人交流，这时，我们也许需要使用强制力来保护白己和他人。使用强制力的目的是出于防卫的巨的而不是为了惩罚对方。</p>
<h2 id="第十二章-生活的热情">第十二章 生活的热情</h2>
<p>通过运用非暴力沟通，我们不再试图分析自己或他人有什么毛病，而是用心去了解我们的需要，这样，我们的内心将逐渐变得平和。—旦我们发现自己心底深处的愿望并采取积极的行动，我们将会重获生活的热情。</p>
<h2 id="第十三章-表达感激">第十三章 表达感激</h2>
<p>非暴力沟通表达感激的方式包含三个部分：</p>
<ol type="1">
<li>对方做了什么事情使我们的生活得到了改善</li>
<li>我们有哪些需要得到了满足</li>
<li>我们的心情怎么样</li>
</ol>
<p>当另别人对我们表达感激时，我们可以与对方—起庆祝生命的美—既不自大，也不假谦虚。</p>
]]></content>
      <categories>
        <category>Essay</category>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>一腔热血夜雪山，奇灵怪异退堂鼓</title>
    <url>/posts/2023/2BPZ3DJ.html</url>
    <content><![CDATA[<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230717005034407.png"
alt="image-20230717005034407" />
<figcaption aria-hidden="true">image-20230717005034407</figcaption>
</figure>
<p>一条小溪从茂密的山林里窜了出来，缓缓地流向远方，直到在那无尽的远处，消失不见，佛淌进了九幽的黑暗里。在小溪的尽头，一条上泛着灰白的硬水泥路蜿蜒曲折而至，时而与小溪相向而行，时而又隐匿在群山之中，它不断逆流而上，爬上了附近的最高峰，快到山顶时，戛然而止，好似用尽了全身的力气，再也不能向上分毫。</p>
<span id="more"></span>
<p>这座山便是我们一行人的目标，我们计划夜宿山顶，欣赏第二天的日出。到山脚下时，天色已近晚，我顺着水泥路的方向，向山顶看了过去，只见半山腰上三两人家炊烟袅袅，他们的房子制式很统一，采用传统的木结构，大门向南开，左右两侧分别是厢房，但有一点很奇怪，大家都在房子的右侧整整齐齐地备好了一堆木头当材火。</p>
<p>我们沿着公路开始向山顶出发，在公路的尽头，是一条幽长狭窄的小路，直达山顶。快到山顶时，天空就已经被黑暗笼罩，扭头向山腰看去，几家灯火明灭不定，但炊烟依旧袅袅。</p>
<p>突然一户人家窗子突然打开了，打开的瞬间，窗子里绽放出了灿烂的金光，这金光不刺眼，且异常温和，在这夜色里，让人有一种亲近和温暖的感觉。正在感叹之际，从窗户时探出一老者，两鬓斑白，应该已年近古稀，他朝着山顶的方向招呼，就像呼唤孩子回家一样，就在这时，整座山刮起了大风，窗户里的光也被吹得摇曳不定，老人便关上了窗户。</p>
<p>看到这，我们也没多想，继续朝着目标营地出发。没一会儿，天空就开始飘起了碎碎的雪花，随后不到一盏茶的时间，山顶又开始狂风乱作，飘起了鹅毛大雪。肉眼可见地，整片山脉慢慢地亮了起来，全部化作了白茫茫地一片。待到积雪有半尺左右的时候，雪又骤然停了，此时再向山下看去，几户人家已经被淹没在了雪地里。</p>
<p>此时我们一队人围在一起，面面相觑，这阵雪来得有些诡异。突然地气温下降，打了大家一个措不及防，随身所带的衣服也很单薄，无法在这样的环境下保暖，今晚将注定是煎熬的一夜。我突然回想起刚上山顶的场景，想到老者的呼唤，顿时觉得这坐山可能有问题，于是想借着雪停了空当，下山去。</p>
<p>我向大家表达了下山想法，有的表示想在原地静观其变，等天亮了再做打算，有的想继续前行，一鼓作气地走到目的地。就这样，大家就此分道扬镳，我开始向山下走去。</p>
<p>走着走着，发现下山的路已经变得不再熟悉，此时，一座破烂的车站映入眼帘，和公交车站类似，有一个遮雨棚和一块站牌，片子上写着一个站字，其它的字已经被锈蚀，完全看不出来是什么了。</p>
<p>我走近站台，发现站台上已经有一位队友到了，看他的样子，像是在候车。我正准备走过去和他搭话，突然心里咯噔一下，因为这位队友是继续爬山的队友之一，此时的他，已然换了一身干净的素色长袍，登山的工具包也不在背上，他手里拿着一张车票，就在那看着山顶的方向。我的心里突然生出了一种不好的预感，我静静地立在原地，轻微地呼吸着，一动也不动地观察着。</p>
<p>过了一阵，一辆大巴车莫名地从山顶的方向缓缓驶来，破破烂烂地，车牌是诡异的红色。虽然已有很深的积雪，但是车轮轧过后，却没有留下一丝痕迹。大巴在站台处停了下来，那个队友便拿着车票准备上车，在登上车门口的时候，他扭头看了一眼山下，我从侧面看过去，他的眼里是深深不舍与留恋。随后，大巴启动，朝着山下驶去，直到消失在茫茫地雪地里。</p>
<p>虽然没有车痕，但我记着小车驶过的路线，于是沿着它的路径，不停地走着走着，不知过了多久，突然感觉脚下的质地不一样了，是踩在马路上的感觉，再继续向前走几步，突然周围变得漆黑一片，我定睛一看，此时所在的地方，正是上山时马路的尽头，山腰上的人家依然亮着灯火，只是在这诡异的夜里，仿佛风中残烛，摇曳不定。</p>
<p>我转身再看向山上，整座山脉充斥着空无和寂静，那漫天的大雪好似从未出现过一样，心底生出一阵恐惧和后怕。</p>
<p>我心底默默回忆着刚上山时那灯火温暖的感觉，缓缓地向着人家的方向走去......</p>
<blockquote>
<p>梦于 2023-07-09</p>
</blockquote>
]]></content>
      <categories>
        <category>Essay</category>
        <category>梦</category>
      </categories>
      <tags>
        <tag>生活感悟</tag>
        <tag>梦</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>一张彩票引发服务器宕机一整天</title>
    <url>/posts/2025/1QGRPD8.html</url>
    <content><![CDATA[<p>"No zuo no
die"，今天算是被狠狠地教育了一顿，今天发生了一件绝对离奇的事情，一张彩票居然导致我的服务器宕机了一整天，事后回想起来，还是忍俊不禁。</p>
<p>实情的经过是这样的...</p>
<span id="more"></span>
<p>家里的服务器使用 esxi
的虚拟机进行安装，服务器除了系统盘外，还有两块硬盘，一块挂载到
<code>/home</code> 目录，一块是备份，分别为
<code>sdb1</code>，<code>sdc1</code>。</p>
<p>某天，<code>sdc1</code>
突然掉线，不能使用了。然后我当时的想法就时，硬盘坏了，然后一顿猛虎操作，各种检测，最终定性为硬盘彻底坏了。就在准备拆硬盘时，发现硬盘供电的电源松了，那就插上试试吧，居然好了！</p>
<p>这个时候，还挺开心，因为不是硬盘问题，省了硬盘钱。</p>
<p>接着，我脑海里开始浮现出一个有创意的想法："两块硬盘不好辨识，还是贴个标签区分下吧"，这个操作一点毛病没有，但神奇的操作就来了。我环视了下，周围没有什么可以作为标签的纸，突然发现在胶带下面压着一张陈年双色球彩票，成色挺新，纸张也不错，上面还有底纹，心想，这个当作标签，看着很高端啊，就它了。</p>
<figure>
<img data-src="https://oss.223434.xyz:2234/public/files/images/image-20250224130536026.png"
alt="image-20250224130536026" />
<figcaption aria-hidden="true">image-20250224130536026</figcaption>
</figure>
<p>然后就撕了一个小长条，写上标签，往硬盘线(<code>sdb1</code>，挂载
<code>\home</code>
目录的硬盘)上一包，然后开始启动，此刻，灾难开始降临了！</p>
<p>启动的时候，就出现错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">critical target error, dev sdb, sector 1396705280 op 0x0:(READ) flags 0x83700 phys_seg 1 prio class 0</span><br><span class="line">Buffer I/O error on dev sdb, logical block 1932735065,async page <span class="built_in">read</span></span><br><span class="line">critical target error, dev sdb, sector 1931223880 op 0x1:(WRITE)flags 0x9800 phys_seg 12 prio class 2</span><br><span class="line">EXT4-fs error (device sdb1): ext4_wait_block bitmap:582: comn ext4lazyinit: cannot <span class="built_in">read</span> block bitmap - block_group = 5552, block</span><br></pre></td></tr></table></figure>
<p>磁盘无法读写。</p>
<p>于是猜测可能是当时插拔电源的时候，导致硬盘坏道了，然后以开始不断折腾尝试，进行磁盘修复、磁盘健康检查、接线检查、重启系统、都无法解决。期间也问了
DeepSeek 等 AI 助手，皆无法解决。</p>
<p>在某次进行 <code>sudo fsck -f /dev/sdb1</code>
当磁盘修复时，重新挂载后，可以读取到里面的文件了，于是赶紧使用
<code>rsync</code> 将整个 <code>/home</code>
备份。然后开始对磁盘进行格式化，esxi 虚拟机重建，一直折腾到第二天凌晨 2
点，依然无法解决。</p>
<p>最后，想着算了，反正数据备份了，重新买一块盘吧。</p>
<p>早上起来后，脑中又开始琢磨，自己不至于这么倒霉，硬盘全坏了，现在的工况和以前正常时，好像没变呀，想着想着，突然灵光一闪，难不成是标签的原因？于是死马当活马医，然后将标签撕掉，重启后，硬盘正常被读写！</p>
<p>然后问了 DeepSeek，可能的原因如下：</p>
<ol type="1">
<li><p>彩票纸张或油墨可能含有微量金属成分，包裹时形成电磁屏蔽层，干扰
SATA 信号传输（尤其是高频信号）</p></li>
<li><p>实验数据表明，普通印刷品可使 2.5GHz 信号衰减 3-5dB，超出 SATA III
规范要求的 ±0.5dB 容差</p></li>
</ol>
<p>真相了，该死的彩票，尽欺我老实人！</p>
<p>经过这次事件，吸取了一些教训，以此自勉：</p>
<ol type="1">
<li>没事不折腾</li>
<li>遇事先思考再动手</li>
<li>遇事不明时，不要想太复杂，由简入深地慢慢理</li>
</ol>
]]></content>
      <categories>
        <category>Essay</category>
        <category>2025年</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>docker常用命令集合</title>
    <url>/posts/2021/2BXPYRB.html</url>
    <content><![CDATA[<p>docker 的常用命令集合。</p>
<span id="more"></span>
<h2 id="语法说明">语法说明</h2>
<p>[ ] 号代表是可选项</p>
<h2 id="容器生命周期管理">容器生命周期管理</h2>
<table>
<colgroup>
<col style="width: 40%" />
<col style="width: 20%" />
<col style="width: 40%" />
</colgroup>
<thead>
<tr class="header">
<th>命令</th>
<th>作用</th>
<th>语法</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a
href="https://www.runoob.com/docker/docker-run-command.html">run</a></td>
<td>创建一个新的容器并运行一个命令</td>
<td>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</td>
</tr>
<tr class="even">
<td><a
href="https://www.runoob.com/docker/docker-start-stop-restart-command.html">start/stop/restart</a></td>
<td>启动/停止/重启容器</td>
<td>docker start/stop/restart [OPTIONS] CONTAINER [CONTAINER...]</td>
</tr>
<tr class="odd">
<td><a
href="https://www.runoob.com/docker/docker-kill-command.html">kill</a></td>
<td>杀掉一个运行中的容器</td>
<td>docker kill [OPTIONS] CONTAINER [CONTAINER...]</td>
</tr>
<tr class="even">
<td><a
href="https://www.runoob.com/docker/docker-rm-command.html">rm</a></td>
<td>删除一个或多个容器</td>
<td>docker rm [OPTIONS] CONTAINER [CONTAINER...]</td>
</tr>
<tr class="odd">
<td><a
href="https://www.runoob.com/docker/docker-pause-unpause-command.html">pause/unpause</a></td>
<td>暂停/恢复容器</td>
<td>docker pause/unpause CONTAINER [CONTAINER...]</td>
</tr>
<tr class="even">
<td><a
href="https://www.runoob.com/docker/docker-create-command.html">create</a></td>
<td>创建一个新的容器但不启动它</td>
<td>docker create [OPTIONS] IMAGE [COMMAND] [ARG...]</td>
</tr>
<tr class="odd">
<td><a
href="https://www.runoob.com/docker/docker-exec-command.html">exec</a></td>
<td>在运行的容器中执行命令</td>
<td>docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</td>
</tr>
</tbody>
</table>
<h2 id="容器操作">容器操作</h2>
<table>
<colgroup>
<col style="width: 34%" />
<col style="width: 34%" />
<col style="width: 31%" />
</colgroup>
<thead>
<tr class="header">
<th>命令</th>
<th>作用</th>
<th>语法</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a
href="https://www.runoob.com/docker/docker-ps-command.html">ps</a></td>
<td>列出容器</td>
<td>docker ps [OPTIONS]</td>
</tr>
<tr class="even">
<td><a
href="https://www.runoob.com/docker/docker-inspect-command.html">inspect</a></td>
<td>获取容器/镜像的元数据</td>
<td>docker inspect [OPTIONS] NAME|ID [NAME|ID...]</td>
</tr>
<tr class="odd">
<td><a
href="https://www.runoob.com/docker/docker-top-command.html">top</a></td>
<td>查看容器中运行的进程信息，支持 ps 命令参数</td>
<td>docker top [OPTIONS] CONTAINER [ps OPTIONS]</td>
</tr>
<tr class="even">
<td><a
href="https://www.runoob.com/docker/docker-attach-command.html">attach</a></td>
<td>连接到正在运行中的容器</td>
<td>docker attach [OPTIONS] CONTAINER</td>
</tr>
<tr class="odd">
<td><a
href="https://www.runoob.com/docker/docker-events-command.html">events</a></td>
<td>从服务器获取实时事件</td>
<td>docker events [OPTIONS]</td>
</tr>
<tr class="even">
<td><a
href="https://www.runoob.com/docker/docker-logs-command.html">logs</a></td>
<td>获取容器的日志</td>
<td>docker logs [OPTIONS] CONTAINER</td>
</tr>
<tr class="odd">
<td><a
href="https://www.runoob.com/docker/docker-wait-command.html">wait</a></td>
<td>阻塞运行直到容器停止，然后打印出它的退出代码</td>
<td>docker wait [OPTIONS] CONTAINER [CONTAINER...]</td>
</tr>
<tr class="even">
<td><a
href="https://www.runoob.com/docker/docker-export-command.html">export</a></td>
<td>将文件系统作为一个tar归档文件导出到STDOUT</td>
<td>docker export [OPTIONS] CONTAINER</td>
</tr>
<tr class="odd">
<td><a
href="https://www.runoob.com/docker/docker-port-command.html">port</a></td>
<td>列出指定的容器的端口映射，或者查找将PRIVATE_PORT
NAT到面向公众的端口</td>
<td>docker port [OPTIONS] CONTAINER [PRIVATE_PORT[/PROTO]]</td>
</tr>
</tbody>
</table>
<h2 id="容器rootfs命令">容器rootfs命令</h2>
<table>
<colgroup>
<col style="width: 40%" />
<col style="width: 18%" />
<col style="width: 40%" />
</colgroup>
<thead>
<tr class="header">
<th>命令</th>
<th>作用</th>
<th>语法</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a
href="https://www.runoob.com/docker/docker-commit-command.html">commit</a></td>
<td>从容器创建一个新的镜像</td>
<td>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</td>
</tr>
<tr class="even">
<td><a
href="https://www.runoob.com/docker/docker-cp-command.html">cp</a></td>
<td>用于容器与主机之间的数据拷贝</td>
<td>从容器到本机：docker cp [OPTIONS] CONTAINER:SRC_PATH
DEST_PATH|-<br />从本机到容器：docker cp [OPTIONS] SRC_PATH|-
CONTAINER:DEST_PATH</td>
</tr>
<tr class="odd">
<td><a
href="https://www.runoob.com/docker/docker-diff-command.html">diff</a></td>
<td>检查容器里文件结构的更改</td>
<td>docker diff [OPTIONS] CONTAINER</td>
</tr>
</tbody>
</table>
<h2 id="镜像仓库">镜像仓库</h2>
<table>
<colgroup>
<col style="width: 37%" />
<col style="width: 37%" />
<col style="width: 25%" />
</colgroup>
<thead>
<tr class="header">
<th>命令</th>
<th>作用</th>
<th>语法</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a
href="https://www.runoob.com/docker/docker-login-command.html">login/logout</a></td>
<td>登陆/登出到一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库
Docker Hub</td>
<td>docker login/logout [OPTIONS] [SERVER]</td>
</tr>
<tr class="even">
<td><a
href="https://www.runoob.com/docker/docker-pull-command.html">pull</a></td>
<td>从镜像仓库中拉取或者更新指定镜像</td>
<td>docker pull [OPTIONS] NAME<span class="citation"
data-cites="DIGEST">[:TAG\|@DIGEST]</span></td>
</tr>
<tr class="odd">
<td><a
href="https://www.runoob.com/docker/docker-push-command.html">push</a></td>
<td>将本地的镜像上传到镜像仓库,要先登陆到镜像仓库</td>
<td>docker push [OPTIONS] NAME[:TAG]</td>
</tr>
<tr class="even">
<td><a
href="https://www.runoob.com/docker/docker-search-command.html">search</a></td>
<td>从Docker Hub查找镜像</td>
<td>docker search [OPTIONS] TERM</td>
</tr>
</tbody>
</table>
<h2 id="本地镜像管理">本地镜像管理</h2>
<table>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th>命令</th>
<th>作用</th>
<th>语法</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a
href="https://www.runoob.com/docker/docker-images-command.html">images</a></td>
<td>列出本地镜像</td>
<td>docker images [OPTIONS] [REPOSITORY[:TAG]]</td>
</tr>
<tr class="even">
<td><a
href="https://www.runoob.com/docker/docker-rmi-command.html">rmi</a></td>
<td>删除本地一个或多个镜像</td>
<td>docker rmi [OPTIONS] IMAGE [IMAGE...]</td>
</tr>
<tr class="odd">
<td><a
href="https://www.runoob.com/docker/docker-tag-command.html">tag</a></td>
<td>标记本地镜像，将其归入某一仓库</td>
<td>docker tag [OPTIONS] IMAGE[:TAG]
[REGISTRYHOST/][USERNAME/]NAME[:TAG]</td>
</tr>
<tr class="even">
<td><a
href="https://www.runoob.com/docker/docker-build-command.html">build</a></td>
<td>命令用于使用 Dockerfile 创建镜像</td>
<td>docker build [OPTIONS] PATH | URL | -</td>
</tr>
<tr class="odd">
<td><a
href="https://www.runoob.com/docker/docker-history-command.html">history</a></td>
<td>查看指定镜像的创建历史</td>
<td>docker history [OPTIONS] IMAGE</td>
</tr>
<tr class="even">
<td><a
href="https://www.runoob.com/docker/docker-save-command.html">save</a></td>
<td>将指定镜像保存成 tar 归档文件</td>
<td>docker save [OPTIONS] IMAGE [IMAGE...]</td>
</tr>
<tr class="odd">
<td><a
href="https://www.runoob.com/docker/docker-load-command.html">load</a></td>
<td>导入使用 <a
href="https://www.runoob.com/docker/docker-save-command.html">docker
save</a> 命令导出的镜像</td>
<td>docker load [OPTIONS]</td>
</tr>
<tr class="even">
<td><a
href="https://www.runoob.com/docker/docker-import-command.html">import</a></td>
<td>从归档文件中创建镜像</td>
<td>docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]</td>
</tr>
</tbody>
</table>
<h2 id="info和version">info和version</h2>
<table>
<colgroup>
<col style="width: 49%" />
<col style="width: 31%" />
<col style="width: 19%" />
</colgroup>
<thead>
<tr class="header">
<th>命令</th>
<th>作用</th>
<th>语法</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a
href="https://www.runoob.com/docker/docker-info-command.html">info</a></td>
<td>显示 Docker 系统信息，包括镜像和容器数</td>
<td>docker info [OPTIONS]</td>
</tr>
<tr class="even">
<td><a
href="https://www.runoob.com/docker/docker-version-command.html">version</a></td>
<td>显示 Docker 版本信息</td>
<td>docker version [OPTIONS]</td>
</tr>
</tbody>
</table>
<h2 id="致谢">致谢</h2>
<p>本文摘抄至 <a
href="https://www.runoob.com/docker/docker-command-manual.html">runoob</a>，方便日常使用快速查询，诚挚感谢！</p>
]]></content>
      <categories>
        <category>System</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>免费制作 MG 动画</title>
    <url>/posts/2023/2WHBPR.html</url>
    <content><![CDATA[<p>在进行视屏制作的过程中，有时候我们需要插入一些 MG(Motion Graphics)
动画，一般使用 AE 制作，但是对于一些简单的文字、流程动画，使用 AE
就杀鸡用牛刀了，因此我们一般使用一些速成的方式来制作。</p>
<span id="more"></span>
<h2 id="ppt">PPT</h2>
<p>使用 PPT 制作，合理使用路径动画、动画效果，然后导出视屏。</p>
<blockquote>
<p>缺点：</p>
<ol type="1">
<li>只能整个导出，不能导出当前页</li>
<li>不有丰富的素材库</li>
</ol>
</blockquote>
<h2 id="在线-mg-动画制作网站">在线 MG 动画制作网站</h2>
<p>除了 PPT，我们还可以使用一些在线的 MG
动画制作网站来制作，但是这类型的网站一般都是收费的，下面列出一些推荐使用的网站及免费使用的方法。</p>
<h3 id="秀展网"><a href="https://www.xiuzhan365.com/">秀展网</a></h3>
<p>网址：https://www.xiuzhan365.com/</p>
]]></content>
      <categories>
        <category>Skill</category>
        <category>Video</category>
      </categories>
      <tags>
        <tag>Skill</tag>
        <tag>Video</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Server 2022 安装 Dockert</title>
    <url>/posts/2021/Q0YYS8.html</url>
    <content><![CDATA[<p>如何在 Windows Server 2022 上安装 Docker 呢？经过实测，如果直接从
Docker 官网下载 Docker Desktop
进行安装，会出现启动失败的问题。特将正确的安装步骤记录如下：</p>
<span id="more"></span>
<h2 id="安装">安装</h2>
<ol type="1">
<li><p>用管理员身份打开 PowerShell</p></li>
<li><p>安装 docker 下载平台</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Install-Module</span> <span class="literal">-Name</span> DockerMsftProvider <span class="literal">-Force</span></span><br></pre></td></tr></table></figure>
<p>会弹出确认选项，输入 <code>y</code> 即可</p></li>
<li><p>安装 <code>docker</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Install-Package</span> <span class="literal">-Name</span> docker <span class="literal">-ProviderName</span> DockerMsftProvider</span><br></pre></td></tr></table></figure>
<p>接下来会弹出一个确认框，输入 <code>A</code> 即可。</p></li>
<li><p>如果第 3 步安装失败，需要手动下载并安装</p>
<p>参考【手动安装】步骤</p></li>
<li><p>安装完成后判断是否需要重启电脑</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">(<span class="built_in">Install-WindowsFeature</span> Containers).RestartNeeded</span><br></pre></td></tr></table></figure>
<p>如果此命令的输出为<strong>Yes</strong>
，则使用以下命令重新启动服务器：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Restart-Computer</span></span><br></pre></td></tr></table></figure></li>
<li><p>重启后，打开 PowerShell</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看docker安装版本</span></span><br><span class="line">docker version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">net <span class="built_in">start</span> docker</span><br></pre></td></tr></table></figure></li>
<li><p>修改镜像源</p>
<p>在 <code>C:\ProgramData\docker\config\daemon.json</code>
文件（如果不存在，则新建一个）中添加下列内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;https://letnjuzg.mirror.aliyuncs.com&quot;</span><span class="punctuation">,</span><span class="string">&quot;https://registry.cn-hangzhou.aliyuncs.com&quot;</span><span class="punctuation">,</span><span class="string">&quot;https://mirror.ccs.tencentyun.com&quot;</span><span class="punctuation">,</span><span class="string">&quot;https://registry.docker-cn.com&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>通过运行<code>hello-world</code>容器来测试Docker
Engine-Enterprise安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 52780:80 hello-world</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="手动安装">手动安装</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> C:\Users\Administrator\AppData\Local\Temp\<span class="number">2</span>\DockerProvider</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开配置文件 Docker_DockerSearchIndex.json 找到 preview 版本的 docker 链接进行下载，然后将下载的压缩包放到上面的目录中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Start-BitsTransfer</span> <span class="literal">-Source</span> https://dockermsft.blob.core.windows.net/dockercontainer/docker<span class="literal">-18-09-0</span>.zip <span class="literal">-Destination</span> docker<span class="literal">-18-09-0</span>.zip</span><br><span class="line"></span><br><span class="line"><span class="built_in">Get-FileHash</span> <span class="literal">-Path</span> docker<span class="literal">-18-09-0</span>.zip <span class="literal">-Algorithm</span> SHA256</span><br><span class="line"></span><br><span class="line"><span class="built_in">Install-Package</span> <span class="literal">-Name</span> docker <span class="literal">-ProviderName</span> DockerMsftProvider <span class="literal">-Verbose</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Restart-Computer</span> <span class="literal">-Force</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>下载地址可以查看 C:\2目录中的 json 文件</p>
</blockquote>
<h2 id="更新">更新</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Install-Package</span> <span class="literal">-Name</span> docker <span class="literal">-ProviderName</span> DockerProvider <span class="literal">-RequiredVersion</span> preview <span class="literal">-Update</span> <span class="literal">-Force</span></span><br></pre></td></tr></table></figure>
<h2 id="使用">使用</h2>
<p>在使用的过程中可能遇到一些问题，总结如下：</p>
<ol type="1">
<li><p><code>In the default daemon configuration on Windows, the docker client must be run with elevated privileges to connect.</code></p>
<p>有可能是 docker 没有启动，输入 <code>net start docker</code> 启动
docker 就可以 了。</p></li>
<li><p>提示
<code>image: operating system linux cannot be used on this platform windows</code></p>
<p>此种情况，需要切换为 linux 容器，使用如下命令切换：</p>
<p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">Environment</span>]::SetEnvironmentVariable(<span class="string">&quot;LCOW_SUPPORTED&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;Machine&quot;</span>)</span><br><span class="line"><span class="built_in">Restart-Service</span> docker</span><br></pre></td></tr></table></figure></p>
<p><strong>如何切换回windows容器呢？</strong></p>
<p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">Environment</span>]::SetEnvironmentVariable(<span class="string">&quot;LCOW_SUPPORTED&quot;</span>, <span class="string">&quot;<span class="variable">$null</span>&quot;</span>, <span class="string">&quot;Machine&quot;</span>)</span><br></pre></td></tr></table></figure></p></li>
<li><p>容器进行端口映射后无法通过 <code>127.0.0.1:port</code>
方式访问</p>
<p>未解决</p></li>
</ol>
<h2 id="致谢">致谢</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<ol type="1">
<li><p><a href="https://www.youtube.com/watch?v=mDlxN9w4Iho">Learn
Computer Technologies</a></p></li>
<li><p><a
href="https://computingforgeeks.com/how-to-run-docker-containers-on-windows-server-2019">Run
Docker Containers on Windows Server 2019</a></p></li>
<li><p><a
href="http://man.hubwiz.com/docset/Docker.docset/Contents/Resources/Documents/docs.docker.com/install/windows/docker-ee.html">卸载docker</a></p></li>
<li><p>https://www.altaro.com/msp-dojo/linux-containers-windows-server-2019/</p></li>
<li><p>https://docs.microsoft.com/en-us/virtualization/windowscontainers/quick-start/set-up-environment?tabs=Windows-Server</p></li>
<li><p>https://github.com/MicrosoftDocs/Virtualization-Documentation/issues/919#issuecomment-444717316</p></li>
</ol>
]]></content>
      <categories>
        <category>System</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Windows Server</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 设置代理</title>
    <url>/posts/2023/3R4JKDX.html</url>
    <content><![CDATA[<p>在使用 docker 拉取镜像时，有时候国内镜像源无法使用，需要使用 docker
官方的镜像源这时需要给 docker 设置代理来提升下载速度。</p>
<p>本文记录了 docker desktop 和 linux 中设置代理的方法和注意事项。</p>
<span id="more"></span>
<h2 id="windows">windows</h2>
<p>windows 中使用 docker desktop 进行设置，具体方法如下：</p>
<p>在【设置】-&gt;【Resources】-&gt;【Proxies】来设置代理，如下图所示：</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230621154906732.png"
alt="image-20230621154906732" />
<figcaption aria-hidden="true">image-20230621154906732</figcaption>
</figure>
<p><strong>特别注意：</strong></p>
<p>在设置代理地址时，<code>不需要前面的协议(http://或https://)</code></p>
<h2 id="linux">Linux</h2>
<p>本文以 Ubuntu 举例说明。</p>
<p>docker pull 和 docker build/docker run 使用代理的方式不一样！</p>
<p>docker pull 的代理被 systemd 接管，所以需要设置 systemd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新增或编辑 docker 守护进程的代理配置</span></span><br><span class="line">sudo vim /etc/systemd/system/docker.service.d/http-proxy.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向文件中添加如下内容</span></span><br><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">&quot;HTTP_PROXY=http://127.0.0.1:8123&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;HTTPS_PROXY=http://127.0.0.1:8123&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启生效</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<p><a href="https://neucrack.com/p/286">docker
设置代理，以及国内加速镜像设置-次世代BUG池</a></p>
]]></content>
      <categories>
        <category>System</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>免费的视频剪辑素材资源</title>
    <url>/posts/2023/1YG7ZB2.html</url>
    <content><![CDATA[<p>最近在工作上要制作几个微课，平时感觉制作一个视频还挺简单的，当到实际上手的时候，才发现力不从心，特别是素材，无从找起，因此本文对如何收集素材进行一个简要总结，以便今后更加高效的使用。</p>
<blockquote>
<p>本文随着视频剪辑的熟练度增加，会不定期进行更新</p>
</blockquote>
<span id="more"></span>
<h2 id="汇总">汇总</h2>
<table>
<colgroup>
<col style="width: 52%" />
<col style="width: 27%" />
<col style="width: 20%" />
</colgroup>
<thead>
<tr class="header">
<th>名称</th>
<th>特点</th>
<th>下载方式</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.pexels.com/videos/">Pexels video</a></td>
<td>视频数量种类多</td>
<td>无需注册</td>
</tr>
<tr class="even">
<td><a href="https://pixabay.com/zh/videos/">Pixabay视频</a></td>
<td>视频数量种类多</td>
<td>无需注册，免费商用</td>
</tr>
<tr class="odd">
<td><a href="https://mixkit.co/">Mixkit</a></td>
<td>视频、音乐素材多</td>
<td>部分可商用</td>
</tr>
<tr class="even">
<td><a href="https://www.videvo.net/">Videvo</a></td>
<td>免费视频、音乐、音效素材</td>
<td>无需注册</td>
</tr>
<tr class="odd">
<td><a href="https://www.ignitemotion.com/">IgniteMotion</a></td>
<td>仅背景视屏</td>
<td></td>
</tr>
<tr class="even">
<td><a href="https://coverr.co/">Coverr</a></td>
<td>多样素材</td>
<td>部分商用</td>
</tr>
<tr class="odd">
<td><a href="https://mazwai.com/">Mazwai</a></td>
<td>多样素材</td>
<td>可商用</td>
</tr>
<tr class="even">
<td><a href="https://www.videezy.com/">Videezy</a></td>
<td>多样素材</td>
<td></td>
</tr>
</tbody>
</table>
<p>鉴于经济实力，本文仅推荐一些免费的视屏资源。</p>
<h2 id="pexels-video">Pexels video</h2>
<figure>
<img data-src="https://www.v1tx.com/wp-content/uploads/2020/02/20200224172111-1024x371.jpg"
alt="Pexels 免费视频下载" />
<figcaption aria-hidden="true">Pexels 免费视频下载</figcaption>
</figure>
<p>经常找图片的人相信都听说过Pexels，它是一个非常有名的免费图片素材站，后来Pexels又推出了视频
Pexels video，同样是免费下载</p>
<p><a href="https://www.pexels.com/videos/">Pexels video</a>
上的视频数量种类多，有自然风景相关，也有人物会议等视频，视频展示采用瀑布流的方式，可以直接当前窗口预览视频，无需注册就能下载</p>
<h2 id="pixabay-视频素材库">Pixabay 视频素材库</h2>
<figure>
<img data-src="https://www.v1tx.com/wp-content/uploads/2020/02/20200224180821-1024x387.jpg"
alt="Pixabay 视频素材库" />
<figcaption aria-hidden="true">Pixabay 视频素材库</figcaption>
</figure>
<p>同Pexels一样，Pixabay也是非常有名的免费图片网站，它也提供了免费无版权的视频</p>
<p><a
href="https://pixabay.com/zh/videos/">Pixabay视频</a>不仅数量多，还提供了非常多的信息，你可以在下载前预览视频，也可以查看视频的各种参数，包括视频分辨率、时长、格式、上传时间等，无需注册就可以下载，无需署名可以商业用途</p>
<h2 id="mixkit">Mixkit</h2>
<figure>
<img data-src="https://www.v1tx.com/wp-content/uploads/2020/02/20200224181136-1024x486.jpg"
alt="Mixkit创意视频免费下载" />
<figcaption aria-hidden="true">Mixkit创意视频免费下载</figcaption>
</figure>
<p><a href="https://mixkit.co/">Mixkit</a>
是Envato去年推出的一个视频、音乐的素材平台，和Envatomarket、Envato
Elements等付费产品不同，Mixkit
的所有内容都是完全免费的，网站提供了免费的视频、音乐素材、Premiere
Pro模版，你可以免费下载视频，支持个人和商业使用</p>
<p>Mixkit平台的视频质量都非常高，你可以根据类别进行查找，包括城市、咖啡、天空、人物、海滩、办公、食物等，每个视频都清晰独特，适合制作创意视频使用</p>
<h2 id="videvo">Videvo</h2>
<figure>
<img data-src="https://www.v1tx.com/wp-content/uploads/2020/02/20200224181329-1024x392.jpg"
alt="Videvo专业视频素材库" />
<figcaption aria-hidden="true">Videvo专业视频素材库</figcaption>
</figure>
<p><a
href="https://www.videvo.net/">Videvo</a>是一个专业的视频素材网站，提供成千上万的免费视频、音乐、音效素材，旨在成为你的唯一资料库。Videvo
把视频分成了很多类别，有动物、商业、办公室、工业、医疗、视觉特效等，你可以通过类别标签快速找到需要的视频，找到合适的视频可以直接下载，无需注册</p>
<p>唯一需要注意一点是有些视频是付费的，带有PREMIUM标志的需要加入会员才可以下载，如果你只是想找一些免费视频，有一个技巧就是可以点击过滤器，只看免费的视频就不会被干扰了，而且即使是免费的都有1万以上，对于个人使用完全足够了</p>
<h2 id="ignitemotion">IgniteMotion</h2>
<figure>
<img data-src="https://www.v1tx.com/wp-content/uploads/2020/02/20200224181512-1024x385.jpg"
alt="IgniteMotion 免费视频背景素材网站" />
<figcaption aria-hidden="true">IgniteMotion
免费视频背景素材网站</figcaption>
</figure>
<p><a href="https://www.ignitemotion.com/">IgniteMotion</a>
是一个以特效和背景视频为主题的素材网站，它不像其他网站提供各种各样的素材，就是单纯的背景视频。</p>
<p>IgniteMotion
的背景视频有几个明确的类别，比如云朵、地球、火焰、抽象、水、科幻等，数量不多，但都适合做为素材使用，如果你在IgniteMotion
中找一个视频，无需搜索就能快速找到</p>
<h2 id="coverr">Coverr</h2>
<figure>
<img data-src="https://www.v1tx.com/wp-content/uploads/2020/02/20200224181654-1024x547.jpg"
alt="Coverr 无版权视频库" />
<figcaption aria-hidden="true">Coverr 无版权视频库</figcaption>
</figure>
<p><a href="https://coverr.co/">Coverr</a>
是一个全面的视频素材网站，它提供了技术、心情、自然、人物、动物、都市等多种类别的无版权视频素材，你可以直接从网站下载，无需询问，可用作个人和商业用途</p>
<h2 id="dareful">Dareful</h2>
<figure>
<img data-src="https://www.v1tx.com/wp-content/uploads/2020/02/20200224182124-1024x460.jpg"
alt="Dareful免费4K视频素材网站" />
<figcaption aria-hidden="true">Dareful免费4K视频素材网站</figcaption>
</figure>
<p><a
href="https://www.dareful.com/">Dareful</a>是一个免费的4K视频素材站点，所有视频都是4K高清格式，完全免费，无需署名，可以商业使用，缺点是下载比较麻烦，需要用邮箱注册，而且下载链接需要到邮箱中找</p>
<h2 id="life-of-vids">Life of Vids</h2>
<figure>
<img data-src="https://www.v1tx.com/wp-content/uploads/2020/02/20200224182303-1024x531.jpg"
alt="Life of Vids 无版权视频网站" />
<figcaption aria-hidden="true">Life of Vids 无版权视频网站</figcaption>
</figure>
<p><a href="https://lifeofvids.com/">Life of Vids</a>
是一个风格独特的视频网站，有点类似博客风格，但确实提供了很多免费的视频，你可以在顶部搜索框中输入关键词搜索视频，也可以查看它的视频集合，集合中提供了多套视频素材，包括城市、自然、小镇、食物、办公等几个类别，你可以免费下载用在自己的视频中</p>
<h2 id="videezy">Videezy</h2>
<figure>
<img data-src="https://www.v1tx.com/wp-content/uploads/2020/02/20200224182437-1024x485.jpg"
alt="Videezy 免费高清4K视频下载" />
<figcaption aria-hidden="true">Videezy 免费高清4K视频下载</figcaption>
</figure>
<p><a href="https://www.videezy.com/">Videezy</a>
是一个很全面的视频素材网站，视频和类别都非常全面，在它的分类中，不仅有像天空、自然、动物这样的分类，每个大分类下还有对应的分支，比如都市里面就有伦敦和纽约这样的城市分类，通过细致的分类，你可以快速找到需要的视频</p>
<p>使用Videezy这样网站，不要看首页很多都是付费视频，按分类打开，里面大部分的视频素材都是免费的，可以找到很多优秀的视频</p>
<h2 id="mazwai">Mazwai</h2>
<figure>
<img data-src="https://www.v1tx.com/wp-content/uploads/2020/02/20200224182639-1024x388.jpg"
alt="Mazwai免费的视频素材库" />
<figcaption aria-hidden="true">Mazwai免费的视频素材库</figcaption>
</figure>
<p><a
href="https://mazwai.com/">Mazwai</a>是一个完全免费的视频素材库，包括各种类型的视频，其创建的目的就是让全世界的人都能免费获得视频素材，所有的视频都是网站精心挑选，并且得到作者允许，可以放心使用</p>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a
href="https://www.v1tx.com/post/best-free-stock-video-sites/">2023年10个免费的视频素材网站推荐</a></li>
</ol>
]]></content>
      <categories>
        <category>Skill</category>
        <category>Video</category>
      </categories>
      <tags>
        <tag>Skill</tag>
        <tag>Video</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Compose 的简明使用</title>
    <url>/posts/2023/1ZZM4MX.html</url>
    <content><![CDATA[<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230415233342204.png"
alt="image-20230415233342204" />
<figcaption aria-hidden="true">image-20230415233342204</figcaption>
</figure>
<p>使用 Docker Compose
可以轻松、高效的管理容器，它是一个用于定义和运行多容器 Docker
的应用程序工具。</p>
<span id="more"></span>
<h2 id="简介">简介</h2>
<p>compose、machine 和 swarm 是docker
原生提供的三大编排工具。简称docker三剑客。</p>
<p>Docker Compose能够在 Docker 节点上，以单引擎模式(Single-Engine
Mode)进行多容器应用的部
署和管理。多数的现代应用通过多个更小的微服务互相协同来组成一个完整可用的应用。</p>
<p>部署和管理繁多的服务是困难的。而这正是 Docker Compose
要解决的问题。Docker Compose 并不 是通过脚本和各种冗长的 docker
命令来将应用组件组织起来，而是通过一个声明式的配置文件描述整
个应用，从而使用一条命令完成部署。</p>
<p>应用部署成功后，还可以通过一系列简单的命令实现对其完整声
明周期的管理。甚至，配置文件还可以置于版本控制系统中进行存储和管理。</p>
<h2 id="docker-compose-安装">docker-compose 安装</h2>
<p>从 compose v2 开始，docker-compose 的指令大部分已经集成到了 docker
中，可以通过 docker compose（而不是 docker-compose）来使用。</p>
<p>如果要使用 docker-compose，则需要单独安装程序，方法如下：</p>
<p>使用 scoop 安装 docker-compose</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install docker<span class="literal">-compose</span></span><br></pre></td></tr></table></figure>
<h2 id="yml-配置文件">yml 配置文件</h2>
<p>Docker Compose 使用 YAML 文件来定义多服务的应用。YAML 是 JSON
的一个子集，因此也可以使用JSON。</p>
<p>Docker Compose 默认使用文件名 compose.yaml。当然，也可以使用 -f
参数指定具体文件。</p>
<p>docker-compose 按以下顺序使用配置文件：</p>
<p><code>compose.yaml compose.yml docker-compose.yaml docker-compose.yml compose.yaml</code></p>
<h3 id="配置示例">配置示例</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># compose 文件 API 的版本号</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.9&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="comment"># mysql</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="comment"># 指定镜像名称</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql/mysql:5.7</span></span><br><span class="line">    <span class="comment"># 重启方式</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="comment"># 容器名称</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql57</span></span><br><span class="line">    <span class="comment"># 端口映射 本机:容器</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line">    <span class="comment"># 挂载卷 本机:容器</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/edu-bom/mysql/test:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment"># 设置 root 密码</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">net:</span></span><br><span class="line">  <span class="attr">eureka:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./edu-eureka-boot</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8761</span><span class="string">:8761</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">edu-eureka-boot</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">edu-eureka-boot</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">edu/edu-eureka-boot:1.0</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql57</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">net:</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">    <span class="attr">net:</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">    <span class="attr">vol:</span></span><br></pre></td></tr></table></figure>
<h3 id="顶层元素">顶层元素</h3>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230415233342204.png"
alt="image-20230415233342204" />
<figcaption aria-hidden="true">image-20230415233342204</figcaption>
</figure>
<p>Docker Compose 的 YAML 文件包含 6
个顶层元素，分别是：version、services、networks、volumes、configs、secrets。</p>
<h3 id="version"><a
href="https://docs.docker.com/compose/compose-file/04-version-and-name/">version</a></h3>
<p><strong>version</strong>
截止目前（2023-04-15）已经弃用。它应总是位于文件的第一行。它定义了
Compose 文件格式(主要是 API)的版本。注意，version 并非定义 Docker
Compose 或 Docker 引擎的版本号。</p>
<p>指定要使用的 Compose
文件版本时，请确保同时指定<em>主要</em>版本号和<em>次要</em>版本号。如果没有给出次要版本，
<code>0</code>则默认使用而不是最新的次要版本。</p>
<p>Docker Engine 支持的 Compose 文件版本如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;"><strong>Compose file format</strong></th>
<th style="text-align: left;"><strong>Docker Engine
release</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Compose specification</td>
<td style="text-align: left;">19.03.0+</td>
</tr>
<tr class="even">
<td style="text-align: left;">3.8</td>
<td style="text-align: left;">19.03.0+</td>
</tr>
<tr class="odd">
<td style="text-align: left;">3.7</td>
<td style="text-align: left;">18.06.0+</td>
</tr>
<tr class="even">
<td style="text-align: left;">3.6</td>
<td style="text-align: left;">18.02.0+</td>
</tr>
<tr class="odd">
<td style="text-align: left;">3.5</td>
<td style="text-align: left;">17.12.0+</td>
</tr>
<tr class="even">
<td style="text-align: left;">3.4</td>
<td style="text-align: left;">17.09.0+</td>
</tr>
<tr class="odd">
<td style="text-align: left;">3.3</td>
<td style="text-align: left;">17.06.0+</td>
</tr>
<tr class="even">
<td style="text-align: left;">3.2</td>
<td style="text-align: left;">17.04.0+</td>
</tr>
<tr class="odd">
<td style="text-align: left;">3.1</td>
<td style="text-align: left;">1.13.1+</td>
</tr>
<tr class="even">
<td style="text-align: left;">3.0</td>
<td style="text-align: left;">1.13.0+</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2.4</td>
<td style="text-align: left;">17.12.0+</td>
</tr>
<tr class="even">
<td style="text-align: left;">2.3</td>
<td style="text-align: left;">17.06.0+</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2.2</td>
<td style="text-align: left;">1.13.0+</td>
</tr>
<tr class="even">
<td style="text-align: left;">2.1</td>
<td style="text-align: left;">1.12.0+</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2.0</td>
<td style="text-align: left;">1.10.0+</td>
</tr>
</tbody>
</table>
<h3 id="services"><a
href="https://docs.docker.com/compose/compose-file/05-services/">services</a></h3>
<p><strong>services</strong>
用于定义不同的应用服务。上边的例子定义了两个服务:一个名为
lagou-mysql数据库服 务以及一个名为lagou-eureka的微服。Docker Compose
会将每个服务部署在各自的容器中。</p>
<p>service 中很多配置项，下面根据日常使用的一致频率来分别进行介绍。</p>
<h4 id="image">image</h4>
<p>指定 image 名称。</p>
<h4 id="build"><a
href="Compose%20file%20build%20reference">build</a></h4>
<p>指定 Dockfile 所在的文件位置，可以是绝对位置或者相对位置，Compose
会自动利用这路径下的 Dockfile 来自动构建出image，然后使用该 image
进行容器的设定。</p>
<p><strong>使用默认文件名：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.9&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./dir</span> <span class="comment">#直接指定路径，前提要 dockfile 文件名刚好是 Dockerfile</span></span><br></pre></td></tr></table></figure>
<p><strong>使用自定义文件名：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.9&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./dir</span> <span class="comment">#透过 context 来指定路径</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile-alternate</span> <span class="comment">#说明要执行编译的 Dockfile 文件名</span></span><br><span class="line">      <span class="attr">args:</span> <span class="comment"># 指定编译 image 时，所需要的 arguments</span></span><br><span class="line">        <span class="attr">buildno:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h4 id="command">command</h4>
<p>用来覆盖容器启动后默认执行的动作。</p>
<h4 id="expose">expose</h4>
<p>开放 port 给 container 连线，但没有映射到 host 上</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">expose:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;3000&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;8000&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="ports">ports</h4>
<p>将 port 绑定在 host 上，然后就能在 host 的环境，与容器做交互</p>
<h4 id="depends_on">depends_on</h4>
<p>当使用 docker-compose up 时，依照依赖顺序来启动。</p>
<p>当使用 docker-compose stop 时，依照依赖顺序的反序来关闭容器。</p>
<blockquote>
<p>只是启动顺序，但是不会等待容器的状态到 Ready</p>
<p>如果要等待，可以使用 <a
href="https://github.com/vishnubob/wait-for-it">vishnubob/wait-for-it</a>、<a
href="https://github.com/Eficode/wait-for">eficode/wait-for</a>
来实现</p>
</blockquote>
<h3 id="networks"><a
href="https://docs.docker.com/compose/compose-file/06-networks/">networks</a></h3>
<p><strong>networks</strong> 用于指引 Docker
创建新的网络。默认情况下，Docker Compose 会创建 bridge 网络。
这是一种单主机网络，只能够实现同一主机上容器的连接。当然，也可以使用
driver 属性来指定不 同的网络类型。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">frontend:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">awesome/webapp</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">front-tier</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">back-tier</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">front-tier:</span></span><br><span class="line">  <span class="attr">back-tier:</span></span><br></pre></td></tr></table></figure>
<h3 id="volumes"><a
href="https://docs.docker.com/compose/compose-file/07-volumes/">volumes</a></h3>
<p>顶层的 volumes
为所有的服务提供公共的挂载卷，方便其它服务通过该位置进行共享和备份。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">backend:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">awesome/database</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db-data:/etc/data</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">backup:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">backup-service</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db-data:/var/lib/backup/data</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db-data:</span></span><br></pre></td></tr></table></figure>
<h2 id="常用命令">常用命令</h2>
<h3 id="build-1">build</h3>
<p>docker-compose build [options] [SERVICE...]</p>
<p>重新 build 该项目所有 service 的 image</p>
<p>--force-rm 删除临时容器</p>
<p>--no-cache 就不用cache</p>
<p>--pull 尝试拉取最新的image版本</p>
<h3 id="config">config</h3>
<p>验证 compose 文件格式，错误会显示错误原因</p>
<h3 id="up">up</h3>
<p>docker-compose up [options] [SERVICE...]</p>
<p>等于一整组的动作，重新 create container，start container，link
each</p>
<p>-d 将在后台运行</p>
<p>--scale SERVICE_NAME=NUM，用来水平伸缩指定service的数量</p>
<h3 id="stop">stop</h3>
<p>docker-compose stop [options] [SERVICE...]</p>
<p>停止状态是 running 的容器</p>
<h3 id="rm">rm</h3>
<p>docker-compose rm [options] [SERVICE...]</p>
<p>会删除所有状态是 stopped 的容器，所以建议事先使用上面的stop
来停止容器后再进行删除</p>
<h3 id="ps">ps</h3>
<p>docker-compose ps [options] [SERVICE...]</p>
<p>列出容器清单</p>
<h3 id="logs">logs</h3>
<p>docker-compose logs [options] [SERVICE...]</p>
<p>如果没指定 service name，则把所有 service 的 log 都输出</p>
<h2 id="参考">参考</h2>
<p><a href="https://docs.docker.com/compose/">docker compose
官方文档</a></p>
<p><a
href="https://blog.51cto.com/u_14129797/5201531">全网最详细的Docker-Compose详细教程</a></p>
]]></content>
      <categories>
        <category>System</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Software</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>如何获取 docker 容器 IP</title>
    <url>/posts/2023/2Z6QFVS.html</url>
    <content><![CDATA[<p>本文记录了几种获取 Docker 容器的 IP 地址的方式。</p>
<span id="more"></span>
<h2 id="docker-网络解释">Docker 网络解释</h2>
<p>首先来了解一下 Docker
的网络是如何工作的。首先是默认的<code>bridge</code> 网络。当使用 Docker
时，如果没有指定其它驱动默认会使用桥接网络。</p>
<p><img data-src="https://www.freecodecamp.org/news/content/images/2020/06/docker-network.png" style="max-width:min(100%,300px)" /></p>
<h2 id="docker-容器的-ip-地址">Docker 容器的 IP 地址</h2>
<p>默认情况下，会为连接到容器的每个 Docker
网络分配一个IP地址，并为每个网络分配一个默认的子网掩码，用作稍后分配
IP的地址池。</p>
<p>通常 Docker 默认使用 <strong>172.17. 0.0/16</strong>
作为容器网络的子网。</p>
<h3 id="使用-docker-inspect">使用 Docker Inspect</h3>
<p>Docker inspect 是检索 Docker
对象底层信息的很棒的方式。可以以非常简单的方式在返回的 JSON
里找出想要的字段。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect -f <span class="string">&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> 75000c343eb7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">172.24.0.3</span><br></pre></td></tr></table></figure>
<p>75000c343eb7 为实际容器的 id，输入 id
只要保证唯一即可，不必全部输入。</p>
<h3 id="使用-docker-exec">使用 Docker exec</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> redis <span class="built_in">cat</span> /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">127.0.0.1       localhost</span><br><span class="line">::1     localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0 ip6-localnet</span><br><span class="line">ff00::0 ip6-mcastprefix</span><br><span class="line">ff02::1 ip6-allnodes</span><br><span class="line">ff02::2 ip6-allrouters</span><br><span class="line">172.25.0.3      bfa21d61842as</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p><a
href="https://www.freecodecamp.org/chinese/news/how-to-get-a-docker-container-ip-address-explained-with-examples/">如何获取
Docker 容器的 IP 地址</a></p>
]]></content>
      <categories>
        <category>System</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Software</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 开源 UI 管理工具比选及安装</title>
    <url>/posts/2024/T4KD3R.html</url>
    <content><![CDATA[<p>本文通过比选目前开源的 Docker GUI 管理工具，结合 Linux
服务器的特点，最终选择安装 <a
href="https://github.com/jesseduffield/lazydocker#installation">jesseduffield/lazydocker</a></p>
<span id="more"></span>
<h2 id="软件比选">软件比选</h2>
<p>参考以下文章评测，若系统为桌面系统，建议安装
DockerDesktop，因为它是官方出品。</p>
<p>若是无桌面的服务器，可以选择 portainer 或者 lazydocker，前者是基于
Web 的 UI，后者是基于命令行的 UI。</p>
<p>为了减少从终端到浏览器相互切换，使得管理 Ubuntu
时更加顺滑，作者选择安装 lazydocker。</p>
<h2 id="lazydocker-安装">lazydocker 安装</h2>
<p>使用以下命令一键安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://raw.githubusercontent.com/jesseduffield/lazydocker/master/scripts/install_update_linux.sh | bash</span><br></pre></td></tr></table></figure>
<p>上述脚本默认下载到 <code>home~/.local/bin</code>
中，可以通过修改环境变量 <code>DIR</code> 来更改安装位置。</p>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<p><a
href="https://github.com/search?q=docker+ui&amp;type=repositories&amp;s=stars&amp;o=desc">docker
ui (github.com)</a></p>
<p><a href="https://medevel.com/10-docker-desktop-clients/">10 Open
Source Docker Visual Managers (medevel.com)</a></p>
<p><a
href="https://www.cnblogs.com/Can-daydayup/p/17810828.html">3款免费又好用的
Docker 可视化管理工具 - 追逐时光者 - 博客园 (cnblogs.com)</a></p>
<p><a
href="https://github.com/jesseduffield/lazydocker#installation">jesseduffield/lazydocker:
The lazier way to manage everything docker (github.com)</a></p>
<p><a href="https://github.com/portainer/portainer">portainer/portainer:
Making Docker and Kubernetes management easy. (github.com)</a></p>
<p><a
href="https://docs.docker.com/desktop/install/linux-install/">Install
Docker Desktop on Linux | Docker Docs</a></p>
<p><a
href="https://github.com/jesseduffield/lazydocker#installation">jesseduffield/lazydocker:
The lazier way to manage everything docker (github.com)</a></p>
]]></content>
      <categories>
        <category>System</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>esxi 配置 RDM 直通</title>
    <url>/posts/2024/C906NX.html</url>
    <content><![CDATA[<p>esxi 硬盘直通有两种方式，分别是 RDM（Raw Device Mapping） 直通和
PCIe（PCIe ） 直通。本文介绍如何通过 ssh 配置 esxi 硬盘直通。</p>
<span id="more"></span>
<h2 id="rdm-简介">RDM 简介</h2>
<p>RDM
直通通过创建一个指向物理存储设备的映射文件来实现允许虚拟机直接访问物理存储设备。</p>
<h2 id="开启-ssh">开启 ssh</h2>
<p>在 esxi 的 web 管理界面中，通过 【主机(右键)/服务/启用安全 Shell
(SSH)】打开 ssh。如下图所示：</p>
<p><img data-src="https://obs.uamazing.cn:52443/public/files/images/663633-20201116124312837-1811611023.png" /></p>
<h2 id="查找硬盘位置">查找硬盘位置</h2>
<ol type="1">
<li><p>查找 esxi 系统所在盘的位置</p>
<p>如下图所示：</p>
<p><img data-src="https://obs.uamazing.cn:52443/public/files/images/663633-20201115215942694-527202518.png" /></p>
<p>位置为：<code>/vmfs/volumes/5fb14c74-5da1723a-c6a0-00e15a680bd8</code></p></li>
<li><p>查找要直通的硬盘所在路径</p>
<p>如下图所示：</p>
<p><img data-src="https://obs.uamazing.cn:52443/public/files/images/663633-20201115220620408-1544774039.png" />)</p>
<p>路径为：<code>/vmfs/devices/disks/t10.ATA_____ST500LT0122D9WS142___________________________________S0V2PJJG</code></p></li>
</ol>
<h2 id="配置直通">配置直通</h2>
<p>打开 powershell 或者任意终端，逐行输入下列命令进行配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入 esxi 所在系统盘</span></span><br><span class="line"><span class="built_in">cd</span> /vmfs/volumes/5fb14c74-5da1723a-c6a0-00e15a680bd8</span><br><span class="line"><span class="comment"># 创建直通映射文件保存目录</span></span><br><span class="line"><span class="comment"># 在默认存储空间根目录下创建一个名为 dms.store 的目录用来存放直通镜像文件.vmdk的文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> dms.store</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建直通映射</span></span><br><span class="line">vmkfstools -z /vmfs/devices/disks/t10.ATA_____ST500LT0122D9WS142___________________________________S0V2PJJG /vmfs/volumes/5fb14c74-5da1723a-c6a0-00e15a680bd8/dms.store/hdd1.vmdk</span><br><span class="line"><span class="comment"># 至此，直通配置完成</span></span><br><span class="line"><span class="comment"># 新建虚拟机时【添加硬盘】，选择 `dms.store/hdd1.vmdk` 即可</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>System</category>
        <category>ESXI</category>
      </categories>
      <tags>
        <tag>esxi</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenWrt中Overlay扩容</title>
    <url>/posts/2020/32CSTB6.html</url>
    <content><![CDATA[<p>OpenWrt 重置或者升级后， overlay 要怎么扩容？</p>
<span id="more"></span>
<ul>
<li><p>查看所有磁盘</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cfdisk</span><br></pre></td></tr></table></figure></li>
<li><p>格式化要扩容的盘</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkfs.ext4 /dev/sda3</span><br></pre></td></tr></table></figure></p>
<p>如果提示已经挂载了，则需要用 <code>umount /dev/sda3</code>
取消挂载</p></li>
<li><p>挂载磁盘</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount /dev/sda3 /mnt/sda3</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 查看是否挂载成功</span><br><span class="line">ls /mnt/sda3</span><br></pre></td></tr></table></figure> 当出现 <code>lost+found</code> 说明就成功了。</p></li>
<li><p>复制原来 overlay 中的配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -r /overlay/* /mnt/sda3</span><br></pre></td></tr></table></figure></li>
<li><p>在挂载点中挂载</p></li>
<li><p>重启</p></li>
</ul>
]]></content>
      <categories>
        <category>System</category>
        <category>OpenWrt</category>
      </categories>
      <tags>
        <tag>OpenWrt</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenWrt中安装smarGate实现内网穿透</title>
    <url>/posts/2020/3FW7343.html</url>
    <content><![CDATA[<p>为了能够无需任何公网 IP 实现内网穿透，在安装完 OpenWrt 后，通过安装
<a href="https://github.com/lazy-luo/smarGate">smarGate</a>
来解决这个问题。下面记录下关键的安装步骤。</p>
<span id="more"></span>
<ul>
<li><p>下载地址</p>
<p>百度网盘下载：https://pan.baidu.com/s/14Iq60kxHW711NVoCVKWySg</p></li>
<li><p>执行安装</p></li>
</ul>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">linux下执行命令：chmod +x proxy_server &amp;&amp; nohup ./proxy_server -i1000 -o1000 -w8 &gt;/dev/null &amp;</span><br><span class="line">windows下执行命令：proxy_server.exe -i1000 -o1000 -w8</span><br><span class="line">Android 手机/设备：运行app -〉编辑模式下，配置服务端信息 -〉打开“服务端”开关 -〉重启app</span><br></pre></td></tr></table></figure></p>
<ul>
<li>如何解决依赖</li>
</ul>
<p>首先使用 <code>ldd ./proxy_server</code>
查看是否依赖缺失，如果报错，则执行下面的语句。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /lib /lib64</span><br><span class="line">ln -s /lib/ld-musl-x86_64.so.1 /lib/ld-linux-x86-64.so.2</span><br></pre></td></tr></table></figure>
<ul>
<li>如何查看是否运行了</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef|grep proxy_server</span><br></pre></td></tr></table></figure>
<p>如果有两条记录，则代表是启动成功了。</p>
]]></content>
      <categories>
        <category>System</category>
        <category>OpenWrt</category>
      </categories>
      <tags>
        <tag>OpenWrt</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 存储管理及挂载扩容</title>
    <url>/posts/2023/J7H344.html</url>
    <content><![CDATA[<p>本文将介绍如何管理 Ubuntu
的磁盘挂载，包括查看磁盘使用情况、逻辑盘扩容等。</p>
<span id="more"></span>
<h2 id="内存">内存</h2>
<ul>
<li><p>查看内存使用情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">free -h</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="硬盘">硬盘</h2>
<ul>
<li><p>查看磁盘使用情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure></li>
<li><p>查看挂载情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount</span><br></pre></td></tr></table></figure></li>
<li><p>修改现有挂载点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消挂载</span></span><br><span class="line">sudo umount /path/to/old/mount/point</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">挂载到新的位置</span></span><br><span class="line">sudo mount /dev/sdX /path/to/new/mount/point</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="扩容">扩容</h2>
<p>可以使用 LVM（逻辑卷管理）来扩展虚拟卷。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看可用磁盘</span></span><br><span class="line">sudo lsblk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看既有卷组</span></span><br><span class="line">sudo vgdisplay</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看卷组中的卷</span></span><br><span class="line">sudo lvdisplay</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将新磁盘转换为物理卷(若有必要)</span></span><br><span class="line">sudo pvcreate /dev/sdb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将新的物理卷添加到现有的卷组中</span></span><br><span class="line">sudo vgextend ubuntu-vg /dev/sda</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扩展逻辑卷, 最后一个参数为卷名</span></span><br><span class="line">sudo lvextend -l +100%FREE /dev/ubuntu-vg/ubuntu-lv</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调整文件系统大小</span></span><br><span class="line">sudo resize2fs /dev/ubuntu-vg/ubuntu-lv</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 安装 docker-compose</title>
    <url>/posts/2024/20F723F.html</url>
    <content><![CDATA[<p>本文介绍如何在 Linux 环境中安装 docker-compose。</p>
<span id="more"></span>
<h2 id="安装步骤">安装步骤</h2>
<p>按下列步骤进行安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载 docker-compose</span></span><br><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/v2.24.0-birthday.10/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加执行权限</span></span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>
<blockquote>
<ol type="1">
<li><p>下载前，通过 <a
href="https://github.com/docker/compose/releases">Releases ·
docker/compose (github.com)</a> 查找最新版本，替换上面的版本号</p></li>
<li><p>其中的 <code>uname -s</code> 和 <code>uname -m</code> 是 shell
命令，它们会被替换为你的操作系统的名称和你的机器的硬件架构</p></li>
</ol>
</blockquote>
<h2 id="参考">参考</h2>
<p><a
href="https://github.com/docker/compose?tab=readme-ov-file#linux">Releases
· docker/compose (github.com)</a></p>
]]></content>
      <categories>
        <category>System</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Linux</tag>
        <tag>docker-compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 设置时区</title>
    <url>/posts/2023/1RRG58Q.html</url>
    <content><![CDATA[<p>本文介绍如何在 Ubuntu 中修改时区。</p>
<span id="more"></span>
<h2 id="简易方法">简易方法</h2>
<p>使用下列命令选择城市进行设置：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo tzselect</span><br></pre></td></tr></table></figure>
<p>执行完成后，需要重启机器。</p>
<h2 id="基本方法">基本方法</h2>
<ol type="1">
<li><p>运行以下命令来查看当前的时区：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">timedatectl</span><br></pre></td></tr></table></figure>
<p>这将显示当前的日期、时间和时区。</p></li>
<li><p>运行以下命令来列出所有可用的时区：</p>
<p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">timedatectl list<span class="literal">-timezones</span></span><br></pre></td></tr></table></figure></p>
<p>这将显示一个时区列表，你可以从中选择一个时区。</p></li>
<li><p>运行以下命令来设置新的时区：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo timedatectl <span class="built_in">set-timezone</span> Your_Timezone</span><br></pre></td></tr></table></figure>
<p>请将 <code>Your_Timezone</code>
替换为你选择的时区。例如，如果你想要设置时区为北京时间，你可以运行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo timedatectl <span class="built_in">set-timezone</span> Asia/Shanghai</span><br></pre></td></tr></table></figure>
<p>再次运行 <code>timedatectl</code>
命令来确认新的时区已经被正确设置。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">timedatectl</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<ol type="1">
<li><a
href="https://blog.csdn.net/m0_37886429/article/details/78477638">Linux设置和修改时间与时区</a></li>
</ol>
]]></content>
      <categories>
        <category>System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP Ping in Ubuntu</title>
    <url>/posts/2023/3FNGNN9.html</url>
    <content><![CDATA[<p>本文介绍如何在 Linux 中使用 TCP Ping 工具。</p>
<span id="more"></span>
<p>写在前面，在 Ubuntu 中可以使用 <code>netcat</code>
工具检查端口的连通性，示例：<code>nc -zv 127.0.0.1 22</code>。对于 wsl
网络模式为 <code>mirrored</code> 的情况下，使用这个命令更有效。</p>
<p>接下来正式介绍 tcping 的安装与使用方法。</p>
<h2 id="下载">下载</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt install tcptraceroute</span><br><span class="line">sudo <span class="built_in">wget</span> http://www.vdberg.org/~richard/tcpping <span class="literal">-O</span> /usr/bin/tcping</span><br><span class="line">sudo chmod <span class="number">755</span> /usr/bin/tcping</span><br></pre></td></tr></table></figure>
<h2 id="使用">使用</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tcping <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">22</span></span><br><span class="line">seq <span class="number">0</span>: tcp response from localhost (<span class="number">127.0</span>.<span class="number">0.1</span>) [<span class="type">open</span>]  <span class="number">0.031</span> ms</span><br><span class="line">seq <span class="number">1</span>: tcp response from localhost (<span class="number">127.0</span>.<span class="number">0.1</span>) [<span class="type">open</span>]  <span class="number">0.095</span> ms</span><br><span class="line">seq <span class="number">2</span>: tcp response from localhost (<span class="number">127.0</span>.<span class="number">0.1</span>) [<span class="type">open</span>]  <span class="number">0.032</span> ms</span><br><span class="line">seq <span class="number">3</span>: tcp response from localhost (<span class="number">127.0</span>.<span class="number">0.1</span>) [<span class="type">open</span>]  <span class="number">0.034</span> ms</span><br><span class="line">seq <span class="number">4</span>: tcp response from localhost (<span class="number">127.0</span>.<span class="number">0.1</span>) [<span class="type">open</span>]  <span class="number">0.111</span> ms</span><br><span class="line">seq <span class="number">5</span>: tcp response from localhost (<span class="number">127.0</span>.<span class="number">0.1</span>) [<span class="type">open</span>]  <span class="number">0.035</span> ms</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 配置静态IP</title>
    <url>/posts/2023/1KVMRKY.html</url>
    <content><![CDATA[<p>本文介绍如何为 Linux 中配置静态 IP。</p>
<span id="more"></span>
<h2 id="安装工具">安装工具</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt install iproute2</span><br></pre></td></tr></table></figure>
<h2 id="查看使用的网卡名称">查看使用的网卡名称</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://oss.223434.xyz:52443/public/files/images/image-20231226155813822.png"
alt="image-20231226155813822" />
<figcaption aria-hidden="true">image-20231226155813822</figcaption>
</figure>
<h2 id="修改配置文件">修改配置文件</h2>
<p>Ubuntu 20.04 采用 netplan 来管理网络配置计划，在 /etc/netplan/
目录下有一个以 yaml 结尾的文件，例如
00-installer-config.yaml，不同版本的系统这个文件名可能会有些差异，但是不影响，以实际为准。</p>
<h3 id="配置文件优先级">配置文件优先级</h3>
<p>Netplan 解析配置文件时，会按照字母数字顺序加载所有在 /etc/netplan/
目录下的 .yaml 文件，文件的命名方式将影响其优先级。</p>
<p><strong>配置文件优先级规则：</strong></p>
<ol type="1">
<li><strong>字母顺序</strong>：文件名按字母顺序排序，字母顺序靠前的文件优先级更高。</li>
<li><strong>数字顺序</strong>：文件名按数字顺序排序，数字顺序靠前的文件优先级更高。</li>
<li><strong>合并配置</strong>：多个配置文件可以合并，优先级高的配置文件会覆盖优先级低的配置文件中的相同设置。</li>
</ol>
<h3 id="开始配置">开始配置</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/netplan/<span class="number">00</span><span class="literal">-installer-config</span>.yaml</span><br><span class="line"><span class="comment"># 若是 wifi 则是 00-installer-config-wifi.yaml</span></span><br></pre></td></tr></table></figure>
<p>默认配置为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This is the network config written by &#x27;subiquity&#x27;</span></span><br><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">enp2s0:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>修改后的配置为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This is the network config written by &#x27;subiquity&#x27;</span></span><br><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">enp2s0:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">addresses:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.23</span><span class="number">.30</span><span class="string">/24</span>  <span class="comment"># set static ip and mask</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">default</span> <span class="comment"># can add more, example 192.168.23.0/24</span></span><br><span class="line">          <span class="attr">via:</span> <span class="number">192.168</span><span class="number">.23</span><span class="number">.254</span>  <span class="comment"># set gateway</span></span><br><span class="line">      <span class="attr">nameservers:</span></span><br><span class="line">        <span class="attr">addresses:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.23</span><span class="number">.11</span>  <span class="comment"># set dns</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">119.29</span><span class="number">.29</span><span class="number">.29</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>
<h2 id="测试网络配置">测试网络配置</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo netplan <span class="keyword">try</span></span><br></pre></td></tr></table></figure>
<h2 id="使网络配置生效">使网络配置生效</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo netplan apply</span><br></pre></td></tr></table></figure>
<p>运行以下 IP 命令查看接口上的 IP 地址：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ip addr show ens33</span><br></pre></td></tr></table></figure>
<p>要查看默认路由，请运行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ip route show</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<p><a href="https://linux.cn/article-15181-1.html">系统运维|如何在
Ubuntu 服务器 22.04 上设置静态 IP 地址 (linux.cn)</a></p>
]]></content>
      <categories>
        <category>System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 20.04 更换国内镜像源</title>
    <url>/posts/2023/1Z18QQW.html</url>
    <content><![CDATA[<p>Ubuntu采用<code>apt</code>作为软件安装工具，其镜像源列表记录在<code>/etc/apt/source.list</code>文件中。修改该文件内容即可更改镜像源。</p>
<span id="more"></span>
<h2 id="备份原文件">备份原文件</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure>
<h2 id="镜像源">镜像源</h2>
<h3 id="阿里云">阿里云</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal<span class="literal">-security</span> main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal<span class="literal">-updates</span> main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal<span class="literal">-backports</span> main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"><span class="comment"># deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line"><span class="comment"># deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span></span><br><span class="line"><span class="comment"># deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line"><span class="comment"># deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Pre-released source, not recommended.</span></span><br><span class="line"><span class="comment"># deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="comment"># deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure>
<h3 id="清华">清华</h3>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<p><a
href="https://midoq.github.io/2022/05/30/Ubuntu20-04更换国内镜像源/">Ubuntu20.04更换国内镜像源（阿里、网易163、清华、中科大）</a></p>
]]></content>
      <categories>
        <category>System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 阻止笔记本关盖后挂起</title>
    <url>/posts/2023/30R3C6S.html</url>
    <content><![CDATA[<p>本文介绍如何在 Ubuntu 中阻止笔记本关盖后进程挂起。</p>
<span id="more"></span>
<p>输入以下命令打开系统设置文件：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/systemd/logind.conf</span><br></pre></td></tr></table></figure>
<p>在打开的文件中，找到 <code>#HandleLidSwitch=suspend</code>
这一行（<code>#</code> 表示这一行被注释掉了）。将其改为</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">HandleLidSwitch=ignore</span><br></pre></td></tr></table></figure>
<p>并删除行首的 <code>#</code>，使这一行生效。</p>
<p>输入以下命令重启 <code>systemd-logind</code> 服务：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart systemd<span class="literal">-logind</span></span><br></pre></td></tr></table></figure>
<p>完成以上步骤后，当你关闭笔记本电脑的盖子时，系统将不再进入挂起状态。</p>
<hr />
<p><strong>补充介绍：</strong></p>
<p>配置说明</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>配置名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>HandleLidSwitch=suspend</td>
<td>当笔记本电脑使用电池供电时，合盖挂起</td>
</tr>
<tr class="even">
<td>HandleLidSwitchExternalPower=suspend</td>
<td>当笔记本电脑插入电源插座时，合盖挂起</td>
</tr>
<tr class="odd">
<td>HandleLidSwitchDocked=ignore</td>
<td>当笔记本电脑连接到扩展坞时，合盖忽略</td>
</tr>
</tbody>
</table>
<p>参数说明</p>
<table>
<thead>
<tr class="header">
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>suspend</td>
<td>合盖时挂起</td>
</tr>
<tr class="even">
<td>lock</td>
<td>合盖时锁定</td>
</tr>
<tr class="odd">
<td>ignore</td>
<td>什么都不做</td>
</tr>
<tr class="even">
<td>poweroff</td>
<td>关机</td>
</tr>
<tr class="odd">
<td>hibernate</td>
<td>合盖时休眠</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 中安装 Docker</title>
    <url>/posts/2023/316DJB8.html</url>
    <content><![CDATA[<p>本文将介绍如何在 Ubuntu 上安装
Docker，本文为安装指导，仅列出详细的安装步骤和一些必要的说明。</p>
<span id="more"></span>
<p>可以直接参考官方安装说明 <a
href="https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository">Ubuntu
| Docker Docs</a></p>
<h2 id="安装要求">安装要求</h2>
<p>截至 2023-12-26，Docker 支持的 Ubuntu 版本有：</p>
<ul>
<li>Ubuntu Mantic 23.10</li>
<li>Ubuntu Lunar 23.04</li>
<li>Ubuntu Jammy 22.04 (LTS)</li>
<li>Ubuntu Focal 20.04 (LTS)</li>
</ul>
<p>可以通过 <code>lsb_release -a</code> 或
<code>cat /etc/os-release</code> 查看 Ubuntu 版本。</p>
<h2 id="卸载旧版本">卸载旧版本</h2>
<p>通过以下命令卸载旧版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done</span><br></pre></td></tr></table></figure>
<h2 id="安装-docker">安装 Docker</h2>
<p>有多种安装方式，本文采用 apt 方式。</p>
<ol type="1">
<li><p>配置 Dockert <code>apt</code> 仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Add Docker<span class="string">&#x27;s official GPG key:</span></span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ca-certificates curl gnupg</span><br><span class="line">sudo install -m 0755 -d /etc/apt/keyrings</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br><span class="line">sudo chmod a+r /etc/apt/keyrings/docker.gpg</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Add the repository to Apt sources:</span></span></span><br><span class="line">echo \</span><br><span class="line">  &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \</span><br><span class="line"><span class="meta prompt_">  $</span><span class="language-bash"><span class="string">(. /etc/os-release &amp;&amp; echo &quot;$VERSION_CODENAME&quot;) stable&quot; | \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span></span></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li>
<li><p>安装最新版本的 Docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure></li>
<li><p>测试 Docker 是否安装成功</p>
<p>通过运行 hello-world 来测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>
<p>当显示如下内容时，说明安装成功了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="错误排查">错误排查</h2>
<h2 id="参考">参考</h2>
<p><a href="https://docs.docker.com/engine/install/ubuntu/">Install
Docker Engine on Ubuntu | Docker Docs</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/143156163">如何在 Ubuntu 20.04
上安装和使用 Docker - 知乎 (zhihu.com)</a></p>
]]></content>
      <categories>
        <category>System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 文件权限介绍</title>
    <url>/posts/2023/3MZH2CP.html</url>
    <content><![CDATA[<p>本文将详细介绍 Linux
中的文件权限概念和相关命令，帮助读者深入了解如何正确管理和使用文件权限。</p>
<span id="more"></span>
<h2 id="文件权限的组成">文件权限的组成</h2>
<p>使用 <code>ls -l</code> 我们可以查看文件或者目录的属性</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drwxr-xr-x   5 root root  4096 Dec 26 07:21 home</span><br><span class="line">lrwxrwxrwx   1 root root     7 Aug 10 00:17 lib -&gt; usr/lib</span><br><span class="line">-rw-r--r--   1 root root  1382 Dec 23  2021 rsyslog.conf</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/linux-file-auth.png"
alt="linux-file-auth" />
<figcaption aria-hidden="true">linux-file-auth</figcaption>
</figure>
<p>Linux
中，文件所有者分为三类，即文件所有者(user)、群组(group)和其他人(other)所属。在设置权限时，需要分别对这
3 个角色分别设置读、写、执行权限。</p>
<p>在 <code>ls -l</code> 列出的结果中，第 1 个字符表示文件类型，接着 3
个字符分别表示文件所有者(user)的读、写、执行权限，用户权限后 3
个字符分别是用户组的读、写、执行权限，最后 3
个字符分别是其它(非用户、用户组)的权限。</p>
<h2 id="权限表示">权限表示</h2>
<table>
<thead>
<tr class="header">
<th>表示方法</th>
<th>读</th>
<th>写</th>
<th>执行</th>
<th>无权限</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>字符</td>
<td>r</td>
<td>w</td>
<td>x</td>
<td>-</td>
<td>rwxr-x---</td>
</tr>
<tr class="even">
<td>数字</td>
<td>4</td>
<td>2</td>
<td>1</td>
<td>0</td>
<td>750</td>
</tr>
</tbody>
</table>
<p><strong>注意</strong>：使用数字表示时，需要将一个角色中的权限值求和来表示。例如用户的权限为
<code>rwx</code> ，表示成 <code>7</code>。</p>
<h2 id="权限修改">权限修改</h2>
<p>权限指令如下：</p>
<ul>
<li>chgrp（change group 的缩写）：改变文件所属群组</li>
<li>chown（change owner 的缩写）：改变文件所有者</li>
<li>chmod（change mode 的缩写）：改变文件权限</li>
</ul>
<h3 id="chgrp">chgrp</h3>
<p>语法如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chgrp [OPTION]... GROUP FILE...</span><br></pre></td></tr></table></figure>
<p>其中，<code>GROUP</code>
是你想要设置为文件或目录新的组所有者的组名，<code>FILE</code>
是你想要修改的文件或目录的名称。</p>
<p>例如，<code>chgrp staff myfile</code> 命令会将文件
<code>myfile</code> 的组所有权改为 <code>staff</code>。</p>
<h3 id="chown">chown</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown [OPTION]... [OWNER][:[GROUP]] FILE...</span><br></pre></td></tr></table></figure>
<p>其中，<code>OWNER</code>
是你想要设置为文件或目录新的用户所有者的用户名，<code>GROUP</code>
是你想要设置为文件或目录新的组所有者的组名，<code>FILE</code>
是你想要修改的文件或目录的名称。</p>
<p>例如，<code>chown john:staff myfile</code> 命令会将文件
<code>myfile</code> 的用户所有权改为 <code>john</code>，组所有权改为
<code>staff</code>。</p>
<h3 id="chmod">chmod</h3>
<ol type="1">
<li><p>符号模式</p>
<p>你可以使用
<code>u</code>（用户）、<code>g</code>（组）、<code>o</code>（其他）和
<code>a</code>（所有）来指定要修改的权限，使用
<code>+</code>（添加）、<code>-</code>（删除）和
<code>=</code>（设置）来指定要执行的操作，使用
<code>r</code>（读取）、<code>w</code>（写入）和
<code>x</code>（执行）来指定要修改的权限类型。</p>
<p>例如，<code>chmod u+x file</code>
命令会给文件的所有者添加执行权限。</p></li>
<li><p>数字模式</p>
<p>你可以使用三个数字来设置权限，每个数字代表一个权限组（所有者、组、其他），每个数字的值是
0 到 7，代表不同的权限组合。</p>
<p>例如，<code>chmod 755 file</code>
命令会给文件的所有者设置读取、写入和执行权限，给文件的组和其他用户设置读取和执行权限。</p></li>
</ol>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<p><a
href="https://www.cnblogs.com/Small-music/p/9223619.html">Linux_基础_文件权限
- Catnip - 博客园 (cnblogs.com)</a></p>
<p><a
href="https://blog.csdn.net/m0_49864110/article/details/129034749">Linux
文件权限讲解（一般权限、特殊权限、隐藏权限、访问控制列表、Umask）-CSDN博客</a></p>
]]></content>
      <categories>
        <category>System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>为 APT 配置代理</title>
    <url>/posts/2023/1MJYA7T.html</url>
    <content><![CDATA[<p>在 Linux 中，可以通过配置 APT 的代理设置来为 APT
添加代理。以下是一个例子：</p>
<span id="more"></span>
<p>首先，打开 APT 的配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/apt/apt.conf.d/proxy.conf</span><br></pre></td></tr></table></figure>
<p>然后，在打开的文件中添加以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Acquire::http::Proxy &quot;http://your-proxy-server:your-proxy-port&quot;;</span><br><span class="line"></span><br><span class="line">Acquire::https::Proxy &quot;http://your-proxy-server:your-proxy-port&quot;;</span><br></pre></td></tr></table></figure>
<p><code>your-proxy-server</code>
是代理服务器的地址，<code>your-proxy-port</code>
是代理服务器的端口。</p>
<p>保存并关闭文件后，APT 就会使用你配置的代理服务器来下载软件包。</p>
<blockquote>
<p>请注意，你需要使用 <code>sudo</code> 来编辑
<code>/etc/apt/apt.conf.d/proxy.conf</code>
文件，因为这个文件通常需要超级用户权限才能编辑。</p>
</blockquote>
]]></content>
      <categories>
        <category>System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>APT</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 中使用 Docker 安装 PaddleOCR</title>
    <url>/posts/2023/F9C0KW.html</url>
    <content><![CDATA[<p>本文将介绍如何在 Ubuntu 的 Docker 中安装 PaddleOCR，并启用 Cuda
进行加速。</p>
<span id="more"></span>
<h2 id="使用-docker-安装-paddlepaddle-环境">使用 Docker 安装
PaddlePaddle 环境</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入到用户目录，创建一个目录新目录</span></span><br><span class="line">cd ~ &amp;&amp; mkdir dockerMount/paddleOCR &amp;&amp; cd ./dockerMount/paddleOCR</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个容器，使用CUDA12+CUDNN8.9</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置docker容器共享内存shm-size为32G，建议设置32G以上</span></span><br><span class="line">sudo docker run --gpus all --name ppocr -v $PWD:/paddle --shm-size=32G --network=host -it registry.baidubce.com/paddlepaddle/paddle:2.6.0-gpu-cuda12.0-cudnn8.9-trt8.6 /bin/bash</span><br></pre></td></tr></table></figure>
<p>可使用 <code>exit</code> 退出容器。</p>
<p>可以通过下列命令重新进入容器：</p>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">完整方式</span></span><br><span class="line">sudo docker container exec -it ppocr /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">简化方式</span></span><br><span class="line">sudo docker exec -it ppocr bash</span><br></pre></td></tr></table></figure></p>
<p>至此，PaddlePaddle 环境就安装成功了</p>
<p><strong>特别说明：</strong></p>
<p>官方教程使用的是 nvidia-docker 来安装的，<a
href="https://github.com/NVIDIA/nvidia-docker">NVIDIA/nvidia-docker:</a>
目前被 <a
href="https://github.com/NVIDIA/nvidia-container-toolkit">NVIDIA/nvidia-container-toolkit</a>
代替，因此，在使用时，将 <code>nvidia-docker</code> 换成
<code>docker --gpu all</code> 即可。</p>
<h2 id="测试-paddlepaddle-安装结果">测试 paddlepaddle 安装结果</h2>
<p>进入 python shell，然后执行 <code>paddle.utils.run_check()</code>
查看状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line">import paddle</span><br><span class="line">paddle.utils.run_check()</span><br></pre></td></tr></table></figure>
<p>正常的输出结果如下：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Running verify PaddlePaddle program ...</span><br><span class="line">I0108 07:52:51.569307   893 program<span class="built_in">_</span>interpreter.cc:212] New Executor is Running.</span><br><span class="line">W0108 07:52:51.569667   893 gpu<span class="built_in">_</span>resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.9, Driver API Version: 12.2, Runtime API Version: 12.0</span><br><span class="line">W0108 07:52:51.570616   893 gpu<span class="built_in">_</span>resources.cc:164] device: 0, cuDNN Version: 8.8.</span><br><span class="line">I0108 07:52:51.671880   893 interpreter<span class="built_in">_</span>util.cc:624] Standalone Executor is Used.</span><br><span class="line">PaddlePaddle works well on 1 GPU.</span><br><span class="line">PaddlePaddle is installed successfully! Let&#x27;s start deep learning with PaddlePaddle now.</span><br></pre></td></tr></table></figure>
<h2 id="安装paddleocr-whl包">安装PaddleOCR whl包</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install &quot;paddleocr&gt;=2.0.1&quot; # 推荐使用2.0.1+版本</span><br></pre></td></tr></table></figure>
<p>使用 <code>paddleocr -h</code> 可以查看 paddleocr 是否安装成功</p>
<h2 id="测试">测试</h2>
<ol type="1">
<li><p>准备测试图片</p>
<p><strong>从 Windows 中复制</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp D:\Develop\TestTemp\invoice\test-invoice\电子发票.png username@host:/home/username/today</span><br></pre></td></tr></table></figure>
<p>此步骤非必须，可以直接使用 Linux 从网络中下载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://paddleocr.bj.bcebos.com/dygraph_v2.1/ppocr_img.zip</span><br><span class="line">unzip ppocr_image.zip</span><br></pre></td></tr></table></figure></li>
<li><p>将图片复制到 docker 容器中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker cp image.png containername:/home/target-path</span><br></pre></td></tr></table></figure></li>
<li><p>执行测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">paddleocr --image_dir ./imgs/11.jpg --use_angle_cls true --use_gpu true</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<p><a
href="https://github.com/PaddlePaddle/PaddleOCR/blob/release/2.6/doc/doc_ch/environment.md#13-linux">PaddleOCR/doc/doc_ch/environment.md
at release/2.6 · PaddlePaddle/PaddleOCR (github.com)</a></p>
<p><a
href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/utils/run_check_cn.html">run_check-API文档-PaddlePaddle深度学习平台</a></p>
<p><a
href="https://www.paddlepaddle.org.cn/install/quick?docurl=/documentation/docs/zh/install/docker/linux-docker.html">开始使用_飞桨-源于产业实践的开源深度学习平台
(paddlepaddle.org.cn)</a></p>
<p><a
href="https://www.paddlepaddle.org.cn/tutorials/projectdetail/5603475">飞桨PaddlePaddle-源于产业实践的开源深度学习平台</a></p>
]]></content>
      <categories>
        <category>System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Ubuntu</tag>
        <tag>PaddleOCR</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 中如何同时执行多条命令</title>
    <url>/posts/2023/19K9M5N.html</url>
    <content><![CDATA[<p>在 Linux 中，你可以使用以下几种方法来同时执行多个命令：</p>
<ul>
<li>使用分号 (<code>;</code>) 分隔命令</li>
<li>使用 <code>&amp;&amp;</code> 运算符</li>
<li>使用 <code>&amp;</code> 运算符</li>
<li>使用管道 (<code>|</code>)</li>
</ul>
<p>下面进行详细的介绍</p>
<span id="more"></span>
<ol type="1">
<li><p>使用分号 (<code>;</code>) 分隔命令：</p>
<p>command1 ; command2 ; command3</p>
<p>这将依次执行 <code>command1</code>、<code>command2</code> 和
<code>command3</code>。即使前一个命令失败，后一个命令也会继续执行。</p></li>
<li><p>使用 <code>&amp;&amp;</code> 运算符：</p>
<p>command1 &amp;&amp; command2 &amp;&amp; command3</p>
<p>这将依次执行 <code>command1</code>、<code>command2</code> 和
<code>command3</code>，但是如果任何一个命令失败（返回非零退出状态），则后面的命令不会执行。</p></li>
<li><p>使用 <code>&amp;</code> 运算符：</p>
<p>command1 &amp; command2 &amp; command3</p>
<p>这将同时执行 <code>command1</code>、<code>command2</code> 和
<code>command3</code>，每个命令在后台运行，不会等待前一个命令完成。</p></li>
<li><p>使用管道 (<code>|</code>)：</p>
<p>command1 | command2 | command3</p>
<p>这将执行 <code>command1</code>，然后将 <code>command1</code>
的输出作为 <code>command2</code> 的输入，然后将 <code>command2</code>
的输出作为 <code>command3</code>
的输入。这是一种常见的方式，用于将多个命令链接在一起，形成一个命令管道。</p></li>
</ol>
]]></content>
      <categories>
        <category>System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 FHS 规范 Linux 目录使用</title>
    <url>/posts/2023/3AYYNM8.html</url>
    <content><![CDATA[<p>在 Linux 或 Unix
操作系统中，所有的文件和目录都被组织成以一个根节点（/）开始的倒置的树状结构</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/linux2bfile2bsystem2bhierarchy.jpg"
alt="linux2bfile2bsystem2bhierarchy" />
<figcaption
aria-hidden="true">linux2bfile2bsystem2bhierarchy</figcaption>
</figure>
<p>文件系统的最顶层是由根目录开始的，系统使用 <strong>/</strong>
来表示根目录。在根目录之下的既可以是目录，也可以是文件，而每一个目录中又可以包含子目录文件。如此反复就可以构成一个庞大的文件系统。</p>
<span id="more"></span>
<p>在Linux文件系统中有两个特殊的目录，一个用户所在的工作目录，也叫当前目录，可以使用一个点
<strong>.</strong>
来表示；另一个是当前目录的上一级目录，也叫父目录，可以使用两个点
<strong>..</strong> 来表示。</p>
<ul>
<li>. ：代表当前的目录，也可以使用 ./ 来表示；</li>
<li>.. ：代表上一层目录，也可以 ../ 来代表。</li>
</ul>
<p>如果一个目录或文件名以一个点 .
开始，表示这个目录或文件是一个隐藏目录或文件(如：.bashrc)。即以默认方式查找时，不显示该目录或文件。</p>
<h2 id="目录结构">目录结构</h2>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>目录</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>/</code></td>
<td><em>第一层次结构</em> 的根、 整个文件系统层次结构的<a
href="https://zh.wikipedia.org/wiki/根目录">根目录</a>。</td>
</tr>
<tr class="even">
<td><code>/bin/</code></td>
<td>需要在<a
href="https://zh.wikipedia.org/wiki/單用戶模式">单用户模式</a>可用的必要命令（<a
href="https://zh.wikipedia.org/wiki/可执行文件">可执行文件</a>）；面向所有用户，<em>例如</em>：
<a href="https://zh.wikipedia.org/wiki/Cat_(Unix)">cat</a>、 <a
href="https://zh.wikipedia.org/wiki/Ls">ls</a>、 <a
href="https://zh.wikipedia.org/wiki/Cp_(Unix)">cp</a>。</td>
</tr>
<tr class="odd">
<td><code>/boot/</code></td>
<td><a
href="https://zh.wikipedia.org/wiki/引导程序">引导程序</a>文件，<em>例如：</em>
<a href="https://zh.wikipedia.org/wiki/内核">kernel</a>、<a
href="https://zh.wikipedia.org/wiki/Initrd">initrd</a>；时常是一个单独的分区[<a
href="https://zh.wikipedia.org/wiki/文件系统层次结构标准#cite_note-8">8]</a></td>
</tr>
<tr class="even">
<td><code>/dev/</code></td>
<td>英文 device，必要<a
href="https://zh.wikipedia.org/wiki/设备文件系统">设备</a>,
<em>例如：</em><code>/dev/null</code>.</td>
</tr>
<tr class="odd">
<td><code>/etc/</code></td>
<td>特定主机，系统范围内的<a
href="https://zh.wikipedia.org/wiki/配置文件">配置文件</a>。关于这个名称目前有争议。在贝尔实验室关于UNIX
实现文档的早期版本中，/etc 被称为<em><a
href="https://zh.wikipedia.org/wiki/等等">etcetera</a></em>， [<a
href="https://zh.wikipedia.org/wiki/文件系统层次结构标准#cite_note-9">9]</a>
这是由于过去此目录中存放所有不属于别处的所有东西（然而，FHS限制/etc只能存放静态配置文件，不能包含二进制文件）。
[<a
href="https://zh.wikipedia.org/wiki/文件系统层次结构标准#cite_note-10">10]</a>
自从早期文档出版以来，目录名称已被以各种方式重新称呼。最近的解释包括<a
href="https://zh.wikipedia.org/wiki/逆向首字母缩略词">逆向首字母缩略词</a>如："可编辑的文本配置"（英文
"Editable Text Configuration"）或"扩展工具箱"（英文 "Extended Tool
Chest"）。 [<a
href="https://zh.wikipedia.org/wiki/文件系统层次结构标准#cite_note-11">11]</a></td>
</tr>
<tr class="even">
<td><code>/etc/opt/</code></td>
<td><code>/opt/</code>的配置文件</td>
</tr>
<tr class="odd">
<td><code>/etc/X11/</code></td>
<td><a
href="https://zh.wikipedia.org/wiki/X_Window系统">X窗口系统</a>(版本11)的配置文件</td>
</tr>
<tr class="even">
<td><code>/etc/sgml/</code></td>
<td><a href="https://zh.wikipedia.org/wiki/SGML">SGML</a>的配置文件</td>
</tr>
<tr class="odd">
<td><code>/etc/xml/</code></td>
<td><a href="https://zh.wikipedia.org/wiki/XML">XML</a>的配置文件</td>
</tr>
<tr class="even">
<td><code>/home/</code></td>
<td>用户的<a
href="https://zh.wikipedia.org/wiki/家目录">家目录</a>，包含保存的文件、个人设置等，一般为单独的分区。</td>
</tr>
<tr class="odd">
<td><code>/lib/</code></td>
<td><code>/bin/</code> 和 <code>/sbin/</code>中二进制文件必要的<a
href="https://zh.wikipedia.org/wiki/函式庫">库</a>文件。</td>
</tr>
<tr class="even">
<td><code>/media/</code></td>
<td>可移除媒体(如<a
href="https://zh.wikipedia.org/wiki/CD-ROM">CD-ROM</a>)的挂载点
(在FHS-2.3中出现)。</td>
</tr>
<tr class="odd">
<td><code>/mnt/</code></td>
<td>临时<a
href="https://zh.wikipedia.org/wiki/挂载">挂载</a>的文件系统。</td>
</tr>
<tr class="even">
<td><code>/opt/</code></td>
<td>可选<a href="https://zh.wikipedia.org/wiki/应用软件">应用软件</a> 和
<a href="https://zh.wikipedia.org/wiki/软件包">包</a>。[<a
href="https://zh.wikipedia.org/wiki/文件系统层次结构标准#cite_note-12">12]</a></td>
</tr>
<tr class="odd">
<td><code>/proc/</code></td>
<td>虚拟<a
href="https://zh.wikipedia.org/wiki/文件系统">文件系统</a>，将<a
href="https://zh.wikipedia.org/wiki/内核">内核</a>与<a
href="https://zh.wikipedia.org/wiki/进程">进程</a>状态归档为文本文件。<em>例如：</em>uptime、
network。在Linux中，对应<a
href="https://zh.wikipedia.org/wiki/Procfs">Procfs</a>格式挂载。</td>
</tr>
<tr class="even">
<td><code>/root/</code></td>
<td><a href="https://zh.wikipedia.org/wiki/超级用户">超级用户</a>的<a
href="https://zh.wikipedia.org/wiki/家目录">家目录</a></td>
</tr>
<tr class="odd">
<td><code>/sbin/</code></td>
<td>必要的系统二进制文件，<em>例如：</em> init、 ip、 mount。</td>
</tr>
<tr class="even">
<td><code>/srv/</code></td>
<td>站点的具体<a
href="https://zh.wikipedia.org/wiki/数据">数据</a>，由系统提供。</td>
</tr>
<tr class="odd">
<td><code>/tmp/</code></td>
<td>临时文件(参见
<code>/var/tmp</code>)，在系统重启时目录中文件不会被保留。</td>
</tr>
<tr class="even">
<td><code>/usr/</code></td>
<td>命名(Unix Software
Resource)，用于存储只读用户数据的<em>第二层级目录</em>；
包含绝大多数的(<a
href="https://zh.wikipedia.org/wiki/多用户">多</a>)用户工具和应用程序[<a
href="https://zh.wikipedia.org/wiki/文件系统层次结构标准#cite_note-13">13]</a>。</td>
</tr>
<tr class="odd">
<td><code>/usr/bin/</code></td>
<td>非必要<a
href="https://zh.wikipedia.org/wiki/可执行文件">可执行文件</a> (在<a
href="https://zh.wikipedia.org/wiki/單用戶模式">单用户模式</a>中不需要)；面向所有用户。</td>
</tr>
<tr class="even">
<td><code>/usr/include/</code></td>
<td>标准<a
href="https://zh.wikipedia.org/wiki/头文件">包含文件</a>。</td>
</tr>
<tr class="odd">
<td><code>/usr/lib/</code></td>
<td><code>/usr/bin/</code>和<code>/usr/sbin/</code>中二进制文件的<a
href="https://zh.wikipedia.org/wiki/库">库</a>。</td>
</tr>
<tr class="even">
<td><code>/usr/sbin/</code></td>
<td>非必要的系统二进制文件，<em>例如：</em>大量<a
href="https://zh.wikipedia.org/wiki/网络服务">网络服务</a>的<a
href="https://zh.wikipedia.org/wiki/守护进程">守护进程</a>。仅超级管理员可用。</td>
</tr>
<tr class="odd">
<td><code>/usr/share/</code></td>
<td><a
href="https://zh.wikipedia.org/wiki/体系结构">体系结构</a>无关（共享）数据。</td>
</tr>
<tr class="even">
<td><code>/usr/src/</code></td>
<td><a
href="https://zh.wikipedia.org/wiki/源代码">源代码</a>,<em>例如:</em>内核源代码及其头文件。</td>
</tr>
<tr class="odd">
<td><code>/usr/X11R6/</code></td>
<td><a href="https://zh.wikipedia.org/wiki/X_Window系统">X窗口系统</a>
版本 11, Release 6.</td>
</tr>
<tr class="even">
<td><code>/usr/local/</code></td>
<td>本地数据的<em>第三层次</em>，
具体到本台主机。通常而言有进一步的子目录，
<em>例如：</em><code>bin/</code>、<code>lib/</code>、<code>share/</code>.[<a
href="https://zh.wikipedia.org/wiki/文件系统层次结构标准#cite_note-14">14]</a></td>
</tr>
<tr class="odd">
<td><code>/var/</code></td>
<td>变量文件——在正常运行的系统中其内容不断变化的文件，如日志，脱机文件和临时电子邮件文件。有时是一个单独的分区。</td>
</tr>
<tr class="even">
<td><code>/var/cache/</code></td>
<td>应用程序缓存数据。这些数据是在本地生成的一个耗时的I/O或计算结果。应用程序必须能够再生或恢复数据。缓存的文件可以被删除而不导致数据丢失。</td>
</tr>
<tr class="odd">
<td><code>/var/lib/</code></td>
<td>状态信息。 由程序在运行时维护的持久性数据。
<em>例如：</em>数据库、包装的系统元数据等。</td>
</tr>
<tr class="even">
<td><code>/var/lock/</code></td>
<td>锁文件，一类跟踪当前使用中资源的文件。</td>
</tr>
<tr class="odd">
<td><code>/var/log/</code></td>
<td>日志文件，包含大量日志文件，为了防止日志占满根分区，生产环境中一般是单独分区。</td>
</tr>
<tr class="even">
<td><code>/var/mail/</code></td>
<td>用户的<a
href="https://zh.wikipedia.org/wiki/电子邮箱">电子邮箱</a>。</td>
</tr>
<tr class="odd">
<td><code>/var/run/</code></td>
<td>自最后一次启动以来运行中的系统的信息，<em>例如：</em>当前登录的用户和运行中的<a
href="https://zh.wikipedia.org/wiki/守护进程">守护进程</a>、一些守护进程的pid文件、socket文件。现已经被/run代替[<a
href="https://zh.wikipedia.org/wiki/文件系统层次结构标准#cite_note-15">15]</a>。</td>
</tr>
<tr class="even">
<td><code>/var/spool/</code></td>
<td>等待处理的任务的<a
href="https://zh.wikipedia.org/w/index.php?title=脱机文件&amp;action=edit&amp;redlink=1">脱机文件</a>，<em>例如：</em>打印队列和未读的邮件。</td>
</tr>
<tr class="odd">
<td><code>/var/spool/mail/</code></td>
<td>用户的邮箱(不鼓励的存储位置)</td>
</tr>
<tr class="even">
<td><code>/var/tmp/</code></td>
<td>在系统重启过程中可以保留的临时文件。</td>
</tr>
<tr class="odd">
<td><code>/run/</code></td>
<td>代替/var/run目录。</td>
</tr>
<tr class="even">
<td><code>/lost-found</code></td>
<td>这个目录平时是空的，当系统非正常关机而留下的“无家可归”的文件便会储存在这里</td>
</tr>
</tbody>
</table>
<h2 id="目录实践">目录实践</h2>
<ol type="1">
<li><p>网站、FTP 存放位置</p>
<p>在 Linux 文件系统中，<code>/srv</code>
目录是用来存放服务器特定的数据的。</p>
<ul>
<li><p><code>/srv/www</code> 来保存网站的 HTML 和相关文件</p></li>
<li><p><code>/srv/ftp</code> 来存放 FTP 的文件</p></li>
</ul></li>
<li><p>自己编写的程序存放位置</p>
<ul>
<li><code>/usr/local/bin</code>：用于存放用户编译的可执行文件，这些文件对所有用户都可用。</li>
<li><code>/usr/local/sbin</code>：用于存放用户编译的系统管理程序，这些程序通常只对超级用户可用。</li>
</ul></li>
</ol>
<h2 id="参考">参考</h2>
<p><a
href="https://zh.wikipedia.org/wiki/文件系统层次结构标准">文件系统层次结构标准
- 维基百科，自由的百科全书 (wikipedia.org)</a></p>
<p><a
href="https://www.runoob.com/linux/linux-system-contents.html">Linux
系统目录结构 | 菜鸟教程 (runoob.com)</a></p>
]]></content>
      <categories>
        <category>System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>FHS</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 服务器安装 Nvidia Container Toolkit 使 Docker 支持 Cuda</title>
    <url>/posts/2023/HNT542.html</url>
    <content><![CDATA[<p>为了能够在 Docker 中使用 GPU 进行加速，Nvidia 开发了 <a
href="https://github.com/NVIDIA/nvidia-docker">nvidia-docker</a> 对
Container 进行封装，使得 Docker 容器可以调用 GPU 进行加速。现在 <a
href="https://github.com/NVIDIA/nvidia-docker">nvidia-docker</a>
已被归档，官方推荐使用 <strong><a
href="https://github.com/NVIDIA/nvidia-container-toolkit">nvidia-container-toolkit</a></strong>。</p>
<p>本文将介绍如何在 Linux 中安装 nvidia-container-toolkit。</p>
<blockquote>
<p>注：本文所使用的显卡为 RTX4080</p>
</blockquote>
<span id="more"></span>
<h2 id="关系理解">关系理解</h2>
<p>在 Ubuntu 的 Docker 中使用 GPU 时，需要在 host
主机中安装两个环境：</p>
<ol type="1">
<li>Nvidia 驱动</li>
<li>NVIDIA Container Toolkit</li>
</ol>
<p>其关系如下图所示：</p>
<figure>
<img data-src="https://oss.223434.xyz:2234/public/files/images/ngidia-container-toolkit.png"
alt="ngidia-container-toolkit" />
<figcaption aria-hidden="true">ngidia-container-toolkit</figcaption>
</figure>
<p>Nvidia 驱动决定了可使用的 cuda 最大版本号，如下图右上角所示。</p>
<p>如图所示：</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20231227172857700.png"
alt="image-20231227172857700" />
<figcaption aria-hidden="true">image-20231227172857700</figcaption>
</figure>
<h2 id="安装-nvidia-驱动">安装 Nvidia 驱动</h2>
<h3 id="查看机器环境">查看机器环境</h3>
<ol type="1">
<li><p>查看发行版信息：</p>
<p><code>lsb_release -a</code></p></li>
<li><p>查看内核版本：</p>
<p><code>uname -r</code></p></li>
<li><p>查看默认 GCC 版本：</p>
<p><code>gcc --version</code></p></li>
<li><p>查看 GLIBC 版本：</p>
<p><code>ldd --version</code></p></li>
</ol>
<p>支持的 linux 版本如下：</p>
<p><a
href="https://docs.nvidia.com/cuda/cuda-installation-guide-linux/#id11">Native
Linux Distribution Support in CUDA 12.6 Update 3</a></p>
<p>若版本不满足要求，可以按下列方式进行升级，下文将以 Ubuntu 22.04.3
为例。</p>
<blockquote>
<p>注意：升级内核有风险，请谨慎操作！</p>
</blockquote>
<h4 id="升级内核">升级内核</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">apt-cache search linux-image</span><br><span class="line"><span class="comment"># 安装指定版本内核</span></span><br><span class="line">sudo apt install linux-image-5.4.0-42-generic linux-headers-5.4.0-42-generic</span><br><span class="line"><span class="comment"># 更新 GRUB 配置</span></span><br><span class="line">sudo update-grub</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>
<h4 id="升级-gcc">升级 gcc</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 gcc12</span></span><br><span class="line">sudo apt-get install gcc-12 g++-12</span><br><span class="line"><span class="comment"># 设置为默认版本</span></span><br><span class="line">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 110 --slave /usr/bin/g++ g++ /usr/bin/g++-12</span><br><span class="line"><span class="comment"># 修改 gcc 的优先级</span></span><br><span class="line">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 100</span><br><span class="line"><span class="comment"># 减小原来 gcc 的优先级</span></span><br><span class="line">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 50</span><br><span class="line"><span class="comment"># 选择默认的 gcc</span></span><br><span class="line">sudo update-alternatives --config gcc</span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">gcc --version</span><br></pre></td></tr></table></figure>
<h3 id="查看驱动版本">查看驱动版本</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/driver/nvidia/version</span><br></pre></td></tr></table></figure>
<p>若提示没有该文件，则说明没有驱动。否则会显示驱动版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">NVRM version: NVIDIA UNIX x86_64 Kernel Module  535.154.05  Thu Dec 28 15:37:48 UTC 2023</span><br><span class="line">GCC version:  gcc version 11.4.0 (Ubuntu 11.4.0-1ubuntu1~22.04)</span><br></pre></td></tr></table></figure>
<h3 id="卸载原驱动">卸载原驱动</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> DRIVER_BRANCH=535.216.01</span><br><span class="line">sudo apt --purge remove <span class="string">&quot;*nvidia*<span class="variable">$&#123;DRIVER_BRANCH&#125;</span>*&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="安装驱动">安装驱动</h3>
<blockquote>
<p>RTX 4080 不支持 server 类型的驱动</p>
</blockquote>
<p>查看可安装驱动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ubuntu-drivers list</span><br></pre></td></tr></table></figure>
<blockquote>
<p>输入上述命令后，可能会报错：<code>ERROR:root:aplay command not found</code>，安装一下
<code>sudo apt install alsa-utils</code>
即可，这是一个声音驱动工具包。</p>
</blockquote>
<h4 id="版本选择">版本选择</h4>
<p>使用 <code>ubuntu-drivers list</code> 命令后，输出结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ /home/xby ubuntu-drivers list --gpgpu</span><br><span class="line">nvidia-driver-535</span><br><span class="line">nvidia-driver-550</span><br><span class="line">nvidia-driver-535-server</span><br><span class="line">nvidia-driver-545-open</span><br><span class="line">nvidia-driver-535-server-open</span><br><span class="line">nvidia-driver-550-open</span><br><span class="line">nvidia-driver-535-open</span><br><span class="line">nvidia-driver-545</span><br></pre></td></tr></table></figure>
<ul>
<li><p>server</p>
<p>这是一个专门为服务器设计的驱动程序，提供了针对服务器硬件和应用程序的优化</p></li>
<li><p>open</p>
<p>开源版本的 NVIDIA 驱动</p></li>
<li><p>通用的驱动</p></li>
</ul>
<p>各个版本历史渊源详见 <a
href="https://minetest.top/archives/1724743569668">如何优雅地在ubuntu中安装nvidia驱动</a></p>
<h4 id="开始安装">开始安装</h4>
<ol type="1">
<li><p>使用推荐方式安装默认版本</p>
<p><code>sudo ubuntu-drivers install --gpgpu</code></p>
<blockquote>
<p>这种方式安装的驱动不是最新版本</p>
</blockquote></li>
<li><p>安装指定版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下列版本二选一</span></span><br><span class="line"><span class="comment"># 服务器版本</span></span><br><span class="line">sudo ubuntu-drivers install --gpgpu nvidia:550-server</span><br><span class="line"><span class="comment"># 通用版本</span></span><br><span class="line">sudo ubuntu-drivers install --gpgpu nvidia:550</span><br></pre></td></tr></table></figure></li>
<li><p>查看驱动版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看驱动版本</span></span><br><span class="line"><span class="built_in">cat</span> /proc/driver/nvidia/version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若是 --gpgpu 版本，还需要根据驱动版本安装工具包，下面的 550 为主版本号</span></span><br><span class="line">sudo apt install nvidia-utils-550-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过版本安装的 nvidia-smi 工具，没有后缀 -server</span></span><br><span class="line">sudo apt install nvidia-utils-550</span><br></pre></td></tr></table></figure>
<p>输入 <code>nvidia-smi</code> 来查看显卡状态，正常显示如下：</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20231227172857700.png"
alt="image-20231227172857700" />
<figcaption aria-hidden="true">image-20231227172857700</figcaption>
</figure></li>
</ol>
<h2 id="安装-nvidia-container-toolkit">安装 NVIDIA Container
Toolkit</h2>
<ol type="1">
<li><p>宿主机更新 NVIDIA driver</p>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \</span><br><span class="line">&amp;&amp; curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \</span><br><span class="line">sed &#x27;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g&#x27; | \</span><br><span class="line">sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>请注意，该步骤会从 nvidia.github.io 上下载文件，可能需要配置代理</p>
</blockquote></li>
<li><p>更新包列表</p>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></p></li>
<li><p>安装 NVIDIA Container Toolkit</p>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y nvidia-container-toolkit</span><br></pre></td></tr></table></figure></p></li>
</ol>
<h2 id="配置-docker">配置 Docker</h2>
<ol type="1">
<li><p>通过 <code>navidia-ctk</code> 配置 docker 容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nvidia-ctk runtime configure --runtime=docker</span><br></pre></td></tr></table></figure></li>
<li><p>重启容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="配置-containerd">配置 Containerd</h2>
<p><code>containerd</code> 是一个开源的容器运行时，它是 Docker
的一个核心组件，负责管理容器的生命周期，包括镜像管理、容器执行、进程监控、网络管理等。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nvidia-ctk runtime configure --runtime=containerd</span><br><span class="line">sudo systemctl restart containerd</span><br></pre></td></tr></table></figure>
<h2 id="测试">测试</h2>
<p>使用下列代码测试是否可以在 docker 容器中使用 gpu</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker run --rm --runtime=nvidia --gpus all ubuntu nvidia-smi</span><br></pre></td></tr></table></figure>
<blockquote>
<p>--gpus all：表示在 docker 中使用 GPU，若容器需要使用
GPU，都需要添加这个参数</p>
</blockquote>
<p>当输出如下内容时，说明安装成功了</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">+---------------------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 535.129.03             Driver Version: 535.129.03   CUDA Version: 12.2     |</span><br><span class="line">|-----------------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|                                         |                      |               MIG M. |</span><br><span class="line">|=========================================+======================+======================|</span><br><span class="line">|   0  NVIDIA GeForce RTX 4080        Off | 00000000:65:00.0 Off |                  N/A |</span><br><span class="line">|  0<span class="comment">%   33C    P8               7W / 320W |      2MiB / 16376MiB |      0%      Default |</span></span><br><span class="line">|                                         |                      |                  N/A |</span><br><span class="line">+-----------------------------------------+----------------------+----------------------+</span><br><span class="line"></span><br><span class="line">+---------------------------------------------------------------------------------------+</span><br><span class="line">| Processes:                                                                            |</span><br><span class="line">|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |</span><br><span class="line">|        ID   ID                                                             Usage      |</span><br><span class="line">|=======================================================================================|</span><br><span class="line">|  No running processes found                                                           |</span><br><span class="line">+---------------------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>
<h2 id="docker-compose-配置-gpu">docker compose 配置 GPU</h2>
<p>在配置中加入如下设置，允许 docker 使用 gpu</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">ollma:</span></span><br><span class="line">  	<span class="string">...</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">reservations:</span></span><br><span class="line">          <span class="attr">devices:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">driver:</span> <span class="string">nvidia</span></span><br><span class="line">              <span class="attr">count:</span> <span class="number">1</span> <span class="comment"># 使用一块 GPU</span></span><br><span class="line">              <span class="attr">capabilities:</span> [<span class="string">gpu</span>]</span><br></pre></td></tr></table></figure>
<h2 id="测试-docker-容器-gpu-状态">测试 Docker 容器 GPU 状态</h2>
<p>进入到容器后，执行 <code>nvidia-smi</code>，若成功显示 GPU
信息，则说明 docker 容器成功访问到了 GPU。</p>
<h2 id="bug-排查">bug 排查</h2>
<h3 id="重启后失效">重启后失效</h3>
<p>重启后，执行 <code>nvidia-smi</code>，发现 driver 没有启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  /home/xby nvidia-smi</span><br><span class="line">NVIDIA-SMI has failed because it couldn<span class="string">&#x27;t communicate with the NVIDIA driver. Make sure that the latest NVIDIA driver is installed and running.</span></span><br><span class="line"><span class="string">➜  /home/xby sudo ubuntu-drivers install --gpgpu nvidia:550</span></span><br><span class="line"><span class="string">nvidia-headless-no-dkms-550</span></span><br><span class="line"><span class="string">None</span></span><br><span class="line"><span class="string">All the available drivers are already installed.</span></span><br><span class="line"><span class="string">➜  /home/xby gcc --version</span></span><br><span class="line"><span class="string">gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0</span></span><br><span class="line"><span class="string">Copyright (C) 2021 Free Software Foundation, Inc.</span></span><br><span class="line"><span class="string">This is free software; see the source for copying conditions.  There is NO</span></span><br><span class="line"><span class="string">warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></span><br></pre></td></tr></table></figure>
<p>从上面可以看出，问题出在
<code>nvidia-headless-no-dkms-550</code>，通过排查，怀疑是
<code>gcc</code> 版本问题，参考</p>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<p><a
href="https://ubuntu.com/server/docs/nvidia-drivers-installation">NVIDIA
drivers installation | Ubuntu</a></p>
<p><a
href="https://github.com/NVIDIA/nvidia-docker">NVIDIA/nvidia-docker:
Build and run Docker containers leveraging NVIDIA GPUs
(github.com)</a></p>
<p><a
href="https://github.com/NVIDIA/nvidia-container-toolkit">NVIDIA/nvidia-container-toolkit:
Build and run containers leveraging NVIDIA GPUs (github.com)</a></p>
<p><a
href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html">Installing
the NVIDIA Container Toolkit — NVIDIA Container Toolkit 1.14.3
documentation</a></p>
<p><a
href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/sample-workload.html">Running
a Sample Workload — NVIDIA Container Toolkit 1.14.3
documentation</a></p>
]]></content>
      <categories>
        <category>System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 解决开机网络等待问题</title>
    <url>/posts/2023/25M42MH.html</url>
    <content><![CDATA[<p>在 Ubuntu 重启后，可能会在开机画面中看到「A start job is running for
wait for Network to be
configured」这样的消息，一直到两分钟后才可继续进行之后的开机流程。这个问题的原因是出在哪呢？要如何解决？</p>
<span id="more"></span>
<h2 id="原因分析">原因分析</h2>
<p>在登录Ubuntu操作系统后，可以使用以下指令来查看这个Systemd
Unit的状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemd-networkd-wait-online.service</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20231227164123904.png"
alt="image-20231227164123904" />
<figcaption aria-hidden="true">image-20231227164123904</figcaption>
</figure>
<p>我们可以根据状态消息来确认，问题点确实是发生在开机配置网络的时候，因为配置一直无法完成，所以超时了。</p>
<p>那个究竟是哪个网络接口无法正常被配置呢？可以使用以下指令来查看：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">networkctl</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20231227164222065.png"
alt="image-20231227164222065" />
<figcaption aria-hidden="true">image-20231227164222065</figcaption>
</figure>
<p>从上面这张图的结果可以看出，笔者电脑的「enp2s0」这个网络接口似乎有问题，配置了好几分钟都还没结束。</p>
<h2 id="解决方式">解决方式</h2>
<h3 id="方式一配置静态-ip">方式一：配置静态 IP</h3>
<p>通常这个问题是 DHCP
无法正常取得网络信息的缘故所致，因此我们要手动指定 IP</p>
<blockquote>
<p>该方式从根源解决问题</p>
</blockquote>
<p>Ubuntu所使用的网络管理工具为「netplan」，设置文件都放置于「/etc/netplan」这个目录下。因此我们可以利用「grep」指令来查找「enp0s8」这个网络接口的设置是在哪个文件内进行设置的。指令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/netplan; grep -r enp2s0</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20231227164851809.png"
alt="image-20231227164851809" />
<figcaption aria-hidden="true">image-20231227164851809</figcaption>
</figure>
<p>从结果里，可以看到，配置位于
<code>00-installer-config-wifi.yaml</code> 文件中</p>
<p>使用 <code>sudo vim 00-installer-config.yaml</code> 对 enp2s0
网口配置静态 IP。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">network:</span><br><span class="line">  ethernets:</span><br><span class="line">    enp2s0:</span><br><span class="line">      dhcp4: true</span><br><span class="line">    enp3s0:</span><br><span class="line">      dhcp4: false</span><br><span class="line">      addresses:</span><br><span class="line">        - 192.168.128.237/24  # 设置静态 IP 地址和掩码</span><br><span class="line">      routes:</span><br><span class="line">        - to: default</span><br><span class="line">          via: 192.168.128.249  # 设置网关地址</span><br><span class="line">      nameservers:</span><br><span class="line">        addresses:</span><br><span class="line">          - 192.168.23.11  # 设置主、备 DNS</span><br><span class="line">          - 119.29.29.29</span><br><span class="line">  version: 2</span><br></pre></td></tr></table></figure>
<p>保存设置并生效：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo netplan generate &amp;&amp; sudo netplan apply</span><br></pre></td></tr></table></figure>
<h3 id="方式二配置网络等待超时">方式二：配置网络等待超时</h3>
<p>配置方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/systemd/system/network-online.target.wants/</span><br><span class="line">sudo vi systemd-networkd-wait-online.service</span><br></pre></td></tr></table></figure>
<p>在 <code>[Service]</code> 下添加
<code>TimeoutStartSec=2sec</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">ExecStart=/lib/systemd/systemd-networkd-wait-online</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line">TimeoutStartSec=2sec</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<p><a
href="https://magiclen.org/ubuntu-start-job-wait-network/">解决Ubuntu开机过程中，配置网络的步骤需要等待两分钟的问题
| MagicLen</a></p>
<p><a
href="https://blog.csdn.net/qq_43743124/article/details/103804211">Ubuntu18.04
开机卡“A start job is running for wait for network to be
Configured”的解决方法_a start job is running for
network-CSDN博客</a></p>
]]></content>
      <categories>
        <category>System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 设置全局代理</title>
    <url>/posts/2023/2Y5R2C0.html</url>
    <content><![CDATA[<p>本文将介绍如何为 Ubuntu 设置全局代理。</p>
<span id="more"></span>
<h2 id="代理设置">代理设置</h2>
<p>为系统设置代理的原理是修改对应的环境变量。Linux
关于代理的环境变量有：</p>
<table>
<thead>
<tr class="header">
<th>变量名</th>
<th>介绍</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>http_proxy</td>
<td>http 代理</td>
</tr>
<tr class="even">
<td>https_proxy</td>
<td>https 代理</td>
</tr>
<tr class="odd">
<td>ftp_proxy</td>
<td>ftp 代理</td>
</tr>
<tr class="even">
<td>all_proxy</td>
<td>所有代理，若未设置其它类型的代理，默认使用这个设置</td>
</tr>
<tr class="odd">
<td>no_proxy</td>
<td>指定不需要代理的主机</td>
</tr>
</tbody>
</table>
<p><img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20231227133115962.png" alt="image-20231227133115962" style="max-width:min(100%,300px)" /></p>
<p>上图中的设置等价于：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export http_proxy=http://192.168.1.103:1080</span><br><span class="line">export https_proxy=http://192.168.1.103:1080</span><br><span class="line">export all_proxy=socks://192.168.1.103:1080</span><br><span class="line">export no_proxy=localhost,127.0.0.0/8,::1</span><br></pre></td></tr></table></figure>
<blockquote>
<p>清注意，有的系统可能需要将变量名全部大写才生效，如下：</p>
<p>export HTTP_PROXY=http://192.168.1.103:1080</p>
</blockquote>
<h2 id="代理在所有的-shell-中生效">代理在所有的 shell 中生效</h2>
<p>使用 <code>export</code> 命令设置的环境变量只对当前 shell
有效。如果你想让代理设置在所有 shell 中都有效，你需要将这些
<code>export</code> 命令添加到你的 shell 的初始化脚本中（如
<code>~/.bashrc</code> 或 <code>~/.bash_profile</code>），然后运行
<code>source ~/.bashrc</code> 或
<code>source ~/.bash_profile</code>，或者注销(<code>logout</code>)并重新登录。</p>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<p><a
href="https://blog.csdn.net/kan2016/article/details/90411137">ubuntu配置全局系统代理_乌班图全局代理-CSDN博客</a></p>
<p><a
href="https://www.cnblogs.com/devilmaycry812839668/p/16807509.html">如何在Ubuntu系统中进行系统级的代理设置
- Angry_Panda - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 免密码 ssh 登陆 Linux</title>
    <url>/posts/2024/3942YAQ.html</url>
    <content><![CDATA[<p>本文将介绍如何在 Windows 配置 SSH 免密登陆 Linux。</p>
<span id="more"></span>
<h2 id="生成密钥对">生成密钥对</h2>
<p>打开 <code>cmd</code> 或者
<code>Powershell</code>，按下列步骤操作：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这条命令用于生成密钥</span></span><br><span class="line"><span class="comment"># 随后一路回车，当看到一幅矩形图生成，那么密钥生成成功</span></span><br><span class="line">ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa</span><br></pre></td></tr></table></figure>
<h2 id="将公钥添加到-linux-账户">将公钥添加到 Linux 账户</h2>
<p>打开 <code>Powershell</code>，执行下列命令：</p>
<p><strong>Powershell</strong>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-Content</span> ~\.ssh\id_rsa.pub | ssh username@host <span class="string">&quot;cat &gt;&gt; ~/.ssh/authorized_keys&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="验证是否添加成功">验证是否添加成功</h2>
<p>cmd 下输入 <code>ssh username@host uname</code> 如果看到输出Linux
表示添加成功。</p>
<p>同样可以直接输入 <code>ssh username@host</code>
这时可以看到不用输入密码即可登录 Linux 了。</p>
<h2 id="依然无法免密码登录">依然无法免密码登录</h2>
<p>添加key之后还是需要输入密码,主要排查方法是
<code>ssh username@host -vvv</code> 输出debug信息，或者remote机器使用
<code>cat /var/log/secure</code> 查看日志</p>
<p>可能的原因是:</p>
<ul>
<li><p>目录权限问题</p>
<p>远程目录.ssh 和.ssh 目录下的文件的权限需要分别设置700和600</p></li>
<li><p>找不到密钥</p>
<p>ssh登录命令添加参数 <code>-i C:\User\name\.ssh\id_rsa</code>
手动指定密钥文件</p></li>
</ul>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<p><a
href="https://cloud.tencent.com/developer/article/1960726">windows免密码ssh登录linux</a></p>
]]></content>
      <categories>
        <category>System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 远程 Linux 后, 使用 Docker 插件报错Permission denied</title>
    <url>/posts/2024/2H0WTET.html</url>
    <content><![CDATA[<p>VSCode SSH 连接 Linux 后，使用 Docker 插件时报错：</p>
<p>permission denied while trying to connect to the Docker daemon socket
at unix:///var/run/docker.sock: Get
"http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/json": dial unix
/var/run/docker.sock: connect: permission denied</p>
<p>这是由于用户的权限不够，按下列方法修改权限即可：</p>
<span id="more"></span>
<p>使用 ssh 连接 Linux，然后执行下列命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupadd docker</span><br><span class="line">sudo usermod -aG docker $USER</span><br><span class="line">newgrp docker</span><br><span class="line">sudo chmod 666 /var/run/docker.sock</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Linux</tag>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>丝滑高效的zsh配置清单</title>
    <url>/posts/2024/1P1XSQ7.html</url>
    <content><![CDATA[<p>在 Linux 中绕不开的就是 shell，可选择的 shell 有很多，比如
bash、zsh、fish、tcsh，ksh 等等。其中 bash 在 shell
一直是老大哥的地位，zsh 在 bash
基础上，做出了大量改进，同时加入了Bash、ksh及tcsh的某些功能。</p>
<p>因此作者选择在工作中使用 zsh 作为主力
shell。本文将详细介绍如何通过配置
zsh，提升操作丝滑度，增强使用效率，让你从此对 shell 爱不释手。</p>
<span id="more"></span>
<h2 id="zsh-安装"><a href="https://github.com/zsh-users/zsh">zsh</a>
安装</h2>
<p>zsh 一般系统会自带，可以通过下面的命令查看是否已经安装过 zsh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure>
<p>若显示已经安装了，可跳过本节内容。</p>
<p><strong>安装</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">sudo apt install zsh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将 zsh 设置为系统默认 shell</span></span><br><span class="line">chsh -s $(which zsh)</span><br></pre></td></tr></table></figure>
<h2 id="更新">更新</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前版本</span></span><br><span class="line">zsh --version</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install --only-upgrade zsh</span><br></pre></td></tr></table></figure>
<h2 id="使用-oh-my-zsh-简化-zsh-配置">使用 <a
href="https://github.com/ohmyzsh/ohmyzsh">oh-my-zsh</a> 简化 zsh
配置</h2>
<blockquote>
<p>特别注意：使用 git 时，需要将
<code>git config --global core.autocrlf true</code>重置为
<code>git config --global core.autocrlf input</code>，否则插件会提示错误。</p>
</blockquote>
<h3 id="开启默认插件-z">开启默认插件 Z</h3>
<p>oh-my-zsh 自带了 z 插件，可以使用 <code>z</code>
自动快速跳转目录，只需要在配置中打开即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开 ~/.zshrc 向里面 plugins 中注册插件</span></span><br><span class="line">plugins=( </span><br><span class="line">    # other plugins...</span><br><span class="line">    z</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="自动补全-zsh-autosuggestions">自动补全 <strong><a
href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestions</a></strong></h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载插件</span></span><br><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</span><br><span class="line"></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开 ~/.zshrc 向里面 plugins 中注册插件</span></span><br><span class="line">plugins=( </span><br><span class="line">    # other plugins...</span><br><span class="line">    zsh-autosuggestions</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>参考：<a
href="https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md">zsh-autosuggestions/INSTALL.md
at master · zsh-users/zsh-autosuggestions (github.com)</a></p>
<h3 id="语法高亮-fast-syntax-highlighting">语法高亮 <a
href="https://github.com/zdharma-continuum/fast-syntax-highlighting">fast-syntax-highlighting</a></h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/zdharma-continuum/fast-syntax-highlighting.git \</span><br><span class="line"><span class="meta prompt_">  $</span><span class="language-bash">&#123;ZSH_CUSTOM:-<span class="variable">$HOME</span>/.oh-my-zsh/custom&#125;/plugins/fast-syntax-highlighting</span></span><br><span class="line"></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开 ~/.zshrc 向里面 plugins 中注册插件</span></span><br><span class="line">plugins=( </span><br><span class="line">    # other plugins...</span><br><span class="line">    fast-syntax-highlighting</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>也可以使用 <a
href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a></p>
<p>参考：<a
href="https://github.com/zdharma-continuum/fast-syntax-highlighting?tab=readme-ov-file#installation">zdharma-continuum/fast-syntax-highlighting:
Feature-rich syntax highlighting for ZSH (github.com)</a></p>
<h2 id="自动完成-zsh-autocomplete">自动完成 <a
href="https://github.com/marlonrichert/zsh-autocomplete">zsh-autocomplete</a></h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载插件，放到 .oh-my-zsh 插件目录中，是为了方便管理</span></span><br><span class="line">git clone --depth 1 -- https://github.com/marlonrichert/zsh-autocomplete.git $&#123;ZSH_CUSTOM:-$&#123;ZSH:-~/.oh-my-zsh&#125;/custom&#125;/plugins/zsh-autocomplete</span><br><span class="line">  </span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在任何调用 compdef 之前添加如下内容 (!!! 不要在 plugins 中直接添加插件)</span></span><br><span class="line">source ~/.oh-my-zsh/custom/plugins/zsh-autocomplete/zsh-autocomplete.plugin.zsh</span><br></pre></td></tr></table></figure>
<p>这个插件可以搜索历史记录，用起来起飞~</p>
<h2 id="应用配置">应用配置</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>
<p>未完待续...</p>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<p><a href="https://www.tecmint.com/different-types-of-linux-shells/">5
Most Frequently Used Open Source Shells for Linux (tecmint.com)</a></p>
<p><a href="https://www.zsh.org/">Zsh</a></p>
<p><a href="https://github.com/ohmyzsh/ohmyzsh">ohmyzsh</a></p>
<p><a
href="https://blog.quarticcat.com/zh/posts/how-do-i-make-my-zsh-smooth-as-fuck/#zsh">我是如何让我的
Zsh 像丝般顺滑的 | QuarticCat's Blog</a></p>
<p><a
href="https://github.com/QuarticCat/dotfiles/tree/main/zsh">dotfiles/zsh
at main · QuarticCat/dotfiles (github.com)</a></p>
]]></content>
      <categories>
        <category>System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>on-my-zsh 中显示绝对路径</title>
    <url>/posts/2024/2KMYJ38.html</url>
    <content><![CDATA[<p>本篇文章将介绍如何修改 on-my-zsh 主题，使其显示绝对路径。</p>
<span id="more"></span>
<p>查找当前使用的主题：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 grep 查找主题配置</span></span><br><span class="line">grep &#x27;^ZSH_THEME&#x27; ~/.zshrc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示如下：</span></span><br><span class="line">ZSH_THEME=&quot;robbyrussell&quot;</span><br></pre></td></tr></table></figure>
<p>修改主题配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi ~/.oh-my-zsh/themes/robbyrussell.zsh-theme</span><br></pre></td></tr></table></figure>
<p>对配置作以下修改：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...%&#123;$fg[cyan]%&#125;%c%&#123;$reset_color%&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改成</span></span><br><span class="line">...%&#123;$fg[cyan]%&#125;%d%&#123;$reset_color%&#125;</span><br></pre></td></tr></table></figure>
<p>然后退出重新连接 ssh 即可生效。</p>
<p>其它相关配置提示符如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%%  一个&#x27;%&#x27;</span><br><span class="line">#%) 一个&#x27;)&#x27;</span><br><span class="line">%y  当前的tty名</span><br><span class="line">%l  当前的tty名，如 pts/1</span><br><span class="line">%M  完整主机名</span><br><span class="line">%m  主机名（在第一个句号之前截断）</span><br><span class="line">%n  当前用户名</span><br><span class="line">%. %c %C 前两个显示相对路径的当前文件夹名，最后一个是绝对路径（也就是说，前两个在家目录下显示&#x27;~&#x27;，最后那个显示你的用户名），&#x27;%&#x27;后的数字表示显示几层路径</span><br><span class="line">%N  zsh 正在执行的脚本/函数名。如果&#x27;%&#x27;后跟了数字，似乎还有其他作用</span><br><span class="line">%L  当前shell的层数</span><br><span class="line">%j  当前正在进行的工作数量</span><br><span class="line">%i  与%!类似：The line number currently being executed in the script, sourced file,&lt;br&gt;         or shell function given by %N. This is most useful for debugging as part of $PS4.</span><br><span class="line">%!  显示当前历史事件号码（也就是打开shell后第几条命令）</span><br><span class="line">%/ %d   显示当前工作路径（$pwd）。如果&#x27;％&#x27;后面是一个整数，它指定显示路径的元件的数量;没有数字就显示整个路径。一个负整数就是指定主目录，即％-1d代表第一部分</span><br><span class="line">%~  目前的工作目录相对于～的相对路径</span><br><span class="line">%?  返回最后命令的执行结果的代码</span><br><span class="line">%#  用户组，#（普通用户）/%（超级用户）</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>on-my-zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux修改默认终端</title>
    <url>/posts/2024/TM7WNE.html</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看可用终端</span></span><br><span class="line">cat /etc/shells  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改终端</span></span><br><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>黑群晖 DS3617 7.0安装</title>
    <url>/posts/2021/347YJNZ.html</url>
    <content><![CDATA[<p>黑群晖是什么是不说了，直接上教程。</p>
<span id="more"></span>
<h2 id="谁制作的黑群晖">谁制作的黑群晖</h2>
<p>弄明白谁制作的，是很重要的，只有这样，你才能下载到最原始的版本，保证系统的纯正性。黑群晖7.0的核心文件由国外redpill（红丸）团队开发，并且已经开源，地址：https://github.com/RedPill-TTG</p>
<p>虽然知道了是谁制作的，但是作者确没有放出引导盘，本人使用的</p>
<h2 id="选择什么版本">选择什么版本</h2>
<p>黑群中比较流行的有两个版本，一个是 DS918（家庭版本），一个是
DS3617（企业版本）。如果机器性能好，可以考虑使用企业版本。</p>
]]></content>
      <categories>
        <category>System</category>
        <category>Synology</category>
      </categories>
      <tags>
        <tag>黑群晖</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu Nvidia 显卡驱动突然不识别</title>
    <url>/posts/2024/NZP006.html</url>
    <content><![CDATA[<p>Ubuntu 安装 Nvidia 驱动后，有一天突然就无法识别到驱动了，使用
<code>nvidia-smi</code> 查看状态显示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Failed to initialize NVML: Driver/library version mismatch</span><br><span class="line">NVML ibrary version: 535.154</span><br></pre></td></tr></table></figure>
<p>出现这个的原因是因为驱动驱动更新后，kernel mod 的 Nvidia driver
的版本没有更新。</p>
<span id="more"></span>
<h2 id="如何恢复">如何恢复</h2>
<ol type="1">
<li><p>通过重启 Ubuntu 来恢复</p></li>
<li><p>如果因为某些原因不能够重启的话，使用 reload kernel mod
方式重新让内核加载驱动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看驱动</span> </span><br><span class="line">lsmod | grep nvidia_</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将面列出的驱动移除</span></span><br><span class="line">sudo rmmod nvidia_drm</span><br><span class="line">sudo rmmod nvidia_modeset</span><br><span class="line">sudo rmmod nvidia_uvm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">最后移除 nvidia</span></span><br><span class="line">sudo rmmod nvidia</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新加载驱动</span></span><br><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="如何预防">如何预防</h2>
<p>为了防止系统自动更新 Nvidia
驱动导致问题再次出现，可以禁用显卡驱动自动更新</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看安装的驱动，标记 automatic 的包不用管</span></span><br><span class="line">apt list --installed | grep nvidia</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">阻止更新，package-name 为包名称，比如 nvidia-driver-535</span></span><br><span class="line">sudo apt-mark hold package-name</span><br></pre></td></tr></table></figure>
<p>若要恢复，使用下列命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-mark unhold package-name</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<p><a
href="https://stackoverflow.com/questions/43022843/nvidia-nvml-driver-library-version-mismatch#comment73133147_43022843">cuda
- Nvidia NVML Driver/library version mismatch - Stack Overflow</a></p>
<p><a href="https://comzyh.com/blog/archives/967/">解决Driver/library
version mismatch | Comzyh的博客</a></p>
]]></content>
      <categories>
        <category>System</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Nvidia</tag>
      </tags>
  </entry>
  <entry>
    <title>01-建筑结构可靠性设计</title>
    <url>/posts/2022/2XR0S9K.html</url>
    <content><![CDATA[<p>通过学习本章，心有所得，总结如下。</p>
<span id="more"></span>
<h2 id="设计基准期计算">设计基准期计算</h2>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220315234743456.png"
alt="image-20220315234743456" />
<figcaption aria-hidden="true">image-20220315234743456</figcaption>
</figure>
<blockquote>
<p>超越概率 = 1 - p</p>
</blockquote>
<h2 id="建筑结构分项系数">建筑结构分项系数</h2>
<table>
<colgroup>
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 26%" />
<col style="width: 52%" />
</colgroup>
<thead>
<tr class="header">
<th>系数</th>
<th>说明</th>
<th>作用效应对承载能力不利时</th>
<th>作用效应对承载能力有利时</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><span class="math inline">\(\gamma_G\)</span></td>
<td>永久作用</td>
<td>1.3</td>
<td>&lt;=1.0</td>
</tr>
<tr class="even">
<td><span class="math inline">\(\gamma_P\)</span></td>
<td>预应力作用</td>
<td>1.3</td>
<td>&lt;=1.0</td>
</tr>
<tr class="odd">
<td><span class="math inline">\(\gamma_Q\)</span></td>
<td>可变作用</td>
<td>1.5</td>
<td><strong>0</strong>
<code>特别注意，有利时，可变荷载的分项系数为 0</code></td>
</tr>
</tbody>
</table>
<h2 id="基本组合计算">基本组合计算</h2>
<p>如果组合中，有两个及以上的可变荷载，需要
<strong>取最大的两个分别作为主导荷载</strong>
进行计算。其计算公式如下：</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220315234804078.png"
alt="image-20220315234804078" />
<figcaption aria-hidden="true">image-20220315234804078</figcaption>
</figure>
<p>当有 2 个及以上可变荷载时，快速计算公式如下：</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220315234849739.png"
alt="image-20220315234849739" />
<figcaption aria-hidden="true">image-20220315234849739</figcaption>
</figure>
<h2 id="标准组合计算">标准组合计算</h2>
<p>如果组合中，有两个及以上的可变荷载，需要
<strong>取最大的两个分别作为主导荷载</strong>
进行计算。其计算公式如下：</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220315234952803.png"
alt="image-20220315234952803" />
<figcaption aria-hidden="true">image-20220315234952803</figcaption>
</figure>
<p>当有 2 个及以上可变荷载时，快速计算公式如下：</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220315235059208.png"
alt="image-20220315235059208" />
<figcaption aria-hidden="true">image-20220315235059208</figcaption>
</figure>
<h2 id="求内力的极值">求内力的极值</h2>
<h3 id="最大值">最大值</h3>
<p>如果题目让求内力（弯矩、轴力）的最大值，则应：</p>
<ol type="1">
<li>同时组合所有可能参与的活载</li>
<li>对一些较大的活载，分别设为 <span
class="math inline">\(S_{Q1}\)</span> 来计算，然后取最大值</li>
</ol>
<h3 id="最小值">最小值</h3>
<p>如果题目中让求内力的最小值时，则应：</p>
<ol type="1">
<li>组合时，尽可能少地考虑活载的组合</li>
</ol>
<h2 id="其它经验">其它经验</h2>
<p>在审题时，要注意给定的一些条件。比如提到<code>钢结构</code> 和
<code>检修材料</code>，就要知道据《钢规》3.3.4 条规定，要进行折减。</p>
<p>要注意一些陷阱，有些时候给的多余参数是没用的。比如当只有一个活荷载时，给你组合系数，计算时，就不需要乘以组合系数。</p>
<p>还要熟知一些简单结构的内力计算公式。比如简支梁在均布荷载下，跨中最大弯矩计算公式。</p>
]]></content>
      <categories>
        <category>RegisteredStructure</category>
        <category>01-建筑结构可靠性设计和作用</category>
      </categories>
      <tags>
        <tag>一注结构专业</tag>
        <tag>考试</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>风荷载</title>
    <url>/posts/2022/3YFJNZD.html</url>
    <content><![CDATA[<p>本文总结了风荷载相关的计算。</p>
<span id="more"></span>
<h2 id="计算公式">计算公式</h2>
<p><strong>垂直于</strong>建筑物表面上的风荷载通用公式为： <span
class="math display">\[
w_k = \mu_z \cdot \mu_{z修正} \cdot \mu_s \cdot \mu_{s干扰} \cdot
\beta_z \cdot  w_0
\]</span></p>
<ul>
<li><span class="math inline">\(\mu_z\)</span>
，风压高度变化系数，通过查《荷规》P31 表8.2.1
得，非表中值按线性插值计算</li>
<li><span class="math inline">\(\mu_{z修正}\)</span>，默认为
1，对于山区和远海海面和海岛的建筑，要计算修正系数。</li>
<li><span
class="math inline">\(\mu_s\)</span>，风荷载体型系数，计算<strong>主要受力结构</strong>时所用，通过查《荷规》P34
表8.3.1 得。如果是计算<strong>围护结构</strong>，则 <span
class="math inline">\(\mu_{s}\)</span> 应换成 <span
class="math inline">\(\mu_{sl}\)</span>，即风荷载局部体型系数。按《荷规》8.3.3
条计算。</li>
<li><span
class="math inline">\(\mu_{s干扰}\)</span>，考虑风力的群体效应的干扰系数，默认为
1。按《荷规》8.2.2 条确定。</li>
<li><span class="math inline">\(\beta_z\)</span>，高度 z
处的风振系数，默认为
1。计算<strong>主要受力结构</strong>时所用，按《荷规》P57 8.4
条确定。如果是计算<strong>围护结构</strong>，则 <span
class="math inline">\(\beta_{z}\)</span> 应换成 <span
class="math inline">\(\beta_{gz}\)</span>，即高度 z
处的阵风系数。通过查《荷规》P61 表8.6.1 条得。</li>
</ul>
<h2 id="注意要点">注意要点</h2>
<h3 id="高度-z-取值">高度 z 取值</h3>
<ol type="1">
<li>一般取计算点的高度</li>
<li>如果是面向整体，则取最高点</li>
</ol>
<h3 id="风振系数">风振系数</h3>
<p>当满足以下条件之一的，才考虑风振系数：</p>
<ol type="1">
<li><span class="math inline">\(h \gt 30m \ 且 \
\frac{h}{b}&gt;1.5\)</span> 的房屋</li>
<li>自振周期 <span class="math inline">\(T_1 \gt 0.25s\)</span>
的各种高耸结构</li>
</ol>
<p><strong>特别注意：</strong></p>
<p>当满足以下条件之一时，要按《高钢规》中的风荷载进行取值：</p>
<ol type="1">
<li>楼层 <span class="math inline">\(\ge 10\)</span> 层的住宅</li>
<li><span class="math inline">\(h\ge28m\)</span> 的住宅</li>
<li><span class="math inline">\(h\ge24m\)</span>
的高层民用建筑钢结构</li>
</ol>
<h2 id="参考">参考</h2>
<ol type="1">
<li>《建筑结构荷载规范》</li>
<li>《高层民用建筑钢结构技术规程》</li>
</ol>
]]></content>
      <categories>
        <category>RegisteredStructure</category>
        <category>01-建筑结构可靠性设计和作用</category>
      </categories>
      <tags>
        <tag>一注结构专业</tag>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title>楼面和屋面活荷载</title>
    <url>/posts/2022/10AW0YR.html</url>
    <content><![CDATA[<p>本文为学习楼面和屋面活荷载章节心得总结。</p>
<span id="more"></span>
<h2 id="从属面积">从属面积</h2>
<p>从属面积按梁两侧各延伸 1/2 梁间距的范围实际面积确定。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220325230150155.png"
alt="image-20220325230150155" />
<figcaption aria-hidden="true">image-20220325230150155</figcaption>
</figure>
<h2 id="注意折减">注意折减</h2>
<p>设计楼面时，要注意折减。折减分以下两个情况分别取值：</p>
<ol type="1">
<li>楼面梁</li>
<li>墙、柱和基础</li>
</ol>
<blockquote>
<p>HG16#5.1.2</p>
</blockquote>
<p><strong>折减楼层确定：</strong></p>
<p>确定折减楼层时，是以计算截面以上的完整层数来计。比如计算基础顶时，其截面位于
1 层，所以该层不计入折减的楼层数。</p>
<h2 id="无设备区操作荷载">无设备区操作荷载</h2>
<p>无设备区操作荷载在均布在整个面积上的，不是仅在设备区以外才有。</p>
<h2 id="计算中宽度的正确使用">计算中宽度的正确使用</h2>
<ol type="1">
<li><p>求无设备区操作荷载的线荷载</p>
<p>使用有效分布宽度</p></li>
<li><p>求设备荷载线荷载</p>
<ul>
<li>扣除区域为设备实际区域</li>
<li>求线荷载除以宽度时，使用的是 <span
class="math inline">\(b_{cy}\)</span>，力扩散后的宽度</li>
</ul></li>
</ol>
<h2 id="其它注意">其它注意</h2>
<p>屋面活载是按照屋面的水平投影面进行计算的。</p>
]]></content>
      <categories>
        <category>RegisteredStructure</category>
        <category>01-建筑结构可靠性设计和作用</category>
      </categories>
      <tags>
        <tag>一注结构专业</tag>
        <tag>考试</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>如何解决 Adguard 拖慢网速问题</title>
    <url>/posts/2020/1W2Z51R.html</url>
    <content><![CDATA[<p>最近在网上发现一款去除广告神器，集颜值和功能于一身，它就是
Adguard。最重要的是，它是开源的，所以在使用的过程中，完全不必担心软件留有后门。但是在使用的过程，发现它会拖慢网页的打开速度。几经周折，终于找到解决办法。</p>
<span id="more"></span>
<h2 id="现象">现象</h2>
<p>打开 Adguard 后，在打开网页时，在左下角经常先后出现 ”正在等待
local.adguard.com" 和 ”正在等待 injection.adguard.com"
两个网页加载提示</p>
<h2 id="解决办法">解决办法</h2>
<p>在百度许久无果之后，终于还得谷歌，在 Adguard
的论坛里面找到了解决办法，<a
href="https://forum.adguard.com/index.php?threads/how-to-disable-injection-totally.38047/#post-196694">How
to disable injection totally</a></p>
<p>根据里面的官方人员回复，这是因为 Adguard 的 “浏览安全” 功能会使用 <a
href="https://adguardteam.github.io/AnonymousRedirect/redirect.html?url=https%3A%2F%2Fuploads.adguard.com%2FChinask11cmf0.png">injection.adguard.org/local.adguard.org.</a>，关掉它就可以了。</p>
<blockquote>
<p>原文：Besides extensions, the SafeBrowsing settings can also use <a
href="https://adguardteam.github.io/AnonymousRedirect/redirect.html?url=https%3A%2F%2Fuploads.adguard.com%2FChinask11cmf0.png">injection.adguard.org/local.adguard.org.</a>
You should try to disable that option.</p>
</blockquote>
]]></content>
      <categories>
        <category>Software</category>
        <category>Adguard</category>
      </categories>
      <tags>
        <tag>Adguard</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 AdGuardHome，实现网页加速和去广告</title>
    <url>/posts/2020/2JN1KQ1.html</url>
    <content><![CDATA[<figure>
<img data-src="https://camo.githubusercontent.com/1b7e7c20e5f4d52f70c7e25726e75825ee26d767/68747470733a2f2f63646e2e616467756172642e636f6d2f7075626c69632f416467756172642f436f6d6d6f6e2f616467756172645f686f6d652e7376673f73616e6974697a653d74727565"
alt="adguard" />
<figcaption aria-hidden="true">adguard</figcaption>
</figure>
<h2 id="前言">前言</h2>
<p>最近有一款软件深深地吸引了我，界面如下：</p>
<figure>
<img data-src="https://camo.githubusercontent.com/5e2bfa17c27773b70ca99ddd3b70995f15d24b62/68747470733a2f2f63646e2e616467756172642e636f6d2f7075626c69632f416467756172642f436f6d6d6f6e2f616467756172645f686f6d652e676966"
alt="adguard1" />
<figcaption aria-hidden="true">adguard1</figcaption>
</figure>
<p>它的主要功能有三项</p>
<ul>
<li>通过对 dns 的并发查询来加速网页的打开速度，大部分可以实现秒开</li>
<li>通过不同的规则来过滤
dns，达到过滤广告的目的，最厉害的是，国内的各大视屏网站的广告也能过滤，看剧再也不用等待那漫长的
70s 了</li>
<li>通过设置过滤器，可以很好的保护自己的上网安全，防止钓鱼网站等的危害</li>
</ul>
<p>这三个特点完全戳中了我的兴趣点，而且它的界面清爽，让人不得不喜欢。</p>
<span id="more"></span>
<h2 id="选择困难症">选择困难症</h2>
<p>AdGuard 在各个平台上都有相应的
App，直接下载来用就可以了，但是，这些平台的软件都有一个问题，它们不能进行
dns 的加速，真是让人郁闷不已。</p>
<p>在谷歌上搜 AdGuardHome, 大家的食用方法基本分为这两派：</p>
<ul>
<li>安装在软件路由，NAS等设备上面</li>
<li>通过购买云服务器，构建 dns 服务器</li>
</ul>
<p>我不禁呵呵了，上面两个方案，哪一个不需要花钱啊！</p>
<p>最后，结合实际，我总结出了自己的一个使用方法，在此分享给大家：在电脑上安装
AGuardHome 作为本机的 dns
服务器，只要用电脑上网，就能实现加速，当然，也可以实现全局域网的加速，后面详细介绍。</p>
<h2 id="下载软件">下载软件</h2>
<p>该软件是开源的，所以，只需要到 GitHub
上下载符合自己的系统的版本就可以了。本教程将以 windows10
来举例说明。</p>
<p>开源仓库地址：https://github.com/AdguardTeam/AdGuardHome</p>
<p>软件下载地址：https://github.com/AdguardTeam/AdGuardHome/releases</p>
<h2 id="安装软件">安装软件</h2>
<ul>
<li><p>将下载的软件解压，比如
<code>D:\Program Files\AdGuardHome</code>;</p></li>
<li><p>用 <strong>管理员权限</strong> 启动 cmd(命令提示符) 窗口</p>
<p>在任务栏中的搜索框中键入 cmd, 会出现一个名为 “命令提示符”
的程序，右键，用管理员身份打开；</p></li>
<li><p>在打开的黑窗体中依次输入下面的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d:</span><br><span class="line">cd D:\Program Files\AdGuardHome</span><br><span class="line">AdGuardHome</span><br></pre></td></tr></table></figure>
<p>输入最后一个命令后，当黑窗体中出现如下截图的提示信息的时候，表示初始化已经成功了。</p></li>
</ul>
<h2 id="注册-windows-服务">注册 windows 服务</h2>
<p>打开 cmd 窗口，输入下面的命令来注册系统服务，以便开机自动启动：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d:</span><br><span class="line">cd D:\Program Files\AdGuardHome</span><br><span class="line">AdGuardHome -s install</span><br></pre></td></tr></table></figure>
<p>此处一并放上其它的命令，如果有需要，可以使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AdGuardHome -s uninstall //卸载 AdGuardHome 服务</span><br><span class="line">AdGuardHome -s start //开始服务</span><br><span class="line">AdGuardHome -s stop //结束服务</span><br><span class="line">AdGuardHome -s restart //重启服务</span><br><span class="line">AdGuardHome -s status //显示服务状态</span><br></pre></td></tr></table></figure>
<h2 id="adguardhome-配置">AdGuardHome 配置</h2>
<p>到现在 AdGuardHome 已经安装完成
，接下来，在浏览器中输入地址：http://127.0.0.1:3000 进行配置。</p>
<h3 id="基本设置">基本设置</h3>
<ul>
<li><p>配置管理员接口和 DNS 服务</p>
<figure>
<img data-src="https://user-images.githubusercontent.com/5947035/53299867-25407b00-3851-11e9-96fc-44d9a10813db.png"
alt="adminInterface" />
<figcaption aria-hidden="true">adminInterface</figcaption>
</figure>
<p>上图中，第一个端口是管理界面的访问端口，如果将端口 XX，那今后访问
AdGuardHome 的管理界面就变成: http://127.0.0.1:XX, 建议设置成 3000。</p>
<p>第二个端口是 DNS
服务监听端口，使用默认的就可以了，如果使用其它端口，在使用时，还需要额外指定端口号，稍微繁琐，所以建议直接用默认的就可以了。</p></li>
<li><p>添加用户名和密码</p>
<figure>
<img data-src="https://user-images.githubusercontent.com/5947035/53299876-3ee1c280-3851-11e9-81da-a5126729ff2e.png"
alt="addUsers" />
<figcaption aria-hidden="true">addUsers</figcaption>
</figure>
<blockquote>
<p>注意：设置后，在界面里是没有修改用户名和密码的选项的，需要修改配置文件，所以，在添加用户名和密码的时候，不要太随意。</p>
</blockquote></li>
</ul>
<h3 id="dns-设置">DNS 设置</h3>
<p>在设置-&gt;DNS 设置 里，对 DNS 进行配置</p>
<figure>
<img data-src="https://i.loli.net/2020/06/24/bOVZzCg6Qdv9ohA.png"
alt="dns" />
<figcaption aria-hidden="true">dns</figcaption>
</figure>
<ul>
<li><p>上游 DNS 服务器中输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8.8.8.8</span><br><span class="line">114.114.114.114</span><br><span class="line">119.29.29.29</span><br><span class="line">223.5.5.5</span><br><span class="line">180.76.76.76</span><br><span class="line">1.2.4.8</span><br></pre></td></tr></table></figure></li>
<li><p>打开 “并行请求”</p></li>
<li><p>在 Bootstrap DNS 中输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">9.9.9.10</span><br><span class="line">149.112.112.10</span><br><span class="line">2620:fe::10</span><br><span class="line">2620:fe::fe:10</span><br></pre></td></tr></table></figure></li>
<li><p>点击应用</p></li>
</ul>
<h2 id="添加过滤器">添加过滤器</h2>
<p>过滤器的作用是通过一些预定义的规则来过滤
DNS，从而达到去除广告，保护隐私的目的。</p>
<p>过滤器的添加是在：过滤器-&gt;DNS 封锁清单 里面</p>
<p>推荐的规则有：</p>
<ul>
<li><p>AdGuard Simplified Domain Names filter, 自带</p></li>
<li><p>AdAway, 自带</p></li>
<li><p>MalwareDomainList.com Hosts List，自带</p></li>
<li><p>AdGuard Base
filter，https://filters.adtidy.org/extension/chromium/filters/2.txt</p></li>
<li><p>AdGuard Tracking Protection
filter，https://filters.adtidy.org/extension/chromium/filters/3.txt</p></li>
<li><p>AdGuard Annoyances
filter，https://filters.adtidy.org/extension/chromium/filters/14.txt</p></li>
<li><p>anti-ad-easylist，https://raw.githubusercontent.com/privacy-protection-tools/anti-AD/master/anti-ad-easylist.txt</p></li>
</ul>
<p>当然，网上有特别多的规则，大家可以在 bilibili 或者 github
上面搜索。</p>
<h2 id="修改网络适配器-dns-实现所有网络下的加速">修改网络适配器 DNS
实现所有网络下的加速</h2>
<p>好了，到目前为止，我们已经在自己的电脑上安装了 AdGuardHome
了，接下来，配置电脑本机的 DNS，让它指向我们自己的 DNS
服务器，实现网页访问加速和隐私保护。</p>
<ul>
<li><p>打开网络适配器</p>
<p>在 <code>控制面板\所有控制面板项\网络连接</code>
选择自己当前的网络适配器</p>
<p>右键-&gt;属性-&gt; 双击
<code>Internet 协议版 4(TCP/IPv4)</code></p></li>
<li><p>使用自定义 DNS</p>
<p>如下图</p>
<figure>
<img data-src="https://i.loli.net/2020/06/30/e8lo2uAwjRNTg6z.png" alt="p1" />
<figcaption aria-hidden="true">p1</figcaption>
</figure></li>
</ul>
<p>这样，就完成了配置，可以尽情地享受快速无广告的冲浪体验了。</p>
<h2 id="修改路由器-dns-实现局域网加速">修改路由器 DNS
实现局域网加速</h2>
<p>上面的设置，只能够让自己使用网络加速功能，如果要想在局域网里面让所有的终端都能够实现网络加速，我们可以将安装了
AdGuardHome 服务的电脑当成局域网中的 DNS
服务器，这样，只要有人连接了你的局域网，他就会享受到加速。但是这有两个缺点：</p>
<ul>
<li>安装 DNS 服务的电脑必须一直开着机</li>
<li>如果局域网内的终端很多，可能会影响 DND 服务的那台电脑</li>
</ul>
<p>当然，如果是家庭里面使用，就完全不用担心了。</p>
<p>下面是具体的步骤：</p>
<ul>
<li><p>查看自己的局域网网关</p>
<figure>
<img data-src="https://i.loli.net/2020/06/30/WLVT5aGZOndHNgt.png" alt="p3" />
<figcaption aria-hidden="true">p3</figcaption>
</figure>
<p>打开网络设置，找到 IPv4 地址，网关一般都是
<code>网段.1</code>,上面我们可以看到，本机的 IP4 是 192.168.3.29,
所以网段就是前面三个值，而网关为 192.168.3.1</p></li>
<li><p>将自己电脑设置为静态 IP</p>
<p>选择网络，然后编辑，打开 IPv4,然后按照下面的配置输入</p></li>
</ul>
<figure>
<img data-src="https://i.loli.net/2020/06/30/nbTcwpryAUv49HQ.png" alt="p2" />
<figcaption aria-hidden="true">p2</figcaption>
</figure>
<p>因为我的网段是 192.168.3，所心，我输入的 IP
地址也必须是在这个网段内，范围是2~255，当前例子中，使用的是
192.168.3.100</p>
<ul>
<li><p>打开路由器管理界面，开启静态 DNS</p>
<figure>
<img data-src="https://i.loli.net/2020/06/30/KVJsgh6CGkUwLOe.png" alt="p4" />
<figcaption aria-hidden="true">p4</figcaption>
</figure>
<p>将路由器的首选 DNS 指向安装了 DNS 服务的电脑就可以了。</p></li>
</ul>
<h2 id="后记">后记</h2>
<p>对于加速，没怎么感受到，但是网页确实干净了不少。</p>
]]></content>
      <categories>
        <category>Software</category>
        <category>Adguard</category>
      </categories>
      <tags>
        <tag>佳软</tag>
        <tag>Adguard</tag>
      </tags>
  </entry>
  <entry>
    <title>AdGuard 语法</title>
    <url>/posts/2020/K2C2JM.html</url>
    <content><![CDATA[<p>为了能够更加精准的去除广告，只能自食其力，自己编写去除规则。以下是对
Adugard 过滤规则的简要解释。</p>
<span id="more"></span>
<h2 id="注释">注释</h2>
<p>注释用“!”</p>
<h2 id="基本规则">基本规则</h2>
<h3 id="基本语法规则">基本语法规则</h3>
<p><code>@@</code> 表示排除规则</p>
<h3 id="特殊字符">特殊字符</h3>
<ul>
<li><code>*</code> 通配符。匹配任何空字符或者任一长度的字符串</li>
<li><code>||</code> 匹配地址开头。表示：<code>http://*.</code>
、<code>https://*.</code>、<code>ws://*.</code>、<code>wss://*.</code></li>
<li><code>^</code>
匹配分隔符。可以是字母、数字、<code>_</code>、<code>-</code>、<code>.</code>和<code>%</code>其中一个。</li>
<li><code>|</code> 匹配开始或者结束符。如 <code>.com|</code> 匹配
<code>baidu.com</code></li>
</ul>
<h3 id="正则表达式支持">正则表达式支持</h3>
<blockquote>
<p>正则表达式会使性能变慢</p>
</blockquote>
<p>格式如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">! regexp 代表正则表达式语法</span><br><span class="line">pattern = <span class="string">&quot;/&quot;</span> regexp <span class="string">&quot;/&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="修饰符">修饰符</h2>
<p>修饰符位于规则末尾，修饰符间用逗号分隔。</p>
<h2 id="致谢">致谢</h2>
<p>本文来源于 LeeYD 的博客：https://www.leeyiding.com/archives/50/</p>
]]></content>
      <categories>
        <category>Software</category>
        <category>Adguard</category>
      </categories>
      <tags>
        <tag>AdGuard</tag>
        <tag>去广告</tag>
      </tags>
  </entry>
  <entry>
    <title>重置 winsock 解决电脑网络问题</title>
    <url>/posts/2021/31B2ZF5.html</url>
    <content><![CDATA[<p>有人反馈电脑无法上网，检查后发现以下情况：</p>
<ul>
<li>电脑的网络图标不断显示正在获取网络和获取失败</li>
<li>把电脑连接其它正常的网线，依旧无法连接网络</li>
<li>用其它电脑连接当前网线，能正常上网</li>
<li>该电脑在家可以上网</li>
</ul>
<span id="more"></span>
<p>基于以上情况，说明网卡硬件正常，问题集中在操作系统的软件层面。</p>
<p>鉴于电脑网络的复杂性，直接通过 cmd
运行<code>Netsh Winsock reset</code> 解决了问题。</p>
<p><strong>什么是Netsh Winsock reset？</strong></p>
<p>Netsh winsock reset是一个命令提示程序，用于将 winsock
目录重置为默认设置或清除状态。</p>
<p>如有时候上不了网或者网络出现问题经常用到它，简单地理解就是：重置程序通过操作系统链接网络的入口点。虽然使用此命令可以恢复网络连接，也应谨慎使用，因为可能需要重新安装LSPLSP:
layered service privider 分层服务提供商。LSP是TCP/IP等协议的接口。</p>
<p><strong>Netsh Winsock解决了哪些问题？</strong></p>
<ul>
<li><p>解决删除广告软件，间谍软件，病毒，蠕虫，木马等后产生的网络问题。</p></li>
<li><p>安装广告软件，间谍软件，VPN或防火墙后无法联网。</p></li>
<li><p>无法访问任何网页或只能访问某些网页。</p></li>
<li><p>出现与网络相关问题的弹出错误窗口。</p></li>
<li><p>由于注册表错误，没有网络连接。</p></li>
<li><p>发生DNS查找问题。</p></li>
<li><p>无法续订网络适配器的IP地址或其他一些DHCP错误。</p></li>
<li><p>没有连接消息的网络连接问题。</p></li>
</ul>
<p><strong>如何在Windows 10中执行 winsock reset？</strong></p>
<ol type="1">
<li><p>windows键+R或者windows键+x选择（管理员）命令提示符</p></li>
<li><p>输入 cmd</p></li>
<li><p>在命令提示框中键入
<code>netsh winsock reset</code>，然后回车</p></li>
<li><p>完成重置后，您将收到消息“Winsock重置成功完成”。重新启动电脑完成Windows
10 中的重置 winsock</p></li>
</ol>
<p>同样，要重置TCP / IP，请在 cmd 中使用命令
<code>netsh int tcp reset</code>。</p>
<blockquote>
<p>若是 win11，可以直接在【网络和
Internet/高级网络设置/网络重置】中进行重置</p>
</blockquote>
]]></content>
      <categories>
        <category>System</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>win10无法连接其它电脑共享的打印机</title>
    <url>/posts/2021/2H6XD5B.html</url>
    <content><![CDATA[<p>今天（2021-10-18）有些同事更新了windows，然后发现由其它电脑共享的打印机无法使用了。</p>
<span id="more"></span>
<p>其间，采用了下列方式，都不成功：</p>
<ol type="1">
<li>重启 Print Spooler</li>
<li>修改注册表权限</li>
</ol>
<p>最后猜想是更新的问题，于是在windows更新中将 KB5006670
更新给卸载后，就恢复正常了。</p>
<p>卸载更新可以输入下列命令行卸载：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wusa /uninstall /kb:5006670</span><br></pre></td></tr></table></figure>
<p><strong>参考</strong></p>
<p>https://www.youtube.com/watch?v=bIdlB1iPYQQ</p>
]]></content>
      <categories>
        <category>System</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>windows经验</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下右键新建.md文件</title>
    <url>/posts/2020/26DVEVG.html</url>
    <content><![CDATA[<p>如何在 windows 中添加右键新建 .md 文件功能？</p>
<span id="more"></span>
<h2 id="正文">正文</h2>
<p>新建一个 <code>.reg</code>
的文本文件，将下列代码拷贝到里面，然后双击运行即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line">[HKEY_CLASSES_ROOT\.md]</span><br><span class="line">@=&quot;Typora.exe&quot;</span><br><span class="line">[HKEY_CLASSES_ROOT\.md\ShellNew]</span><br><span class="line">&quot;NullFile&quot;=&quot;&quot;</span><br><span class="line">[HKEY_CLASSES_ROOT\Typora.exe]</span><br><span class="line">@=&quot;Markdown&quot;</span><br></pre></td></tr></table></figure>
<p>解释</p>
<p><code>@="Typora.exe"</code> 代表的是指定 .md 文件的运行程序
<code>@="Markdown"</code> 代表的是右键时默认的文件名字，这样写新建为
<code>新建Markdown.md</code> 文件，而且右键菜单中显示
<code>MarkDown</code>。</p>
<h2 id="致谢">致谢</h2>
<p>原谅链接：https://stepneverstop.github.io/win-rightclick-create-md.html</p>
]]></content>
      <categories>
        <category>System</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>windows优化</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-01-04-通过公钥 ssh 远程连接 Windows Server</title>
    <url>/posts/2022/7EE4JK.html</url>
    <content><![CDATA[<p>通过用户名和密码，利用 SSH
登陆远程服务器进行服务器管理时，有如下缺点：</p>
<ul>
<li>每次输入密码，很麻烦，也不极客</li>
<li>服务器开放账号密码登陆，容易补暴力破解</li>
</ul>
<p>我们可以通过配置公钥登陆来解决上述问题。</p>
<span id="more"></span>
<h2 id="ssh-中各个模块作用">SSH 中各个模块作用</h2>
<p>OpenSSH
包含一系列组件和工具，用于提供一种安全且简单的远程系统管理方法，其中包括：</p>
<ul>
<li>sshd.exe，它是远程所管理的系统上必须运行的 SSH 服务器组件</li>
<li>ssh.exe，它是在用户的本地系统上运行的 SSH 客户端组件</li>
<li>ssh-keygen.exe，为 SSH 生成、管理和转换身份验证密钥</li>
<li>ssh-agent.exe，存储用于公钥身份验证的私钥</li>
<li>ssh-add.exe，将私钥添加到服务器允许的列表中，即添加到 ssh-agent
中</li>
<li>ssh-keyscan.exe，帮助从许多主机收集公用 SSH 主机密钥</li>
<li>sftp.exe，这是提供安全文件传输协议的服务，通过 SSH 运行</li>
<li>scp.exe 是在 SSH 上运行的文件复制实用工具</li>
</ul>
<h2 id="ssh-登陆流程">ssh 登陆流程</h2>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/ssh-login.webp"
alt="ssh-login" />
<figcaption aria-hidden="true">ssh-login</figcaption>
</figure>
<h2 id="安装openssh">安装OpenSSH</h2>
<p>如果系统中没有 openssh，需要手动安装。现在 windows10 及以上都已经自带
ssh 了。</p>
<p>如果需要，可以通过 Scoop 来安装 OpenSSH：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install openssh</span><br></pre></td></tr></table></figure>
<h2 id="开放-22tcp-端口">开放 22/tcp 端口</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">netsh advfirewall firewall add rule name=<span class="string">&quot;ssh&quot;</span> <span class="built_in">dir</span>=<span class="keyword">in</span> action=allow protocol=TCP localport=<span class="number">21</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>在使用 scoop 安装时，会自动打开，此步骤可以省略</p>
</blockquote>
<h2 id="启动服务">启动服务</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net <span class="built_in">start</span> ssh<span class="literal">-agent</span> &amp;&amp; net <span class="built_in">start</span> sshd</span><br></pre></td></tr></table></figure>
<h2 id="客户端生成公钥私钥对">客户端生成公钥/私钥对</h2>
<p>在客户端打开 powershell 终端进行操作：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成公/私钥对</span></span><br><span class="line">ssh<span class="literal">-keygen</span></span><br></pre></td></tr></table></figure>
<p>一直 enter 即可。</p>
<blockquote>
<p>生成的公私钥对保存在 c:%username%.ssh 中</p>
</blockquote>
<h2 id="配置公钥私钥对">配置公钥/私钥对</h2>
<h3 id="方法一">方法一</h3>
<p>在客户端配置文件：</p>
<ul>
<li>Windows 上是 <code>~/.ssh/config</code></li>
<li>Linux 上是 <code>/etc/ssh/ssh_config</code></li>
</ul>
<blockquote>
<p>若没有，新建一个 <code>config</code> 文件，没有后缀</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 别名（Host）：Host 和 HostName 的值可以相同</span></span><br><span class="line"><span class="comment"># 如 ssh aliyun，在这里等于 ssh -i C:\Users\Think\.ssh\id_rsa_aliyun root@144.90.100.144</span></span><br><span class="line"><span class="comment"># 用别名登录会使用别名下的配置，不用别名登录（如IP）不会使用别名下的配置</span></span><br><span class="line">Host aliyun</span><br><span class="line">    User root</span><br><span class="line">    HostName <span class="number">144.90</span>.<span class="number">100.144</span></span><br><span class="line">    <span class="comment"># 私钥文件位置</span></span><br><span class="line">    IdentityFile <span class="string">&quot;~/.ssh/id_rsa_aliyun&quot;</span></span><br><span class="line"></span><br><span class="line">Host tencent</span><br><span class="line">    User root</span><br><span class="line">    HostName <span class="number">100.28</span>.<span class="number">144.47</span></span><br><span class="line">    IdentityFile <span class="string">&quot;~/.ssh/id_rsa_tencent&quot;</span></span><br></pre></td></tr></table></figure>
<p>将公钥文件 <code>id_rsa.pub</code> 的内容追加到服务器的
<code>~/.ssh/authorized_keys</code> 文件末尾</p>
<p>可以使用 <code>#</code> 号为每个公钥添加注释，方便管理。</p>
<blockquote>
<p>authorized_keys：该文件为 ssh 普通用户公钥</p>
<p>administrators_authorized_keys：该文件为 ssh 管理员公钥</p>
</blockquote>
<p><strong>使用方式：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ssh aliyun <span class="literal">-v</span> <span class="comment"># 使用别名进行登陆</span></span><br></pre></td></tr></table></figure>
<h3 id="方法二">方法二</h3>
<ol type="1">
<li><p><strong>将私钥添加到 ssh-agent</strong></p>
<p>Windows SSH 以服务的形式管理，所以 <code>ssh-agent</code>
是全局的，不需要每次设置。</p>
<p>以下命令需要用管理员身份运行终端。</p>
<p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 ssh-agent 服务状态，这里输出：Stopped</span></span><br><span class="line"><span class="built_in">Get-Service</span> ssh<span class="literal">-agent</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 ssh-agent 服务的启动类型，这里输出：Disabled</span></span><br><span class="line"><span class="built_in">Get-Service</span> ssh<span class="literal">-agent</span> | <span class="built_in">Select</span> StartType</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 ssh-agent 服务的启动类型修改为 Manual（手动启动）。</span></span><br><span class="line"><span class="built_in">Get-Service</span> <span class="literal">-Name</span> ssh<span class="literal">-agent</span> | <span class="built_in">Set-Service</span> <span class="literal">-StartupType</span> Manual</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动启动 ssh-agent 服务</span></span><br><span class="line"><span class="built_in">Start-Service</span> ssh<span class="literal">-agent</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将私钥加载进 ssh-agent</span></span><br><span class="line">ssh<span class="literal">-add</span> C:\Users\Think\.ssh\id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示 ssh-agent 中的公钥，验证私钥是否添加成功</span></span><br><span class="line">ssh<span class="literal">-add</span> <span class="literal">-L</span></span><br><span class="line"><span class="comment"># 服务重启后，添加的密钥仍在 agent 中</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>将公钥添加到服务器</p>
<p>服务器中的公钥是储存在 <code>~/.ssh/authorized_keys</code>
文件里面，如果该文件不存在，手动创建一个文本文件即可，然后将公钥追加到该文件末尾。</p>
<p><strong>普通用户</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Make sure that the .ssh directory exists in your server&#x27;s user account home folder</span></span><br><span class="line">ssh username@domain1@contoso.com mkdir C:\Users\username\.ssh\</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Use scp to copy the public key file generated previously on your client to the authorized_keys file on your server</span></span><br><span class="line">scp C:\Users\username\.ssh\id_ed25519.pub user1@domain1@contoso.com:C:\Users\username\.ssh\authorized_keys</span><br></pre></td></tr></table></figure>
<p><strong>管理用户</strong></p>
<p>公钥的内容需要放在服务器上的一个名为
<code>administrators_authorized_keys</code> 的文本文件中，放在
<code>C: ProgramData\ssh\</code>
中。OpenSSH客户端包括scp，这是一个安全的文件传输工具，可以帮助解决这个问题。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Make sure that the .ssh directory exists in your server&#x27;s user account home folder</span></span><br><span class="line">ssh user1@domain1@contoso.com mkdir C:\ProgramData\ssh\</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Use scp to copy the public key file generated previously on your client to the authorized_keys file on your server</span></span><br><span class="line">scp C:\Users\username\.ssh\id_ed25519.pub user1@domain1@contoso.com:C:\ProgramData\ssh\administrators_authorized_keys</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="windows-服务器取消管理员公钥文件重定向">windows
服务器取消管理员公钥文件重定向</h2>
<p>编辑<code>C:\ProgramData\ssh\sshd_config</code>文件，删除或注释（使用
<code>#</code>）底部的如下配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Match Group administrators</span><br><span class="line">       AuthorizedKeysFile __PROGRAMDATA__/ssh/administrators_authorized_keys</span><br></pre></td></tr></table></figure>
<p>重启windows的ssh服务</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Restart-Service</span> sshd</span><br></pre></td></tr></table></figure>
<h2 id="关闭密码登陆">关闭密码登陆</h2>
<p>上述配置完成后，进行 ssh 测试连接，如果成功，则将密码登陆关闭。</p>
<p>找到位于<code>C:\ProgramData\ssh\ssh_config</code> 文件，将
<code>PasswordAuthentication</code> 设置成 <code>no</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># To disable tunneled clear text passwords, change to no here!</span></span><br><span class="line">PasswordAuthentication no</span><br><span class="line"><span class="comment">#PermitEmptyPasswords no</span></span><br></pre></td></tr></table></figure>
<h2 id="重启-sshd-服务">重启 <code>sshd</code> 服务</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Restart-Service</span> sshd</span><br></pre></td></tr></table></figure>
<p>通过上面的操作，ssh
公钥登陆配置就完成了，同时还提高了系统的安全性。</p>
<h2 id="致谢">致谢</h2>
<p>本文参考以下文件，对此表示诚挚感谢！</p>
<ol type="1">
<li><a href="https://segmentfault.com/a/1190000023054090">Windows SSH
免密登录详解</a></li>
<li><a
href="https://link.segmentfault.com/?enc=vKJ0ePY1v9jJ1K7kBFP%2FJw%3D%3D.KzA63WGdDRhC2LhqUIoOStqk3ncPpWfVtLC%2BgzoJ5BfDe8mmAitla%2F%2F%2FpiAT7kAtrlNt1xY4cH0MEbJcMYghFhnbceTYZeewtKs1JxnkZrHKD3lblA%2Bf%2BQPe%2FyX8tdeB">Windows
中的 OpenSSH</a></li>
<li><a
href="https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_keymanagement">OpenSSH
key management</a></li>
<li><a
href="https://www.kyleblog.cn/posts/win10_ssh_login">SSH免密登录（公钥登录）到win10（解决authorized_keys无效的问题）
- KyleBlog.cn</a></li>
</ol>
]]></content>
      <categories>
        <category>System</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Docker 部署 AdguardHome</title>
    <url>/posts/2024/AC0WPY.html</url>
    <content><![CDATA[<p>本文介绍如何在 Ubuntu 中通过 Docker 部署 AdguardHome 实现 DNS
解析和广告过滤。</p>
<span id="more"></span>
<h2 id="docker-compose">docker compose</h2>
<p>使用下面的 docker-compose 启动</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">adguardhome:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">adguard/adguardhome</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">adguardhome</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/workdir:/opt/adguardhome/work</span> <span class="comment"># 挂载数据</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/confdir:/opt/adguardhome/conf</span> <span class="comment"># 挂载配置</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">53</span><span class="string">:53/tcp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">53</span><span class="string">:53/udp</span></span><br><span class="line">      <span class="comment"># - &quot;67:67/udp&quot;</span></span><br><span class="line">      <span class="comment"># - &quot;68:68/udp&quot;</span></span><br><span class="line">      <span class="comment"># - &quot;80:80/tcp&quot;</span></span><br><span class="line">      <span class="comment"># - &quot;443:443/tcp&quot;</span></span><br><span class="line">      <span class="comment"># - &quot;443:443/udp&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3000:3000/tcp&quot;</span></span><br><span class="line">      <span class="comment"># - &quot;853:853/tcp&quot;</span></span><br><span class="line">      <span class="comment"># - &quot;784:784/udp&quot;</span></span><br><span class="line">      <span class="comment"># - &quot;853:853/udp&quot;</span></span><br><span class="line">      <span class="comment"># - &quot;8853:8853/udp&quot;</span></span><br><span class="line">      <span class="comment"># - &quot;5443:5443/tcp&quot;</span></span><br><span class="line">      <span class="comment"># - &quot;5443:5443/udp&quot;</span></span><br><span class="line">    <span class="attr">dns:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">223.6</span><span class="number">.6</span><span class="number">.6</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">119.29</span><span class="number">.29</span><span class="number">.29</span></span><br></pre></td></tr></table></figure>
<h2 id="问题排查">问题排查</h2>
<p>启动容器可能会报错：<code>required port 53 already in use</code></p>
<p>这说明 53 端口已经被占用，这个端口默认被
<code>systemd-resolved</code> 占用。</p>
<h3 id="查看占用的进程">查看占用的进程</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo lsof -i :53</span><br></pre></td></tr></table></figure>
<p>若显示如下输出，则说明被 systemd-resolved 占用了。</p>
<figure>
<img data-src="https://oss.223434.xyz:2234/public/files/images/image-20241126102219940.png"
alt="image-20241126102219940" />
<figcaption aria-hidden="true">image-20241126102219940</figcaption>
</figure>
<h3 id="解除占用">解除占用</h3>
<ol type="1">
<li><p>先停用 systemd-resolved 服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop systemd-resolved</span><br></pre></td></tr></table></figure></li>
<li><p>编辑 /etc/systemd/resolved.conf 文件，取消 DNSStubListener</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/systemd/resolved.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 DNSStubListener 设置为 no</span></span><br><span class="line">[Resolve]</span><br><span class="line"><span class="comment">#DNS=8.8.8.8</span></span><br><span class="line"><span class="comment">#FallbackDNS=</span></span><br><span class="line"><span class="comment">#Domains=</span></span><br><span class="line"><span class="comment">#LLMNR=no</span></span><br><span class="line"><span class="comment">#MulticastDNS=no</span></span><br><span class="line"><span class="comment">#DNSSEC=no</span></span><br><span class="line"><span class="comment">#Cache=yes</span></span><br><span class="line">DNSStubListener=no  <span class="comment">#取消注释，把yes改为no</span></span><br></pre></td></tr></table></figure></li>
<li><p>将 resolv.conf 指向 <code>systemd-resolved</code> 管理的文件</p>
<p>在现代 Linux 系统中，<code>systemd-resolved</code> 是一个用于管理 DNS
解析的服务。它提供了对 DNS、LLMNR 和 mDNS 的支持，并可以动态更新 DNS
配置。通过将 resolv.conf 指向 <code>systemd-resolved</code>
管理的文件，可以确保系统的 DNS 配置始终与 <code>systemd-resolved</code>
保持一致。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份原来的 resolv.conf</span></span><br><span class="line">sudo <span class="built_in">cp</span> /etc/resolv.conf /etc/resolv.conf.bak</span><br><span class="line"><span class="comment"># 删除原文件并建立软链接</span></span><br><span class="line">sudo <span class="built_in">ln</span> -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<p><a
href="https://hub.docker.com/r/adguard/adguardhome">adguard/adguardhome
- Docker Image | Docker Hub</a></p>
<p><a
href="https://blog.csdn.net/qq_24924187/article/details/109197505">Linux
systemd-resolve占用53端口的解决方法</a></p>
]]></content>
      <categories>
        <category>Software</category>
        <category>Adguard</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>AdguardHome</tag>
      </tags>
  </entry>
  <entry>
    <title>重装系统后快速恢复生产力</title>
    <url>/posts/2022/SWJS0K.html</url>
    <content><![CDATA[<p>本文主要介绍在重装电脑后，如何激活系统及快速安装常用软件。</p>
<span id="more"></span>
<h2 id="windows-激活">windows 激活</h2>
<p>在命令行中执行
<code>irm https://massgrave.dev/get | iex</code>，然后选择相应选项进行激活。</p>
<p><strong>参考：</strong>
https://github.com/massgravel/Microsoft-Activation-Scripts</p>
<h2 id="scoop-安装">scoop 安装</h2>
<p>通过 scoop 安装软件时，需要魔法才好用，安装方法见 (scoop
安装与重置)[https://hi.uamazing.cn:52443/posts/2020/WCF13S.html]</p>
<h2 id="git-安装">git 安装</h2>
<p><code>scoop install git</code></p>
<p>scoop 后期所有的软件安装都要基于 git 环境</p>
<h2 id="scoop-添加常用仓库">scoop 添加常用仓库</h2>
<p>添加 extras 软件仓库</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop bucket add extras</span><br></pre></td></tr></table></figure>
<p>添加自用仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scoop bucket add uamzing https://gitee.com/galensgan/galens-bucket.git</span><br></pre></td></tr></table></figure>
<h2 id="安装-aria2-加速下载">安装 aria2 加速下载</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install aira2</span><br></pre></td></tr></table></figure>
<p>aria2 安装后，默认是不走代理的，通过以下设置使其通过代理下载。</p>
<p>打开 <code>C:\Users\%username%\.config\scoop\config.json</code>
文件，在里面添加：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// aria2 配置</span></span><br><span class="line">    <span class="attr">&quot;aria2-options&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;--check-certificate false&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;--https-proxy=http://192.168.3.14:7890&quot;</span><span class="punctuation">,</span> <span class="comment">// https 代理的地址</span></span><br><span class="line">        <span class="string">&quot;--http-proxy=http://192.168.3.14.7890&quot;</span> <span class="comment">// http 代理地址</span></span><br><span class="line">  	<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="安装-flow-launcher">安装 flow-launcher</h2>
<p>通过 <code>scoop install flow-launcher everything</code>
安装快速搜索工具</p>
<h2 id="安装-typora">安装 typora</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install uamazing/typora</span><br></pre></td></tr></table></figure>
<h2 id="office-安装与激活">office 安装与激活</h2>
<p>office 使用 <a
href="https://otp.landian.vip/zh-cn/">officeToolPlus</a>
进行安装与激活。</p>
<p>安装时，选择批量授权版本，方便后面进行激活。</p>
<p>officeToolPlus 可以通过 scoop 进行安装</p>
<h2 id="git-设置别名">git 设置别名</h2>
<p><a
href="https://hi.uamazing.cn:52443/posts/2022/18J366C.html#%E5%B8%B8%E7%94%A8%E5%88%AB%E5%90%8D">自己常用
Git 别名</a></p>
<h2 id="安装-powershell7">安装 powershell7</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install uamazing/powershell7</span><br></pre></td></tr></table></figure>
<h2 id="powershell-7-显示历史记录">powershell 7 显示历史记录</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 PSReadLine</span></span><br><span class="line"><span class="built_in">Install-Module</span> <span class="literal">-Name</span> PSReadLine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开配置文件</span></span><br><span class="line">notepad <span class="variable">$profile</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向里面添加如下内容</span></span><br><span class="line"><span class="variable">$PSOption</span> = <span class="selector-tag">@</span>&#123;</span><br><span class="line">    PredictionSource = <span class="string">&#x27;History&#x27;</span></span><br><span class="line">    <span class="comment"># 使用 vim 的模式，可以按 esc 后，执行 vim 快捷键</span></span><br><span class="line">    EditMode = <span class="string">&#x27;Vi&#x27;</span></span><br><span class="line">    PredictionViewStyle = <span class="string">&#x27;ListView&#x27;</span></span><br><span class="line">    ShowToolTips = <span class="variable">$false</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Set-PSReadLineOption</span> @PSOption</span><br></pre></td></tr></table></figure>
<p>更多请参考 powershell 详细配置</p>
<h2 id="powershell-添加-oh-my-posh-插件">powershell 添加 oh-my-posh
插件</h2>
<p>参考：<a
href="https://ohmyposh.dev/docs/installation/windows">Windows | Oh My
Posh</a></p>
<h2 id="powershell-添加-z.lua-实现快速跳转">powershell 添加 z.lua
实现快速跳转</h2>
<p>参考： <a
href="https://www.bookstack.cn/read/z.lua-zh/README.cn.md">z.lua
中文文档</a></p>
<p>安装完成后，需要<a
href="https://github.com/skywind3000/z.lua/issues/168">添加环境变量</a>
<code>_ZL_HYPHEN=1</code>，使其支持包含 - 号的目录。</p>
<p>快捷命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">environment</span>]::setEnvironmentVariable(<span class="string">&#x27;_ZL_HYPHEN&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;User&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="安装-adguard">安装 Adguard</h2>
<p><a href="https://adguard.com/en/welcome.html">Adguard</a>
可以帮助屏蔽广告。</p>
]]></content>
      <categories>
        <category>System</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>windows10 更新升级</title>
    <url>/posts/2023/1D7C89K.html</url>
    <content><![CDATA[<p>当需要更新 win10 或者将 win7 更新到 win10 时，可以使用 microsoft
提供的升级更新工具来进行操作。</p>
<p><a
href="https://www.microsoft.com/zh-cn/software-download/windows10">地址：下载
Windows 10 (microsoft.com)</a></p>
<span id="more"></span>
<p>win7 升级可能遇到下列错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">There was a problem running this tool</span><br><span class="line"></span><br><span class="line">We&#x27;re not sure what happened, but we&#x27;re unable to run this tool on your PC. If you continue experiencing problems, reference the error code when contacting customer support. Error code: 0x80072F8F - 0x20000</span><br></pre></td></tr></table></figure>
<p>这是因为 MediaCreationTool 使用 TLS 1.2 协议, 但是在 Windows 7 and
Windows 8 中这个协议默认关闭的。</p>
<p>可以按以下步骤进行处理：</p>
<p><a
href="https://www.winhelponline.com/blog/media-creation-tool-error-0x80072f8f-0x20000/">Media
Creation Tool Error 0x80072F8F - 0x20000 in Windows 7/8 »
Winhelponline</a></p>
]]></content>
      <categories>
        <category>System</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>取消当你连接时将向你询问凭据</title>
    <url>/posts/2022/1S9QPH9.html</url>
    <content><![CDATA[<p>在 windows 中远程其它电脑时，有时候会出现
<code>当你连接时向你询问凭据</code> 这个提示，如下图：</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220923164736037.png"
alt="image-20220923164736037" />
<figcaption aria-hidden="true">image-20220923164736037</figcaption>
</figure>
<p>这种情况会导致点击 <code>连接(N)</code>
后需要输入输入用户名密码，在使用命令行连接的时候，影响使用体验。</p>
<span id="more"></span>
<ol type="1">
<li><p>展开 <code>显示选项(O)</code></p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230208213715770.png"
alt="image-20230208213715770" />
<figcaption aria-hidden="true">image-20230208213715770</figcaption>
</figure></li>
<li><p>勾选 <code>允许我保存凭据(R)</code></p></li>
<li><p>单击 <code>连接(N)</code> 后，就会出现输入密码框</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230208213850412.png"
alt="image-20230208213850412" />
<figcaption aria-hidden="true">image-20230208213850412</figcaption>
</figure>
<p>输入密码后，下次再登陆就不会再要求输入用户密码了。</p></li>
</ol>
<p>至此，每次连接时要输入用户名密码的问题就解决了，可以使用命令行愉快地登陆了。</p>
<p>命令行远程连接方式：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 192.168.1.1 换成自己需要远程的 IP 地址即可</span></span><br><span class="line">mstsc /v:<span class="number">192.168</span>.<span class="number">1.1</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>System</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>windows 8.1/10/11 系统激活</title>
    <url>/posts/2022/2ZJ91KM.html</url>
    <content><![CDATA[<p>本文记录了 windows 和 office 的激活方法。</p>
<span id="more"></span>
<h2 id="windows-激活">windows 激活</h2>
<h3 id="一键激活">一键激活</h3>
<p>用管理员身份打开 PowerShell，执行
<code>irm https://get.activated.win | iex</code>，然后输入
<code>1</code> 开始激活</p>
<blockquote>
<p>推荐使用</p>
</blockquote>
<h3 id="手动激活">手动激活</h3>
<p>下载激活脚本工具按提示激活</p>
<p>脚本链接：https://cloud.uamazing.cn:52443/#s/7ukOXakg</p>
<h2 id="office-激活">Office 激活</h2>
<h3 id="office-tool-plus-激活">Office Tool Plus 激活</h3>
<p>详细参考 <a href="/posts/2023/3H07Q23.html">使用 OfficeToolPlus
安装和激活 Office | 星辰大海</a></p>
<blockquote>
<p>推荐使用</p>
</blockquote>
<h3 id="脚本激活">脚本激活</h3>
<p>脚本链接：https://cloud.uamazing.cn:52443/#s/7ukOXakg</p>
<p>office激活也是采用上面的工具，如果激活失败，可以使用上述链接中的
office 脚本转换 office 的版本。</p>
<h2 id="致谢">致谢</h2>
<p>本文参考：</p>
<ol type="1">
<li>https://v0v.bid/kms.html</li>
<li>https://github.com/massgravel/Microsoft-Activation-Scripts</li>
</ol>
<p>在此致以诚挚谢意！</p>
]]></content>
      <categories>
        <category>System</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>星辰大海</tag>
      </tags>
  </entry>
  <entry>
    <title>windows11 任务栏一直转圈的解决办法</title>
    <url>/posts/2023/2STY3BG.html</url>
    <content><![CDATA[<p>最近一个朋友的 win11
系统，开机进入系统后，鼠标悬停到任务栏时一直转圈，在其它位置正常，但是无法打开其它任何界面。</p>
<span id="more"></span>
<h2 id="原因">原因</h2>
<p>通过排查，发现是与 CAD2010 不兼容导致的，具体原因不详，最后卸载掉
CAD2010 即可恢复正常。</p>
<h2 id="卸载方法">卸载方法</h2>
<p>由于 CAD
冲突，导致资源管理器无响应，无法打开任何界面，唯一能打开的界面就是任务管理器，现在以任务管理器为媒介来卸载
CAD2010。</p>
<ol type="1">
<li><p>Ctrl+Alt+Delete 打开任务管理器</p></li>
<li><p>进程右上角，点击 "运行新任务"</p></li>
<li><p>弹出框中输入 <code>appwiz.cpl</code> 来打开程序卸载界面</p>
<blockquote>
<p>输入后，可能会无法弹出界面，此时需要在任务栏上多次单击左键，使资源管理器重启，这样卸载界面就会显示出来了。</p>
</blockquote></li>
<li><p>卸载 CAD2010</p></li>
</ol>
<h2 id="建议">建议</h2>
<p>Windows11 是 2021
年推出的系统，因此在使用软件时，尽量使用较新的版本，以免引起兼容性的问题。</p>
]]></content>
      <categories>
        <category>System</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Win11</tag>
      </tags>
  </entry>
  <entry>
    <title>重装 windows 系统</title>
    <url>/posts/2023/2CR6PKS.html</url>
    <content><![CDATA[<p>本文介绍如何彻底重装 windows
系统，按照本教程一步一步进行安装，重装系统非常简单。</p>
<blockquote>
<p>重装相对于重置可以让系统更纯净。有时候电脑被病毒感染后，重置往往不能解决问题，此时就需要进行重装。</p>
<p>若只需要重置电脑，win10
及以上的版本在设置有重置功能，可以就此跳过本文。</p>
</blockquote>
<span id="more"></span>
<h2 id="简介">简介</h2>
<p>通过本文的方法安装 windows 有以下几个优势：</p>
<ol type="1">
<li>安装方式简单，不影响 U 盘的正常使用</li>
<li>安装的系统为官方iso，无任何其它捆绑软件</li>
<li>激活后为正版系统，支持升级，放心使用</li>
</ol>
<h2 id="安装盘制作">安装盘制作</h2>
<p>从 <a href="https://www.ventoy.net/cn/download.html">Download .
Ventoy</a> 处下载 <a
href="https://github.com/ventoy/Ventoy/releases">ventoy-1.0.94-windows.zip</a>，然后根据
<a href="https://www.ventoy.net/cn/doc_start.html">Get start .
Ventoy</a> 教程制作启动盘。</p>
<p>简要步骤如下：</p>
<ol type="1">
<li><p>插入 U 盘</p></li>
<li><p>解压 ventoy 安装包后，执行文件
<code>Ventoy2Disk_X64.exe</code></p></li>
<li><p>选择目标 U 盘，然后单击【安装】，便完成启动盘的制作了</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230807111055919.png"
alt="image-20230807111055919" />
<figcaption aria-hidden="true">image-20230807111055919</figcaption>
</figure>
<p>当出现如下提示时，表示安装成功了：</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230807111540544.png"
alt="image-20230807111540544" />
<figcaption aria-hidden="true">image-20230807111540544</figcaption>
</figure></li>
</ol>
<h2 id="windows-系统-iso-下载">windows 系统 iso 下载</h2>
<p>使用 microsoft 提供的工具 <a
href="https://www.microsoft.com/zh-cn/software-download/windows10">下载
Windows 10 (microsoft.com)</a> 下载安装镜像(.iso)文件。</p>
<blockquote>
<p>更详细的教程可以在网络上找一下，应该不难</p>
</blockquote>
<p>下载完成后，将下载的 .iso 文件复制到刚刚制作的 U 盘中即可。</p>
<p>简要步骤如下：</p>
<ol type="1">
<li><p>下载 microsoft 提供的下载工具</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230807122815793.png"
alt="image-20230807122815793" />
<figcaption aria-hidden="true">image-20230807122815793</figcaption>
</figure></li>
<li><p>打开下载好的 <code>MediaCreationTool22H2.exe</code></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230807123257526.png" alt="image-20230807123257526" style="height:300px;" /></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230807123531067.png" alt="image-20230807123531067" style="height:300px;" /></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230807123620905.png" alt="image-20230807123620905" style="height:300px;" /></p>
<p>点击【下一步】，然后选择保存 iso 文件的位置即可。</p></li>
</ol>
<h2 id="开始安装-windows">开始安装 Windows</h2>
<h3 id="备份-c-盘内容">备份 C 盘内容</h3>
<p>先备份目标机器上 C
盘中的文件，包括桌面上的内容。在系统重装时，会清理原 C
盘的内容，有时候需要格式化 C 盘，因此需要提前备份，避免数据丢失。</p>
<h3 id="进入-bios-设置-u-盘启动">进入 BIOS 设置 U 盘启动</h3>
<p>通过 BIOS 快捷键，进入 BIOS 中，设置</p>
<p>最常见的是ESC键、Delete键、F12键，若不行可以尝试以下对应的BIOS快捷键或快捷启动按键。</p>
<table style="width:100%;">
<colgroup>
<col style="width: 20%" />
<col style="width: 11%" />
<col style="width: 25%" />
<col style="width: 10%" />
<col style="width: 23%" />
<col style="width: 10%" />
</colgroup>
<thead>
<tr class="header">
<th>组装机主板</th>
<th>快捷键</th>
<th>品牌笔记本</th>
<th>快捷键</th>
<th>品牌台式机</th>
<th>快捷键</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>华硕主板</td>
<td>F8</td>
<td>联想笔记本</td>
<td>F12</td>
<td>联想台式机</td>
<td>F12</td>
</tr>
<tr class="even">
<td>技嘉主板</td>
<td>F12</td>
<td>宏基笔记本</td>
<td>F12</td>
<td>惠普台式机</td>
<td>F12</td>
</tr>
<tr class="odd">
<td>微星主板</td>
<td>F11</td>
<td>华硕笔记本</td>
<td>ESC</td>
<td>宏基台式机</td>
<td>F12</td>
</tr>
<tr class="even">
<td>映泰主板</td>
<td>F9</td>
<td>惠普笔记本</td>
<td>F9</td>
<td>戴尔台式机</td>
<td>ESC</td>
</tr>
<tr class="odd">
<td>梅捷主板</td>
<td>ESC/F12</td>
<td>联想ThinkPad</td>
<td>F12</td>
<td>神舟台式机</td>
<td>F12</td>
</tr>
<tr class="even">
<td>七彩虹主板</td>
<td>ESC/F11</td>
<td>戴尔笔记本</td>
<td>F12</td>
<td>华硕台式机</td>
<td>F8</td>
</tr>
<tr class="odd">
<td>华擎主板</td>
<td>F11</td>
<td>alienware笔记本</td>
<td>F2/F12</td>
<td>方正台式机</td>
<td>F12</td>
</tr>
<tr class="even">
<td>昂达主板</td>
<td>F11</td>
<td>神舟笔记本</td>
<td>F12</td>
<td>清华同方台式机</td>
<td>F12</td>
</tr>
<tr class="odd">
<td>双敏主板</td>
<td>ESC</td>
<td>东芝笔记本</td>
<td>F12</td>
<td>海尔台式机</td>
<td>F12</td>
</tr>
<tr class="even">
<td>翔升主板</td>
<td>F10</td>
<td>三星笔记本</td>
<td>F12</td>
<td>明基台式机</td>
<td>F8</td>
</tr>
<tr class="odd">
<td>精英主板</td>
<td>ESC/F11</td>
<td>IBM笔记本</td>
<td>F12</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>冠盟主板</td>
<td>F11/F12</td>
<td>富士通笔记本</td>
<td>F12</td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>富士康主板</td>
<td>ESC/F12</td>
<td>海尔笔记本</td>
<td>F12</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>顶星主板</td>
<td>F11/F12</td>
<td>方正笔记本</td>
<td>F12</td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>铭瑄主板</td>
<td>ESC</td>
<td>清华同方笔记本</td>
<td>F12</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>盈通主板</td>
<td>F8</td>
<td>微星笔记本</td>
<td>F11</td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>捷波主板</td>
<td>ESC</td>
<td>明基笔记本</td>
<td>F9</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>Intel主板</td>
<td>F12</td>
<td>技嘉笔记本</td>
<td>F12</td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>杰微主板</td>
<td>ESC/F8</td>
<td>GateWay笔记本</td>
<td>F12</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>致铭主板</td>
<td>F12</td>
<td>eMachines笔记本</td>
<td>F12</td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>磐英主板</td>
<td>ESC</td>
<td>索尼笔记本</td>
<td>ESC</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>磐正主板</td>
<td>ESC</td>
<td>小米笔记本</td>
<td>F12</td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>冠名主板</td>
<td>F9</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>斯巴达卡主板</td>
<td>ESC</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>华南主板</td>
<td>DEL/F11</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<blockquote>
<p>由于硬盘大多数采用的是 MBR 分区，因此在设置启动项时，要以 lagacy
模式启动。</p>
<p>可以参考这篇文章：<a href="/posts/2022/X71YPD.html">ventoy
安装系统时无法选择 MBR 分区的盘</a></p>
</blockquote>
<h3 id="安装系统">安装系统</h3>
<p>当启动 U 盘后，会进入 ventoy
的系统安装界面，按以下步骤逐步操作即可：</p>
<ol type="1">
<li><p>选择需要安装的 windows 版本</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230807133922593.png" alt="image-20230807133922593" style="height:300px" /></p></li>
<li><p>选择 <code>Boot in normal mode</code></p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230807134159730.png"
alt="image-20230807134159730" />
<figcaption aria-hidden="true">image-20230807134159730</figcaption>
</figure></li>
<li><p>安装界面启动后，一直点下一步</p>
<p>当到选择操作系统时，选择【专业版】</p></li>
</ol>
<h3 id="一键激活系统">一键激活系统</h3>
<p>当系统安装完成，下载激活脚本<a
href="https://cloud.uamazing.cn:52443/#s/9iFfOUjw">MAS_AIO</a>，双击打开即可激活。</p>
<p>或者按该教程激活 windows: <a href="/posts/2022/2ZJ91KM.html">windows
8.1/10/11 系统激活</a></p>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此报以诚挚谢意！</p>
<ol type="1">
<li><a href="https://www.ventoy.net/cn/doc_start.html">Get start .
Ventoy</a></li>
</ol>
]]></content>
      <categories>
        <category>System</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 中 Copilot 响应慢的解决办法</title>
    <url>/posts/2023/13DV6YK.html</url>
    <content><![CDATA[<p>当在 Visual Studio Code 中安装 Copilot
插件后，发现其提示很慢，可能通过以下设置来减少响应延迟。</p>
<span id="more"></span>
<ol type="1">
<li>关闭
<code>Editor › Suggest: Snippets Prevent Quick Suggestions</code></li>
<li>减少 <code>Editor: Quick Suggestions Delay</code> 值</li>
</ol>
]]></content>
      <categories>
        <category>Software</category>
        <category>Copilot</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
        <tag>Copilot</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 中配置无线网络唤醒(wowlan)</title>
    <url>/posts/2024/3QV9Z7H.html</url>
    <content><![CDATA[<p>本文仅对无线网络唤醒(简称wowlan)做一个配置记录，具体的教程见本文的参考文章。</p>
<p>网络上关于无线网唤醒的文章，99%
的都是关于有线的，无线的至今还没发现成功过。</p>
<p>作者以实践证明，无线网络唤醒是可以的！</p>
<span id="more"></span>
<h2 id="前言">前言</h2>
<p>首先，为什么要使用无线网络唤醒呢？其实本人就一条原因：</p>
<p><strong>不想电脑上多插一根网线</strong></p>
<h2 id="配置">配置</h2>
<p>配置 wowlan 主要有 3 个地方需要配置</p>
<ol type="1">
<li>BIOS 中打开 <code>PCIE</code> 唤醒</li>
<li>设备管理中设置唤醒
<ul>
<li>【高级/唤醒幻数据包】 <code>Enable</code></li>
<li>【高级/唤醒模式匹配】 <code>Enable</code></li>
<li>【电源管理/*】所有设置都打上勾</li>
</ul></li>
<li>路由器绑定静态 IP
<ul>
<li>在路由器上将需要 wowlan 的电脑绑定一个固定 IP</li>
<li>更改电脑的 IP 分配方式为手动，然后输入路由器给定的静态 IP</li>
</ul></li>
</ol>
<h2 id="网络结构">网络结构</h2>
<h2 id="折腾记录">折腾记录</h2>
<h3 id="section">2024-10-22</h3>
<p><strong>升级 win11 24h2 导致 wowlan 失败</strong></p>
<p>作者的电脑以前一直使用 wowlan，某天将其从 win11 23h2 升级到 win11
24h2 后，发现 wowlan 失效了。</p>
<p>期间使用了以下方式排查问题：</p>
<ol type="1">
<li>重置 BIOS 设置</li>
<li>重置路由器</li>
<li>升级网卡驱动</li>
<li>重置网络</li>
</ol>
<p>最后，使用【网络和 Internet/高级网络设置/网络重置】解决了问题。</p>
<h3 id="section-1">2024-12-10</h3>
<p><strong>路由器修改了 DNS 服务导致 wowlan 失败</strong></p>
<p>路由器莫名其妙地将 baidu.com 解析成 127.0.0.1 了，于是修改了下 DNS
解析服务，发现 wowlan 又失效了。</p>
<p>使用【网络和 Internet/高级网络设置/网络重置】也恢复不了。</p>
<p>经过测试，有以下现象：</p>
<ol type="1">
<li>路由器上显示该电脑在线</li>
<li>使用有线可以唤醒</li>
<li>才睡眠的几秒内，可以唤醒</li>
</ol>
<p>猜测是无线网卡有问题，可能是进入了节能模式。但不知道如何解决，可能要放弃无线唤醒方案了。</p>
<h3 id="section-2">2024-12-13</h3>
<p>为了折腾无线网络唤醒，这几天每天 6
点早早起来测试，最终，今天有重大突破，事情有了转机。</p>
<p>今天发现通过向局域网内广播幻数据包可以唤醒：</p>
<figure>
<img data-src="https://oss.223434.xyz:2234/public/files/images/image-20241213080139079.png"
alt="image-20241213080139079" />
<figcaption aria-hidden="true">image-20241213080139079</figcaption>
</figure>
<p>然后再总结一下现象及一些测试结果：</p>
<ol type="1">
<li>睡眠约 10s 内可以通过无线网卡远程唤醒，睡眠太久就无法被唤醒了</li>
<li>局域网内广播幻数据包，任何时候都可以唤醒</li>
<li>局域网内单点广播幻数据包，仅睡眠 10s 内可以唤醒</li>
<li>使用有线网卡，任何时候都可以唤醒</li>
<li>以前可能通过单点广播唤醒，但是修改了路由器的 DHCP 后，就失效了</li>
<li>去掉路由器的静态绑定后，依然是约 10 秒内可以通过无线远程唤醒</li>
</ol>
<p>所以，我猜测可能的原因是：</p>
<ol type="1">
<li>路由器配置修改后，导致 ARP 缓存失效了，只要电脑一睡眠，ARP
就被清除了。</li>
<li>电脑有什么配置被修改了，导致网卡深度睡眼后，不接受单点广播，只接受广播唤醒。</li>
</ol>
<p>把可能的配置都修改了一遍，还是没有效果，看来只能放弃了。</p>
<h3 id="section-3">2024-12-16</h3>
<p>又开始折腾了，我严重怀疑就是这个路由器有问题，于是将路由器彻底重置了一下，网段改成
A 类局域网。</p>
<p>然后重新配置了远程唤醒，终于成功了！</p>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<p><a
href="https://elmagnifico.tech/2021/05/25/Wake-on-wireless-lan/">无线网络唤醒，从入门到放弃
- elmagnifico's blog</a></p>
]]></content>
      <categories>
        <category>System</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>wowlan</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 中 Copilot 不进行提示</title>
    <url>/posts/2023/25NK7XP.html</url>
    <content><![CDATA[<p>在 vscode 中安装了 copilot 后，当编写代码时，若 copilot
不转圈(不工作)，可能是 copilot 没有登陆成功导致的。重启 vscode
后，会自动触发登陆弹窗，登陆即可正常使用。</p>
]]></content>
      <categories>
        <category>Software</category>
        <category>Copilot</category>
      </categories>
      <tags>
        <tag>Software</tag>
        <tag>Copilot</tag>
      </tags>
  </entry>
  <entry>
    <title>ventoy安装系统时无法选择MBR分区的盘</title>
    <url>/posts/2022/X71YPD.html</url>
    <content><![CDATA[<p>ventoy 是一款超级方便的系统安装软件。在利用 ventoy
给一些老电脑安装系统时，发现无法选择安装盘符，提示无法安装在 MBR
分区上。</p>
<span id="more"></span>
<h2 id="分区格式区别">分区格式区别</h2>
<h3 id="mbr分区表">MBR分区表</h3>
<p>Master Boot Record，即硬盘主引导记录分区表，只支持容量在 2.1TB
以下的硬盘，超过2.1TB的硬盘只能管理2.1TB，最多只支持4个主分区或三个主分区和一个扩展分区，扩展分区下可以有多个逻辑分区。</p>
<h3 id="gpt分区表">GPT分区表</h3>
<p>GPT，全局唯一标识分区表(GUID Partition
Table)，与MBR最大4个分区表项的限制相比，GPT对分区数量没有限制，但Windows最大仅支持128个GPT分区，GPT可管理硬盘大小达到了18EB。只有基于UEFI平台的主板才支持GPT分区引导启动。</p>
<h2 id="故障原因">故障原因</h2>
<p>硬盘分区格式为MBR格式时，启动模式应该为Legacy。</p>
<p>硬盘分区格式为GUID（GPT）格式时，启动模式应该为UEFI。</p>
<p>所以，出现无法安装的原因就是在启动的时候，选择了 UEFI
启动。为了解决这个问题，可以修改 Bios 中的启动设置。</p>
<h2 id="legacy启动设置常见的选项">legacy启动设置常见的选项</h2>
<blockquote>
<p>如果有以下选项，就需要修改，没有就略过</p>
</blockquote>
<ol type="1">
<li><code>Secure Boot</code> 改成
<code>Disabled</code>，禁用安全启动，部分机型需先设置 BIOS
密码才有权限修改 Secure Boot，通常是找到
<code>Set Supervisor Password</code> 设置密码</li>
<li><code>CSM</code> 改成 <code>Enable</code> 或 <code>Yes</code> 或
<code>ALWAYS</code>，表示兼容模式</li>
<li><code>OS Mode Selection</code> 设置为
<code>CSM OS</code>，表示兼容模式</li>
<li><code>Boot mode</code> 或 <code>UEFI mode</code> 或
<code>Boot List Option</code> 改成
<code>Legacy</code>，表示传统启动方式</li>
<li><code>OS Optimized Defaults</code> 改成 <code>Disabled</code> 或
<code>Other OS</code>，禁用默认系统优先设置</li>
<li><code>Advanced</code> 选项下 <code>Fast BIOS Mode</code> 设置为
<code>Disabled</code>，关闭快速启动，有些电脑需要关闭快速启动才能识别U盘，比如三星</li>
</ol>
]]></content>
      <categories>
        <category>System</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>ventoy</tag>
      </tags>
  </entry>
  <entry>
    <title>Github Copilot 的免费替代软件</title>
    <url>/posts/2023/1T84381.html</url>
    <content><![CDATA[<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/mmexport1691536191853.png"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<p>Copilot
对于提升开发效率有很大的帮助，可以大大减少开发中的复制粘贴、重复写低逻辑代码的时间，同时还可以在没有思路时，提供一个参考方向。就像一个不那么资深的助手，在辅助你编程。</p>
<p>截止目前为止，Github Copilot 已经开始收费，每月 10 美元，包年 100
美元。因此本文收录一些免费的平替软件，以备不时之需，有时间再来做一个详细的测试。</p>
<span id="more"></span>
<h2 id="软件列表">软件列表</h2>
<ol type="1">
<li>CodeGeeX</li>
<li>Codeium</li>
<li>Tabnine</li>
</ol>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<ol type="1">
<li><a href="https://www.cnblogs.com/feffery/p/17428388.html">三款Github
Copilot的免费替代 - 费弗里 - 博客园 (cnblogs.com)</a></li>
<li><a href="https://hashdork.com/zh-TW/github副駕駛替代方案/">10 大
GitHub Copilot 替代品（2023 年）-HashDork</a></li>
<li>https://www.v2ex.com/t/891044</li>
<li><a href="https://hub.baai.ac.cn/view/25013">Fauxpilot: Github
copilot 的开源替代品，目前已收获8k+ star - 智源社区
(baai.ac.cn)</a></li>
<li><a
href="https://sourceforge.net/software/compare/CodeGeeX-vs-Codeium-vs-Tabnine/">CodeGeeX
vs. Codeium vs. Tabnine Comparison (sourceforge.net)</a></li>
</ol>
]]></content>
      <categories>
        <category>Software</category>
        <category>Copilot</category>
      </categories>
      <tags>
        <tag>Software</tag>
        <tag>Copilot</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>ComfyUI 入门资料整理</title>
    <url>/posts/2024/1189BHM.html</url>
    <content><![CDATA[<p>本文收集 ComfyUI 相关的学习资料，按学习的进度先后进行排序。</p>
<span id="more"></span>
<h2 id="概念介绍">概念介绍</h2>
<ol type="1">
<li><p><a
href="https://www.uisdc.com/comfyui-3">万字教程！奶奶看了都会的 ComfyUI
入门教程 - 优设网 - 学设计上优设 (uisdc.com)</a></p></li>
<li><p><a
href="https://zhuanlan.zhihu.com/p/685266383">【comfyUI基础教程】官方文档翻译和场景使用补充，纯干货！（一、安装开始和使用技巧）
- 知乎 (zhihu.com)</a></p></li>
</ol>
<h2 id="示例">示例</h2>
<blockquote>
<p>使用示例时，可以直接导入示例中的 png 图片，里面保存了工作流的数据</p>
</blockquote>
<ol type="1">
<li><a
href="https://juejin.cn/post/7363579190971973682#heading-0">ComfyUI_examples
翻译笔记 - 掘金 (juejin.cn)</a></li>
<li><a href="https://comfyanonymous.github.io/ComfyUI_examples/">ComfyUI
Examples | ComfyUI_examples (comfyanonymous.github.io)</a></li>
<li><a href="https://comfyworkflows.com/">Comfy Workflows</a></li>
<li><a href="https://openart.ai/workflows/all">ComfyUI Workflows -
Developer Community (openart.ai)</a></li>
</ol>
<h2 id="模型下载">模型下载</h2>
<h3 id="controlnet">ControlNet</h3>
<p><strong>SDXL</strong>:</p>
<p><a
href="https://huggingface.co/stabilityai/control-lora/tree/main/control-LoRAs-rank128">stabilityai/control-lora
at main (huggingface.co)</a></p>
<h2 id="工具">工具</h2>
<p>获取图片标注：<a
href="https://huggingface.co/spaces/SmilingWolf/wd-tagger">WaifuDiffusion
Tagger - a Hugging Face Space by SmilingWolf</a></p>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<ol type="1">
<li><a href="https://zhuanlan.zhihu.com/p/655249926">ComfyUi教程汇总 -
知乎 (zhihu.com)</a></li>
<li><a href="https://aituts.com/comfyui/">Beginner's Guide to ComfyUI
for Stable Diffusion - Aituts</a></li>
<li>[<a
href="https://blog.csdn.net/u013716859/article/details/135214946">AIGC]
ComfyUI 节点解释_comfyui节点介绍-CSDN博客</a></li>
</ol>
]]></content>
      <categories>
        <category>Software</category>
        <category>ComfyUI</category>
      </categories>
      <tags>
        <tag>ComfyUI</tag>
        <tag>SD</tag>
      </tags>
  </entry>
  <entry>
    <title>StableDiffusion 专有名词理解</title>
    <url>/posts/2024/1HAPA4N.html</url>
    <content><![CDATA[<p>本文对 SD 和 ComfyUI
中的一些名词进行解释，按文末参考文章中出现的先后顺序进行排列。</p>
<blockquote>
<p>本文主要采用 GPT 进行解释。</p>
</blockquote>
<span id="more"></span>
<h2 id="正文">正文</h2>
<h3 id="hires-fix">Hires Fix</h3>
<p>"Hires fix"
又称为高分辨率修复，是一种在深度学习和图像生成领域中用来提高图像分辨率和细节的技术。</p>
<p><a
href="https://www.stablediffusion-cn.com/sd/sd-use/3404.html">Stable
Diffusion中文网：Hires. Fix是什么意思？ - Stable Diffusion中文网
(stablediffusion-cn.com)</a></p>
<p><a
href="https://blog.csdn.net/x1131230123/article/details/134785633">【深度学习】Stable
Diffusion中的Hires. fix是什么？Hires. fix原理_hires.fix-CSDN博客</a></p>
<h3 id="vae">VAE</h3>
<p><a
href="https://zhuanlan.zhihu.com/p/34998569">变分自编码器VAE：原来是这么一回事
| 附开源代码 - 知乎 (zhihu.com)</a></p>
<h3 id="esrgan">ESRGAN</h3>
<p><a
href="https://blog.csdn.net/weixin_43624538/article/details/100573054">【Super
Resolution】超分辨率——ESRGAN_esrgan网络结构-CSDN博客</a></p>
<h3 id="lora">Lora</h3>
<p><a
href="https://blog.csdn.net/lizhong2008/article/details/132522194">AI
绘画Stable Diffusion 研究（十七）SD lora 详解（上）-CSDN博客</a></p>
<h2 id="主要参考">主要参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<p><a
href="https://juejin.cn/post/7363579190971973682#heading-0">ComfyUI_examples
翻译笔记 - 掘金 (juejin.cn)</a></p>
<h2 id="其它参考">其它参考</h2>
<p><a
href="https://blog.csdn.net/lizhong2008/category_12302225.html">AI绘画_w风雨无阻w的博客-CSDN博客</a></p>
]]></content>
      <categories>
        <category>Software</category>
        <category>ComfyUI</category>
      </categories>
      <tags>
        <tag>SD</tag>
      </tags>
  </entry>
  <entry>
    <title>新版 Edge 取消圆角样式</title>
    <url>/posts/2023/77AD03.html</url>
    <content><![CDATA[<p>新版 Edge 浏览器引入了圆角的样式，可以通过以下方式进行关闭：</p>
<ol type="1">
<li>在地址栏中输入：edge://flags</li>
<li>搜索 Microsoft Edge rounded corners，将其修改成
<code>Disabled</code> 即可。</li>
</ol>
]]></content>
      <categories>
        <category>Software</category>
        <category>Edge</category>
      </categories>
      <tags>
        <tag>Edge</tag>
        <tag>software</tag>
      </tags>
  </entry>
  <entry>
    <title>ComfyUI 节点介绍</title>
    <url>/posts/2024/2TKH0W3.html</url>
    <content><![CDATA[<p>本文总结了对 SD ComfyUI 中的一些节点的理解，以便灵活运用。</p>
<span id="more"></span>
<h2 id="功能节点">功能节点</h2>
<h2 id="核心结点">核心结点</h2>
<h3 id="高级节点">高级节点</h3>
<h4 id="diffusers-loader">Diffusers Loader</h4>
<h3 id="采样器">采样器</h3>
<h4 id="ksampler">KSampler</h4>
<p><img data-src="https://blenderneko.github.io/ComfyUI-docs/Core%20Nodes/Sampling/media/KSampler.svg" alt="2369455128.png (800×1021) (pansmed.com)" style="max-width:min(100%,400px)" /></p>
<p><strong>作用</strong>：</p>
<p>通过给定的潜空间，使用 model、positive、negative
作为引导，生成一个新的潜空间。</p>
<p><strong>输入输出</strong>：</p>
<table>
<thead>
<tr class="header">
<th>输入</th>
<th>参数描述</th>
<th>输出</th>
<th>参数描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>model</td>
<td>用于去噪的模型</td>
<td>latent</td>
<td>图片潜空间</td>
</tr>
<tr class="even">
<td>positive</td>
<td>正向提示词</td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>negative</td>
<td>负面提示词</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>latent_image</td>
<td>待生成图片的潜空间</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p><strong>配置</strong>：</p>
<table>
<colgroup>
<col style="width: 33%" />
<col style="width: 66%" />
</colgroup>
<thead>
<tr class="header">
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>seed</td>
<td>生成噪声的种子。种子不一样时，生成的图片也不一样</td>
</tr>
<tr class="even">
<td>control_after_generate</td>
<td>控制种子的更新方式</td>
</tr>
<tr class="odd">
<td>step</td>
<td>去噪期间要使用的迭代步数。迭代越多，结果就越准确</td>
</tr>
<tr class="even">
<td>cfg (classifier free guidance)</td>
<td>提示词对生成结果的影响程度。值越大，越接近提示词要求，建议 5-9</td>
</tr>
<tr class="odd">
<td>sampler_name</td>
<td>使用的采样器名称</td>
</tr>
<tr class="even">
<td>scheduler</td>
<td>计划器</td>
</tr>
<tr class="odd">
<td>denoise</td>
<td>添加噪点的强度。AI是基于噪点扩散的，噪点强度越高，AI的创作空间就越大，出图也就和原图越不相似</td>
</tr>
</tbody>
</table>
<h3 id="条件节点">条件节点</h3>
<h4 id="clip-set-last-layer">CLIP Set Last Layer</h4>
<h2 id="插件节点">插件节点</h2>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<ol type="1">
<li><a href="https://blenderneko.github.io/ComfyUI-docs/">ComfyUI
Community Manual (blenderneko.github.io)</a></li>
<li><a href="https://docs.getsalt.ai/md/">Home - Salt Documentation
(getsalt.ai)</a></li>
<li><a
href="https://juejin.cn/post/7363579190971973682#heading-0">ComfyUI_examples
翻译笔记 - 掘金 (juejin.cn)</a></li>
<li><a href="https://comfyanonymous.github.io/ComfyUI_examples/">ComfyUI
Examples | ComfyUI_examples (comfyanonymous.github.io)</a></li>
<li><a href="https://comfyworkflows.com/">Comfy Workflows</a></li>
<li><a href="https://openart.ai/workflows/all">ComfyUI Workflows -
Developer Community (openart.ai)</a></li>
<li><a href="https://www.bilibili.com/read/cv19739185/">Stable
Diffusion中CFG scale与denoising strength的参数分析--以纯爱战神为例 -
哔哩哔哩 (bilibili.com)</a></li>
<li><a
href="https://github.com/wyrde/wyrde-comfyui-workflows">wyrde/wyrde-comfyui-workflows:
some wyrde workflows for comfyUI (github.com)</a></li>
</ol>
]]></content>
      <categories>
        <category>Software</category>
        <category>ComfyUI</category>
      </categories>
      <tags>
        <tag>ComfyUI</tag>
        <tag>SD</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch Docker 部署</title>
    <url>/posts/2024/2087YCV.html</url>
    <content><![CDATA[<p>本文简要记录如何使用 Docker 部署 ElasticSearch，并安装 hanlp
分词器提高中文分词效果。</p>
<span id="more"></span>
<h2 id="什么是-elasticsearch">什么是 ElasticSearch</h2>
<p>以下是官方原文：</p>
<p>Elasticsearch 是一个开源的分布式 RESTful
搜索和分析引擎、可扩展的数据存储和向量数据库，能够解决不断涌现出的各种用例。作为
Elastic Stack 的核心，Elasticsearch
会集中存储您的数据，让您飞快完成搜索，微调相关性，进行强大的分析，并轻松缩放规模。</p>
<h2 id="docker-部署">Docker 部署</h2>
<p>以下为完整的 docker compose 文件，包括：</p>
<ul>
<li>ElasticSearch</li>
<li>Kibana</li>
</ul>
<p>docker compose 文件如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elastic-search:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:8.12.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elastic-search</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9300</span><span class="string">:9300</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="comment"># - ./data/config:/usr/share/elasticsearch/config</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/data:/usr/share/elasticsearch/data</span> <span class="comment"># 数据文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/plugins:/usr/share/elasticsearch/plugins</span> <span class="comment"># 插件文件</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;cluster.name=elasticsearch&quot;</span> <span class="comment">#设置集群名称为elasticsearch</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms1G -Xmx1G&quot;</span> <span class="comment">#设置使用jvm内存大小，设置ES的初始内存和最大内存，否则导致过大启动不了ES</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;discovery.type=single-node&quot;</span> <span class="comment"># 单节点</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">&quot;1000:0&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kibana:8.12.0</span> <span class="comment"># 与 elastic-search 版本保持一致</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elastic-search</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9301</span><span class="string">:5601</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>创建默认配置文件
<code>./data/config/elasticsearch.yml</code>，内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cluster.name:</span> <span class="string">&quot;docker-cluster&quot;</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>
<h2 id="安装步骤">安装步骤</h2>
<h3 id="启动-docker-容器">启动 docker 容器</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为挂载容器设置权限，这一步非常重要，否则 es 会启动失败</span></span><br><span class="line"><span class="comment"># 这里的 1000:1000 是 Elasticsearch 容器中 elasticsearch 用户的 UID 和 GID</span></span><br><span class="line"><span class="built_in">mkdir</span> -p data/&#123;data,config,plugin&#125;</span><br><span class="line">sudo <span class="built_in">chown</span> -R 1000:0 ./data</span><br><span class="line">sudo <span class="built_in">chmod</span> -R 777 ./data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">docker compose up -d</span><br><span class="line"><span class="comment"># 放行端口</span></span><br><span class="line">sudo ufw allow 9200,9300,9301/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制容器内容的需要挂载的配置文件</span></span><br><span class="line">docker <span class="built_in">cp</span> -a elastic-search:/usr/share/elasticsearch/config data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开 config 的目录挂载，然后重新启动</span></span><br><span class="line"><span class="comment"># 这是为了方便挂载 config 目录，若直接挂载，es 初始化会有问题</span></span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure>
<h3 id="设置用户名和密码">设置用户名和密码</h3>
<p>按如下步骤设置用户名和密码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这个命令会依次为 elastic, kibana, logstash_system,beats_system 四个用户设置密码</span></span><br><span class="line">docker <span class="built_in">exec</span> -it elastic-search bin/elasticsearch-setup-passwords interactive</span><br></pre></td></tr></table></figure>
<p>还有一个更简单的方式，直接重置 <code>elastic</code> 用户的密码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it elastic-search bin/elasticsearch-reset-password -u elastic -s</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://oss.223434.xyz:2234/public/files/images/image-20241209164442267.png"
alt="image-20241209164442267" />
<figcaption aria-hidden="true">image-20241209164442267</figcaption>
</figure>
<p>此处密码一定要保存好。</p>
<p>若要重置为指定密码，可以使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it elastic-search bin/elasticsearch-reset-password -u elastic -i</span><br></pre></td></tr></table></figure>
<p>完整命令帮助如下：</p>
<figure>
<img data-src="https://oss.223434.xyz:2234/public/files/images/image-20241209164847822.png"
alt="image-20241209164847822" />
<figcaption aria-hidden="true">image-20241209164847822</figcaption>
</figure>
<h3 id="配置-kibana">配置 kibana</h3>
<h4 id="打开-kibana">打开 kibana</h4>
<p>使用浏览器打开 kibana</p>
<p>地址为：<code>http://docker-host-ip:9301</code></p>
<figure>
<img data-src="https://oss.223434.xyz:2234/public/files/images/image-20241209105942826.png"
alt="image-20241209105942826" />
<figcaption aria-hidden="true">image-20241209105942826</figcaption>
</figure>
<blockquote>
<p>右下角提示，需要配置 publicBaseUrl，由于是内网使用，可以不用管它</p>
</blockquote>
<h4 id="生成-enrollment-token">生成 enrollment token</h4>
<p>远程到 docker 宿主机，执行以下命令获取：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it elastic-search bin/elasticsearch-create-enrollment-token --scope kibana</span><br></pre></td></tr></table></figure>
<p>结果如图所示：</p>
<figure>
<img data-src="https://oss.223434.xyz:2234/public/files/images/image-20241209163029414.png"
alt="image-20241209163029414" />
<figcaption aria-hidden="true">image-20241209163029414</figcaption>
</figure>
<p>将 token 复制到输入框后，点确认。</p>
<h4 id="获取验证码">获取验证码</h4>
<p>上一步之后，会弹出验证码弹窗：</p>
<figure>
<img data-src="https://oss.223434.xyz:2234/public/files/images/image-20241209163236791.png"
alt="image-20241209163236791" />
<figcaption aria-hidden="true">image-20241209163236791</figcaption>
</figure>
<p>使用如下命令获取验证码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it kibana bin/kibana-verification-code</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://oss.223434.xyz:2234/public/files/images/image-20241209163443586.png"
alt="image-20241209163443586" />
<figcaption aria-hidden="true">image-20241209163443586</figcaption>
</figure>
<p>输入之后，等待配置完成。</p>
<h2 id="配置分词插件">配置分词插件</h2>
<h3 id="中文分词器对比">中文分词器对比</h3>
<p><a
href="https://blog.csdn.net/qq_18244417/article/details/109717745">Elasticsearch
常见分词器对比区别</a></p>
<p>最终选择 <a href="https://github.com/hankcs/HanLP">hankcs/HanLP:
中文分词</a> 作为分词器。</p>
<h3 id="hanlp-插件安装">HanLP 插件安装</h3>
<p>本节主要参考：<a
href="https://github.com/p3psi-boo/elasticsearch-analysis-hanlp-8.x">p3psi-boo/elasticsearch-analysis-hanlp-8.x</a></p>
<p>配置与测试可以在 <code>/app/dev_tools#/console</code>
开发者工具中进行</p>
<h4 id="下载分词器">下载分词器</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入到插件目录</span></span><br><span class="line"><span class="built_in">cd</span> data/plugins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载分词器插件</span></span><br><span class="line"><span class="comment"># 可以使用 export https_proxy=http://127.0.0.1:8087 为 wget 配置代理</span></span><br><span class="line">wget https://github.com/p3psi-boo/elasticsearch-analysis-hanlp-8.x/releases/download/v1.0.0/elasticsearch-analysis-hanlp.zip -O analysis-hanlp.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压并删除</span></span><br><span class="line">unzip analysis-hanlp.zip &amp;&amp; <span class="built_in">rm</span> analysis-hanlp.zip</span><br></pre></td></tr></table></figure>
<h4 id="下载分词模型">下载分词模型</h4>
<p>analysis-hanlp
插件下载完成后，还需要下载分词模型，接着上一步继续操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> analysis-hanlp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载模型</span></span><br><span class="line">wget https://file.hankcs.com/hanlp/data-for-1.7.5.zip</span><br><span class="line"><span class="comment"># 解压到 data 目录并删除</span></span><br><span class="line">unzip data-for-1.7.5.zip &amp;&amp; <span class="built_in">rm</span> data-for-1.7.5.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 elastic-search 容器</span></span><br><span class="line">docker restart elastic-search</span><br></pre></td></tr></table></figure>
<h2 id="修改默认分词器">修改默认分词器</h2>
<p>打开 kibana 的控制台 <a
href="http://192.168.23.30:9301/app/dev_tools#/console">Console - Dev
Tools - Elastic</a>，在里面输入执行命令或者直接通过 http 请求接口。</p>
<p>本节主要参考：<a
href="https://www.elastic.co/guide/en/elasticsearch/reference/current/specify-analyzer.html#specify-index-time-default-analyzer">Specify
an analyzer</a></p>
<h3 id="创建索引">创建索引</h3>
<p>以下参数会创建一个 search-iepc-document 索引并设置 hanlp
为默认分词器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建索引</span></span><br><span class="line">PUT /search-iepc-document</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;number_of_shards&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;number_of_replicas&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;analysis&quot;</span>: &#123;</span><br><span class="line">      <span class="comment"># 自定义token器</span></span><br><span class="line">      <span class="string">&quot;tokenizer&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;hanlp_tokenizer&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="string">&quot;hanlp&quot;</span>,</span><br><span class="line">          <span class="string">&quot;enable_custom_config&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">&quot;enable_custom_dictionary&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">&quot;enable_number_quantifier_recognize&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">&quot;enable_place_recognize&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">&quot;enable_organization_recognize&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">&quot;enable_stop_dictionary&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;analyzer&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;default&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;filter&quot;</span>: [<span class="string">&quot;lowercase&quot;</span>],</span><br><span class="line">          <span class="string">&quot;tokenizer&quot;</span>: <span class="string">&quot;hanlp_tokenizer&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;hanlp_analyzer&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;tokenizer&quot;</span>: <span class="string">&quot;hanlp_tokenizer&quot;</span>,</span><br><span class="line">          <span class="string">&quot;filter&quot;</span>: [<span class="string">&quot;lowercase&quot;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="comment"># 包含两个字段</span></span><br><span class="line">    <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;fileId&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;content&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="为索引创建默认分词器">为索引创建默认分词器</h3>
<p>若要修改设置，可以先关闭索引，然后更新设置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭服务</span></span><br><span class="line">POST search-iepc-document/_close</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开服务</span></span><br><span class="line">POST search-iepc-document/_open</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认分词器</span></span><br><span class="line">PUT search-iepc-document/_settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;analysis&quot;</span>: &#123;</span><br><span class="line">      <span class="comment"># 定义 tokenizer</span></span><br><span class="line">      <span class="string">&quot;tokenizer&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;hanlp_tokenizer&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="string">&quot;hanlp&quot;</span>,</span><br><span class="line">          <span class="string">&quot;enable_custom_config&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">&quot;enable_custom_dictionary&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">&quot;enable_number_quantifier_recognize&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">&quot;enable_place_recognize&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">&quot;enable_organization_recognize&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">&quot;enable_stop_dictionary&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment"># 定义 analyzer</span></span><br><span class="line">      <span class="string">&quot;analyzer&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;default&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;filter&quot;</span>: [<span class="string">&quot;lowercase&quot;</span>],</span><br><span class="line">          <span class="string">&quot;tokenizer&quot;</span>: <span class="string">&quot;hanlp_tokenizer&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;hanlp_analyzer&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;tokenizer&quot;</span>: <span class="string">&quot;hanlp_tokenizer&quot;</span>,</span><br><span class="line">          <span class="string">&quot;filter&quot;</span>: [<span class="string">&quot;lowercase&quot;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="生成-api_key">生成 API_KEY</h2>
<p>为了能够通过 API 调用，需要生成一个 API_KEY。</p>
<p>访问 Kibana 这个页面进行生成：<a
href="http://192.168.23.30:9301/app/management/security/api_keys/">http://host:9301/app/management/security/api_keys</a></p>
<p>更加详细的权限控制参考：<a
href="https://www.elastic.co/guide/en/elasticsearch/reference/8.12/security-api-create-api-key.html#security-api-create-api-key-request-body">Create
API key API</a></p>
<p>在配置时，建议启用受限权限：</p>
<figure>
<img data-src="https://oss.223434.xyz:2234/public/files/images/image-20241210103304902.png"
alt="image-20241210103304902" />
<figcaption aria-hidden="true">image-20241210103304902</figcaption>
</figure>
<h2 id="python-连接">python 连接</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> Elasticsearch</span><br><span class="line"></span><br><span class="line">client = Elasticsearch(</span><br><span class="line">    <span class="string">&quot;https://192.168.23.30:9200&quot;</span>,</span><br><span class="line">    api_key=<span class="string">&quot;T0xWJRucldVOHM6MwTUJVLWJfS33lJeSkZQcE1Z3xVFBDUQ==&quot;</span>,</span><br><span class="line">    <span class="comment"># verify_certs=False, # 关闭证书验证, 开发中可以启用</span></span><br><span class="line">    ca_certs=<span class="string">&quot;certs/elastic-search.crt&quot;</span>, <span class="comment"># 证书从 elastic-search 容器中的 config/certs 中复制</span></span><br><span class="line">    ssl_assert_hostname=<span class="literal">False</span>,  <span class="comment"># 禁用主机名验证</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="常用-kibana-控制台命令">常用 kibana 控制台命令</h2>
<p>以下命令可直接在 kibana 的控制台 <a
href="http://192.168.23.30:9301/app/dev_tools#/console">/app/dev_tools#/console</a>
中使用</p>
<figure>
<img data-src="https://oss.223434.xyz:2234/public/files/images/image-20241210104240909.png"
alt="image-20241210104240909" />
<figcaption aria-hidden="true">image-20241210104240909</figcaption>
</figure>
<p>详情如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看分词效果</span></span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;hanlp&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;受弯构件在进行正截面抗弯承载力计算。美国,|=阿拉斯加州发生8.0级地震&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建索引</span></span><br><span class="line">PUT /search-iepc-document</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;number_of_shards&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;number_of_replicas&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;analysis&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;tokenizer&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;hanlp_tokenizer&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="string">&quot;hanlp&quot;</span>,</span><br><span class="line">          <span class="string">&quot;enable_custom_config&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">&quot;enable_custom_dictionary&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">&quot;enable_number_quantifier_recognize&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">&quot;enable_place_recognize&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">&quot;enable_organization_recognize&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">&quot;enable_stop_dictionary&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;analyzer&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;default&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;filter&quot;</span>: [<span class="string">&quot;lowercase&quot;</span>],</span><br><span class="line">          <span class="string">&quot;tokenizer&quot;</span>: <span class="string">&quot;hanlp_tokenizer&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;hanlp_analyzer&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;tokenizer&quot;</span>: <span class="string">&quot;hanlp_tokenizer&quot;</span>,</span><br><span class="line">          <span class="string">&quot;filter&quot;</span>: [<span class="string">&quot;lowercase&quot;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;fileId&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;content&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认分词器</span></span><br><span class="line">PUT search-iepc-document/_settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;analysis&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;tokenizer&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;hanlp_tokenizer&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="string">&quot;hanlp&quot;</span>,</span><br><span class="line">          <span class="string">&quot;enable_custom_config&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">&quot;enable_custom_dictionary&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">&quot;enable_number_quantifier_recognize&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">&quot;enable_place_recognize&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">&quot;enable_organization_recognize&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">&quot;enable_stop_dictionary&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;analyzer&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;default&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;filter&quot;</span>: [<span class="string">&quot;lowercase&quot;</span>],</span><br><span class="line">          <span class="string">&quot;tokenizer&quot;</span>: <span class="string">&quot;hanlp_tokenizer&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;hanlp_analyzer&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;tokenizer&quot;</span>: <span class="string">&quot;hanlp_tokenizer&quot;</span>,</span><br><span class="line">          <span class="string">&quot;filter&quot;</span>: [<span class="string">&quot;lowercase&quot;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">POST search-iepc-document/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;受弯构件在进行正截面抗弯承载力计算。美国,|=阿拉斯加州发生8.0级地震&quot;</span>,</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;hanlp_analyzer&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭服务</span></span><br><span class="line">POST search-iepc-document/_close</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开服务</span></span><br><span class="line">POST search-iepc-document/_open</span><br><span class="line"></span><br><span class="line">POST search-iepc-document/_analyze</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;text&quot;</span>: <span class="string">&quot;HanLP是面向生产环境的自然语言处理工具包。2021年HanLPv2.1为生产环境带来次世代最先进的多语种NLP技术。HanLP只做我们认为正确、先进的事情，而不一定是流行、权威的事情。晓美焰来到北京立方庭参观自然语义科技公司。当下雨天地面积水分外严重。总统普京与特朗普通电话讨论美国太空探索技术公司。采用优等生鲜肉，欢迎新老师生前来就餐。&quot;</span>,</span><br><span class="line">    <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;hanlp_analyzer&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按内容搜索</span></span><br><span class="line">POST search-iepc/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;content&quot;</span>: <span class="string">&quot;桥梁 支座 要求&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复杂查询</span></span><br><span class="line"><span class="comment"># 按内容搜索</span></span><br><span class="line">POST search-iepc/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;filter&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;fileId&quot;</span>: <span class="string">&quot;1713859954114&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ], </span><br><span class="line">      <span class="string">&quot;must&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;content&quot;</span>: <span class="string">&quot;混凝土压杆承载力设计值如何计算&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;fields&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;content&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>:<span class="string">&quot;plain&quot;</span>,</span><br><span class="line">          <span class="string">&quot;order&quot;</span>: <span class="string">&quot;score&quot;</span>,</span><br><span class="line">          <span class="string">&quot;number_of_fragments&quot;</span>: 3</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一般通用查询</span></span><br><span class="line">POST search-iepc/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;must&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;content&quot;</span>: <span class="string">&quot;混凝土压杆承载力设计值如何计算&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;fields&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;content&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>:<span class="string">&quot;plain&quot;</span>,</span><br><span class="line">          <span class="string">&quot;order&quot;</span>: <span class="string">&quot;score&quot;</span>,</span><br><span class="line">          <span class="string">&quot;number_of_fragments&quot;</span>: 3</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按词出现的先后顺序查找</span></span><br><span class="line">POST search-iepc/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;match_phrase&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;content&quot;</span>: <span class="string">&quot;抗裂验算 全预应力 混凝土&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按先后顺序查询</span></span><br><span class="line">POST search-iepc/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;content&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;query&quot;</span>: <span class="string">&quot;抗裂验算 全预应力 混凝土&quot;</span>,</span><br><span class="line">        <span class="string">&quot;operator&quot;</span>: <span class="string">&quot;and&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 id 查找数据</span></span><br><span class="line">GET search-iepc/_doc/66150b2166d66170065f78d2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定id的数据</span></span><br><span class="line">POST search-iepc/_delete_by_query</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;filter&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;ids&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;values&quot;</span>: [<span class="string">&quot;661f97cb2d1b78567953f85e&quot;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找但不评分</span></span><br><span class="line">GET search-iepc/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;constant_score&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;filter&quot;</span>:&#123;</span><br><span class="line">         <span class="string">&quot;term&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;fileId&quot;</span>: 1713488916377</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 fileId 查找删除数据</span></span><br><span class="line">POST search-iepc/_delete_by_query</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;constant_score&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;filter&quot;</span>:&#123;</span><br><span class="line">         <span class="string">&quot;term&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;fileId&quot;</span>: 1713431812754</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空所有</span></span><br><span class="line">POST search-iepc/_delete_by_query</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;match_all&quot;</span>:&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="结语">结语</h2>
<p>上面的安装方式使用了
elasticsearch-analysis-hanlp，这种方式有个弊端，无法快速迭代分词器。</p>
<p>后期若有升级需要，可以将 hanlp
独立成服务，然后制作一个网络分词器插件进行调用。</p>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a
href="https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started.html">Elasticsearch
Guide 8.16</a></li>
<li><a
href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html">Install
Elasticsearch with Docker</a></li>
<li><a
href="https://github.com/edisonwd/hanlp-jupyterlab-docker">edisonwd/hanlp-jupyterlab-docker</a></li>
<li><a href="https://hub.docker.com/r/walterinsh/hanlp">walterinsh/hanlp
- Docker Image | Docker Hub</a></li>
<li><a
href="https://github.com/KennFalcon/elasticsearch-analysis-hanlp">中文分词器：KennFalcon/elasticsearch-analysis-hanlp:
HanLP Analyzer for Elasticsearch (github.com)</a></li>
</ol>
]]></content>
      <categories>
        <category>Software</category>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Frp客户端实现反向代理</title>
    <url>/posts/2021/3H6CDHV.html</url>
    <content><![CDATA[<p>当我们使用公益的Frp服务端时，我们对Frp服务器没有管理权限，此时，我们可用的端口可能就只有一个，为了能够在内网机器部署多个应用，我们就需要在内网机实现反向代理和Https。那么要如何实现呢？请听我娓娓道来。</p>
<span id="more"></span>
<h2 id="域名购买">域名购买</h2>
<p>要实现反向代理，必须要有一个域名，建议在阿里云购买域名，因为阿里云域名可以很方便的实现
Let's Encrypt 证书 DNS 认证及自动更新。</p>
<h2 id="安装-frp-客户端">安装 Frp 客户端</h2>
<p>软件安装教程，请自行在网上获取，本人采用 scoop 安装，可以使用
<code>scoop install frp</code> 进行安装。</p>
<p><strong>配置：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连接frp服务器</span></span><br><span class="line">[<span class="string">common</span>]</span><br><span class="line"><span class="string">server_addr</span> <span class="string">=</span> <span class="string">xxx.xxx.xxx.xxx</span></span><br><span class="line"><span class="comment"># frp 服务连接的端口</span></span><br><span class="line"><span class="string">server_port</span> <span class="string">=</span> <span class="number">4431</span></span><br><span class="line"><span class="string">token=</span> <span class="string">asfsdf32894sdf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站1</span></span><br><span class="line">[<span class="string">http1</span>]</span><br><span class="line"><span class="string">type</span> <span class="string">=</span> <span class="string">https</span></span><br><span class="line"><span class="string">custom_domains</span> <span class="string">=</span> <span class="string">web1.example.com</span></span><br><span class="line"><span class="string">local_port</span> <span class="string">=</span> <span class="number">443</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站2</span></span><br><span class="line">[<span class="string">http2</span>]</span><br><span class="line"><span class="string">type</span> <span class="string">=</span> <span class="string">https</span></span><br><span class="line"><span class="string">custom_domains</span> <span class="string">=</span> <span class="string">web2.example.com</span></span><br><span class="line"><span class="string">local_port</span> <span class="string">=</span> <span class="number">443</span></span><br></pre></td></tr></table></figure>
<p>客户端这样设置，是为了将所有流量原封不动的转发到本机的443端口，然后再由本机的宝塔面板安装反向代理软件（推荐
nginx）来反向代理请求。</p>
<h2 id="安装宝塔面板">安装宝塔面板</h2>
<p>不论是 Linux 或者 Windows
Server，都可以安装宝塔面板。宝塔面板可以很方便搭建网络环境，也可以很方便实现
SSL 证书的自动更新。对于新手来说，非常友好。</p>
<p>下载地址：https://www.bt.cn</p>
<p>宝塔面板安装完成后，就可以在上面建立网站了，由于所有流量都聚集在本机的
443
端口，所以，宝塔面板首先要安装反向代理软件，然后再将请求代理到不同的网站。</p>
<p>由于 frp 原封不动地转发了 https 流量，所以 https
的证书就可以在反向代理软件中配置了。宝塔面板网站安装及申请 SSL
教程请在网上自行查找。</p>
]]></content>
      <categories>
        <category>Software</category>
        <category>Frp</category>
      </categories>
      <tags>
        <tag>frp</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 中 branch 与 tag 的区别和使用场景</title>
    <url>/posts/2021/3RHTYZB.html</url>
    <content><![CDATA[<p>正文开始之前，我想我们需要弄明白几个问题：</p>
<ol type="1">
<li>tag 是什么？</li>
<li>使用 tag 的好处？</li>
<li>tag 和 branch 的区别以及使用场景？</li>
</ol>
<span id="more"></span>
<h2 id="tag-是什么">tag 是什么</h2>
<p>tag , 翻译过来是标签的意思，顾名思义，标签是为了标记某种事物。
它实际上是 Git 版本库的一个快照，指向某个 commit 的指针。</p>
<h2 id="使用tag-的好处">使用tag 的好处</h2>
<p>tag
的存在，是因为我们需要这种标记的功能。目前的项目开发中，当发布版本时 tag
就派上用场了。例如 v1.0.1，v1.0.2… ，发布的时候，只需要在 master
中打上一个标签就可以了，而不需要一个版本对应一个分支。</p>
<h2 id="区别和使用场景">区别和使用场景</h2>
<p>想到这里，你可能觉得 tag 和 branch
有点相似。没错，的确是有点像，但是它们的职责分工和本质都是不同的。</p>
<p>tag 对应某次 commit, 是一个点，是不可移动的。</p>
<p>branch 对应一系列 commit，是很多点连成的一根线，有一个HEAD
指针，是可以依靠 HEAD 指针移动的。</p>
<p>所以，两者的区别决定了使用方式，改动代码用 branch ,不改动只查看用
tag。</p>
<p>tag 和 branch 的相互配合使用，有时候起到非常方便的效果，例如
已经发布了 v1.0 v2.0 v3.0
三个版本，这个时候，我突然想不改现有代码的前提下，在 v2.0
的基础上加个新功能，作为 v4.0 发布。就可以 检出 v2.0 的代码作为一个
branch ，然后作为开发分支。</p>
<h2 id="注意">注意</h2>
<p>需要说明的是，创建 tag 是基于本地分支的
commit，而且与分支的推送是两回事，就是说分支已经推送到远程了，但是你的
tag 并没有，如果把 tag 推送到远程分支上，需要另外执行 tag
的推送命令。</p>
<p><a href="/2020/189RMV7#标签">点击查看关于tag的操作总结</a></p>
<h2 id="参考">参考</h2>
<p>本文参考自：https://blog.csdn.net/lcgoing/article/details/86241784</p>
]]></content>
      <categories>
        <category>Software</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>git 常用命令总结</title>
    <url>/posts/2020/189RMV7.html</url>
    <content><![CDATA[<p>本文记录 Git 在日常使用中需要掌握的原理和基本命令，提升使用效率。</p>
<span id="more"></span>
<h2 id="概念理解">概念理解</h2>
<p>使用 Git
之前需要对它的储存有一个清晰的了解，在使用中才能得心应手。</p>
<p>Git 有三种状态，你的文件可能处于其中之一：
<strong>已提交（committed）</strong>、<strong>已修改（modified）</strong>
和 <strong>已暂存（staged）</strong>。</p>
<ul>
<li><strong>已修改（modified）</strong>表示修改了文件，但还没保存到数据库中。</li>
<li><strong>已暂存（staged）</strong>表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li>
<li><strong>已提交（committed）</strong>表示数据已经安全地保存在本地数据库中。</li>
</ul>
<figure>
<img data-src="https://img-blog.csdnimg.cn/20191020165025184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1cxMTA3MTAxMzEw,size_16,color_FFFFFF,t_70"
alt="git三大分区" />
<figcaption aria-hidden="true">git三大分区</figcaption>
</figure>
<h2 id="配置">配置</h2>
<p>Git 的设置文件为
.gitconfig，它可以在用户主目录下(全局配置)，也可以在项目目录下(项目配置)。</p>
<ol type="1">
<li>显示当前的Git配置</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">git config --<span class="keyword">list</span></span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>编辑 Git 配置文件</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">git config -e [--<span class="keyword">global</span>]</span><br></pre></td></tr></table></figure>
<p><strong>常用 Git 配置：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 颜色设置</span></span><br><span class="line">git config --<span class="keyword">global</span> color.ui <span class="literal">true</span> <span class="comment"># git status等命令自动着色</span></span><br><span class="line">git config --<span class="keyword">global</span> color.status auto</span><br><span class="line">git config --<span class="keyword">global</span> color.diff auto</span><br><span class="line">git config --<span class="keyword">global</span> color.branch auto</span><br><span class="line">git config --<span class="keyword">global</span> color.interactive auto</span><br><span class="line"><span class="comment"># 添加代理</span></span><br><span class="line">git config --<span class="keyword">global</span> https.proxy http:<span class="comment">//127.0.0.1:1080</span></span><br><span class="line">git config --<span class="keyword">global</span> https.proxy https:<span class="comment">//127.0.0.1:1080</span></span><br><span class="line"><span class="comment">#移除代理</span></span><br><span class="line">git config --<span class="keyword">global</span> --<span class="keyword">unset</span> http.proxy</span><br><span class="line">git config --<span class="keyword">global</span> --<span class="keyword">unset</span> https.proxy</span><br></pre></td></tr></table></figure>
<h2 id="获取-git-仓库">获取 Git 仓库</h2>
<p><strong>1. 在已存在目录中初始化仓库</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<p><strong>2. 克隆现有的仓库</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一种方式</span></span><br><span class="line">git clone &lt;url&gt; </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 第二种方式,可以将目标目录进行重命名</span></span><br><span class="line">git clone &lt;url&gt; targetDirectoryName</span><br></pre></td></tr></table></figure>
<h2 id="增删文件">增删文件</h2>
<p><strong>1. 添加文件/文件夹</strong></p>
<p>可以用 <code>git add</code>
开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。
可以将这个命令理解为“将内容添加到下一次提交中”。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">git add [<span class="type">file1</span>] [<span class="type">file2</span>] ...</span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">git add [<span class="type">dir</span>]</span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">git add . 或 git add <span class="literal">-a</span></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">git add <span class="literal">-p</span></span><br></pre></td></tr></table></figure>
<p><strong>2. 删除文件</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> [<span class="type">file1</span>] [<span class="type">file2</span>] ...</span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">git <span class="built_in">rm</span> <span class="literal">--cached</span> [<span class="type">file</span>]</span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">git <span class="built_in">mv</span> [<span class="type">file</span>-<span class="type">original</span>] [<span class="type">file</span>-<span class="type">renamed</span>]</span><br></pre></td></tr></table></figure>
<h2 id="代码提交">代码提交</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">git commit <span class="literal">-m</span> [<span class="type">message</span>]</span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">git commit [<span class="type">file1</span>] [<span class="type">file2</span>] ... <span class="literal">-m</span> [<span class="type">message</span>]</span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区，不会提交未跟踪的文件或者目录</span></span><br><span class="line">git commit <span class="literal">-a</span></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">git commit <span class="literal">-v</span></span><br><span class="line"><span class="comment"># 将add和commit合为一步，该操作也不会提交未跟踪的文件或者目录</span></span><br><span class="line">git commit <span class="literal">-am</span> <span class="string">&#x27;message&#x27;</span></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">git commit <span class="literal">--amend</span> <span class="literal">-m</span> [<span class="type">message</span>]</span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">git commit <span class="literal">--amend</span> [<span class="type">file1</span>] [<span class="type">file2</span>] ...</span><br></pre></td></tr></table></figure>
<h2 id="分支">分支</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">git branch <span class="literal">-r</span></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">git branch <span class="literal">-a</span></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line"><span class="variable">$</span> git branch [<span class="type">branch</span>-<span class="type">name</span>]</span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line"><span class="variable">$</span> git checkout <span class="literal">-b</span> [<span class="type">branch</span>]</span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line"><span class="variable">$</span> git branch [<span class="type">branch</span>] [<span class="type">commit</span>]</span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line"><span class="variable">$</span> git branch <span class="literal">--track</span> [<span class="type">branch</span>] [<span class="type">remote</span>-<span class="type">branch</span>]</span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line"><span class="variable">$</span> git checkout [<span class="type">branch</span>-<span class="type">name</span>]</span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line"><span class="variable">$</span> git checkout -</span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line"><span class="variable">$</span> git branch <span class="literal">--set-upstream</span> [<span class="type">branch</span>] [<span class="type">remote</span>-<span class="type">branch</span>]</span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line"><span class="variable">$</span> git merge [<span class="type">branch</span>]</span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line"><span class="variable">$</span> git cherry<span class="literal">-pick</span> [<span class="type">commit</span>]</span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line"><span class="variable">$</span> git branch <span class="literal">-d</span> [<span class="type">branch</span>-<span class="type">name</span>]</span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line"><span class="variable">$</span> git push origin <span class="literal">--delete</span> [<span class="type">branch</span>-<span class="type">name</span>]</span><br><span class="line"><span class="variable">$</span> git branch <span class="literal">-dr</span> [<span class="type">remote</span>/<span class="type">branch</span>]</span><br><span class="line"><span class="comment"># 检出版本v2.0</span></span><br><span class="line"><span class="variable">$</span> git checkout v2.<span class="number">0</span></span><br><span class="line"><span class="comment"># 从远程分支develop创建新本地分支devel并检出</span></span><br><span class="line"><span class="variable">$</span> git checkout <span class="literal">-b</span> devel origin/develop</span><br><span class="line"><span class="comment"># 检出head版本的README文件（可用于修改错误回退）</span></span><br><span class="line">git checkout <span class="literal">--</span> README </span><br></pre></td></tr></table></figure>
<h2 id="标签">标签</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">git tag</span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">git tag [<span class="type">tag</span>]</span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">git tag [<span class="type">tag</span>] [<span class="type">commit</span>]</span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">git tag <span class="literal">-d</span> [<span class="type">tag</span>]</span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">git push origin <span class="literal">-d</span> [<span class="type">tag</span>]</span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">git show [<span class="type">tag</span>]</span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">git push [<span class="type">remote</span>] [<span class="type">tag</span>]</span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">git push [<span class="type">remote</span>] <span class="literal">--tags</span></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">git checkout <span class="literal">-b</span> [<span class="type">branch</span>] [<span class="type">tag</span>]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>分支与标签的区别，<a href="/2021/3RHTYZB">Git 中 branch 与 tag
的区别和使用场景</a></p>
</blockquote>
<h2 id="查看信息">查看信息</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">git status</span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">git log</span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">git log <span class="literal">--stat</span></span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line">git log <span class="literal">-S</span> [<span class="type">keyword</span>]</span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line">git log [<span class="type">tag</span>] HEAD <span class="literal">--pretty</span>=format:%s</span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span></span><br><span class="line">git log [<span class="type">tag</span>] HEAD <span class="literal">--grep</span> feature</span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">git log <span class="literal">--follow</span> [<span class="type">file</span>]</span><br><span class="line">git whatchanged [<span class="type">file</span>]</span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">git log <span class="literal">-p</span> [<span class="type">file</span>]</span><br><span class="line"><span class="comment"># 显示过去5次提交</span></span><br><span class="line">git log <span class="literal">-5</span> <span class="literal">--pretty</span> <span class="literal">--oneline</span></span><br><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line">git shortlog <span class="literal">-sn</span></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">git blame [<span class="type">file</span>]</span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">git <span class="built_in">diff</span></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">git <span class="built_in">diff</span> <span class="literal">--cached</span> [<span class="type">file</span>]</span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">git <span class="built_in">diff</span> HEAD</span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">git <span class="built_in">diff</span> [<span class="type">first</span>-<span class="type">branch</span>]...[<span class="type">second</span>-<span class="type">branch</span>]</span><br><span class="line"><span class="comment"># 显示今天你写了多少行代码</span></span><br><span class="line">git <span class="built_in">diff</span> <span class="literal">--shortstat</span> <span class="string">&quot;@&#123;0 day ago&#125;&quot;</span></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">git show [<span class="type">commit</span>]</span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">git show <span class="literal">--name-only</span> [<span class="type">commit</span>]</span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">git show [<span class="type">commit</span>]:[<span class="type">filename</span>]</span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">git reflog</span><br></pre></td></tr></table></figure>
<h2 id="远程同步">远程同步</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">git fetch [<span class="type">remote</span>]</span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">git remote <span class="literal">-v</span></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">git remote show [<span class="type">remote</span>]</span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">git remote add [<span class="type">shortname</span>] [<span class="type">url</span>]</span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">git pull [<span class="type">remote</span>] [<span class="type">branch</span>]</span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">git push [<span class="type">remote</span>] [<span class="type">branch</span>]</span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">git push [<span class="type">remote</span>] <span class="literal">--force</span></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">git push [<span class="type">remote</span>] <span class="literal">--all</span></span><br></pre></td></tr></table></figure>
<h2 id="撤销">撤销</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">git checkout [<span class="type">file</span>]</span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">git checkout [<span class="type">commit</span>] [<span class="type">file</span>]</span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">git checkout .</span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">git reset [<span class="type">file</span>]</span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">git reset <span class="literal">--hard</span></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">git reset [<span class="type">commit</span>]</span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">git reset <span class="literal">--hard</span> [<span class="type">commit</span>]</span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">git reset <span class="literal">--keep</span> [<span class="type">commit</span>]</span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">git revert [<span class="type">commit</span>]</span><br><span class="line"><span class="comment"># 暂时将未提交的变化放入暂存区，稍后再从暂存区中移入</span></span><br><span class="line">git stash</span><br><span class="line">git stash pop</span><br><span class="line"><span class="comment"># 取消当前的合并操作</span></span><br><span class="line">git merge <span class="literal">--abort</span></span><br></pre></td></tr></table></figure>
<h2 id="其它">其它</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git init                                                  <span class="comment"># 初始化本地git仓库（创建新仓库）</span></span><br><span class="line">git config <span class="literal">--global</span> user.name <span class="string">&quot;xxx&quot;</span>                       <span class="comment"># 配置用户名</span></span><br><span class="line">git config <span class="literal">--global</span> user.email <span class="string">&quot;xxx@xxx.com&quot;</span>              <span class="comment"># 配置邮件</span></span><br><span class="line">git config <span class="literal">--global</span> color.ui true                         <span class="comment"># git status等命令自动着色</span></span><br><span class="line">git config <span class="literal">--global</span> color.status auto</span><br><span class="line">git config <span class="literal">--global</span> color.diff auto</span><br><span class="line">git config <span class="literal">--global</span> color.branch auto</span><br><span class="line">git config <span class="literal">--global</span> color.interactive auto</span><br><span class="line">git config <span class="literal">--global</span> <span class="literal">--unset</span> http.proxy                    <span class="comment"># remove  proxy configuration on git</span></span><br><span class="line">git clone git+ssh://git@<span class="number">192.168</span>.<span class="number">53.168</span>/VT.git             <span class="comment"># clone远程仓库</span></span><br><span class="line">git status                                                <span class="comment"># 查看当前版本状态（是否修改）</span></span><br><span class="line">git add xyz                                               <span class="comment"># 添加xyz文件至index</span></span><br><span class="line">git add .                                                 <span class="comment"># 增加当前子目录下所有更改过的文件至index</span></span><br><span class="line">git commit <span class="literal">-m</span> <span class="string">&#x27;xxx&#x27;</span>                                       <span class="comment"># 提交</span></span><br><span class="line">git commit <span class="literal">--amend</span> <span class="literal">-m</span> <span class="string">&#x27;xxx&#x27;</span>                               <span class="comment"># 合并上一次提交（用于反复修改）</span></span><br><span class="line">git commit <span class="literal">-am</span> <span class="string">&#x27;xxx&#x27;</span>                                      <span class="comment"># 将add和commit合为一步</span></span><br><span class="line">git <span class="built_in">rm</span> xxx                                                <span class="comment"># 删除index中的文件</span></span><br><span class="line">git <span class="built_in">rm</span> <span class="literal">-r</span> *                                               <span class="comment"># 递归删除</span></span><br><span class="line">git log                                                   <span class="comment"># 显示提交日志</span></span><br><span class="line">git log <span class="literal">-1</span>                                                <span class="comment"># 显示1行日志 -n为n行</span></span><br><span class="line">git log <span class="literal">-5</span></span><br><span class="line">git log <span class="literal">--stat</span>                                            <span class="comment"># 显示提交日志及相关变动文件</span></span><br><span class="line">git log <span class="literal">-p</span> <span class="literal">-m</span></span><br><span class="line">git show dfb02e6e4f2f7b573337763e5c0013802e392818         <span class="comment"># 显示某个提交的详细内容</span></span><br><span class="line">git show dfb02                                            <span class="comment"># 可只用commitid的前几位</span></span><br><span class="line">git show HEAD                                             <span class="comment"># 显示HEAD提交日志</span></span><br><span class="line">git show HEAD^                                            <span class="comment"># 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</span></span><br><span class="line">git tag                                                   <span class="comment"># 显示已存在的tag</span></span><br><span class="line">git tag <span class="literal">-a</span> v2.<span class="number">0</span> <span class="literal">-m</span> <span class="string">&#x27;xxx&#x27;</span>                                  <span class="comment"># 增加v2.0的tag</span></span><br><span class="line">git show v2.<span class="number">0</span>                                             <span class="comment"># 显示v2.0的日志及详细内容</span></span><br><span class="line">git log v2.<span class="number">0</span>                                              <span class="comment"># 显示v2.0的日志</span></span><br><span class="line">git <span class="built_in">diff</span>                                                  <span class="comment"># 显示所有未添加至index的变更</span></span><br><span class="line">git <span class="built_in">diff</span> <span class="literal">--cached</span>                                         <span class="comment"># 显示所有已添加index但还未commit的变更</span></span><br><span class="line">git <span class="built_in">diff</span> HEAD^                                            <span class="comment"># 比较与上一个版本的差异</span></span><br><span class="line">git <span class="built_in">diff</span> HEAD <span class="literal">--</span> ./lib                                    <span class="comment"># 比较与HEAD版本lib目录的差异</span></span><br><span class="line">git <span class="built_in">diff</span> origin/master..master                            <span class="comment"># 比较远程分支master上有本地分支master上没有的</span></span><br><span class="line">git <span class="built_in">diff</span> origin/master..master <span class="literal">--stat</span>                     <span class="comment"># 只显示差异的文件，不显示具体内容</span></span><br><span class="line">git remote add origin git+ssh://git@<span class="number">192.168</span>.<span class="number">53.168</span>/VT.git <span class="comment"># 增加远程定义（用于push/pull/fetch）</span></span><br><span class="line">git branch                                                <span class="comment"># 显示本地分支</span></span><br><span class="line">git branch <span class="literal">--contains</span> <span class="number">50089</span>                               <span class="comment"># 显示包含提交50089的分支</span></span><br><span class="line">git branch <span class="literal">-a</span>                                             <span class="comment"># 显示所有分支</span></span><br><span class="line">git branch <span class="literal">-r</span>                                             <span class="comment"># 显示所有原创分支</span></span><br><span class="line">git branch <span class="literal">--merged</span>                                       <span class="comment"># 显示所有已合并到当前分支的分支</span></span><br><span class="line">git branch <span class="literal">--no-merged</span>                                    <span class="comment"># 显示所有未合并到当前分支的分支</span></span><br><span class="line">git branch <span class="literal">-m</span> master master_copy                          <span class="comment"># 本地分支改名</span></span><br><span class="line">git checkout <span class="literal">-b</span> master_copy                               <span class="comment"># 从当前分支创建新分支master_copy并检出</span></span><br><span class="line">git checkout <span class="literal">-b</span> master master_copy                        <span class="comment"># 上面的完整版</span></span><br><span class="line">git checkout features/performance                         <span class="comment"># 检出已存在的features/performance分支</span></span><br><span class="line">git checkout <span class="literal">--track</span> hotfixes/BJVEP933                    <span class="comment"># 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</span></span><br><span class="line">git checkout v2.<span class="number">0</span>                                         <span class="comment"># 检出版本v2.0</span></span><br><span class="line">git checkout <span class="literal">-b</span> devel origin/develop                      <span class="comment"># 从远程分支develop创建新本地分支devel并检出</span></span><br><span class="line">git checkout <span class="literal">--</span> README                                    <span class="comment"># 检出head版本的README文件（可用于修改错误回退）</span></span><br><span class="line">git merge origin/master                                   <span class="comment"># 合并远程master分支至当前分支</span></span><br><span class="line">git cherry<span class="literal">-pick</span> ff44785404a8e                             <span class="comment"># 合并提交ff44785404a8e的修改</span></span><br><span class="line">git push origin master                                    <span class="comment"># 将当前分支push到远程master分支</span></span><br><span class="line">git push origin :hotfixes/BJVEP933                        <span class="comment"># 删除远程仓库的hotfixes/BJVEP933分支</span></span><br><span class="line">git push <span class="literal">--tags</span>                                           <span class="comment"># 把所有tag推送到远程仓库</span></span><br><span class="line">git fetch                                                 <span class="comment"># 获取所有远程分支（不更新本地分支，另需merge）</span></span><br><span class="line">git fetch <span class="literal">--prune</span>                                         <span class="comment"># 获取所有原创分支并清除服务器上已删掉的分支</span></span><br><span class="line">git pull origin master                                    <span class="comment"># 获取远程分支master并merge到当前分支</span></span><br><span class="line">git <span class="built_in">mv</span> README README2                                     <span class="comment"># 重命名文件README为README2</span></span><br><span class="line">git reset <span class="literal">--hard</span> HEAD                                     <span class="comment"># 将当前版本重置为HEAD（通常用于merge失败回退）</span></span><br><span class="line">git rebase</span><br><span class="line">git branch <span class="literal">-d</span> hotfixes/BJVEP933                           <span class="comment"># 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</span></span><br><span class="line">git branch <span class="literal">-D</span> hotfixes/BJVEP933                           <span class="comment"># 强制删除分支hotfixes/BJVEP933</span></span><br><span class="line">git <span class="built_in">ls</span><span class="literal">-files</span>                                              <span class="comment"># 列出git index包含的文件</span></span><br><span class="line">git <span class="built_in">show-branch</span>                                           <span class="comment"># 图示当前分支历史</span></span><br><span class="line">git <span class="built_in">show-branch</span> <span class="literal">--all</span>                                     <span class="comment"># 图示所有分支历史</span></span><br><span class="line">git whatchanged                                           <span class="comment"># 显示提交历史对应的文件修改</span></span><br><span class="line">git revert dfb02e6e4f2f7b573337763e5c0013802e392818       <span class="comment"># 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</span></span><br><span class="line">git <span class="built_in">ls</span><span class="literal">-tree</span> HEAD                                          <span class="comment"># 内部命令：显示某个git对象</span></span><br><span class="line">git rev<span class="literal">-parse</span> v2.<span class="number">0</span>                                        <span class="comment"># 内部命令：显示某个ref对于的SHA1 HASH</span></span><br><span class="line">git reflog                                                <span class="comment"># 显示所有提交，包括孤立节点</span></span><br><span class="line">git show HEAD<span class="selector-tag">@</span>&#123;<span class="number">5</span>&#125;</span><br><span class="line">git show master<span class="selector-tag">@</span>&#123;yesterday&#125;                               <span class="comment"># 显示master分支昨天的状态</span></span><br><span class="line">git log <span class="literal">--pretty</span>=format:<span class="string">&#x27;%h %s&#x27;</span> <span class="literal">--graph</span>                   <span class="comment"># 图示提交日志</span></span><br><span class="line">git show HEAD~<span class="number">3</span></span><br><span class="line">git show <span class="literal">-s</span> <span class="literal">--pretty</span>=raw <span class="number">2</span>be7fcb476</span><br><span class="line">git stash                                                 <span class="comment"># 暂存当前修改，将所有至为HEAD状态</span></span><br><span class="line">git stash list                                            <span class="comment"># 查看所有暂存</span></span><br><span class="line">git stash show <span class="literal">-p</span> stash<span class="selector-tag">@</span>&#123;<span class="number">0</span>&#125;                               <span class="comment"># 参考第一次暂存</span></span><br><span class="line">git stash apply stash<span class="selector-tag">@</span>&#123;<span class="number">0</span>&#125;                                 <span class="comment"># 应用第一次暂存</span></span><br><span class="line">git grep <span class="string">&quot;delete from&quot;</span>                                    <span class="comment"># 文件中搜索文本“delete from”</span></span><br><span class="line">git grep <span class="literal">-e</span> <span class="string">&#x27;#define&#x27;</span> <span class="literal">--and</span> <span class="literal">-e</span> SORT_DIRENT</span><br><span class="line">git <span class="built_in">gc</span></span><br><span class="line">git fsck</span><br><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line">git archive</span><br></pre></td></tr></table></figure>
<h2 id="参考文章">参考文章</h2>
<p>[1]. https://git-scm.com/book/zh/v2</p>
<p>[2]. https://segmentfault.com/a/1190000039147662</p>
]]></content>
      <categories>
        <category>Software</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 中 .gitignore 语法</title>
    <url>/posts/2021/13VFWMA.html</url>
    <content><![CDATA[<p>可以创建一个名为 <code>.gitignore</code>
的文件，列出要忽略的文件的模式。</p>
<span id="more"></span>
<p>文件 <code>.gitignore</code> 的格式规范如下：</p>
<ul>
<li>所有空行或者以 <code>#</code> 开头的行都会被 Git 忽略。</li>
<li>可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。</li>
<li>匹配模式可以以（<code>/</code>）开头防止递归。</li>
<li>匹配模式可以以（<code>/</code>）结尾指定目录。</li>
<li>要忽略指定模式以外的文件或目录，可以在模式前加上叹号（<code>!</code>）取反。</li>
</ul>
<p>所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。</p>
<ul>
<li><p>星号（<code>*</code>）匹配零个或多个任意字符</p></li>
<li><p><code>[abc]</code> 匹配任何一个列在方括号中的字符
（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；</p></li>
<li><p>问号（<code>?</code>）只匹配一个任意字符</p></li>
<li><p>如果在方括号中使用短划线分隔两个字符，
表示所有在这两个字符范围内的都可以匹配（比如 <code>[0-9]</code>
表示匹配所有 0 到 9 的数字）</p></li>
<li><p>使用两个星号（<code>**</code>）表示匹配任意中间目录，比如
<code>a/**/z</code> 可以匹配 <code>a/z</code> 、 <code>a/b/z</code> 或
<code>a/b/c/z</code></p></li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 忽略所有的 .a 文件</span></span><br><span class="line">*.a</span><br><span class="line"><span class="comment"># 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件</span></span><br><span class="line">!lib.a</span><br><span class="line"><span class="comment"># 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO</span></span><br><span class="line">/TODO</span><br><span class="line"><span class="comment"># 忽略任何目录下名为 build 的文件夹</span></span><br><span class="line">build/</span><br><span class="line"><span class="comment"># 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt</span></span><br><span class="line">doc/*.txt</span><br><span class="line"><span class="comment"># 忽略 doc/ 目录及其所有子目录下的 .pdf 文件</span></span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure>
<p>一个仓库可能只根目录下有一个 <code>.gitignore</code>
文件，它递归地应用到整个仓库中。 然而，子目录下也可以有额外的
<code>.gitignore</code> 文件。子目录中的 <code>.gitignore</code>
文件中的规则只作用于它所在的目录中。</p>
<p>GitHub 有一个十分详细的针对数十种项目及语言的 <code>.gitignore</code>
文件列表， 可以在 https://github.com/github/gitignore 找到它。</p>
]]></content>
      <categories>
        <category>Software</category>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title>Git 实用小技巧</title>
    <url>/posts/2021/XG9YG0.html</url>
    <content><![CDATA[<p>本文总结了 Git
在使用中比较实用的一些小技巧，随着今后的使用逐渐补充。</p>
<span id="more"></span>
<h3 id="git-commit--m-换行">git commit -m 换行</h3>
<p>先输入第一个引号，按<code>Enter</code>即可换行，完成后再补齐后面的引号。</p>
]]></content>
      <categories>
        <category>Software</category>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title>Git 结束符不匹配导致提交时差异对比失效，表现为整个文件删除和新增</title>
    <url>/posts/2022/30QXK0B.html</url>
    <content><![CDATA[<p>今天换了电脑开发，发现在进行 <code>git commit</code>
之后，只要文件有修改，即使是一模一样的内容，都是先删除，然后再新增，无法保存仅修改部分的代码。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220315090318257.png"
alt="image-20220315090318257" />
<figcaption aria-hidden="true">image-20220315090318257</figcaption>
</figure>
<span id="more"></span>
<h2 id="正文">正文</h2>
<p>通过测试有如下发现：</p>
<ol type="1">
<li>对于原电脑的文件，仅在第一次编辑时，会发生上述情况</li>
<li>对于当前电脑的，git 提交时，不会出现上述情况</li>
</ol>
<p>由此，可以推测出，是新旧电脑在文件的处理上不一致导致的。顺着这个思路，开始解决这个问题。</p>
<p>通过 google，其原因是由于 <code>End of Line(eof:行尾结束符)</code>
不同导致的。其中</p>
<table>
<thead>
<tr class="header">
<th>EOF</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>CRLF</td>
<td>回车换行</td>
<td></td>
</tr>
<tr class="even">
<td>CR</td>
<td>回车</td>
<td></td>
</tr>
<tr class="odd">
<td>LF</td>
<td>换行</td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li>windows 上，行尾结束符为 <code>CRLF</code></li>
<li>unix 系统，行尾结束符为 <code>LF</code></li>
</ul>
<p>通过对比新旧电脑的文件，其原因确实如此。</p>
<p>解决方法有以下几个：</p>
<ul>
<li><p>修改 git 设置</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检出时自动切换成 CRLF 结束符</span></span><br><span class="line">git config <span class="literal">--global</span> core.autocrlf true</span><br></pre></td></tr></table></figure></li>
<li><p>在项目目录中通过 <code>.gitattributes</code> 来进行配置</p></li>
<li><p>如果使用了 prettier，可以用过 prettier 来进行设置</p></li>
<li><p>修改 vscode，全局设置</p>
<p>在 vscode 的配置中，搜索 <code>eol</code>，将其修改为
<code>LF</code></p></li>
<li><p>修改 vscode 项目级配置</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在项目根目录新建 .editorconfig 文件</span></span><br><span class="line"><span class="comment"># 在里面添加如下配置：</span></span><br><span class="line"></span><br><span class="line">root = true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = <span class="number">4</span></span><br><span class="line"><span class="comment"># 此处设置行尾结束符为 lf</span></span><br><span class="line">end_of_line = lf</span><br><span class="line">charset = utf<span class="literal">-8</span></span><br><span class="line">trim_trailing_whitespace = false</span><br><span class="line">insert_final_newline = false</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a
href="http://schacon.github.io/git/gitattributes.html">http://schacon.github.io/git/gitattributes.html</a></li>
<li><a
href="https://blog.csdn.net/weixin_30634661/article/details/99394687">vs
code设置保存时自动将CRLF 转换成 LF</a></li>
</ol>
]]></content>
      <categories>
        <category>Software</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 中自己常用别名总结</title>
    <url>/posts/2022/18J366C.html</url>
    <content><![CDATA[<p>本文主要记录自己在使用过程中用到的别名，方便快速进行配置。</p>
<span id="more"></span>
<h2 id="前言">前言</h2>
<p>Git 并不会在你输入部分命令时自动推断出你想要的命令。
如果不想每次都输入完整的 Git 命令，可以通过 <code>git config</code>
文件来轻松地为每一个命令设置一个别名。</p>
<h2 id="定义语法">定义语法</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git config <span class="literal">--global</span> alias.别名 <span class="string">&quot;组合命令&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">git config <span class="literal">--global</span> alias.cm <span class="string">&quot;commit -m&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 今后提交时，只需要输入下列命令即可</span></span><br><span class="line">git cm <span class="string">&quot;message&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="设置别名自动更正">设置别名自动更正</h2>
<p>使用 Git
别名的一个很酷的好处是它与自动更正功能的原生集成。如果你犯了错误，默认情况下，Git
会建议使用与你输入的命令相似的命令，包括别名。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git config <span class="literal">--global</span> help.autocorrect <span class="number">20</span></span><br></pre></td></tr></table></figure>
<h2 id="常用别名">常用别名</h2>
<p>直接将下面的代码整体复制到 <code>powershell</code>
中运行即可，包括注释也可以一并复制。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取所有配置的别名</span></span><br><span class="line">git config <span class="literal">--global</span> alias.alias <span class="string">&quot;config --get-regexp alias&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取最后一次提交的日志</span></span><br><span class="line">git config <span class="literal">--global</span> alias.last <span class="string">&#x27;log -1 --stat&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示log</span></span><br><span class="line">git config <span class="literal">--global</span> alias.lg <span class="string">&quot;log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有分支，并按提交日期对它们进行排序，优先显示最新的 git 分支</span></span><br><span class="line">git config <span class="literal">--global</span> alias.br <span class="string">&quot;branch -a --format=&#x27;%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) %(color:green)(%(committerdate:relative)) [%(authorname)]&#x27; --sort=-committerdate&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 快速提交代码</span></span><br><span class="line">git config <span class="literal">--global</span> alias.cm  <span class="string">&quot;commit -m&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 commit 内容</span></span><br><span class="line">git config <span class="literal">--global</span> alias.cmm  <span class="string">&quot;commit --amend&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># checkout 简写</span></span><br><span class="line">git config <span class="literal">--global</span> alias.ck <span class="string">&quot;checkout&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># merge 简写</span></span><br><span class="line">git config <span class="literal">--global</span> alias.mg <span class="string">&quot;merge&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pull push</span></span><br><span class="line">git config <span class="literal">--global</span> alias.pl <span class="string">&quot;pull&quot;</span></span><br><span class="line">git config <span class="literal">--global</span> alias.ps <span class="string">&quot;push&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add 和 commit 一起生效</span></span><br><span class="line">git config <span class="literal">--global</span> alias.save <span class="string">&quot;!git add -A &amp;&amp; git commit -m&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>git 中如果内容过长，想要退出时，可以按 <code>q</code> 退出</p>
</blockquote>
<p>如果别名扩展的前缀是感叹号<code>!</code>，则它将被视为 shell
命令。例如：</p>
<p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git config <span class="literal">--global</span> alias.save <span class="string">&quot;!git add -A &amp;&amp; git commit -m &#x27;feat: 新增别名&#x27;&quot;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="配置文件位置">配置文件位置</h2>
<p>git 的全局配置文件为：<code>C:\Users\%username%\.gitconfig</code></p>
<p>其中别名的配置内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[alias]</span><br><span class="line">        last = log -1 --stat</span><br><span class="line">        lg = log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit</span><br><span class="line">        alias = config --get-regexp alias</span><br><span class="line">        br = branch -a --format=&#x27;%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) %(color:green)(%(committerdate:relative)) [%(authorname)]&#x27; --sort=-committerdate</span><br><span class="line">        cm = commit -m</span><br><span class="line">        cmm = commit --amend</span><br><span class="line">        ck = checkout</span><br><span class="line">        mg = merge</span><br><span class="line">        pl = pull</span><br><span class="line">        ps = push</span><br><span class="line">        save = git push add -A &amp;&amp; git commit -m</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Software</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>yarn install 时提示无法连接 github</title>
    <url>/posts/2022/24T5YRV.html</url>
    <content><![CDATA[<p>在使用 <code>yarn install</code> 安装依赖包时，提示如下错误：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Command: git</span><br><span class="line">Arguments: <span class="built_in">ls</span><span class="literal">-remote</span> <span class="literal">--tags</span> <span class="literal">--heads</span> git://github.com/adobe<span class="literal">-webplatform</span>/eve.git</span><br><span class="line">Directory: D:\Develop\BIM\swToolsFrontEnd</span><br><span class="line">Output:</span><br><span class="line">fatal: unable to connect to github.com:</span><br><span class="line">github.com[<span class="number">0</span>: <span class="number">20.205</span><span class="type">.243.166</span>]: errno=Unknown error</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>在上面的错误中，我们可以找到错误关键词
<code>git:</code>、<code>unable to connect to github.com</code>，根据此信息，我们便可定位错误。</p>
<p>引发上述错误是因为 git 弃用了 <code>git:</code> 协议，所以只需要将
git 中的 <code>git:</code> 协议改成 <code>https:</code>
即可，命令如下:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git config <span class="literal">--global</span> url.<span class="string">&quot;https://&quot;</span>.insteadOf git://</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Software</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>JitsiMeet Docker 安装及负载均衡配置</title>
    <url>/posts/2023/2WH7C5Z.html</url>
    <content><![CDATA[<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230625233244755.png"
alt="image-20230625233244755" />
<figcaption aria-hidden="true">image-20230625233244755</figcaption>
</figure>
<p>jitsi 是一款开源的视屏会议软件，最大支持 75
人同时在线。本文将介绍如何在 docker 中安装和使用 jitsi。本文主要以
Ubuntu 为例，若是 Windows，建议使用 wsl 进行安装。</p>
<span id="more"></span>
<h2 id="安装-docker">安装 Docker</h2>
<p>Windows: 下载 <a
href="https://www.docker.com/products/docker-desktop/">Download Docker
Desktop | Docker</a> 进行安装</p>
<p>Ubuntu: <a
href="https://docs.docker.com/engine/install/ubuntu/">Install Docker
Engine on Ubuntu</a></p>
<h2 id="安装-jitsi-meet">安装 Jitsi-meet</h2>
<p>本节主要参考：<a
href="https://jitsi.github.io/handbook/docs/devops-guide/devops-guide-docker/">Self-Hosting
Guide - Docker | Jitsi Meet</a></p>
<ol type="1">
<li><p>下载最新发布版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找最新版本下载地址，然后使用 wget 下载</span></span><br><span class="line"><span class="comment"># 下载后的文件可能没有后缀，需要使用 mv 添加一个 `.zip` 后缀</span></span><br><span class="line">wget $(curl -s https://api.github.com/repos/jitsi/docker-jitsi-meet/releases/latest | grep <span class="string">&#x27;zip&#x27;</span> | <span class="built_in">cut</span> -d\&quot; -f4)</span><br></pre></td></tr></table></figure></li>
<li><p>解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip &lt;filename&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>配置 <code>.env</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 复制示例配置</span></span><br><span class="line"><span class="built_in">cp</span> env.example .<span class="built_in">env</span></span><br></pre></td></tr></table></figure></li>
<li><p>设置强密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># linux 中，在 .env 目录中执行</span></span><br><span class="line"><span class="comment"># 若执行报错，主检查 ./gen-passwords.sh 的结束符是否为 LF</span></span><br><span class="line"><span class="comment"># 可以通过 cat ./gen-passwords.sh -ne 查看结束符，若为 ^M$ 为则 CRLF，若为 $ 则是 LF </span></span><br><span class="line">bash ./gen-passwords.sh</span><br></pre></td></tr></table></figure></li>
<li><p>创建所需的 <code>CONFIG</code> 目录</p>
<p><strong>Linux</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/.jitsi-meet-cfg/&#123;web,transcripts,prosody/config,prosody/prosody-plugins-custom,jicofo,jvb,jigasi,jibri&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Windows</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> web,transcripts,prosody/config,prosody/prosody<span class="literal">-plugins-custom</span>,jicofo,jvb,jigasi,jibri | % &#123; mkdir <span class="string">&quot;~/.jitsi-meet-cfg/<span class="variable">$_</span>&quot;</span> &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure></li>
<li><p>浏览器访问 <a
href="https://localhost:8443/"><code>https://localhost:8443</code></a></p></li>
</ol>
<p>下面将介绍如何进行生产环境配置，修改完成后，需要再次执行以下命令重新应用配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker compose down</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure>
<h2 id="修改-.env-进行自定义配置">修改 .env 进行自定义配置</h2>
<p>编辑 .env 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim .<span class="built_in">env</span></span><br></pre></td></tr></table></figure>
<p><strong>修改内容如下：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 Docker 对外暴露的端口</span></span><br><span class="line"><span class="comment"># Exposed HTTP port</span></span><br><span class="line">HTTP_PORT=<span class="number">7080</span></span><br><span class="line"><span class="comment"># Exposed HTTPS port</span></span><br><span class="line">HTTPS_PORT=<span class="number">7043</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改访问的网址</span></span><br><span class="line"><span class="comment"># Public URL for the web service (required)</span></span><br><span class="line"><span class="comment"># 如果是本机测试，不要添加协议，但要添加端口，如下</span></span><br><span class="line"><span class="comment"># PUBLIC_URL=192.168.3.240:7043</span></span><br><span class="line"><span class="comment"># 若是外部地址非 443 端口，需要自行添加</span></span><br><span class="line">PUBLIC_URL=https://yourdomain</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器主机的 IP, 当服务器位于 NAT 环境时，需要配置</span></span><br><span class="line"><span class="comment"># 特别注意，要同时配置容器 host ip 和 public ip</span></span><br><span class="line">JVB_ADVERTISE_IPS=<span class="number">192.168</span>.<span class="number">23.12</span>,public<span class="literal">-ip</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 jwt 认证</span></span><br><span class="line"><span class="comment"># Enable authentication</span></span><br><span class="line">ENABLE_AUTH=<span class="number">1</span></span><br><span class="line"><span class="comment"># 创建房间后，其他人只需要输入房间名称即可进入</span></span><br><span class="line"><span class="comment"># Enable guest access</span></span><br><span class="line">ENABLE_GUESTS=<span class="number">1</span></span><br><span class="line"><span class="comment"># Select authentication type: internal, jwt, ldap or matrix</span></span><br><span class="line">AUTH_TYPE=jwt</span><br><span class="line"><span class="comment"># JWT authentication</span></span><br><span class="line"><span class="comment"># Application identifier</span></span><br><span class="line">JWT_APP_ID=my_jitsi_app_id</span><br><span class="line"><span class="comment"># Application secret known only to your token generator</span></span><br><span class="line">JWT_APP_SECRET=my_jitsi_app_secret</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消自动赋予 owner</span></span><br><span class="line">ENABLE_AUTO_OWNER=false</span><br></pre></td></tr></table></figure>
<p>所有 .env 的配置，可在以下地方查到：</p>
<p><a
href="https://github.com/jitsi/docker-jitsi-meet/blob/master/jicofo/rootfs/defaults/jicofo.conf">docker-jitsi-meet/jicofo/rootfs/defaults/jicofo.conf</a></p>
<h2 id="配置-jwt-授权">配置 jwt 授权</h2>
<p>jitsi 默认任何人都可以创建房间，为了使自建的 jitsi
资源不被恶意使用，需要限制创建房间的权限。</p>
<p>通过 <a href="#修改%20.env%20配置文件">修改 .env 配置文件</a>
来添加权限认证，当 <code>ENABLE_AUTH=1</code> 后，只有有合法正确的
<code>jwt</code> 值时，才可以新建房间。</p>
<p>具体的 <code>.env</code> 配置如下</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Select authentication type: internal, jwt, ldap or matrix</span></span><br><span class="line"><span class="attr">AUTH_TYPE</span>=<span class="string">jwt</span></span><br><span class="line"><span class="comment"># JWT authentication</span></span><br><span class="line"><span class="comment"># Application identifier</span></span><br><span class="line"><span class="attr">JWT_APP_ID</span>=<span class="string">my_jitsi_app_id</span></span><br><span class="line"><span class="comment"># Application secret known only to your token generator</span></span><br><span class="line"><span class="attr">JWT_APP_SECRET</span>=<span class="string">my_jitsi_app_secret</span></span><br></pre></td></tr></table></figure>
<p>在生成 jwt 时，payload 内容如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;context&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:/gravatar.com/avatar/abc123&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jdoe@example.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;abcd:a1b2c3-d4e5f6-0abc1-23de-abcdef01fedcba&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;affiliation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;owner or member&quot;</span><span class="punctuation">,</span> <span class="comment">// 需要使用 mod_token_affiliation 插件</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a123-123-456-789&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aud&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;iss&quot;</span><span class="punctuation">:</span> <span class="string">&quot;your_app_id&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;meet.jitsi.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;room&quot;</span><span class="punctuation">:</span> <span class="string">&quot;your_room or *&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;moderator&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 需要使用 mod_token_moderation 插件</span></span><br><span class="line">  <span class="attr">&quot;nbf&quot;</span><span class="punctuation">:</span> <span class="number">1664475176</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span> <span class="number">1695998576</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>可以通过 <a href="https://jwt.io/#debugger-io">JSON Web Tokens -
jwt.io</a> 来生成 token，然后在 url 后面添加 <code>jwt=your-token</code>
参数来传递授权进行使用。</p>
<p>例如：<code>https://your-domain/room-name?jwt=your-token</code></p>
<h2 id="插件">插件</h2>
<h3 id="插件位置">插件位置</h3>
<p>从 <code>docker-compose.yml</code> 文件中可知，自定义插件被挂载到了
<code>$&#123;CONFIG&#125;/prosody/prosody-plugins-custom</code>
中，<code>$(CONFIG)</code> 默认值为 <code>~/.jitsi-meet-cfg</code>。</p>
<figure>
<img data-src="https://oss.223434.xyz:2234/public/files/images/image-20241108110315365.png"
alt="image-20241108110315365" />
<figcaption aria-hidden="true">image-20241108110315365</figcaption>
</figure>
<p>因此，可以将自定义插件保存到
<code>~/.jitsi-meet-cfg/prosody/prosody-plugins-custom</code>。</p>
<h3 id="插件查找">插件查找</h3>
<p>当功能不满足要求时，可以从以下地址查找插件实现：</p>
<ol type="1">
<li><a
href="https://github.com/jitsi-contrib/prosody-plugins">jitsi-contrib/prosody-plugins:
Prosody plugins for Jitsi</a></li>
<li><a
href="https://github.com/jitsi/jitsi-meet/tree/master/resources/prosody-plugins">jitsi-meet/resources/prosody-plugins</a></li>
<li>在 github 上搜索 <code>jitsi mod</code></li>
</ol>
<h2 id="设置用户角色">设置用户角色</h2>
<p>jitsi 默认所有使用 token
加入会议的用户都有主持人，为了更好地管理会议，可以使用插件通过 token 的
payloads 来分配所属角色。</p>
<p>目前找到两个插件皆可实现该功能，但测试下来，都有一些 bug :</p>
<ol type="1">
<li><p><a
href="https://github.com/jitsi-contrib/prosody-plugins/tree/main/token_affiliation">prosody-plugins/token_affiliation</a></p>
<p>这个插件通过在用户加入会议后，再次修改角色来实现权限控制，但它存在滞后性，经常用户加入会议后，提示为主持人，然后才被修改为普通成员</p></li>
<li><p><a
href="https://github.com/H2-invent/jitsi-token-moderation-plugin/blob/master/mod_token_moderation.lua">jitsi-token-moderation-plugin/mod_token_moderation.lua</a></p>
<p>这个插件通过重写 <code>set_affiliation</code> 方法来实现控制</p>
<p>但是会议中，无法为其它用户分配主持人角色</p></li>
</ol>
<p>经权衡，最终选择方案 2</p>
<h3 id="mod_token_affiliation-插件">mod_token_affiliation 插件</h3>
<h4 id="插件安装">插件安装</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.jitsi-meet-cfg/prosody/prosody-plugins-custom</span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget -O mod_token_affiliation.lua https://raw.githubusercontent.com/jitsi-contrib/prosody-plugins/main/token_affiliation/mod_token_affiliation.lua</span><br></pre></td></tr></table></figure>
<h4 id="启用插件">启用插件</h4>
<p>打开 <code>.env</code> 文件，添加如下内容：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取消自动赋予 owner</span></span><br><span class="line"><span class="attr">ENABLE_AUTO_OWNER</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 启用组件，多个组件之间使用 , 号分隔</span></span><br><span class="line"><span class="comment"># token_verification 是系统默认的组件</span></span><br><span class="line"><span class="attr">XMPP_MUC_MODULES</span>=<span class="string">token_verification,token_affiliation</span></span><br></pre></td></tr></table></figure>
<p>生成 token 时，向 <code>content.user</code> 中添加 affiliation
字段，示例如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;aud&quot;</span><span class="punctuation">:</span> <span class="string">&quot;myapp&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;iss&quot;</span><span class="punctuation">:</span> <span class="string">&quot;myapp&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;meet.mydomain.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;iat&quot;</span><span class="punctuation">:</span> <span class="number">1601366000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span> <span class="number">1601366180</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;room&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;context&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;myname&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;myname@mydomain.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;affiliation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;owner&quot;</span> <span class="comment">// 选项: owner、member、空 </span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="方案-2">方案 2</h3>
<h4 id="安装插件">安装插件</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.jitsi-meet-cfg/prosody/prosody-plugins-custom</span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://raw.githubusercontent.com/nvonahsen/jitsi-token-moderation-plugin/refs/heads/master/mod_token_moderation.lua</span><br></pre></td></tr></table></figure>
<h4 id="启用插件-1">启用插件</h4>
<p>打开 <code>.env</code> 文件，添加如下内容：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启用组件，多个组件之间使用 , 号分隔</span></span><br><span class="line"><span class="attr">XMPP_MUC_MODULES</span>=<span class="string">token_moderation</span></span><br></pre></td></tr></table></figure>
<p>生成 token 时，添加 moderator 字段，示例如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;context&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:/gravatar.com/avatar/abc123&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jdoe@example.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;abcd:a1b2c3-d4e5f6-0abc1-23de-abcdef01fedcba&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;affiliation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;owner or member&quot;</span><span class="punctuation">,</span> <span class="comment">// 需要使用 mod_token_affiliation 插件</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a123-123-456-789&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aud&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;iss&quot;</span><span class="punctuation">:</span> <span class="string">&quot;your_app_id&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;meet.jitsi.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;room&quot;</span><span class="punctuation">:</span> <span class="string">&quot;your_room or *&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;moderator&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 需要使用 mod_token_moderation 插件</span></span><br><span class="line">  <span class="attr">&quot;nbf&quot;</span><span class="punctuation">:</span> <span class="number">1664475176</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span> <span class="number">1695998576</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="添加事件回调">添加事件回调</h2>
<p>本节主要参考：<a
href="https://github.com/jitsi-contrib/prosody-plugins/blob/main/event_sync/README.md#event-sync">prosody-plugins/event_sync</a></p>
<p>jitis meet 使用 prosody 进行即时通讯，诸多业务都可以使用 prosody
插件来实现，本节使用<a
href="https://github.com/jitsi-contrib/prosody-plugins/blob/main/event_sync/README.md#event-sync">event_sync/mod_event_sync_component.lua</a>
插件来实现事件回调</p>
<p>为了接入既有系统，需要获取会议的创建结束信息，通过该插件来添加事件回调到既有的系统中。</p>
<h3 id="插件安装-1">插件安装</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入自定义插件库</span></span><br><span class="line"><span class="built_in">cd</span> ~/.jitsi-meet-cfg/prosody/prosody-plugins-custom</span><br><span class="line"><span class="comment"># 下载插件</span></span><br><span class="line">wget -O mod_event_sync_component.lua https://raw.githubusercontent.com/jitsi-contrib/prosody-plugins/main/event_sync/mod_event_sync_component.lua</span><br></pre></td></tr></table></figure>
<h3 id="插件修改">插件修改</h3>
<blockquote>
<p>可以使用 vscode 远程服务器后对文件进行修改</p>
</blockquote>
<h4 id="回调返回-display_name">回调返回 display_name</h4>
<p>原插件没有返回用户的
display_name，当用户通过网址进入时，无法确定用户的身份，因此需要返回用户自己设置的
display_name 供回调服务器处理。</p>
<p><strong>修改 occupant_joined 调用：</strong></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 找到 occupant_joined 函数调用位置</span></span><br><span class="line"><span class="comment">-- 将</span></span><br><span class="line"><span class="keyword">local</span> occupant_data = room_data:on_occupant_joined(occupant_jid, event.origin);</span><br><span class="line"><span class="comment">-- 修改为</span></span><br><span class="line"><span class="keyword">local</span> occupant_data = room_data:on_occupant_joined(occupant_jid, event);</span><br></pre></td></tr></table></figure>
<p><strong>修改 EventData:on_occupant_joined 函数：</strong></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 找到 EventData:on_occupant_joined 函数,修改为如下代码：</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EventData:on_occupant_joined</span><span class="params">(occupant_jid, event)</span></span></span><br><span class="line">    <span class="keyword">local</span> event_origin = event.origin</span><br><span class="line">    <span class="keyword">local</span> user_context = event_origin.jitsi_meet_context_user <span class="keyword">or</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- get displayName</span></span><br><span class="line">    <span class="keyword">local</span> display_name = event.occupant:get_presence():get_child_text(<span class="string">&#x27;nick&#x27;</span>, <span class="string">&#x27;http://jabber.org/protocol/nick&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- N.B. we only store user details on join and assume they don&#x27;t change throughout the duration of the meeting</span></span><br><span class="line">    <span class="keyword">local</span> occupant_data = &#123;</span><br><span class="line">        occupant_jid = occupant_jid,</span><br><span class="line">        name = user_context.name,</span><br><span class="line">        id = user_context.id,</span><br><span class="line">        email = user_context.email,</span><br><span class="line">        joined_at = now(),</span><br><span class="line">        left_at = <span class="literal">nil</span>,</span><br><span class="line">        display_name = display_name</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">self</span>.occupants[occupant_jid] = occupant_data;</span><br><span class="line">    <span class="built_in">self</span>.active[occupant_jid] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> occupant_data;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h4 id="添加单点参会功能">添加单点参会功能</h4>
<blockquote>
<p>可选，实践下来不太好用</p>
</blockquote>
<p>本节参考：<a
href="https://modules.prosody.im/mod_http_muc_kick.html">mod_http_muc_kick
- Prosody Community Modules</a></p>
<p>当用户加入后，检测是否有同名用户，若有，则踢出存在的同名用户，保证同一时间，只有一个同名用户参会</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 在顶部添加导入</span></span><br><span class="line"><span class="keyword">local</span> st = <span class="built_in">require</span> <span class="string">&quot;util.stanza&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 找到 function occupant_joined(event) 方法，在 `local occupant_data = room_data:on_occupant_joined(occupant_jid, event);` 之后添加如下代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, occupant <span class="keyword">in</span> room:each_occupant() <span class="keyword">do</span>        </span><br><span class="line">    <span class="keyword">local</span> pr = occupant:get_presence();</span><br><span class="line">    <span class="keyword">local</span> displayName = pr:get_child_text(</span><br><span class="line">            <span class="string">&#x27;nick&#x27;</span>, <span class="string">&#x27;http://jabber.org/protocol/nick&#x27;</span>);        </span><br><span class="line">    <span class="keyword">if</span> displayName == occupant_data.display_name <span class="keyword">and</span> occupant.nick~=occupant_data.nick <span class="keyword">then</span></span><br><span class="line">        <span class="comment">-- 获取原用户的角色, 若为moderator, 则将新用户设置为moderator</span></span><br><span class="line">        <span class="keyword">local</span> oldRole = room:get_role(occupant.nick);</span><br><span class="line">        room:set_role(<span class="literal">true</span>, occupant.nick, <span class="literal">nil</span>);</span><br><span class="line">        <span class="keyword">if</span> oldRole == <span class="string">&#x27;moderator&#x27;</span> <span class="keyword">then</span></span><br><span class="line">            room:set_role(<span class="literal">true</span>, occupant_data.occupant_jid, <span class="string">&#x27;moderator&#x27;</span>);</span><br><span class="line">            room:set_affiliation(<span class="literal">true</span>, occupant_data.occupant_jid, <span class="string">&#x27;owner&#x27;</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    		room:set_role(<span class="literal">true</span>, occupant.nick, <span class="literal">nil</span>);</span><br><span class="line">        <span class="built_in">module</span>:<span class="built_in">log</span>(<span class="string">&#x27;info&#x27;</span>, <span class="string">&#x27;踢出用户 %s kicked %s from %s&#x27;</span>,displayName, occupant.nick, room.jid);            </span><br><span class="line">         <span class="comment">-- 发送 kickParticipant 命令</span></span><br><span class="line">        <span class="keyword">local</span> presence = st.presence(&#123;</span><br><span class="line">            to = occupant.jid,</span><br><span class="line">            from = room.jid,</span><br><span class="line">            <span class="built_in">type</span> = <span class="string">&quot;unavailable&quot;</span></span><br><span class="line">        &#125;):tag(<span class="string">&quot;status&quot;</span>):text(<span class="string">&quot;你已被移出房间 &quot;</span> .. room.jid):up();</span><br><span class="line">        <span class="built_in">module</span>:send(presence);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="启用插件-2">启用插件</h3>
<p>向 <code>~/.jitsi-meet-cfg/prosody/config/conf.d</code> 目录中添加以
<code>.cfg.lua</code> 为后缀的配置文件，配置文件格式参考
<code>~/.jitsi-meet-cfg/prosody/config/prosody.cfg.lua</code>。</p>
<p><code>~/.jitsi-meet-cfg/prosody/config/prosody.cfg.lua</code> 是
prosody 的配置入口文件，conf.d 目录中任何 <code>.cfg.lua</code>
都会被包含在这个配置中。</p>
<p>每个插件建议都新建一个配置文件，保证配置独立。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入到配置目录</span></span><br><span class="line"><span class="built_in">cd</span> ~/.jitsi-meet-cfg/prosody/config/conf.d</span><br><span class="line"><span class="comment"># 创建 event_sync.cfg.lua 配置</span></span><br><span class="line">sudo <span class="built_in">touch</span> event_sync.cfg.lua</span><br></pre></td></tr></table></figure>
<p>编辑 <code>sudo vim event_sync.cfg.lua</code>
配置，添加如下内容：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">Component <span class="string">&quot;event_sync.meet.jitsi&quot;</span> <span class="string">&quot;event_sync_component&quot;</span></span><br><span class="line">    muc_component = <span class="string">&quot;conference.meet.jitsi&quot;</span></span><br><span class="line">    api_prefix = <span class="string">&quot;http://your.api.server/api&quot;</span></span><br></pre></td></tr></table></figure>
<p>注意：<code>api_prefix 末尾没有 / 号</code></p>
<blockquote>
<p>更多配置，参考：<a
href="https://github.com/jitsi-contrib/prosody-plugins/blob/main/event_sync/README.md#optional-config">prosody-plugins/event_sync/README.md</a></p>
</blockquote>
<p>该组件回调的 api
为：<code>post http://your.api.server/api/events/xx</code></p>
<p>触发的事件回调如下：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> URL_EVENT_ROOM_CREATED = api_prefix..<span class="string">&#x27;/events/room/created&#x27;</span>;</span><br><span class="line"><span class="keyword">local</span> URL_EVENT_ROOM_DESTROYED = api_prefix..<span class="string">&#x27;/events/room/destroyed&#x27;</span>;</span><br><span class="line"><span class="keyword">local</span> URL_EVENT_OCCUPANT_JOINED = api_prefix..<span class="string">&#x27;/events/occupant/joined&#x27;</span>;</span><br><span class="line"><span class="keyword">local</span> URL_EVENT_OCCUPANT_LEFT = api_prefix..<span class="string">&#x27;/events/occupant/left&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="打开防火墙端口">打开防火墙端口</h2>
<p>docker-jitsi-meeting 中的通信结构如下图所示</p>
<p><img data-src="https://jitsi.github.io/handbook/assets/images/docker-jitsi-meet-afafdf87fea30a2fa6412baa4a3f8248.png" /></p>
<ul>
<li><p><code>80,443/tcp</code> 是 UI 的 web 端口</p>
<p>80,443 通过 <a href="#修改%20.env%20配置文件">修改 .env 配置文件</a>
章节进行指定，本文中分别修改为：7080，7043</p></li>
<li><p><code>10000/udp</code> 是 RTP media 端口，即 Jitsi Vedio Bridge
使用的端口</p></li>
</ul>
<p>通过以下命令新建防火墙入站规则：</p>
<p><strong>windows 中：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开放 tcp</span></span><br><span class="line">netsh advfirewall firewall add rule name=jitsi<span class="literal">-meeting-tcp</span> <span class="built_in">dir</span>=<span class="keyword">in</span> action=allow protocol=TCP localport=<span class="number">7043</span>,<span class="number">7080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开放 udp</span></span><br><span class="line">netsh advfirewall firewall add rule name=jitsi<span class="literal">-meeting-udp</span> <span class="built_in">dir</span>=<span class="keyword">in</span> action=allow protocol=UDP localport=<span class="number">10000</span></span><br></pre></td></tr></table></figure>
<p><strong>ubuntu 中：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 7043,7080/tcp</span><br><span class="line">sudo ufw allow 10000/udp</span><br></pre></td></tr></table></figure>
<h2 id="配置端口转发">配置端口转发</h2>
<p>若服务器位于 NAT 中，需要在 NAT 中配置端口转发，将外网的
<code>80/tcp,443/tcp,10000/udp</code>
端口分别转发到服务器对应的端口上。</p>
<h2 id="配置-nginx-反向代理">配置 nginx 反向代理</h2>
<p>有时候外网的<code>80,443</code> 被 nginx 占用了，我们需要设置 nginx
反向代理 jitsi，此时需要将 <code>10000/udp</code> 转发到 docker
所在服务器，然后在 nginx 中添加如下设置：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nginx.conf 主文件</span></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span> mime.types;</span><br><span class="line">	</span><br><span class="line">    <span class="comment"># http_servers/jitsi.conf</span></span><br><span class="line">	<span class="comment"># jitsi 会议配置</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line">        <span class="attribute">server_name</span>  yourdomain;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_certificate</span>      F:/encrypt/keys/root/fullchain.pem;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>  F:/encrypt/keys/root/privkey.pem;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_session_cache</span>    shared:SSL:<span class="number">1m</span>;</span><br><span class="line">        <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_ciphers</span>  HIGH:!aNULL:!MD5;</span><br><span class="line">        <span class="attribute">ssl_prefer_server_ciphers</span>  <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;			</span><br><span class="line">            <span class="attribute">proxy_pass</span>   https://192.168.23.12:7043;</span><br><span class="line">            <span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line">            <span class="attribute">proxy_read_timeout</span> <span class="number">600</span>;			</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;	   </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> /xmpp-websocket &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> https://192.168.23.12:7043;</span><br><span class="line">            <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> /colibri-ws &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> https://192.168.23.12:7043;</span><br><span class="line">            <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">	</span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Origin <span class="string">&quot;*&quot;</span>;</span><br><span class="line">        <span class="attribute">default_type</span> <span class="string">&#x27;text/html&#x27;</span>;</span><br><span class="line">        <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完成上述步骤的设置后，即可通过 <code>https://yourdomain</code>
来进行访问了</p>
<h2 id="通过-iframe-集成进现有系统">通过 IFrame 集成进现有系统</h2>
<p>可以使用 IFrame API与现有系统进行集成。</p>
<ol type="1">
<li><p>加载 <code>external_api</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&#x27;https://&lt;your-domain&gt;/external_api.js&#x27;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>实例化 api</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">api = <span class="keyword">new</span> <span class="title class_">JitsiMeetExternalAPI</span>(domain, options)</span><br></pre></td></tr></table></figure>
<ul>
<li>domain 不带协议号（https/http）</li>
<li>options 见 <a
href="https://jitsi.github.io/handbook/docs/dev-guide/dev-guide-iframe#creating-the-jitsi-meet-api-object">IFrame
API | Jitsi Meet</a></li>
</ul></li>
</ol>
<h2 id="jitsi-更新">jitsi 更新</h2>
<p>本节从 stable-9799 到 stable-9955 升级作为示例。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载最新版本文件</span></span><br><span class="line">wget $(curl -s https://api.github.com/repos/jitsi/docker-jitsi-meet/releases/latest | grep <span class="string">&#x27;zip&#x27;</span> | <span class="built_in">cut</span> -d\&quot; -f4)</span><br><span class="line"><span class="comment"># 解压文件</span></span><br><span class="line">unzip &lt;filename&gt;</span><br><span class="line"><span class="comment"># 将原来的 .env 复制到新的安装目录中</span></span><br><span class="line"><span class="built_in">cp</span> ./stable-9799/.env ./stable-9955/.env</span><br><span class="line"><span class="comment"># 拉取新版本</span></span><br><span class="line">docker compose -f ./stable-9955/docker-compose.yml pull</span><br><span class="line"><span class="comment"># 停止原来的 docker</span></span><br><span class="line">docker compose -f ./stable-9955/docker-compose.yml down</span><br><span class="line"><span class="comment"># 启动新的版本</span></span><br><span class="line">docker compose -f ./stable-9955/docker-compose.yml up -d</span><br></pre></td></tr></table></figure>
<h2 id="jitsi-相关镜像简介">jitsi 相关镜像简介</h2>
<ul>
<li><p><strong>base</strong></p>
<p>Debian stable base image with the S6 Overlay for process control and
the Jitsi repositories enabled. All other images are based on this
one.</p></li>
<li><p><strong>base-java</strong></p>
<p>Same as the above, plus Java (OpenJDK).</p></li>
<li><p><strong>web</strong></p>
<blockquote>
<p>Jitsi Meet web UI, served with nginx.</p>
</blockquote>
<p>Jitsi Meet 的 web 界面</p></li>
<li><p><strong>prosody</strong></p>
<blockquote>
<p>Prosody, the XMPP server.</p>
</blockquote>
<p>用于即时通讯的开源库</p></li>
<li><p><strong>jicofo</strong></p>
<p>Jicofo, the XMPP focus component.</p></li>
<li><p><strong>jvb</strong></p>
<blockquote>
<p>Jitsi Videobridge, the video router.</p>
</blockquote>
<p>Jitsi 的视屏中转中心，处理视屏流的分发</p></li>
<li><p><strong>jigasi</strong></p>
<p>Jigasi, the SIP (audio only) gateway.</p></li>
<li><p><strong>jibri</strong></p>
<p>Jibri, the broadcasting infrastructure.</p></li>
</ul>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<p><a
href="https://github.com/jitsi/docker-jitsi-meet">jitsi/docker-jitsi-meet:
Jitsi Meet on Docker</a></p>
<p><a
href="https://jitsi.github.io/handbook/docs/devops-guide/devops-guide-docker/">Self-Hosting
Guide - Docker | Jitsi Meet</a></p>
<p><a
href="https://github.com/jitsi/lib-jitsi-meet/blob/master/doc/tokens.md">lib-jitsi-meet/doc/tokens.md
at master · jitsi/lib-jitsi-meet · GitHub</a></p>
<p><a
href="https://github.com/jitsi-contrib/prosody-plugins/blob/main/event_sync/README.md#event-sync">prosody-plugins/event_sync/README.md
at main · jitsi-contrib/prosody-plugins · GitHub</a></p>
<p><a
href="https://jitsi.github.io/handbook/docs/dev-guide/dev-guide-iframe/#creating-the-jitsi-meet-api-object">IFrame
API | Jitsi Meet</a></p>
<p><a
href="https://meetrix.io/blog/webrtc/jitsi/jitsi_meet_front_end_customization.html">A
tutorial on how to customize the Jitsi meet front end -
Meetrix.IO</a></p>
<p><a
href="https://github.com/jitsi/lib-jitsi-meet/blob/master/doc/tokens.md">JSON
Web Token (JWT) authentication Prosody plugin</a></p>
<p><a
href="https://github.com/jitsi/jitsi-meet/tree/master/resources/prosody-plugins">jitsi-meet/resources/prosody-plugins</a></p>
<p><a href="https://developer.8x8.com/jaas/docs/api-keys-jwt">The Jitsi
JSON Web Token (JWT)</a></p>
]]></content>
      <categories>
        <category>Software</category>
        <category>JitsiMeet</category>
      </categories>
      <tags>
        <tag>Software</tag>
        <tag>Jitsi</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>yarn 拉取私有仓库时返回403无权限</title>
    <url>/posts/2022/34RK9KS.html</url>
    <content><![CDATA[<p>在使用 <code>yarn install</code> 安装私有包时，由于仓库需要认证，但
Yarn 的安装过程不允许交互式提示，所以当 Git
请求用户名时，它无法提供，会导致权限被拒的情况：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">remote: [session-2a4ee1aa] Access denied</span><br><span class="line">fatal: unable to access <span class="string">&#x27;https://gitee.com/my-packages/camera-preview.git/&#x27;</span>: The requested URL returned error: 403</span><br><span class="line">root@d24630a9ec27:/app/frontend-cross<span class="comment"># git ls-remote --tags --heads https://gitee.com/my-packages/camera-preview.git</span></span><br></pre></td></tr></table></figure>
<p>可以使用两种方法来解决。</p>
<span id="more"></span>
<h2 id="在-git-中设置凭据">在 Git 中设置凭据</h2>
<p>使用如下命令来设置凭据，然后使用使用 git
访问仓库，按提示输入用户名和密码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这种方法会在你的计算机上明文存储你的密码</p>
</blockquote>
<h2 id="使用-ssh">使用 ssh</h2>
<p>直接在 package.json 文件中使用 SSH URL 而不是 HTTPS URL 来引用 Git
依赖。需要在 gitee.com 上设置 SSH 密钥。然后，像这样引用：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;camera-preview&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git+ssh://git@gitee.com/my-packages/camera-preview.git&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这种方法的优点是它不需要存储你的用户名和密码，但是需要配置 SSH
密钥</p>
</blockquote>
]]></content>
      <categories>
        <category>Software</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git中 子模块的添加与删除</title>
    <url>/posts/2023/2Y0295C.html</url>
    <content><![CDATA[<p>在使用 hexo
搭建博客时，往往需要添加主题来美化博客。这个时候，通常在自己的主仓库中使用子模块来进行维护。</p>
<p>使用子模块，既能够保持主仓库与主题的联结，又不会增加主仓库的体积，需要更新时，只需要在子模块中更新一下就可以了。</p>
<span id="more"></span>
<h2 id="添加子模块">添加子模块</h2>
<p>添加子模块主要有以下步骤：</p>
<h3 id="添加子模块-1">添加子模块</h3>
<p>使用如下命令添加子模块：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git submodule add &lt;url&gt; &lt;path&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>url: 为子模块的 git 地址</li>
<li>path: 该子模块相对于主仓库的路径，以 <code>./</code> 开头</li>
</ul>
<h3 id="验证结果">验证结果</h3>
<p>添加完成后，使用如下命令可以查看子模块是否添加成功：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">diff</span> <span class="literal">--cached</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出以下内容，说明添加成功了：</span></span><br><span class="line"><span class="built_in">diff</span> <span class="literal">--git</span> a/.gitmodules b/.gitmodules</span><br><span class="line">index <span class="number">8</span>b13789..<span class="number">61</span>f1572 <span class="number">100644</span></span><br><span class="line"><span class="literal">---</span> a/.gitmodules</span><br><span class="line">+++ b/.gitmodules</span><br><span class="line"><span class="selector-tag">@</span><span class="selector-tag">@</span> <span class="literal">-1</span> +<span class="number">1</span>,<span class="number">4</span> <span class="selector-tag">@</span><span class="selector-tag">@</span></span><br><span class="line"></span><br><span class="line">+[<span class="type">submodule</span> <span class="string">&quot;themes/next&quot;</span>]</span><br><span class="line">+       path = themes/next</span><br><span class="line">+       url = https://github.com/next<span class="literal">-theme</span>/hexo<span class="literal">-theme-next</span>.git</span><br><span class="line"><span class="built_in">diff</span> <span class="literal">--git</span> a/themes/next b/themes/next</span><br><span class="line">new file mode <span class="number">160000</span></span><br><span class="line">index <span class="number">0000000</span>..<span class="number">2</span>e5757e</span><br><span class="line"><span class="literal">---</span> /dev/null</span><br></pre></td></tr></table></figure>
<h3 id="提交结果">提交结果</h3>
<p>使用 <code>git commit &lt;message&gt;</code> 来提交添加结果</p>
<h2 id="使用子模块">使用子模块</h2>
<p>克隆项目后，默认子模块目录下无任何内容。需要在项目根目录执行如下命令完成子模块的下载：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure>
<p>或：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure>
<p>执行后，子模块目录下就有了源码。</p>
<h2 id="更新子模块">更新子模块</h2>
<p>子模块的维护者提交了更新后，使用子模块的项目必须手动更新才能包含最新的提交。</p>
<p>在项目中，进入到子模块目录下，执行
<code>git pull</code>更新，查看<code>git log</code>查看相应提交。</p>
<p>完成后返回到项目目录，可以看到子模块有待提交的更新，使用<code>git add</code>，提交即可。</p>
<h2 id="删除子模块">删除子模块</h2>
<p>时子模块的项目维护地址发生了变化，或者需要替换子模块，就需要删除原有的子模块。</p>
<p>删除子模块较复杂，步骤如下：</p>
<ol type="1">
<li><code>rm -rf 子模块目录</code> 删除子模块目录及源码</li>
<li><code>vi .gitmodules</code>
删除项目目录下.gitmodules文件中子模块相关条目</li>
<li><code>vi .git/config</code> 删除配置项中子模块相关条目</li>
<li><code>rm .git/module/*</code>
删除模块下的子模块目录，每个子模块对应一个目录，注意只删除对应的子模块目录即可</li>
</ol>
<blockquote>
<p>注意：删除完成后，先要 <code>git commit</code>
提交一下，然后才可以再添加同名的子模块。</p>
</blockquote>
<p>如果仍然报错，执行如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm --cached 子模块名称</span><br></pre></td></tr></table></figure>
<p>完成删除后，提交到仓库即可。</p>
]]></content>
      <categories>
        <category>Software</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>Software</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>JitsiMeet 中 Prosody 插件配置</title>
    <url>/posts/2023/3G2MHZ7.html</url>
    <content><![CDATA[<p>在私有化部署 jitsi-meet 后，通过配置其中的 prosody
服务，可以实现更加多样化的功能，比如获取房间信息、获取房间用户信息、配置回调等等。</p>
<p>本文将简要介绍 prosody 插件系统，方便读者快速上手。</p>
<blockquote>
<p>本文基于 docker 的安装方式来进行介绍</p>
</blockquote>
<span id="more"></span>
<p>阅读本文时请保证有 <a href="/posts/2023/9Q7N69.html">JitsiMeet docker
部署及设置 jw 授权</a> 相关知识作为前提。</p>
<h2 id="简介">简介</h2>
<p>prosody 使用的插件为 lua 脚本，可用 lua 插件位于 <a
href="https://github.com/jitsi/jitsi-meet/tree/master/resources/prosody-plugins">jitsi-meet/resources/prosody-plugins</a>，可以查看源代码理解其功能。</p>
<h2 id="加载插件">加载插件</h2>
<p>prosody 的配置文件位于
<code>prosody\rootfs\defaults\conf.d\jitsi-meet.cfg.lua</code> 中。</p>
<h3 id="插件注册">插件注册</h3>
<p>注册插件的格式如下，以 <a
href="https://github.com/jitsi-contrib/prosody-plugins/blob/main/event_sync/README.md">event_sync_component</a>
为例：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">Component <span class="string">&quot;event_sync.&#123;&#123; $XMPP_DOMAIN &#125;&#125;&quot;</span> <span class="string">&quot;event_sync_component&quot;</span></span><br><span class="line">    muc_component = <span class="string">&quot;conference.&#123;&#123; $XMPP_DOMAIN &#125;&#125;&quot;</span></span><br><span class="line">    api_prefix = <span class="string">&quot;http://127.0.0.1:7001/call-back/prosody&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：这个方式需要重新编译 prosody 镜像文件，如果觉得麻烦，可以使用第
3 节中的在 docker 中使用自定义插件</p>
</blockquote>
<p><strong>Component 介绍：</strong></p>
<p>在 Lua 中，<code>Component</code> 是 Prosody XMPP
服务器中的一个模块，用于定义一个组件（component）。组件是一种特殊类型的
XMPP 实体，可以与其他 XMPP 实体进行通信，但是它们通常不具有完整的 XMPP
功能。组件通常用于扩展 XMPP
服务器的功能，例如添加聊天室、文件传输等功能。</p>
<p><code>Component</code> 模块用于定义一个组件，并将其添加到 Prosody
XMPP 服务器中。它接受一个 Lua 表作为参数，该表包含组件的配置信息。</p>
<p>在上例中，<code>"event_sync.&#123;&#123; $XMPP_DOMAIN &#125;&#125;"</code>
表示注册的模块的名称，<code>"event_sync_component"</code>
表示组件的名称，组件名称为组件定义的文件名
<code>mod_event_sync_component.lua</code> 的中间部分。</p>
<h3 id="插件变量">插件变量</h3>
<p>插件中通过 <code>module:get_option("api_headers")</code> 来获取
jitsi-meet.cfg.lua 中定义的变量。例：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> api_timeout = <span class="built_in">module</span>:get_option(<span class="string">&quot;api_timeout&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">local</span> api_headers = <span class="built_in">module</span>:get_option(<span class="string">&quot;api_headers&quot;</span>);</span><br><span class="line"><span class="keyword">local</span> api_retry_count = <span class="built_in">tonumber</span>(<span class="built_in">module</span>:get_option(<span class="string">&quot;api_retry_count&quot;</span>, <span class="number">3</span>));</span><br><span class="line"><span class="keyword">local</span> api_retry_delay = <span class="built_in">tonumber</span>(<span class="built_in">module</span>:get_option(<span class="string">&quot;api_retry_delay&quot;</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<p>在 jitsi-meet.cfg.lua 中通过 <code>“&#123;&#123;.Env.fieldName&#125;&#125;”</code>
的方式来获取 .env 文件中定义的变量，注意引号不要丢。例：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">external_service_secret = <span class="string">&quot;&#123;&#123;.Env.TURN_CREDENTIALS&#125;&#125;&quot;</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>特别注意：修改 <code>jitsi-meet.cfg.lua</code>
内容并不会生效，因为重启 docker
后会重置这个配置文件，该文件仅作为一个参考，仅在 <code>.env</code>
文件中的修改才会生效。</p>
</blockquote>
<h2 id="在-docker-中使用自定义的插件">在 docker 中使用自定义的插件</h2>
<p>若使用 docker 安装 jitsi-meet，每当 prosody 服务重启后都会重置
<code>conf.d\jitsi-meet.cfg.lua</code> 文件，因此无法在
<code>jitsi-meet.cfg.lua</code> 文件中通过 <code>Component</code>
的方式来注册插件。</p>
<p>可以使用以下的方法来解决：</p>
<ol type="1">
<li>将自定义插件保存到
<code>.jitsi-meet-cfg\prosody\prosody-plugins-custom</code>
目录中，这个目录被 prosody 所挂载</li>
<li>修改插件的源文件，使其中的参数符合自己的使用环境</li>
<li>在 <code>.env</code> 文件中使用
<code>XMPP_MUC_MODULES=event_sync_component</code> 来启用
<code>event_sync_component</code> 插件</li>
</ol>
<h2 id="在-docker-中修改插件">在 docker 中修改插件</h2>
<p>使用 docker 安装后，如果需要修改 docker 中的 prosody
插件，可以通过以下步骤修改：</p>
<ol type="1">
<li><p>打开 docker，切换到【Container】，进入到 <code>prosody</code>
容器中</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230627230120904.png"
alt="image-20230627230120904" />
<figcaption aria-hidden="true">image-20230627230120904</figcaption>
</figure></li>
<li><p>找到【Files/prosody-plugins】，找到想要修改的插件，双击修改并保存，然后重启容器即可应用修改</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230627230335324.png"
alt="image-20230627230335324" />
<figcaption aria-hidden="true">image-20230627230335324</figcaption>
</figure></li>
</ol>
<h2 id="参考">参考</h2>
<p><a
href="https://github.com/jitsi/jitsi-meet/tree/master/resources/prosody-plugins">jitsi-meet/resources/prosody-plugins
at master · jitsi/jitsi-meet · GitHub</a></p>
<p><a
href="https://jitsi.github.io/handbook/docs/community/third-party-software/#prosody-plugins">Third-Party
Software | Jitsi Meet</a></p>
<p><a
href="https://github.com/jitsi-contrib/prosody-plugins">jitsi-contrib/prosody-plugins:
Prosody plugins for Jitsi (github.com)</a></p>
]]></content>
      <categories>
        <category>Software</category>
        <category>JitsiMeet</category>
      </categories>
      <tags>
        <tag>Software</tag>
        <tag>jitsi</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>JitsiMeet 进行压力测试</title>
    <url>/posts/2023/3G78E45.html</url>
    <content><![CDATA[<p>当私有化部署 jitsi-meet
后，需要对它进行压力测试来评估其性能，通过官方提供的 <a
href="https://github.com/jitsi/jitsi-meet-torture">jitsi/jitsi-meet-torture</a>
工具来进行测试评估。</p>
<p>在 windows docker 环境下，未能成功部署测试。最后使用 python 通过
<code>selenium</code> 来模拟多个用户实现了测试。</p>
<span id="more"></span>
<h2 id="代码">代码</h2>
<p>python 实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.edge.service <span class="keyword">import</span> Service</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CacheStore</span>:</span><br><span class="line">    service = <span class="literal">None</span></span><br><span class="line">    driver = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_edge_driver</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取 Edge 浏览器驱动</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> CacheStore.driver <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> CacheStore.driver</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> CacheStore.service <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        CacheStore.service = Service(service_args=[<span class="string">&quot;--verbose&quot;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 默认设置</span></span><br><span class="line">    options = webdriver.EdgeOptions()</span><br><span class="line">    <span class="comment"># 设置 ms:inPrivate 为 True，关闭个性化设置弹窗</span></span><br><span class="line">    options.set_capability(<span class="string">&quot;ms:inPrivate&quot;</span>, <span class="literal">True</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--headless&quot;</span>)</span><br><span class="line"></span><br><span class="line">    driver = webdriver.Edge(service=CacheStore.service, options=options)</span><br><span class="line">    driver.set_window_size(<span class="number">1920</span>, <span class="number">1080</span>)</span><br><span class="line">    <span class="keyword">return</span> driver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">join_participants</span>(<span class="params">room_instance_url</span>):</span><br><span class="line">    driver = get_edge_driver()</span><br><span class="line">    driver.get(room_instance_url)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取用户名并输入</span></span><br><span class="line">    username_input = driver.find_element(</span><br><span class="line">        By.CSS_SELECTOR, <span class="string">&quot;.css-1m7m6m3-fieldContainer input&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 使用时间戳为用户名</span></span><br><span class="line">    user_name = <span class="built_in">str</span>(<span class="built_in">int</span>(time.time()))</span><br><span class="line">    username_input.send_keys(user_name)</span><br><span class="line">    <span class="comment"># 单击加入会议按钮</span></span><br><span class="line">    join_button = driver.find_element(By.CSS_SELECTOR, <span class="string">&quot;.css-1hbmoh1-actionButton&quot;</span>)</span><br><span class="line">    join_button.click()</span><br><span class="line">    <span class="comment"># 等待 1 秒</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="comment"># 单击视屏按钮</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        video_button = driver.find_element(By.CSS_SELECTOR, <span class="string">&quot;.display-video .jss29&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;user: &#123;&#125; join meeting and show screen&quot;</span>.<span class="built_in">format</span>(user_name))</span><br><span class="line">        video_button.click()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;user: &#123;&#125; join meeting with no screen&quot;</span>.<span class="built_in">format</span>(user_name))</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 循环创建 100 个用户</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        join_participants(<span class="string">&quot;https://meeting.cn/test&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待 10 分钟</span></span><br><span class="line">    time.sleep(<span class="number">600</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p><a
href="https://meetrix.io/blog/webrtc/jitsi/jitsi-meet-load-testing.html">Load
Testing Jitsi Meet - Meetrix.IO</a></p>
<p><a
href="https://h2-invent.com/post/software/jitsi-meet-torture-test-docker-and-jwt">Jitsi-Meet
Torture/Load Test with Docker and JWT</a></p>
<p><a
href="https://github.com/jitsi/jitsi-meet-torture">jitsi/jitsi-meet-torture
(github.com)</a></p>
]]></content>
      <categories>
        <category>Software</category>
        <category>JitsiMeet</category>
      </categories>
      <tags>
        <tag>Software</tag>
        <tag>Jitsi</tag>
      </tags>
  </entry>
  <entry>
    <title>JitsiMeet 获取所有的房间列表</title>
    <url>/posts/2023/220EMHS.html</url>
    <content><![CDATA[<p>当部署 jitsi-meet
后，若与现有的系统进行集成，需要获取当前所有活动的房间列表来方便管理。此时需要通过
prosody 提供的 lua 插件来实现。</p>
<blockquote>
<p>本文基于 docker 部署 jitsi-meet</p>
</blockquote>
<span id="more"></span>
<p>阅读本文时请保证有 <a href="/posts/2023/9Q7N69.html">JitsiMeet docker
部署及设置 jw 授权</a> 相关知识作为前提。</p>
<h2 id="配置">配置</h2>
<p>使用 jitsi 提供的 <code>muc_census,muc_size</code>
两个插件来实现，具体配置步骤如下：</p>
<h3 id="映射-prosody-端口">映射 prosody 端口</h3>
<p>在 prosody 配置中，添加 ports 端口映射</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ...</span></span><br><span class="line">prosody:</span><br><span class="line">  ports:</span><br><span class="line">    - <span class="number">7280</span>:<span class="number">5280</span></span><br></pre></td></tr></table></figure>
<h3 id="修改-.env-文件加载插件">修改 .env 文件加载插件</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加如下配置</span></span><br><span class="line"><span class="comment"># prosody 额外加载的模块</span></span><br><span class="line">XMPP_MODULES=muc_census,muc_size</span><br><span class="line"><span class="comment"># room_name 完整名称的前缀，在 muc_size 中要用到</span></span><br><span class="line">XMPP_MUC_DOMAIN_PREFIX = muc</span><br></pre></td></tr></table></figure>
<blockquote>
<p>prosody 在 .env 中的所有配置可以通过
<code>prosody\rootfs\defaults\conf.d\jitsi-meet.cfg.lua</code>
来查看，里面以
<code>$</code>+大写字母的变量都是配置变量，可以根据代码推理每个配置的作用。</p>
</blockquote>
<h3 id="防火墙放行-7280tcp-端口">防火墙放行 7280/tcp 端口</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开放 tcp</span></span><br><span class="line">netsh advfirewall firewall add rule name=jitsi<span class="literal">-prosody-tcp</span> <span class="built_in">dir</span>=<span class="keyword">in</span> action=allow protocol=TCP localport=<span class="number">7280</span></span><br></pre></td></tr></table></figure>
<h3 id="nginx-反向代理">nginx 反向代理</h3>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nginx.conf 主文件</span></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span> mime.types;</span><br><span class="line">	</span><br><span class="line">    <span class="comment"># http_servers/jitsi.conf</span></span><br><span class="line">	<span class="comment"># jitsi 会议配置</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line">        <span class="attribute">server_name</span>  your-prosody-domain;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#ssl_certificate      F:/encrypt/keys/web/iepc/iepc.shenweitech.cn-chain.pem;</span></span><br><span class="line">        <span class="comment">#ssl_certificate_key  F:/encrypt/keys/web/iepc/iepc.shenweitech.cn-key.pem;</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_certificate</span>      F:/encrypt/keys/root/fullchain.pem;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>  F:/encrypt/keys/root/privkey.pem;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_session_cache</span>    shared:SSL:<span class="number">1m</span>;</span><br><span class="line">        <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_ciphers</span>  HIGH:!aNULL:!MD5;</span><br><span class="line">        <span class="attribute">ssl_prefer_server_ciphers</span>  <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;			</span><br><span class="line">            <span class="attribute">proxy_pass</span>   http://服务器ip:7280;</span><br><span class="line">            <span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line">            <span class="attribute">proxy_read_timeout</span> <span class="number">600</span>;			</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;	   </span><br><span class="line">        &#125;</span><br><span class="line">	</span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Origin <span class="string">&quot;*&quot;</span>;</span><br><span class="line">        <span class="attribute">default_type</span> <span class="string">&#x27;text/html&#x27;</span>;</span><br><span class="line">        <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用">使用</h2>
<h3 id="获取当前所有房间">获取当前所有房间</h3>
<ul>
<li><p>url：get</p>
<p><code>http://服务器ip:5280/room-census</code></p></li>
<li><p>结果</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;room_census&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;room_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@muc.meet.jitsi&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;participants&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created_time&quot;</span><span class="punctuation">:</span> <span class="number">1687876740000</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="获取房间的成员">获取房间的成员</h3>
<ul>
<li><p>url：get</p>
<p><code>http://192.168.3.240:5280/room?room=test&amp;domain=meet.jitsi</code></p>
<p>其中 room 为需要查看的房间的名称，上述 room_name 中 @
之前的部分</p></li>
<li><p>结果</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;display_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@muc.meet.jitsi/8c5f7b20&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;display_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;galens&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@muc.meet.jitsi/adc31d69&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>如果设置了 jwt 认证，则需要传递一个 <code>token</code>
参数，<code>token</code> 中 payload 的 room 值必须包含查询的房间名或者为
<code>*</code> 号</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;context&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:/gravatar.com/avatar/abc123&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jdoe@example.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;abcd:a1b2c3-d4e5f6-0abc1-23de-abcdef01fedcba&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a123-123-456-789&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;aud&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jitsi&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;iss&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_client&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;meet.jit.si&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;room&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test,test-other,so-on&quot;</span><span class="punctuation">,</span> <span class="comment">// 或者 *</span></span><br><span class="line">    <span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span> <span class="number">1500006923</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p><a
href="https://community.jitsi.org/t/get-the-list-of-rooms/14895">Get the
list of rooms - Developers / Jitsi Meet API - Jitsi Community Forum -
developers &amp; users</a></p>
<p><a
href="https://github.com/jitsi/jitsi-meet/blob/master/resources/prosody-plugins/mod_muc_census.lua">jitsi-meet/resources/prosody-plugins/mod_muc_census.lua
at master · jitsi/jitsi-meet · GitHub</a></p>
<p><a
href="https://github.com/jitsi/jitsi-meet/blob/master/resources/prosody-plugins/mod_muc_size.lua">jitsi-meet/resources/prosody-plugins/mod_muc_size.lua
at master · jitsi/jitsi-meet · GitHub</a></p>
]]></content>
      <categories>
        <category>Software</category>
        <category>JitsiMeet</category>
      </categories>
      <tags>
        <tag>Software</tag>
        <tag>Jitsi</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>JitsiMeet 配置多个 JVB 实例实现视屏的负载均衡</title>
    <url>/posts/2023/3J3YEMD.html</url>
    <content><![CDATA[<p>JitsiMeet 中的 jvb
负载均衡是按会议来进行分发的。无法实现同一个会议不同用户的负载均衡。</p>
<p>因此本文未继续研究，以待需要再行补充。</p>
<span id="more"></span>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<p><a
href="https://community.jitsi.org/t/docker-jvb-scaling/125608">Docker
JVB Scaling! - Install &amp; Config / Docker - Jitsi Community Forum -
developers &amp; users</a></p>
<p><a
href="https://community.jitsi.org/t/jitsi-meet-docker-for-a-large-event-the-aftermath-server-sizing-tips/86931">Jitsi-Meet
(docker) for a large event - The aftermath! (Server sizing tips) -
Install &amp; Config - Jitsi Community Forum - developers &amp;
users</a></p>
<p><a href="https://juejin.cn/s/jitsi%20docker%20multiple%20jvb">jitsi
docker multiple jvb-掘金 (juejin.cn)</a></p>
]]></content>
      <categories>
        <category>Software</category>
        <category>JitsiMeet</category>
      </categories>
      <tags>
        <tag>Software</tag>
        <tag>Jitsi</tag>
      </tags>
  </entry>
  <entry>
    <title>JitsiMeet 使用 Docker 私有化部署获取事件回调</title>
    <url>/posts/2023/YQ1DGH.html</url>
    <content><![CDATA[<p>私有化部署 jitsi-meet 后，可以通过 prosody 服务的
<code>event_sync_component</code> 插件来向指定服务器回调事件。</p>
<p>该插件支持的事件有：</p>
<ul>
<li>房间创建</li>
<li>房间释放</li>
<li>用户加入</li>
<li>用户退出</li>
</ul>
<span id="more"></span>
<h2 id="简介">简介</h2>
<p>当事件被触发后，该组件将会向指定的外部 API 发送 Post 请示，请求体为
Json 格式。</p>
<p>如果使用 JWT token 认证的话，同时还会发送 token 中 context 中的
name，email 和 id。</p>
<h2 id="安装">安装</h2>
<blockquote>
<p>本文通过 docker 的方式安装的 jitsi-meet，这种安装方式不支持通过
<code>Component</code>
的方式手动注册插件，也无法添加额外的配置变量。</p>
<p>因此需要改动插件的源代码，使其符合自己的使用需求</p>
</blockquote>
<h3 id="下载插件">下载插件</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开 powershell</span></span><br><span class="line"><span class="comment"># 查找 prosody 容器的 id</span></span><br><span class="line">docker <span class="built_in">ps</span> <span class="operator">-f</span> name=prosody</span><br><span class="line"><span class="comment"># 假设 id 为：f04634fde422</span></span><br><span class="line">docker exec <span class="literal">-it</span> f04634fde422 /bin/bash</span><br><span class="line"><span class="comment"># 进入 prosody-plugins-custom 目录</span></span><br><span class="line"><span class="built_in">cd</span> prosody<span class="literal">-plugins-custom</span>/</span><br><span class="line"><span class="comment"># 下载 event_sync_component 插件到该目录</span></span><br><span class="line"><span class="built_in">wget</span> <span class="literal">-O</span> mod_event_sync_component.lua https://raw.githubusercontent.com/jitsi<span class="literal">-contrib</span>/prosody<span class="literal">-plugins</span>/main/event_sync/mod_event_sync_component.lua</span><br></pre></td></tr></table></figure>
<h3 id="修改插件">修改插件</h3>
<blockquote>
<p>可以使用 vscode 远程服务器后，安装 Docker
插件对容器进行对文件进行修改</p>
</blockquote>
<ol type="1">
<li><p>修改变量</p>
<p>由于prosody镜像的原因，导致无法直接配置 prosody
变量，因此为了能够可以使用插件，打开插件源代码，对里面的部分定义进行修改，内容如下：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 为 prosody 虚拟机环境的地址，一般都为 muc.meet.jitsi</span></span><br><span class="line"><span class="keyword">local</span> main_muc_component_host = <span class="string">&quot;muc.meet.jitsi&quot;</span>;</span><br><span class="line"><span class="comment">-- 将其修改成回调服务器地址即可</span></span><br><span class="line"><span class="keyword">local</span> api_prefix = <span class="string">&quot;http://192.168.3.240:7001/api/v1/callbacks&quot;</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>返回 display_name</p>
<p>原插件没有返回用户的
display_name，当用户通过网址进入时，无法确定用户的身份，因此需要返回用户自己设置的
display_name 供回调服务器处理。</p>
<p><strong>修改 occupant_joined：</strong></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 找到 occupant_joined 函数</span></span><br><span class="line"><span class="comment">-- 将</span></span><br><span class="line"><span class="keyword">local</span> occupant_data = room_data:on_occupant_joined(occupant_jid, event.origin);</span><br><span class="line"><span class="comment">-- 修改为</span></span><br><span class="line"><span class="keyword">local</span> occupant_data = room_data:on_occupant_joined(occupant_jid, event);</span><br></pre></td></tr></table></figure>
<p><strong>修改 EventData:on_occupant_joined：</strong></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 找到 EventData:on_occupant_joined 函数,修改为如下代码：</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EventData:on_occupant_joined</span><span class="params">(occupant_jid, event)</span></span></span><br><span class="line">    <span class="keyword">local</span> event_origin = event.origin</span><br><span class="line">    <span class="keyword">local</span> user_context = event_origin.jitsi_meet_context_user <span class="keyword">or</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- get displayName</span></span><br><span class="line">    <span class="keyword">local</span> display_name = event.occupant:get_presence():get_child_text(<span class="string">&#x27;nick&#x27;</span>, <span class="string">&#x27;http://jabber.org/protocol/nick&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- N.B. we only store user details on join and assume they don&#x27;t change throughout the duration of the meeting</span></span><br><span class="line">    <span class="keyword">local</span> occupant_data = &#123;</span><br><span class="line">        occupant_jid = occupant_jid,</span><br><span class="line">        name = user_context.name,</span><br><span class="line">        id = user_context.id,</span><br><span class="line">        email = user_context.email,</span><br><span class="line">        joined_at = now(),</span><br><span class="line">        left_at = <span class="literal">nil</span>,</span><br><span class="line">        display_name = display_name</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">self</span>.occupants[occupant_jid] = occupant_data;</span><br><span class="line">    <span class="built_in">self</span>.active[occupant_jid] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> occupant_data;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="加载插件">加载插件</h3>
<p>向 <code>.env</code> 文件中的 <code>XMPP_MUC_MODULES</code> 添加
<code>event_sync_component</code>，使该组件生效：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">XMPP_MUC_MODULES=muc_census,muc_size,event_sync_component</span><br></pre></td></tr></table></figure>
<h3 id="重新创建容器">重新创建容器</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker<span class="literal">-compose</span> up <span class="literal">-d</span></span><br></pre></td></tr></table></figure>
<p>至此，事件回调插件加载成功。</p>
<h2 id="参考">参考</h2>
<p><a
href="https://community.jitsi.org/t/get-callbacks-on-my-custom-server/18027">Get
callbacks on my custom server - Developers - Jitsi Community Forum -
developers &amp; users</a></p>
<p><a
href="https://github.com/jitsi-contrib/prosody-plugins/blob/main/event_sync/README.md#event-sync">prosody-plugins/event_sync/README.md
at main · jitsi-contrib/prosody-plugins · GitHub</a></p>
]]></content>
      <categories>
        <category>Software</category>
        <category>JitsiMeet</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Software</tag>
        <tag>jitsi</tag>
      </tags>
  </entry>
  <entry>
    <title>JitsiMeet 为房间添加描述</title>
    <url>/posts/2023/3JD9V8X.html</url>
    <content><![CDATA[<p>在搭建 jitsi-meet
后，有时候希望会议中不显示房间名称，而是显示自定义的主题，可以通过以下方法实现。</p>
<span id="more"></span>
<h2 id="在-url-中配置">在 url 中配置</h2>
<p>在 url 中添加 <code>#config.subject="your subject"</code>
配置，如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">https://meet.jit.si/abbe961f<span class="literal">-53a0-44de-84e2-177df24cd16</span><span class="comment">#config.subject=&quot;TestMeeting&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：</p>
<ul>
<li>房间 id 后面有一个 # 号</li>
<li>主题要用双引号括起来</li>
</ul>
</blockquote>
<h2 id="使用租户模式">使用租户模式</h2>
<p>租户模式格式如下：</p>
<p><code>https://domain.com/tenant/roomname</code></p>
<p>tenant 代表租户名称，可以通过创建不同的租户来隔离同名的房间</p>
<h2 id="参考">参考</h2>
<p><a
href="https://community.jitsi.org/t/solved-is-there-any-way-to-add-room-name-description/73250/7">Is
there any way to add room name/description</a></p>
<p><a
href="https://community.jitsi.org/t/jitsi-prefix-room-name/113814/15">jitsi-prefix-room-name</a></p>
]]></content>
      <categories>
        <category>Software</category>
        <category>JitsiMeet</category>
      </categories>
      <tags>
        <tag>Software</tag>
        <tag>jitsi</tag>
      </tags>
  </entry>
  <entry>
    <title>JitsiMeet 通过 JWT 配置用户的主持人角色</title>
    <url>/posts/2023/2SE43YW.html</url>
    <content><![CDATA[<p>有些时候我们可能需要预定会议，同时允许会议的成员提前加入到会议中，根据
jitsi-meet
的逻辑，第一个加入的成员必定为主持人(modertator)，为了保证主持人是会议的预定者，在预定者加入时，我们需要修改预订者的角色为
moderator。</p>
<p>本文将介绍如何通过JWT 认证来设置用户的主持人角色。</p>
<span id="more"></span>
<h2 id="前提">前提</h2>
<p>该方式需要使用 JWT 认证的方式。转到 <a
href="/posts/2023/9Q7N69.html">JitsiMeet docker 部署及设置 jw 授权</a>
了解如果配置 JWT。</p>
<h2 id="安装">安装</h2>
<ul>
<li><p>从 <a
href="https://github.com/nvonahsen/jitsi-token-moderation-plugin/blob/master/mod_token_moderation.lua">jitsi-token-moderation-plugin</a>
下载该插件</p></li>
<li><p>按 <a
href="/posts/2023/3G2MHZ7.html#在-docker-中使用自定义的插件">在 docker
中使用自定义的插件</a> 方法安装插件</p></li>
</ul>
<h2 id="使用">使用</h2>
<p>在生成 token 时，包含 <code>moderator</code> 参数即可，例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;context&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:/gravatar.com/avatar/abc123&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jdoe@example.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;abcd:a1b2c3-d4e5f6-0abc1-23de-abcdef01fedcba&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a123-123-456-789&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aud&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;iss&quot;</span><span class="punctuation">:</span> <span class="string">&quot;your_app_id&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;meet.example.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;room&quot;</span><span class="punctuation">:</span> <span class="string">&quot;your_room&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;moderator&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;nbf&quot;</span><span class="punctuation">:</span> <span class="number">1664475176</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span> <span class="number">1695998576</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：</p>
<p>moderator 的值是 boolean 值</p>
</blockquote>
<p>当用户使用该 token 加入房间时，就自动设置为主持人了。</p>
<h2 id="参考">参考</h2>
<p><a
href="https://community.jitsi.org/t/set-role-for-meeting-participants-with-api/72642">Set
role for meeting participants with API</a></p>
<p><a
href="https://github.com/nvonahsen/jitsi-token-moderation-plugin">nvonahsen/jitsi-token-moderation-plugin:
Lua plugin for jitsi which determines whether users are moderator or not
based on token contents (github.com)</a></p>
]]></content>
      <categories>
        <category>Software</category>
        <category>JitsiMeet</category>
      </categories>
      <tags>
        <tag>Software</tag>
        <tag>jitsi</tag>
      </tags>
  </entry>
  <entry>
    <title>.NET 中使用 Minio 遇到的一些坑</title>
    <url>/posts/2022/22T138.html</url>
    <content><![CDATA[<p>本文总结了在 .NetCore 中使用 Minio 的过程中遇到的一些问题。</p>
<span id="more"></span>
<h2 id="连接客户端时报错">连接客户端时报错</h2>
<p>在连接客户端时，报错：<code>Minio.Exceptions.InvalidEndpointException: MinIO API responded with message=No path allowed in endpoint.</code></p>
<p>连接代码为：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">MinioClient minioClient = <span class="keyword">new</span> MinioClient(<span class="string">&quot;https://XXXX:9000&quot;</span>,accessKey:<span class="string">&quot;Q3AM3UQ867SPQQA43P2F&quot;</span>,secretKey:<span class="string">&quot;zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG&quot;</span>).WithSSL();</span><br></pre></td></tr></table></figure>
<p><strong>解决方法：</strong></p>
<p>把 url 的前缀 <code>https://</code> 去掉即可。</p>
<h2 id="签名验证失败">签名验证失败</h2>
<p>在使用 <code>minioClient</code>时，报错：
<code>MinIO API responded with message=The request signature we calculated does not match the signature you provided. Check your key and signing method.</code></p>
<h3 id="解决办法">解决办法</h3>
<p>出现这种问题的原因是 minio 在校验 signature 是否有效的时候，必须从
http header 里面获取 host，而我们这里没有对 header
作必要的处理。如果源请求未携带这个头，则 minio 处无法获取请求头中的
host。</p>
<p>可以在 nginx 中添加如下配置解决：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /</span><br><span class="line">&#123;</span><br><span class="line">     proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">     proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">     proxy_set_header Host $http_host;</span><br><span class="line"></span><br><span class="line">     proxy_connect_timeout 300;</span><br><span class="line">     # Default is HTTP/1, keepalive is only enabled in HTTP/1.1</span><br><span class="line">     proxy_http_version 1.1;</span><br><span class="line">     proxy_set_header Connection &quot;&quot;;</span><br><span class="line">     proxy_pass http://localhost:9000;</span><br><span class="line">     chunked_transfer_encoding off;</span><br><span class="line">     </span><br><span class="line">     // 非常重要</span><br><span class="line">	 proxy_cache_convert_head off;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考">参考</h3>
<p>http://www.dreamwu.com/post-2068.html</p>
<p>https://docs.min.io/docs/setup-nginx-proxy-with-minio.html</p>
<p>https://segmentfault.com/a/1190000019422246</p>
<h2 id="访问bucket被拒绝">访问bucket被拒绝</h2>
<p>当调用 <code>BucketExistsAsync("public")</code>
时，报错：<code>MinIO API responded with message=Access denied on the resource: public/.</code></p>
<h3 id="解决办法-1">解决办法</h3>
<p>这个问题是由代理转换 HEAD 请求到 GET 请求引起的。</p>
<p>我在使用nginx作为反向代理时遇到了这个问题，并通过添加以下配置解决了它:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxy_cache_convert_head off;</span><br></pre></td></tr></table></figure>
<h3 id="参考-1">参考</h3>
<ol type="1">
<li><p>https://github.com/minio/minio-js/issues/842#issuecomment-810282099</p></li>
<li><p><a
href="https://blog.csdn.net/weixin_39959236/article/details/110463453">head请求_HTTP请求方法</a></p></li>
</ol>
]]></content>
      <categories>
        <category>Software</category>
        <category>Minio</category>
      </categories>
      <tags>
        <tag>.NET</tag>
        <tag>Minio</tag>
      </tags>
  </entry>
  <entry>
    <title>Minio-js的正确安装与使用</title>
    <url>/posts/2022/2N5VCDY.html</url>
    <content><![CDATA[<p>本文主要介绍 <code>minio-js</code>
的正确安装与使用。在网上搜了好久，都没有找到一个能正常运行
<code>minio-js</code> 的使用教程，包括官网。所以本文对此进行总结。</p>
<span id="more"></span>
<h2 id="正文">正文</h2>
<h3 id="node-环境安装">node 环境安装</h3>
<p>运行该示例包，需要在 node 环境下，一般使用这个包的，都有 node
环境，此处不再赘述。</p>
<blockquote>
<p>如果没有 node 环境，可以使用 scoop 安装，很是方便。</p>
<p>scoop 安装方法：https://galens.uamazing.cn/2020/14XXNWG.html</p>
</blockquote>
<h3 id="下载源码">下载源码</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/minio/minio<span class="literal">-js</span></span><br><span class="line"><span class="built_in">cd</span> minio<span class="literal">-js</span></span><br><span class="line"><span class="comment"># 安装依赖包</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment"># 下面的步骤可选</span></span><br><span class="line"><span class="comment"># 代表将 minio-js 作为一个包安装到 nodejs 全局的 node_modules 中</span></span><br><span class="line"><span class="comment"># 由于是本地目录，所以 node_modules 中的 minio-js 相当于一个快捷方式</span></span><br><span class="line">npm install <span class="literal">-g</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>暂时没有发现 <code>npm install -g</code>
之后对于测试有什么方便的地方，所以本文就不运行该行命令</p>
</blockquote>
<h3 id="安装-minio">安装 minio</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install <span class="literal">--save</span> minio</span><br></pre></td></tr></table></figure>
<h2 id="怎么运行示例">怎么运行示例</h2>
<p>在项目的 examples
目录下，我们可以看到有很多的例子，如果要运行某个示例，运行如下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line">node relativePath</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果当前在 minio-js 目录，要运行 bucket-exists.js 示例</span></span><br><span class="line">node examples/bucket<span class="literal">-exists</span></span><br></pre></td></tr></table></figure>
<h3 id="自定义测试">自定义测试</h3>
<p>当然，自己也可以自定义 minio
运行脚本来进行测试。参考示例中的文件编写即可。</p>
<blockquote>
<p><strong>注意：</strong></p>
<p>只支持 CommonJs 语法，不支持 ES6 语法。</p>
</blockquote>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a href="https://github.com/minio/minio-js">github 官方文档</a></li>
</ol>
]]></content>
      <categories>
        <category>Software</category>
        <category>Minio</category>
      </categories>
      <tags>
        <tag>Minio</tag>
        <tag>Minio-js</tag>
        <tag>Javalscript</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>Kodbox中用Minio当存储时上传大文件提示上传失败</title>
    <url>/posts/2022/2QWMRNH.html</url>
    <content><![CDATA[<p>本人使用 kobox 搭建了一个私有网盘，用 minio 搭建了一个对象存储作为
kodbox 的存储，但是最近在 kodbox 中上传稍大点的文件（大于 100K
左右）时，就提示上传失败，又很神奇的是，在 minio
却发现该文件已经成功上传了。</p>
<h2 id="正文">正文</h2>
<p>上述问题困扰了我两天，然后偶然看到一个答案，顺利解决了。</p>
<blockquote>
<p>I think the problem is caused by the proxy converting HEAD requests
to GET requests.</p>
<p>I ran into this problem when using nginx as a reverse proxy and
solved it by adding the following configuration:</p>
<p><code>proxy_cache_convert_head off;</code></p>
</blockquote>
<p>所以，解决方法就是在 nginx 配置中添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxy_cache_convert_head off;</span><br></pre></td></tr></table></figure>
<h2 id="后记">后记</h2>
<p>官方关于 minio
中反向代理的配置不全，导致怎么配置都有问题。这两天觉都没睡好，唉，坑是真的多呀，心累，不折腾了~</p>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a
href="https://github.com/minio/minio-js/issues/842#issuecomment-810282099">minio/minio-js#842
(comment)</a></li>
</ol>
]]></content>
      <categories>
        <category>Software</category>
        <category>Minio</category>
      </categories>
      <tags>
        <tag>Minio</tag>
        <tag>Kodbox</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 中安装 MinIO 作为静态资源服务</title>
    <url>/posts/2022/3PMWKNV.html</url>
    <content><![CDATA[<figure>
<img data-src="https://raw.githubusercontent.com/minio/minio/master/.github/logo.svg?sanitize=true"
alt="https://min.io/" />
<figcaption aria-hidden="true">https://min.io/</figcaption>
</figure>
<p>本文主要记录在 Ubuntu 24.04 x64 上使用 Docker 安装 MinIO
作为静态资源服务的流程。基于
MinIO，可以满足图床、静态存储、对象存储等应用场景。</p>
<span id="more"></span>
<h2 id="docker-compose-安装-minio">docker-compose 安装 MinIO</h2>
<blockquote>
<p>本文使用的 Docker 版本为：Docker version 27.3.1, build ce12230</p>
</blockquote>
<p><code>docker-compose.yml</code> 内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 高版本的 docker-compose 会自动配置 version, 此处为空</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">minio:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">minio/minio</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">51080</span><span class="string">:9000</span> <span class="comment"># api 端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">51180</span><span class="string">:9001</span> <span class="comment"># 控制台端口</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MINIO_ROOT_USER:</span> <span class="string">root</span>    <span class="comment"># 管理后台用户名</span></span><br><span class="line">      <span class="attr">MINIO_ROOT_PASSWORD:</span> <span class="string">root_password</span> <span class="comment"># 管理后台密码，最小8个字符</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/data:/data</span>               <span class="comment"># 映射当前目录下的data目录至容器内/data目录</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/config:/root/.minio/</span>     <span class="comment"># 映射配置目录</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">server</span> <span class="string">--console-address</span> <span class="string">&#x27;:9001&#x27;</span> <span class="string">/data</span>  <span class="comment"># 指定容器中的目录 /data</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nginx_network</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">nginx_network:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>将上述内容保存为 <code>docker-compose.yml</code>
文件，然后在目录中执行 <code>docker compose up -d</code> 运行实例。</p>
<h2 id="配置-nginx">配置 nginx</h2>
<p>一台服务器可能有多个服务，因此将 nginx 独立成一个单独的
docker-compose，其它容器通过 <code>nginx_network</code> 与 nginx
容器相连。</p>
<p>nginx 的 docker-compose.yml 如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">443</span><span class="string">:443</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/cert:/etc/nginx/cert</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/conf.d:/etc/nginx/conf.d</span> <span class="comment"># 每个服务的 nginx 配置单独成一个 `*.conf` 文件放到 conf.d 目录中，nginx 会自动加载</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NGINX_PORT=80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="comment"># privileged: true</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nginx_network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">nginx_network:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>minio 的 nginx 配置为（文件路径
<code>xxx/data/conf.d/minio.conf</code>）：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> minio_upstream &#123;</span><br><span class="line">    <span class="comment"># minio 为主机名，在 docker-compose 中定义的，端口为 docker 中 MinIO 的端口</span></span><br><span class="line">    <span class="attribute">server</span> minio:<span class="number">9000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment"># 域名与端口</span></span><br><span class="line">    <span class="attribute">server_name</span> obs.uamazing.cn;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># ssl</span></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/cert/uamazing.cn_ecc/uamazing.cn.cer;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/cert/uamazing.cn_ecc/uamazing.cn.key;</span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:!MD5;</span><br><span class="line">    <span class="comment"># 强制 https</span></span><br><span class="line">    <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&quot;max-age=31536000&quot;</span>;</span><br><span class="line">    <span class="comment"># 其它 ssl 优化</span></span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">2m</span>;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">1h</span>;</span><br><span class="line">    <span class="attribute">ssl_session_tickets</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 不限制文件大小</span></span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment"># 禁用了代理缓冲, 提升速度</span></span><br><span class="line">    <span class="attribute">proxy_buffering</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/proxy_access.log main;</span><br><span class="line">    <span class="attribute">error_log</span> /var/log/nginx/proxy_error.log <span class="literal">info</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="comment"># 设置多个 HTTP 头部来传递客户端的真实 IP 地址、请求的原始协议和主机名等信息</span></span><br><span class="line">        <span class="comment"># 这些头部对于后端服务器处理请求、记录日志和进行安全审计非常重要</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-NginX-Proxy <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">3600</span>;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">3600</span>;</span><br><span class="line">        <span class="attribute">proxy_send_timeout</span> <span class="number">3600</span>;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">        <span class="attribute">chunked_transfer_encoding</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://minio_upstream;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="minio-创建静态">MinIO 创建静态</h2>
<p>为了实现图床功能，可以在 MinIO 中创建一个 public 仓库来实现。</p>
<p>具体步骤如下：</p>
<ol type="1">
<li><p>使用<strong>管理端口</strong>登陆 MinIO</p></li>
<li><p>创建 Bucket</p>
<p>通过【Buckets/Create Bucket
+】来创建一个新的存储桶，输入存储桶的名称，示例中为
<code>public</code>，最终结果如下图所示：</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240927171130390.png"
alt="image-20240927171130390.png" />
<figcaption aria-hidden="true">image-20240927171130390.png</figcaption>
</figure></li>
<li><p>修改 <code>public</code> Bucket 的访问策略</p>
<p>单击【Access
Policy】后面的铅笔图标，将其从【Priave】修改为【Public】，单击应用【Set】应用</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240927171643219.png"
alt="image-20240927171643219" />
<figcaption aria-hidden="true">image-20240927171643219</figcaption>
</figure>
<p>由于 Public 策略允许查看 Bucket
某个目录下的文件列表，因此要对该权限进行禁用。将访问策略从【Public】改成【Custom】，然后移除
<code>Statement.Action</code> 中的 <code>s3:ListBucket</code> 和
<code>s3:ListBucketMultipartUploads</code>，最终结果如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2012-10-17&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Statement&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Principal&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;AWS&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="string">&quot;*&quot;</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Action&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;s3:GetBucketLocation&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Resource&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::public&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Principal&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;AWS&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="string">&quot;*&quot;</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Action&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;s3:AbortMultipartUpload&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;s3:DeleteObject&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;s3:GetObject&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;s3:ListMultipartUploadParts&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;s3:PutObject&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Resource&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::public/*&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>单击【Set】进行应用。</p></li>
</ol>
<h2 id="增加读写用户">增加读写用户</h2>
<p>若要在程序中向 <code>public</code> 桶中上传文件，需要创建一个具有读写
<code>public</code> 目录权限的 Access Key。</p>
<p>打开
<code>Restict beyond user policy</code>，修改为下列权限策略：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2012-10-17&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Statement&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Action&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;s3:*&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Resource&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::public&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::public/*&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>最终结果如下图所示：</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20240927180156357.png"
alt="image-20240927180156357" />
<figcaption aria-hidden="true">image-20240927180156357</figcaption>
</figure>
<p>添加完成后，即可在程序中使用该 Access Key 和 Secrect Key
进行上传操作。</p>
]]></content>
      <categories>
        <category>Software</category>
        <category>Minio</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>MinIO</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 语法使用手册</title>
    <url>/posts/2019/3Y73VWH.html</url>
    <content><![CDATA[<p>Markdown 语法。</p>
<span id="more"></span>
<h2 id="基本语法">基本语法</h2>
<h3 id="斜体和粗体">1. 斜体和粗体</h3>
<p>使用 * 和 ** 表示斜体和粗体。</p>
<p>示例：</p>
<p>这是 <em>斜体</em>，这是 <strong>粗体</strong>。</p>
<h3 id="分级标题">2. 分级标题</h3>
<p>使用 === 表示一级标题，使用 --- 表示二级标题。</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是一个一级标题</span><br><span class="line">============================</span><br><span class="line"></span><br><span class="line">这是一个二级标题</span><br><span class="line">----------------------------</span><br><span class="line"></span><br><span class="line">### 这是一个三级标题</span><br></pre></td></tr></table></figure>
<p>你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ##
H2, ### H3，#### H4。</p>
<h3 id="外链接">3. 外链接</h3>
<p>使用 [描述](链接地址) 为文字增加外链接。</p>
<p>示例：</p>
<p>这是去往 <a href="https://noctiflorous.gitee.io/">本人博客</a>
的链接。</p>
<h3 id="无序列表">4. 无序列表</h3>
<p>使用 *，+，- 表示无序列表。</p>
<p>示例：</p>
<ul>
<li>无序列表项 一</li>
<li>无序列表项 二</li>
<li>无序列表项 三</li>
</ul>
<h3 id="有序列表">5. 有序列表</h3>
<p>使用数字和点表示有序列表。</p>
<p>示例：</p>
<ol type="1">
<li>有序列表项 一</li>
<li>有序列表项 二</li>
<li>有序列表项 三</li>
</ol>
<h3 id="文字引用">6. 文字引用</h3>
<p>使用 &gt; 表示文字引用。</p>
<p>示例：</p>
<blockquote>
<p>野火烧不尽，春风吹又生。</p>
</blockquote>
<h3 id="行内代码块">7. 行内代码块</h3>
<p>使用 `代码` 表示行内代码块。</p>
<p>示例：</p>
<p>让我们聊聊 <code>html</code>。</p>
<h3 id="代码块">8. 代码块</h3>
<p>使用 四个缩进空格 表示代码块。</p>
<p>示例：</p>
<pre><code>这是一个代码块，此行左侧有四个不可见的空格。</code></pre>
<h3 id="插入图像">9. 插入图像</h3>
<p>使用 ![描述](图片链接地址) 插入图像。</p>
<p>示例：</p>
<figure>
<img data-src="http://img.netbian.com/file/2019/0220/52ea84369dd40268d595766c76fda7f3.jpg"
alt="山水" />
<figcaption aria-hidden="true">山水</figcaption>
</figure>
<h2 id="高阶语法">高阶语法</h2>
<h3 id="内容目录">1. 内容目录</h3>
<p>在段落中填写 <code>[TOC]</code> 或者<code>&#123;:toc&#125;</code>
以显示全文内容的目录结构。</p>
<p>[TOC] {:toc}</p>
<h3 id="标签分类">2. 标签分类</h3>
<p>在编辑区任意行的列首位置输入以下代码给文稿标签：</p>
<p>标签： 数学 英语 Markdown</p>
<p>或者</p>
<p>Tags： 数学 英语 Markdown</p>
<h3 id="删除线">3. 删除线</h3>
<p>使用 ~~ 表示删除线。</p>
<p><del>这是一段错误的文本。</del></p>
<h3 id="注脚">4. 注脚</h3>
<p>使用 [^keyword] 表示注脚。</p>
<p>这是一个注脚<a href="#fn1" class="footnote-ref" id="fnref1"
role="doc-noteref"><sup>1</sup></a>的样例。</p>
<p>这是第二个注脚<a href="#fn2" class="footnote-ref" id="fnref2"
role="doc-noteref"><sup>2</sup></a>的样例。</p>
<h3 id="latex-公式">5. LaTeX 公式</h3>
<p>$ 表示行内公式：</p>
<p>质能守恒方程可以用一个很简洁的方程式 <span
class="math inline">\(E=mc^2\)</span> 来表达。</p>
<p>$$ 表示整行公式：</p>
<p><span class="math display">\[\sum_{i=1}^n a_i=0\]</span></p>
<p><span class="math display">\[f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 +
\cdots + x_n^2 \]</span></p>
<p><span class="math display">\[\sum^{j-1}_{k=0}{\widehat{\gamma}_{kj}
z_k}\]</span></p>
<p>访问 <a
href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">MathJax</a>
参考更多使用方法。</p>
<h3 id="加强的代码块">6. 加强的代码块</h3>
<p>支持四十一种编程语言的语法高亮的显示，行号显示。</p>
<p>非代码示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install vim-gnome</span><br></pre></td></tr></table></figure>
<p>Python 示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">somefunc</span>(<span class="params">param1=<span class="string">&#x27;&#x27;</span>, param2=<span class="number">0</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;A docstring&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;Greater&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SomeClass</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">&#x27;&#x27;&#x27;interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>JavaScript 示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* nth element in the fibonacci series.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> n &gt;= 0</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> the nth element, &gt;= 0.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fib</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> tmp;</span><br><span class="line">  <span class="keyword">while</span> (--n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    tmp = a;</span><br><span class="line">    a += b;</span><br><span class="line">    b = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="title function_">fib</span>(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>
<h3 id="流程图">7. 流程图</h3>
<h4 id="示例">示例</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: Start:&gt;https://www.zybuluo.com</span><br><span class="line">io=&gt;inputoutput: verification</span><br><span class="line">op=&gt;operation: Your Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">sub=&gt;subroutine: Your Subroutine</span><br><span class="line">e=&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;io-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;sub-&gt;io</span><br></pre></td></tr></table></figure>
<h4 id="更多语法参考流程图语法参考">更多语法参考：<a
href="http://adrai.github.io/flowchart.js/">流程图语法参考</a></h4>
<h3 id="序列图">8. 序列图</h3>
<h4 id="示例-1">示例 1</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure>
<h4 id="示例-2">示例 2</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Title: Here is a title</span><br><span class="line">A-&gt;B: Normal line</span><br><span class="line">B--&gt;C: Dashed line</span><br><span class="line">C-&gt;&gt;D: Open arrow</span><br><span class="line">D--&gt;&gt;A: Dashed open arrow</span><br></pre></td></tr></table></figure>
<h4 id="更多语法参考序列图语法参考">更多语法参考：<a
href="http://bramp.github.io/js-sequence-diagrams/">序列图语法参考</a></h4>
<h3 id="甘特图">9. 甘特图</h3>
<p>甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title 项目开发流程</span><br><span class="line">section 项目确定</span><br><span class="line">    需求分析       :a1, 2016-06-22, 3d</span><br><span class="line">    可行性报告     :after a1, 5d</span><br><span class="line">    概念验证       : 5d</span><br><span class="line">section 项目实施</span><br><span class="line">    概要设计      :2016-07-05  , 5d</span><br><span class="line">    详细设计      :2016-07-08, 10d</span><br><span class="line">    编码          :2016-07-15, 10d</span><br><span class="line">    测试          :2016-07-22, 5d</span><br><span class="line">section 发布验收</span><br><span class="line">    发布: 2d</span><br><span class="line">    验收: 3d</span><br></pre></td></tr></table></figure>
<h4 id="更多语法参考甘特图语法参考">更多语法参考：<a
href="https://knsv.github.io/mermaid/#gant-diagrams">甘特图语法参考</a></h4>
<h3 id="mermaid-流程图">10. Mermaid 流程图</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A[Hard edge] --&gt;|Link text| B(Round edge)</span><br><span class="line">B --&gt; C&#123;Decision&#125;</span><br><span class="line">C --&gt;|One| D[Result one]</span><br><span class="line">C --&gt;|Two| E[Result two]</span><br></pre></td></tr></table></figure>
<h4 id="更多语法参考mermaid-流程图语法参考">更多语法参考：<a
href="https://knsv.github.io/mermaid/#flowcharts-basic-syntax">Mermaid
流程图语法参考</a></h4>
<h3 id="mermaid-序列图">11. Mermaid 序列图</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Alice-&gt;John: Hello John, how are you?</span><br><span class="line">loop every minute</span><br><span class="line">    John--&gt;Alice: Great!</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h4 id="更多语法参考mermaid-序列图语法参考">更多语法参考：<a
href="https://knsv.github.io/mermaid/#sequence-diagrams">Mermaid
序列图语法参考</a></h4>
<h3 id="表格支持">12. 表格支持</h3>
<p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 -
来分隔表头和其他行。</p>
<p>语法格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure>
<p>对齐方式</p>
<p><strong>我们可以设置表格的对齐方式：</strong></p>
<ul>
<li>-: 设置内容和标题栏居右对齐。</li>
<li>:- 设置内容和标题栏居左对齐。</li>
<li>:-: 设置内容和标题栏居中对齐。</li>
</ul>
<p>实例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<table>
<thead>
<tr class="header">
<th>项目</th>
<th style="text-align: right;">价格</th>
<th style="text-align: center;">数量</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>计算机</td>
<td style="text-align: right;">$1600</td>
<td style="text-align: center;">5</td>
</tr>
<tr class="even">
<td>手机</td>
<td style="text-align: right;">$12</td>
<td style="text-align: center;">12</td>
</tr>
<tr class="odd">
<td>管线</td>
<td style="text-align: right;">$1</td>
<td style="text-align: center;">234</td>
</tr>
</tbody>
</table>
<h3 id="定义型列表">13. 定义型列表</h3>
<dl>
<dt>名词 1</dt>
<dd>
定义 1（左侧有一个可见的冒号和四个不可见的空格）
</dd>
<dt>代码块 2</dt>
<dd>
<p>这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</p>
<pre><code>代码块（左侧有八个不可见的空格）</code></pre>
</dd>
</dl>
<h3 id="html-标签">14. Html 标签</h3>
<p>本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html
写一个纵跨两行的表格：</p>
<pre><code>&lt;table&gt;
    &lt;tr&gt;
        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;
        &lt;th&gt;星期一&lt;/th&gt;
        &lt;th&gt;星期二&lt;/th&gt;
        &lt;th&gt;星期三&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;李强&lt;/td&gt;
        &lt;td&gt;张明&lt;/td&gt;
        &lt;td&gt;王平&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;</code></pre>
<table>
<tr>
<th rowspan="2">
值班人员
</th>
<th>
星期一
</th>
<th>
星期二
</th>
<th>
星期三
</th>
</tr>
<tr>
<td>
李强
</td>
<td>
张明
</td>
<td>
王平
</td>
</tr>
</table>
<h3 id="内嵌图标">15. 内嵌图标</h3>
<p>本站的图标系统对外开放，在文档中输入</p>
<pre><code>&lt;i class=&quot;icon-weibo&quot;&gt;&lt;/i&gt;</code></pre>
<p>即显示微博的图标： <i class="icon-weibo icon-2x"></i></p>
<p>替换 上述 <code>i 标签</code> 内的 <code>icon-weibo</code>
以显示不同的图标，例如：</p>
<pre><code>&lt;i class=&quot;icon-renren&quot;&gt;&lt;/i&gt;</code></pre>
<p>即显示人人的图标： <i class="icon-renren icon-2x"></i></p>
<p>更多的图标和玩法可以参看 <a
href="http://fortawesome.github.io/Font-Awesome/3.2.1/icons/">font-awesome</a>
官方网站。</p>
<h3 id="待办事宜-todo-列表">16. 待办事宜 Todo 列表</h3>
<p>使用带有 [ ] 或 [x]
（未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：</p>
<pre><code>- [ ] **Cmd Markdown 开发**
    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率
    - [ ] 支持以 PDF 格式导出文稿
    - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)
    - [x] 改进 LaTex 功能
        - [x] 修复 LaTex 公式渲染问题
        - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)
- [ ] **七月旅行准备**
    - [ ] 准备邮轮上需要携带的物品
    - [ ] 浏览日本免税店的物品
    - [x] 购买蓝宝石公主号七月一日的船票</code></pre>
<p>对应显示如下待办事宜 Todo 列表：</p>
<ul class="task-list">
<li><input type="checkbox" /><strong>Cmd Markdown 开发</strong>
<ul class="task-list">
<li><input type="checkbox" />改进 Cmd
渲染算法，使用局部渲染技术提高渲染效率</li>
<li><input type="checkbox" />支持以 PDF 格式导出文稿</li>
<li><input type="checkbox" checked="" />新增Todo列表功能 <a
href="https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments">语法参考</a></li>
<li><input type="checkbox" checked="" />改进 LaTex 功能
<ul class="task-list">
<li><input type="checkbox" checked="" />修复 LaTex 公式渲染问题</li>
<li><input type="checkbox" checked="" />新增 LaTex 公式编号功能 <a
href="http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers">语法参考</a></li>
</ul></li>
</ul></li>
<li><input type="checkbox" /><strong>七月旅行准备</strong>
<ul class="task-list">
<li><input type="checkbox" />准备邮轮上需要携带的物品</li>
<li><input type="checkbox" />浏览日本免税店的物品</li>
<li><input type="checkbox"
checked="" />购买蓝宝石公主号七月一日的船票</li>
</ul></li>
</ul>
<aside id="footnotes" class="footnotes footnotes-end-of-document"
role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>这是一个 <em>注脚</em> 的 <strong>文本</strong>。<a
href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>这是另一个 <em>注脚</em> 的 <strong>文本</strong>。<a
href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</aside>
]]></content>
      <categories>
        <category>Software</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql 创建用户并设置访问权限</title>
    <url>/posts/2025/3HBSA6A.html</url>
    <content><![CDATA[<p>为了保证数据库的安全，在 MySql
中，使用不同权限的账号来访问数据库。本文将介绍如何生成用户并赋予其访问权限。</p>
<span id="more"></span>
<p>具体步骤如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连接到 MySQL 服务器</span></span><br><span class="line"><span class="comment"># 使用管理员账号登陆</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新用户</span></span><br><span class="line"><span class="comment"># 用户名为 newuser</span></span><br><span class="line"><span class="comment"># 密码为 password</span></span><br><span class="line"><span class="comment"># 访问 ip 为 &#x27;localhost&#x27;, 当为 % 时表示允许从任意 ip 访问</span></span><br><span class="line">CREATE USER <span class="string">&#x27;newuser&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授予新用户访问特定数据库的权限</span></span><br><span class="line">GRANT ALL PRIVILEGES ON dbName.* TO <span class="string">&#x27;newuser&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果只想授予特定权限，可以指定权限类型。例如，只授予 SELECT, INSERT, UPDATE, 和 DELETE 权限：</span></span><br><span class="line"><span class="comment"># GRANT SELECT, INSERT, UPDATE, DELETE ON exampledb.* TO &#x27;newuser&#x27;@&#x27;localhost&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新权限</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>
<p>其它备用命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改用户密码</span></span><br><span class="line"><span class="comment"># host 指创建用户时指定的 host</span></span><br><span class="line">ALTER USER <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span> IDENTIFIED BY <span class="string">&#x27;newpassword&#x27;</span>;</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">SET PASSWORD FOR <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span> = PASSWORD(<span class="string">&#x27;newpassword&#x27;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Software</category>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 OfficeToolPlus 安装和激活 Office</title>
    <url>/posts/2023/3H07Q23.html</url>
    <content><![CDATA[<p><a href="https://otp.landian.vip/zh-cn/">Office Tool Plus</a>
是一个强大且实用的 Office 部署工具。</p>
<p>Office Tool Plus 基于 <a href="https://aka.ms/ODT">Office
部署工具</a> 和 <a
href="https://docs.microsoft.com/en-us/DeployOffice/vlactivation/tools-to-manage-volume-activation-of-office">OSPP</a>
制作，可以很方便的部署 Office，其内置迅雷引擎可帮助您更快地下载
Office，当然，你也可以使用 Office Tool Plus
内置的各种小工具或者功能快捷、方便地激活和管理 Office 哦！</p>
<blockquote>
<p>系统要求：Windows 10 或更高版本，不支持其他操作系统（例如 Linux 或
macOS）。</p>
</blockquote>
<span id="more"></span>
<p>若是 win10 以下的系统，推荐使用手动激活的方式：<a
href="https://jihuowin.com/">Windows/Office一键激活</a></p>
<h2 id="软件下载">软件下载</h2>
<p>打开下载界面: <a
href="https://otp.landian.vip/zh-cn/download.html">下载 | Office Tool
Plus 官方网站 (landian.vip)</a></p>
<p>按图中所示选择版本进行下载。</p>
<figure>
<img data-src="https://oss.223434.xyz:2234/public/files/images/image-20230605092738025.png"
alt="image-20230605092738025" />
<figcaption aria-hidden="true">image-20230605092738025</figcaption>
</figure>
<h2 id="office-安装">Office 安装</h2>
<p>下载完成后，将压缩包解压，然后单击 <code>Office Tool Plus.exe</code>
打开安装界面</p>
<ol type="1">
<li><p>选择【部署】</p></li>
<li><p>选择安装 office 版本</p>
<figure>
<img data-src="https://oss.223434.xyz:2234/public/files/images/image-20230605093617556.png"
alt="image-20230605093617556" />
<figcaption aria-hidden="true">image-20230605093617556</figcaption>
</figure>
<blockquote>
<p>建议选择带有年份的升级版本，比如 Office 2021
企业长期版本，下方将以该版本为例进行安装</p>
</blockquote></li>
<li><p>选择要安装的产品</p>
<figure>
<img data-src="https://oss.223434.xyz:2234/public/files/images/image-20230605093736350.png"
alt="image-20230605093736350" />
<figcaption aria-hidden="true">image-20230605093736350</figcaption>
</figure></li>
<li><p>添加语言</p>
<figure>
<img data-src="https://oss.223434.xyz:2234/public/files/images/image-20230605093819077.png"
alt="image-20230605093819077" />
<figcaption aria-hidden="true">image-20230605093819077</figcaption>
</figure></li>
<li><p>开始部署</p>
<p>单击【开始部署】进行下载和安装<img data-src="https://oss.223434.xyz:2234/public/files/images/image-20230605093932995.png"
alt="image-20230605093932995" /></p></li>
</ol>
<h2 id="office-激活">Office 激活</h2>
<p>当提示安装完成后，单击左侧菜单【激活】跳转到激活页面。</p>
<p>可按下图的步骤进行安装：</p>
<figure>
<img data-src="https://oss.223434.xyz:2234/public/files/images/image-20230605094214932.png"
alt="image-20230605094214932" />
<figcaption aria-hidden="true">image-20230605094214932</figcaption>
</figure>
<p>安装详细步骤如下：</p>
<ol type="1">
<li><p>展开许可证管理</p></li>
<li><p>安装许可证</p>
<p>选择在部署步骤中安装的 Office 版本，然后单击【确定(O)】安装许可证</p>
<figure>
<img data-src="https://oss.223434.xyz:2234/public/files/images/image-20230605094445942.png"
alt="image-20230605094445942" />
<figcaption aria-hidden="true">image-20230605094445942</figcaption>
</figure></li>
<li><p>设置 KMS 激活服务器</p>
<p>可以在 https://www.kms.pub/rank.html 处查询 KMS
服务器，推荐使用检测成功次数较多的服务器，比如：<code>win.kms.pub</code></p>
<p>将激活服务器网址输入到 KMS
主机名称框中，然后单击【设置主机(S)】</p></li>
<li><p>单击【激(A)】进行激活</p>
<p>出现如下提示则代表激活成功：</p>
<figure>
<img data-src="https://oss.223434.xyz:2234/public/files/images/image-20230605094921072.png"
alt="image-20230605094921072" />
<figcaption aria-hidden="true">image-20230605094921072</figcaption>
</figure></li>
</ol>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a href="https://otp.landian.vip/zh-cn/">Office Tool Plus</a></li>
<li><a href="https://www.coolhub.top/">Yerong™ | NekoNeko</a></li>
</ol>
]]></content>
      <categories>
        <category>Software</category>
        <category>Office</category>
      </categories>
      <tags>
        <tag>Software</tag>
        <tag>Office</tag>
      </tags>
  </entry>
  <entry>
    <title>JitsiMeet Ubuntu 安装及负载均衡配置</title>
    <url>/posts/2023/3K7WKHR.html</url>
    <content><![CDATA[<p><img data-src="https://github.com/jitsi/jicofo/raw/master/doc/diagram.png?raw=true" /></p>
<p>本文介绍基于 Ubuntu 20.04 安装
Jitsi-meet，同时实现多个视屏桥的负载均衡。本文只记录安装步骤，安装原理请自行阅读下面的参考文章。</p>
<span id="more"></span>
<h2 id="名词解释">名词解释</h2>
<p>MUC：Multi User Chat</p>
<h2 id="ssh-连接-ubuntu-服务器">ssh 连接 Ubuntu 服务器</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ssh username@ipInLAN</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：</span></span><br><span class="line">ssh yourUserName@<span class="number">192.168</span>.<span class="number">1.1</span></span><br></pre></td></tr></table></figure>
<h2 id="jitsi-meet-安装">Jitsi-meet 安装</h2>
<blockquote>
<p>下列命令中，位于一个代码块中的命令行可以整体复制并运行。</p>
</blockquote>
<h3 id="安装环境准备">安装环境准备</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Retrieve the latest package versions across all repositories</span></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ensure support for apt repositories served via HTTPS</span></span><br><span class="line">sudo apt install apt<span class="literal">-transport-https</span></span><br></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Jitsi requires dependencies from Ubuntu&#x27;s universe package repository</span></span><br><span class="line">sudo apt<span class="literal">-add-repository</span> universe</span><br></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>
<h3
id="设置完全限定域名fqdn可选">设置完全限定域名（FQDN）<code>可选</code></h3>
<ul>
<li><p>设置 hostname</p>
<p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo hostnamectl <span class="built_in">set-hostname</span> meet.example.org</span><br></pre></td></tr></table></figure></p></li>
<li><p>修改 hosts: <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br></pre></td></tr></table></figure></p>
<p>向 hosts 里添加如下内容：</p>
<p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span> localhost</span><br><span class="line">x.x.x.x meet.example.org</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><code>x.x.x.x</code> 是公网 IP 地址</p>
</blockquote></li>
<li><p>测试是否联通</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ping <span class="string">&quot;<span class="variable">$</span>(hostname)&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="添加-prosody-包">添加 Prosody 包</h3>
<p><strong>Ubuntu 18.04 and 20.04</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> deb http://packages.prosody.im/debian $(lsb_release -sc) main | sudo <span class="built_in">tee</span> -a /etc/apt/sources.list</span><br><span class="line">wget https://prosody.im/files/prosody-debian-packages.key -O- | sudo apt-key add -</span><br><span class="line">sudo apt install lua5.2</span><br></pre></td></tr></table></figure>
<p><strong>Ubuntu 22.04</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo curl -sL https://prosody.im/files/prosody-debian-packages.key -o /etc/apt/keyrings/prosody-debian-packages.key</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [signed-by=/etc/apt/keyrings/prosody-debian-packages.key] http://packages.prosody.im/debian <span class="subst">$(lsb_release -sc)</span> main&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/prosody-debian-packages.list</span><br><span class="line">sudo apt install lua5.2</span><br></pre></td></tr></table></figure>
<h3 id="添加-jitsi-包">添加 Jitsi 包</h3>
<p><strong>Ubuntu 18.04 and 20.04</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://download.jitsi.org/jitsi-key.gpg.key | sudo sh -c <span class="string">&#x27;gpg --dearmor &gt; /usr/share/keyrings/jitsi-keyring.gpg&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;deb [signed-by=/usr/share/keyrings/jitsi-keyring.gpg] https://download.jitsi.org stable/&#x27;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/jitsi-stable.list &gt; /dev/null</span><br></pre></td></tr></table></figure>
<p><strong>Ubuntu 22.04</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sL https://download.jitsi.org/jitsi-key.gpg.key | sudo sh -c <span class="string">&#x27;gpg --dearmor &gt; /usr/share/keyrings/jitsi-keyring.gpg&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [signed-by=/usr/share/keyrings/jitsi-keyring.gpg] https://download.jitsi.org stable/&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/jitsi-stable.list</span><br></pre></td></tr></table></figure>
<p><strong>更新包</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>
<h3 id="设置防火墙">设置防火墙</h3>
<p>防火墙端口简介：</p>
<table>
<thead>
<tr class="header">
<th>端口</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>80/tcp</td>
<td>证书验证与更新接口</td>
</tr>
<tr class="even">
<td>443/tcp</td>
<td>jitsi 访问接口</td>
</tr>
<tr class="odd">
<td>10000/udp</td>
<td>Audio/Video 传输</td>
</tr>
<tr class="even">
<td>22/tcp</td>
<td>ssh</td>
</tr>
<tr class="odd">
<td>3478/udp</td>
<td>用于查找 stun 服务</td>
</tr>
<tr class="even">
<td>5349/tcp</td>
<td>Audio/Video 交流</td>
</tr>
<tr class="odd">
<td>5222/tcp</td>
<td>xmpp 通信</td>
</tr>
<tr class="even">
<td>9090/tcp</td>
<td>websocket 视屏桥中继</td>
</tr>
</tbody>
</table>
<p>设置命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo ufw allow <span class="number">80</span>/tcp</span><br><span class="line">sudo ufw allow <span class="number">443</span>/tcp</span><br><span class="line">sudo ufw allow <span class="number">10000</span>/udp</span><br><span class="line">sudo ufw allow <span class="number">22</span>/tcp</span><br><span class="line">sudo ufw allow <span class="number">3478</span>/udp</span><br><span class="line">sudo ufw allow <span class="number">5349</span>/tcp</span><br><span class="line">sudo ufw allow <span class="number">5222</span>/tcp</span><br><span class="line">sudo ufw enable</span><br></pre></td></tr></table></figure>
<p>设置完后查看状态：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo ufw status verbose</span><br></pre></td></tr></table></figure>
<h3 id="安装-jitsi-meet">安装 Jitsi Meet</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jitsi-meet installation</span></span><br><span class="line">sudo apt install jitsi<span class="literal">-meet</span></span><br></pre></td></tr></table></figure>
<p>在安装的过程中，会让你选择证书，若处于 NAT 中，且前端还有一层 Nginx
时，可以使用自签名证书。</p>
<h3 id="nat-设置">NAT 设置</h3>
<p>机器位于 NAT
之后，需要打开<code>/etc/jitsi/videobridge/sip-communicator.properties</code>文件：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/jitsi/videobridge/sip<span class="literal">-communicator</span>.properties</span><br></pre></td></tr></table></figure>
<p>添加以下设置：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">org.ice4j.ice.harvest.NAT_HARVESTER_LOCAL_ADDRESS=&lt;Local.IP.Address&gt;</span><br><span class="line">org.ice4j.ice.harvest.NAT_HARVESTER_PUBLIC_ADDRESS=&lt;Public.IP.Address&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考：<a
href="https://community.jitsi.org/t/want-to-replace-url-for-stun-mapping-harvester-addresses/126954/3?u=galens">want-to-replace-url-for-stun-mapping-harvester-addresses</a></p>
</blockquote>
<h3 id="修改系统限制">修改系统限制</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/systemd/system.conf</span><br></pre></td></tr></table></figure>
<p>修改为：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">DefaultLimitNOFILE=<span class="number">65000</span></span><br><span class="line">DefaultLimitNPROC=<span class="number">65000</span></span><br><span class="line">DefaultTasksMax=<span class="number">65000</span></span><br></pre></td></tr></table></figure>
<p>查看修改结果：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">systemctl show <span class="literal">--property</span> DefaultLimitNPROC</span><br><span class="line">systemctl show <span class="literal">--property</span> DefaultLimitNOFILE</span><br><span class="line">systemctl show <span class="literal">--property</span> DefaultTasksMax</span><br></pre></td></tr></table></figure>
<p>若没有生效，需要重启系统 <code>sudo reboot</code> 或者重启守护进程
<code>systemctl daemon-reexec</code>：</p>
<p>到这一步，即可通过域名进行访问</p>
<h2 id="配置参会时输入用户名">配置参会时输入用户名</h2>
<p>打开配置文件：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/jitsi/yourDomain<span class="literal">-config</span>.js</span><br></pre></td></tr></table></figure>
<p>在第 570 行左右，找到 <code>requireDisplayName</code>，将其修改为
<code>true</code>。</p>
<p>重启 prosody</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo systemctl resetart prosody</span><br></pre></td></tr></table></figure>
<h2 id="jwt-授权">jwt 授权</h2>
<p>为了方便使用 <a
href="https://jitsi.github.io/handbook/docs/dev-guide/dev-guide-iframe">IFrame
API</a>
的方式与现有的系统集成，需要配置会议授权，方便对会议进行管理。</p>
<h3 id="配置-jwt">配置 JWT</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt<span class="literal">-get</span> install jitsi<span class="literal">-meet-tokens</span></span><br></pre></td></tr></table></figure>
<p>安装过程中，会要求输入 ApplicationId 和 Secret：</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20231102154852501.png"
alt="image-20231102154852501" />
<figcaption aria-hidden="true">image-20231102154852501</figcaption>
</figure>
<p>生成 token 有格式要求，见：<a
href="https://github.com/jitsi/lib-jitsi-meet/blob/master/doc/tokens.md#token-structure">lib-jitsi-meet/doc/tokens.md</a></p>
<p>生成 token 后，可以在 url 中添加 <code>jwt=xxx</code>
来进行测试。</p>
<h3 id="允许访客进入">允许访客进入</h3>
<p>打开配置文件：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/prosody/conf.d/meet.mydomain.com.cfg.lua</span><br></pre></td></tr></table></figure>
<p>向 <code>VirtualHost "jitmeet.example.com"</code> 中添加
<code>allow_empty_token = true</code>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">VirtualHost <span class="string">&quot;jitmeet.example.com&quot;</span></span><br><span class="line">    authentication    = <span class="string">&quot;token&quot;</span>;</span><br><span class="line">    app_id            = <span class="string">&quot;example_app_id&quot;</span>;         <span class="literal">--</span> application identifier</span><br><span class="line">    app_secret        = <span class="string">&quot;example_app_secret&quot;</span>;     <span class="literal">--</span> application secret known only to your token</span><br><span class="line">                                                  <span class="literal">--</span> generator and the plugin</span><br><span class="line">    allow_empty_token = true;                     <span class="literal">--</span> tokens are verified only <span class="keyword">if</span> they are supplied by the client</span><br></pre></td></tr></table></figure>
<h2 id="添加事件回调">添加事件回调</h2>
<p>为了实现现有系统获取会议的创建结束信息，需要在 jitsi-meet
中添加事件回调到既有的系统中。</p>
<h3 id="插件配置">插件配置</h3>
<p><strong>下载插件：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/jitsi<span class="literal">-meet</span>/prosody<span class="literal">-plugins</span>/</span><br><span class="line">sudo <span class="built_in">wget</span> <span class="literal">-O</span> mod_event_sync_component.lua https://raw.githubusercontent.com/jitsi<span class="literal">-contrib</span>/prosody<span class="literal">-plugins</span>/main/event_sync/mod_event_sync_component.lua</span><br></pre></td></tr></table></figure>
<p><strong>启用插件：</strong></p>
<p>打开配置文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/prosody/conf.d/meet.mydomain.com.cfg.lua</span><br></pre></td></tr></table></figure>
<p>添加如下内容</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 组件域名的主要作用是标识和路由消息到特定的组件, 可以不使用真实的域名</span></span><br><span class="line">Component <span class="string">&quot;event_sync.meet.mydomain.com&quot;</span> <span class="string">&quot;event_sync_component&quot;</span></span><br><span class="line">    muc_component = <span class="string">&quot;conference.meet.mydomain.com&quot;</span></span><br><span class="line">    api_prefix = <span class="string">&quot;http://your.api.server/api&quot;</span></span><br></pre></td></tr></table></figure>
<p>注意：<code>api_prefix 末尾没有 / 号</code></p>
<blockquote>
<p>更多配置，参考：<a
href="https://github.com/jitsi-contrib/prosody-plugins/blob/main/event_sync/README.md#optional-config">prosody-plugins/event_sync/README.md</a></p>
</blockquote>
<p>回调的 api 为：<code>http://your.api.server/api/events/xx</code></p>
<p><strong>重启 prosody：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart prosody</span><br></pre></td></tr></table></figure>
<h3 id="插件修改">插件修改</h3>
<p>由于允许访客访问，原插件没有返回用户的
display_name，当用户通过网址进入时，无法确定用户的身份，因此需要返回用户自己设置的
display_name 供回调服务器处理。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo vim /usr/share/jitsi<span class="literal">-meet</span>/prosody<span class="literal">-plugins</span>/mod_event_sync_component.lua</span><br></pre></td></tr></table></figure>
<ol type="1">
<li><p><strong>修改 occupant_joined：</strong></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 找到 occupant_joined(约在 289 行) 函数</span></span><br><span class="line"><span class="comment">-- 将</span></span><br><span class="line"><span class="keyword">local</span> occupant_data = room_data:on_occupant_joined(occupant_jid, event.origin);</span><br><span class="line"><span class="comment">-- 修改为</span></span><br><span class="line"><span class="keyword">local</span> occupant_data = room_data:on_occupant_joined(occupant_jid, event);</span><br></pre></td></tr></table></figure>
<p><strong>修改 EventData:on_occupant_joined：</strong></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 找到 EventData:on_occupant_joined(约在 144 行) 函数,修改为如下代码：</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EventData:on_occupant_joined</span><span class="params">(occupant_jid, event)</span></span></span><br><span class="line">    <span class="keyword">local</span> event_origin = event.origin</span><br><span class="line">    <span class="keyword">local</span> user_context = event_origin.jitsi_meet_context_user <span class="keyword">or</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- get displayName</span></span><br><span class="line">    <span class="keyword">local</span> display_name = event.occupant:get_presence():get_child_text(<span class="string">&#x27;nick&#x27;</span>, <span class="string">&#x27;http://jabber.org/protocol/nick&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- N.B. we only store user details on join and assume they don&#x27;t change throughout the duration of the meeting</span></span><br><span class="line">    <span class="keyword">local</span> occupant_data = &#123;</span><br><span class="line">        occupant_jid = occupant_jid,</span><br><span class="line">        name = user_context.name,</span><br><span class="line">        id = user_context.id,</span><br><span class="line">        email = user_context.email,</span><br><span class="line">        joined_at = now(),</span><br><span class="line">        left_at = <span class="literal">nil</span>,</span><br><span class="line">        display_name = display_name,</span><br><span class="line">        nick = event.occupant.nick,</span><br><span class="line">        role = event.occupant.role,</span><br><span class="line">        stable_id = event.occupant.stable_id,</span><br><span class="line">        bare_jid = event.occupant.bare_jid</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">self</span>.occupants[occupant_jid] = occupant_data;</span><br><span class="line">    <span class="built_in">self</span>.active[occupant_jid] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> occupant_data;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
<li><p>重启 prosody</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart prosody</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="添加踢出用户功能">添加踢出用户功能</h2>
<p>当用户加入后，检测是否有同名用户，若有，则踢出存在的同名用户</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 在顶部添加导入</span></span><br><span class="line"><span class="keyword">local</span> st = <span class="built_in">require</span> <span class="string">&quot;util.stanza&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 找到 function occupant_joined(event) 方法，在 `room_data:on_occupant_joined` 之后添加如下代码</span></span><br><span class="line"><span class="keyword">for</span> _, occupant <span class="keyword">in</span> room:each_occupant() <span class="keyword">do</span>        </span><br><span class="line">    <span class="keyword">local</span> pr = occupant:get_presence();</span><br><span class="line">    <span class="keyword">local</span> displayName = pr:get_child_text(</span><br><span class="line">            <span class="string">&#x27;nick&#x27;</span>, <span class="string">&#x27;http://jabber.org/protocol/nick&#x27;</span>);        </span><br><span class="line">    <span class="keyword">if</span> displayName == occupant_data.display_name <span class="keyword">and</span> occupant.nick~=occupant_data.nick <span class="keyword">then</span></span><br><span class="line">        <span class="comment">-- 获取原用户的角色, 若为moderator, 则将新用户设置为moderator</span></span><br><span class="line">        <span class="keyword">local</span> oldRole = room:get_role(occupant.nick);</span><br><span class="line">        room:set_role(<span class="literal">true</span>, occupant.nick, <span class="literal">nil</span>);</span><br><span class="line">        <span class="keyword">if</span> oldRole == <span class="string">&#x27;moderator&#x27;</span> <span class="keyword">then</span></span><br><span class="line">            room:set_role(<span class="literal">true</span>, occupant_data.occupant_jid, <span class="string">&#x27;moderator&#x27;</span>);</span><br><span class="line">            room:set_affiliation(<span class="literal">true</span>, occupant_data.occupant_jid, <span class="string">&#x27;owner&#x27;</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    		room:set_role(<span class="literal">true</span>, occupant.nick, <span class="literal">nil</span>);</span><br><span class="line">        <span class="built_in">module</span>:<span class="built_in">log</span>(<span class="string">&#x27;info&#x27;</span>, <span class="string">&#x27;踢出用户 %s kicked %s from %s&#x27;</span>,displayName, occupant.nick, room.jid);            </span><br><span class="line">         <span class="comment">-- 发送 kickParticipant 命令</span></span><br><span class="line">        <span class="keyword">local</span> presence = st.presence(&#123;</span><br><span class="line">            to = occupant.jid,</span><br><span class="line">            from = room.jid,</span><br><span class="line">            <span class="built_in">type</span> = <span class="string">&quot;unavailable&quot;</span></span><br><span class="line">        &#125;):tag(<span class="string">&quot;status&quot;</span>):text(<span class="string">&quot;你已被移出房间 &quot;</span> .. room.jid):up();</span><br><span class="line">        <span class="built_in">module</span>:send(presence);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>参考：<a
href="https://modules.prosody.im/mod_http_muc_kick.html">mod_http_muc_kick
- Prosody Community Modules</a></p>
<h2 id="视频负载均衡">视频负载均衡</h2>
<h3 id="安装环境准备-1">安装环境准备</h3>
<p>在另一台主机上执行 <a href="#安装环境准备">安装环境准备</a> 和 <a
href="添加%20Jitsi%20包">添加 Jitsi 包</a></p>
<h3 id="安装-jitsi-videobridge2">安装 jitsi-videobridge2</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt install jitsi<span class="literal">-videobridge2</span></span><br></pre></td></tr></table></figure>
<h3 id="修改-sip-配置">修改 sip 配置</h3>
<p>分别修改主服务器、视频服务器的配置：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/jitsi/videobridge/sip<span class="literal">-communicator</span>.properties</span><br></pre></td></tr></table></figure>
<p>禁用主服务器的证书验证：</p>
<p>向 <code>/etc/jitsi/videobridge/sip-communicator.properties</code>
添加如下配置</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">org.jitsi.videobridge.xmpp.user.shard.DISABLE_CERTIFICATE_VERIFICATION=true</span><br></pre></td></tr></table></figure>
<p>将主服务器的 sip 配置复制到负载均衡服务器</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">org.ice4j.ice.harvest.DISABLE_AWS_HARVESTER=true</span><br><span class="line">org.ice4j.ice.harvest.STUN_MAPPING_HARVESTER_ADDRESSES=meet<span class="literal">-jit-si-turnrelay</span>.jitsi.net:<span class="number">443</span></span><br><span class="line">org.jitsi.videobridge.ENABLE_STATISTICS=true</span><br><span class="line">org.jitsi.videobridge.STATISTICS_TRANSPORT=muc</span><br><span class="line">org.jitsi.videobridge.xmpp.user.shard.HOSTNAME=<span class="number">192.168</span>.<span class="number">23.20</span> <span class="comment"># 此处为主服务所在的 ip</span></span><br><span class="line">org.jitsi.videobridge.xmpp.user.shard.DOMAIN=auth.yourdomain</span><br><span class="line">org.jitsi.videobridge.xmpp.user.shard.USERNAME=jvb</span><br><span class="line">org.jitsi.videobridge.xmpp.user.shard.PASSWORD=siBYPh4z</span><br><span class="line">org.jitsi.videobridge.xmpp.user.shard.MUC_JIDS=JvbBrewery@internal.yourdomain</span><br><span class="line">org.jitsi.videobridge.xmpp.user.shard.MUC_NICKNAME=<span class="number">8705</span>d9ca<span class="literal">-4031-4080-8435-78d1f5f3025e</span> <span class="comment"># 此处值应唯一，不与其它服务冲突</span></span><br><span class="line">org.jitsi.videobridge.xmpp.user.shard.DISABLE_CERTIFICATE_VERIFICATION=true</span><br><span class="line">org.ice4j.ice.harvest.NAT_HARVESTER_LOCAL_ADDRESS=<span class="number">192.168</span>.<span class="number">23.20</span></span><br><span class="line">org.ice4j.ice.harvest.NAT_HARVESTER_PUBLIC_ADDRESS=<span class="number">223</span>.xxx.xxx.xxx</span><br></pre></td></tr></table></figure>
<h3 id="使用-sctp-模式">使用 Sctp 模式</h3>
<p>增加视频桥后，连接时会报错：</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/image-20231106111136879.png"
alt="image-20231106111136879" />
<figcaption aria-hidden="true">image-20231106111136879</figcaption>
</figure>
<p>有两种方式可以解决，本文采用最简单的方式即 Sctp 方式：</p>
<p>编辑文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/jitsi/videobridge/jvb.conf</span><br></pre></td></tr></table></figure>
<p>在 <code>videobridge</code>修改如下内容：</p>
<ol type="1">
<li>允许 sctp</li>
<li>关闭 websocket</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">sctp <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// Whether SCTP data channels are enabled.</span></span><br><span class="line">  enabled=<span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">stats <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// The interval at which stats are gathered.</span></span><br><span class="line">  interval = <span class="number">5</span> seconds</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">websockets <span class="punctuation">&#123;</span></span><br><span class="line">  enabled=<span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  server-id=<span class="string">&quot;default-id&quot;</span></span><br><span class="line">  <span class="comment">// Whether to negotiate WebSocket compression (permessage-deflate)</span></span><br><span class="line">  enable-compression = <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"></span><br><span class="line">          </span><br><span class="line">  <span class="comment">// Optional, even when &#x27;enabled&#x27; is set to true</span></span><br><span class="line">  #tls=<span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="comment">// The domains used when advertising a colibri-ws URL. Must be set when enabled = true</span></span><br><span class="line">  domains= <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">  <span class="comment">// The domain used when advertising a colibri-relay-ws URL. If empty defaults to the value of `domains`.</span></span><br><span class="line">  relay-domains = <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="同时修改端口">同时修改端口</h3>
<p>本配置位于 NAT 内，只有一个公网出口，为了不与其它 jitsi-videobridge2
冲突，修改连接端口。</p>
<blockquote>
<p>使用 sctp 后，不需要修改 websocket 端口</p>
</blockquote>
<h3 id="设置防火墙-1">设置防火墙</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo ufw allow <span class="number">22</span>/tcp</span><br><span class="line">sudo ufw allow <span class="number">10000</span>/udp <span class="comment"># 如果是在 NAT 后面，此处的修改要与其它主机的 jitsi-videobridge2 端口不一样</span></span><br><span class="line">sudo ufw enable</span><br></pre></td></tr></table></figure>
<h3 id="重启服务">重启服务</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo service jitsi<span class="literal">-videobridge2</span> restart</span><br></pre></td></tr></table></figure>
<h3 id="查看日志">查看日志</h3>
<p>通过查看日志，可以了解 jitsi-videobridge2
启动情况，并根据日志记录排查错误问题。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cat</span> /var/log/jitsi/jvb.log</span><br></pre></td></tr></table></figure>
<h2 id="配置-octo">配置 OCTO</h2>
<p>当配置多个视频桥后，它只能对多个会议进行负载均衡，无法对单个会议生效。因此需要配置
OCTO 来达到这一目的。</p>
<h3 id="打开-octo">打开 octo</h3>
<p>编辑文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/jitsi/jicofo/jicofo.conf</span><br></pre></td></tr></table></figure>
<p>增改如下内容：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">jicofo &#123;</span><br><span class="line">  bridge &#123;</span><br><span class="line">    selection<span class="literal">-strategy</span> = RegionBasedBridgeSelectionStrategy</span><br><span class="line">  &#125;</span><br><span class="line">  octo &#123;</span><br><span class="line">    enabled = true,</span><br><span class="line">    id = <span class="string">&quot;1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>基中，selection-strategy 的值有：</p>
<ul>
<li>RegionBasedBridgeSelectionStrategy：按地区选择视频桥</li>
<li>SplitBridgeSelectionStrategy：总是使用不同的视频桥，主要用于测试</li>
</ul>
<h3 id="视频桥配置适配">视频桥配置适配</h3>
<p>打开所有视屏桥服务器如下文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/jitsi/videobridge/sip<span class="literal">-communicator</span>.properties</span><br></pre></td></tr></table></figure>
<p>分别增加如下配置</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">org.jitsi.videobridge.octo.BIND_ADDRESS=x.x.x.x <span class="comment"># 当前主机 ip</span></span><br><span class="line">org.jitsi.videobridge.octo.PUBLIC_ADDRESS=x.x.x.x <span class="comment"># 公网 ip</span></span><br><span class="line">org.jitsi.videobridge.octo.BIND_PORT=<span class="number">4096</span></span><br><span class="line">org.jitsi.videobridge.REGION=regionVN <span class="comment"># 全局唯一</span></span><br></pre></td></tr></table></figure>
<p>开放端口 4096</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo ufw allow <span class="number">4096</span>/tcp</span><br></pre></td></tr></table></figure>
<p>修改视频桥配置：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/jitsi/videobridge/jvb.conf</span><br></pre></td></tr></table></figure>
<p>高 sctp 中增加 <code>sctp-datachannels = true</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">sctp <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// Whether SCTP data channels are enabled.</span></span><br><span class="line">  enabled=<span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Whether bridge-to-bridge communication should use SCTP datachannels (as opposed to websockets)</span></span><br><span class="line">  sctp-datachannels = <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="重启服务-1">重启服务</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo service jicofo restart</span><br><span class="line">sudo service jitsi<span class="literal">-videobridge2</span> restart</span><br></pre></td></tr></table></figure>
<h3 id="本节参考">本节参考</h3>
<ol type="1">
<li><a
href="https://github.com/jitsi/jitsi-videobridge/blob/master/doc/relay.md">jitsi-videobridge/doc/relay.md
at master · jitsi/jitsi-videobridge (github.com)</a></li>
</ol>
<h2 id="配置文件路径">配置文件路径</h2>
<table>
<colgroup>
<col style="width: 75%" />
<col style="width: 25%" />
</colgroup>
<thead>
<tr class="header">
<th>路径</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>/etc/prosody/conf.avail/[your-domain].cfg.lua</td>
<td>域配置</td>
</tr>
<tr class="even">
<td>/etc/jitsi/meet/[your-domain]-config.js</td>
<td>jitsi 系统配置</td>
</tr>
<tr class="odd">
<td>/etc/jitsi/videobridge/config</td>
<td>videobridge 配置文件</td>
</tr>
<tr class="even">
<td>/etc/jitsi/videobridge/sip-communicator.properties</td>
<td>sip 配置文件</td>
</tr>
<tr class="odd">
<td>/var/log/prosody</td>
<td>prosody 日志位置</td>
</tr>
<tr class="even">
<td>/var/log/jitsi/jvb.log</td>
<td>jvb 日志位置</td>
</tr>
<tr class="odd">
<td>/var/log/jitsi/jicofo.log</td>
<td>jicofo 日志位置</td>
</tr>
<tr class="even">
<td>/usr/share/jitsi-meet/prosody-plugins/mod_event_sync_component.lua</td>
<td>even_sync 插件位置</td>
</tr>
</tbody>
</table>
<h2 id="其它">其它</h2>
<p>如果需要额外的功能，可以通过安装 prosody 模块来实现，详见：<a
href="https://modules.prosody.im/index.html">Prosody Community
Modules</a></p>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<ol type="1">
<li><p><a
href="https://jitsi.github.io/handbook/docs/devops-guide/devops-guide-quickstart">Self-Hosting
Guide - Debian/Ubuntu server | Jitsi Meet</a></p></li>
<li><p><a
href="https://github.com/jitsi/jitsi-videobridge/tree/master/doc">jitsi-videobridge/doc
at master · jitsi/jitsi-videobridge (github.com)</a></p></li>
<li><p><a
href="https://github.com/jitsi/lib-jitsi-meet/blob/master/doc/tokens.md">lib-jitsi-meet/doc/tokens.md
at master · jitsi/lib-jitsi-meet (github.com)</a></p></li>
<li><p><a
href="https://github.com/jitsi-contrib/prosody-plugins/blob/main/event_sync/README.md#event-sync">prosody-plugins/event_sync/README.md
at main · jitsi-contrib/prosody-plugins (github.com)</a></p></li>
<li><p><a
href="https://jitsi.github.io/handbook/docs/dev-guide/dev-guide-configuration/">Configuration
| Jitsi Meet</a></p></li>
<li><p><a
href="https://doganbros.com/blog/Scaling-Up-Your-Jitsi-with-Jitsi-Bridges">Scaling
Up Your Jitsi with Jitsi Bridges (doganbros.com)</a></p></li>
<li><p><a
href="https://community.jitsi.org/t/how-to-add-another-videobridge-getting-error-when-adding-a-new-video-bridge-to-the-standalone-setup/122635">How
to add another videobridge. Getting error when adding a new video bridge
to the standalone setup - Install &amp; Config - Jitsi Community Forum -
developers &amp; users</a></p></li>
<li><p><a
href="https://community.jitsi.org/t/want-to-replace-url-for-stun-mapping-harvester-addresses/126954">Want
to replace url for STUN MAPPING HARVESTER ADDRESSES? - Install &amp;
Config - Jitsi Community Forum - developers &amp; users</a></p></li>
<li><p><a
href="https://community.jitsi.org/t/how-to-add-another-videobridge-getting-error-when-adding-a-new-video-bridge-to-the-standalone-setup/122635/26?u=galens">disable
websockets to the bridge and use sctp</a></p></li>
<li><p><a
href="https://github.com/jitsi/jitsi-videobridge/blob/master/doc/web-sockets.md">jitsi-videobridge/doc/web-sockets.md
at master · jitsi/jitsi-videobridge (github.com)</a></p></li>
<li><p><a
href="https://community.jitsi.org/t/is-port-9090-required-for-jvb-with-websockets/86854">Is
port 9090 required for JVB with Websockets? - Install &amp; Config -
Jitsi Community Forum - developers &amp; users</a></p></li>
<li><p><a
href="https://community.jitsi.org/t/need-to-test-that-whether-its-working-or-not-after-enabling-octo-octo-configuration/53063">Need
to test that whether it's working or not after enabling OCTO / OCTO
configuration - Install &amp; Config - Jitsi Community Forum -
developers &amp; users</a></p></li>
<li><p><a
href="https://github.com/jitsi/jicofo/blob/master/jicofo-selector/src/main/resources/reference.conf#L337">jicofo/jicofo-selector/src/main/resources/reference.conf
at master · jitsi/jicofo (github.com)</a></p></li>
<li><p><a
href="https://gist.github.com/facsiaginsa/5360f4f84cc575586ee4dda7f0580bad">This
is tutorial to configure octo feature on jitsi.
(github.com)</a></p></li>
<li><p><a
href="https://community.jitsi.org/t/working-multi-jitsi-meet-multi-videobridge-setup/24704/27?u=galens">working-multi-jitsi-meet-multi-videobridge-setup</a></p></li>
<li><p><a
href="https://community.jitsi.org/t/tutorial-jibri-overview-troubleshooting-tips-tricks-solve-your-jibri-problems-quickly/86054">tutorial-jibri-overview-troubleshooting-tips-tricks-solve-your-jibri-problems-quickly</a></p></li>
</ol>
]]></content>
      <categories>
        <category>Software</category>
        <category>JitsiMeet</category>
      </categories>
      <tags>
        <tag>Jitsi-meet</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>一文带你了解Navicat中MongoDB查询的高级用法</title>
    <url>/posts/2022/1C3RDWC.html</url>
    <content><![CDATA[<p>Navicat 是一款非常流行的数据库管理软件，可以通过 GUI
界面进行数据库管理，也可以通过编写代码来操作数据库。</p>
<p>在使用 Navicat 进行 MongoDB 查询时，我们不仅可以使用 MongoDB
中的基础查询语句，还可以使用使用其内置的 JavaScript
引擎执行代码段，进行各种数据库操作。</p>
<span id="more"></span>
<h2 id="javascript-引擎介绍">JavaScript 引擎介绍</h2>
<p>在 Navicat 查询界面中，可以编写复杂 JavaScript
函数操作数据库。经过使用测试，它的脚本功能有以下特点：</p>
<ol type="1">
<li><p>会将脚本中最后一条语句的返回值输出到结果界面</p></li>
<li><p>在查询窗口生命周期内，脚本中定义的变量会一直存在</p>
<p>比如重复执行 <code>let userId = 'myUserId'</code>
时，会提示变量已经重复声明了：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">let userId = <span class="string">&#x27;ganmx&#x27;</span></span><br><span class="line">&gt; [<span class="type">Error</span>] SyntaxError: redeclaration of let userId</span><br><span class="line">at line <span class="number">1</span>, column <span class="number">1</span></span><br><span class="line">&gt; 时间: <span class="number">0.002</span>s</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="查询入口">查询入口</h2>
<p>所有的查询都以内置的 <code>db</code>
对象开始，比如查找用户的语句为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="property">user</span>.<span class="title function_">find</span>()</span><br></pre></td></tr></table></figure>
<h2 id="集合引用">集合引用</h2>
<p>通过以下方式来获取集合对象：</p>
<ol type="1">
<li><code>db.collectionName</code></li>
<li><code>db.getCollection('collectionName')</code></li>
</ol>
<h2 id="集合函数">集合函数</h2>
<p>集合对象上的提供的函数有：</p>
<ul>
<li><strong>aggregate(pipeline,options)</strong></li>
<li>bulkWrite(operations,options)</li>
<li>convertToCapped(maxBytes)</li>
<li>copyTo(newCollection)</li>
<li><strong>count(query,options)</strong></li>
<li><strong>createIndex(keyPatterns,options)</strong></li>
<li>dataSize()</li>
<li><strong>deleteMany(filter,options)</strong></li>
<li><strong>deleteOne(filter,options)</strong></li>
<li>distinct(field,query,options)</li>
<li>drop()</li>
<li><strong>dropIndex(index)</strong></li>
<li><strong>dropIndexes()</strong></li>
<li><strong>ensureIndex(keys,options)</strong></li>
<li><strong>explain(verbosity)</strong></li>
<li><strong>find()</strong></li>
<li><strong>find(query,projection)</strong></li>
<li><strong>findAndModify(document)</strong></li>
<li><strong>findOne(query,projection)</strong></li>
<li><strong>findOneAndDeleted(filter,options)</strong></li>
<li><strong>findOneAndReplace(filter,replacement,options)</strong></li>
<li><strong>findOneAndUpdatae(filter,update,options)</strong></li>
<li>getDB()</li>
<li>getMongo()</li>
<li>getIndexes()</li>
<li>getPlanCache()</li>
<li>getShardDistibution()</li>
<li>getShardVersion()</li>
<li>group(options)</li>
<li>help()</li>
<li>initializeOrderedBulkOp()</li>
<li>initializeUnorderedBulkOp()</li>
<li><strong>insert(document,options)</strong></li>
<li><strong>insertMany(documents,options)</strong></li>
<li><strong>insertOne(document,options)</strong></li>
<li>isCapped()</li>
<li>latencyStats(options)</li>
<li>mapReduce(map,reduce,options)</li>
<li>reIndex()</li>
<li>remove(query,options)</li>
<li>renameCollection(target,dropTarget)</li>
<li><strong>replaceOne(filter,replacement,options)</strong></li>
<li><strong>save(document,options)</strong></li>
<li>stats(scale|options)</li>
<li>storageSize()</li>
<li>totalIndexSize()</li>
<li>totalSize()</li>
<li><strong>update(query,update,options)</strong></li>
<li><strong>updateMany(filter,update,options)</strong></li>
<li><strong>updateOne(filter,update,options)</strong></li>
<li>validate(full)</li>
<li>watch(pipeline,options)</li>
</ul>
<h2 id="全局变量">全局变量</h2>
<p>MongoDB 的查询编辑器等同于浏览器的 console，因此 console
上暴露的方法与变量，在 MongoDB 中都可以使用，比如
<code>Math、Date</code> 等等。</p>
<h2 id="findone-返回值">findOne 返回值</h2>
<p>findOne 返回的类型为：<code>NAVBson</code>，它表示文档值</p>
<h2 id="find-返回值">find 返回值</h2>
<p>与 finOne 不一样，find
的返回值是一个集合，返回值类型为：<code>NAVCollectionChainInfo</code>，里面每个元素的类型是
<code>NAVBson</code>。</p>
<p>可以通过下标访问集合中的每个元素，如果要使用数组的方法，需要调用
<code>.toArray()</code> 后再进行操作</p>
<p>它提供以下函数：</p>
<ul>
<li>addOptions(flag)</li>
<li>batchSize(size)</li>
<li>close()</li>
<li>collation(&lt;collation documents&gt;)</li>
<li>comment(comment)</li>
<li>count(applySkipLimit)</li>
<li>explain(verbose)</li>
<li><strong>forEach(function)</strong></li>
<li>hasNext()</li>
<li>help()</li>
<li>hint(index)</li>
<li>isClosed()</li>
<li>isExhausted()</li>
<li>itcount()</li>
<li>limit(&lt;number&gt;)</li>
<li>map(function)</li>
<li>max(indexBounds)</li>
<li>maxScan(maxScan)</li>
<li>matTimeMS(&lt;time limit&gt;)</li>
<li>min(indexBounds)</li>
<li>next()</li>
<li>noCursorTimeout()</li>
<li>objsLeftInBatch()</li>
<li>pretty()</li>
<li>readConcern(level)</li>
<li>readPref(mode,tagSet)</li>
<li>returnKey()</li>
<li>showRecordId()</li>
<li>size()</li>
<li>skip(offset)</li>
<li>snapshot()</li>
<li>sort(sort)</li>
<li>tailabel(awaitData)</li>
<li><strong>toArray()</strong></li>
</ul>
<h2 id="aggregate-返回值">aggregate 返回值</h2>
<p>aggregate
的返回值类型是：<code>NAVCollectionCursor</code>，它提供以下方法：</p>
<ul>
<li>close()</li>
<li>forEach(function)</li>
<li><strong>hasNext()</strong></li>
<li>help()</li>
<li>isClosed()</li>
<li>isExhausted()</li>
<li>itcount()</li>
<li>map(function)</li>
<li>next()</li>
<li>objsLeftInBatch()</li>
<li>pretty()</li>
<li><strong>toArray()</strong></li>
</ul>
<h2 id="事务">事务</h2>
<p>在 Navicat 中，使用以下语句启用 MongoDB 事务</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">session = db.<span class="title function_">getMongo</span>().<span class="title function_">startSession</span>();</span><br><span class="line">session.<span class="title function_">startTransaction</span>();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">   	<span class="comment">// custom code here</span></span><br><span class="line">    </span><br><span class="line">    session.<span class="title function_">commitTransaction</span>();</span><br><span class="line">&#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">    session.<span class="title function_">abortTransaction</span>();</span><br><span class="line">&#125;</span><br><span class="line">session.<span class="title function_">endSession</span>();</span><br></pre></td></tr></table></figure>
<h2 id="函数示例">函数示例</h2>
<p>以下为删除用户示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deleteUsers</span>(<span class="params"></span>)</span><br><span class="line"> &#123; </span><br><span class="line">    <span class="keyword">const</span> users = db.<span class="property">user</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">0</span></span><br><span class="line">    &#125;).<span class="title function_">toArray</span>()</span><br><span class="line">    session = db.<span class="title function_">getMongo</span>().<span class="title function_">startSession</span>();</span><br><span class="line">    session.<span class="title function_">startTransaction</span>();</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">// 删除关联的信息，比如 userExtra</span></span><br><span class="line">        db.<span class="property">user_extra</span>.<span class="title function_">deleteMany</span>(&#123;</span><br><span class="line">            <span class="attr">userId</span>: &#123;</span><br><span class="line">                <span class="attr">$in</span>: users.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x.<span class="property">_id</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            sesion</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 删除自己</span></span><br><span class="line">        db.<span class="property">user</span>.<span class="title function_">deleteMany</span>(&#123;</span><br><span class="line">            <span class="attr">userId</span>: &#123;</span><br><span class="line">                <span class="attr">$in</span>: users.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x.<span class="property">_id</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            sesion</span><br><span class="line">        &#125;)        </span><br><span class="line">        </span><br><span class="line">        session.<span class="title function_">commitTransaction</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">        session.<span class="title function_">abortTransaction</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    session.<span class="title function_">endSession</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">deleteUsers</span>()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>为什么需要将逻辑包裹在函数中呢？请看后文解析。</p>
</blockquote>
<h2 id="查询器生命周期">查询器生命周期</h2>
<p>查询编辑器的生命周期等同于 tab
窗体的存续时间，而不是在每次执行【运行】后就会释放。因此，如果在编辑器根中定义了变量，下次再运行，会提示变量重复声明。</p>
<p>可以使用闭包来解决这个问题：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多次运行这段代码时，不会出现变量重复声明的异常</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleInFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> userIdTemp = <span class="string">&#x27;pingkl&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> users = db.<span class="property">user</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">        <span class="attr">userId</span>: userIdTemp</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">userId</span>: <span class="string">&#x27;pingkl&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">handleInFunc</span>()</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<p><a
href="https://www.navicat.com.cn/component/finder/search.html?q=mongodb&amp;Search=">Navicat
MongoDB</a></p>
]]></content>
      <categories>
        <category>Software</category>
        <category>Navicat</category>
      </categories>
      <tags>
        <tag>NexT</tag>
        <tag>Navicat</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>z.lua 安装</title>
    <url>/posts/2023/1JSFERW.html</url>
    <content><![CDATA[<p>z.lua 是一个快速路径切换工具，它会跟踪你在 shell
下访问过的路径，通过一套称为 Frecent 的机制（源自
FireFox），经过一段简短的学习之后，z.lua
会帮你跳转到所有匹配正则关键字的路径里 Frecent 值最高的那条路径去。</p>
<span id="more"></span>
<h2 id="安装-lua-环境">安装 lua 环境</h2>
<p>使用 <code>scoop install lua</code> 安装 lua 环境</p>
<h2 id="下载-z.lua">下载 z.lua</h2>
<p>可以直接下载 z.lua 整个 git 仓库，方便后续升级。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/skywind3000/z.lua.git</span><br></pre></td></tr></table></figure>
<h2 id="powershell-配置">powershell 配置</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开配置文件</span></span><br><span class="line">notepad <span class="variable">$profile</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加如下配置</span></span><br><span class="line"><span class="comment"># z.lua 配置</span></span><br><span class="line"><span class="comment"># once 表示只有当前路径改变，才会将新路径添加到数据库</span></span><br><span class="line"><span class="comment"># enhanced 表示使用增强匹配算法，具体参考其官方说明</span></span><br><span class="line"><span class="built_in">Invoke-Expression</span> (&amp; &#123; (lua D:/Application/z.lua/z.lua <span class="literal">--init</span> powershell once enhanced) <span class="operator">-join</span> <span class="string">&quot;`n&quot;</span> &#125;)</span><br></pre></td></tr></table></figure>
<p><code>-i</code> 参数仅在有多个候选项时才会出现，<code>enhanced</code>
状态下，一般只会匹配到一个数据。</p>
<h2 id="增强模式匹配逻辑">增强模式匹配逻辑</h2>
<p>对于一个给定的正则关键字序列（即 z
命令后面的参数），只有同时满足两个条件才算匹配成功：</p>
<ol type="1">
<li>正则关键字将按顺序进行匹配（这条和默认匹配法相同）。</li>
<li>最后一个关键字可以和路径名的最后一段相匹配。</li>
<li>如果两条规则同时启用找不到任何结果，那么将会退回到只用规则 1
进行筛选。</li>
</ol>
<p>详细查看：<a
href="https://www.bookstack.cn/read/z.lua-zh/spilt.9.README.cn.md">增强匹配算法</a></p>
<h2 id="参考">参考</h2>
<p><a
href="https://github.com/skywind3000/z.lua/blob/master/README.cn.md">z.lua
官方说明(中文)</a></p>
<p><a href="https://www.bookstack.cn/read/z.lua-zh/README.cn.md">z.lua
中文文档</a></p>
]]></content>
      <categories>
        <category>Software</category>
        <category>Powershell</category>
      </categories>
      <tags>
        <tag>Software</tag>
        <tag>Powershell</tag>
      </tags>
  </entry>
  <entry>
    <title>Powershell 实用插件推荐及安装</title>
    <url>/posts/2023/3VM57JB.html</url>
    <content><![CDATA[<p>本文将列举 Powershell7
中比较好用的插件或配置，并介绍大致安装步骤。</p>
<blockquote>
<p>有的只适合于 windows，linux 若有类似功能，则可不安装</p>
</blockquote>
<span id="more"></span>
<h2 id="busybox">busybox</h2>
<p>BusyBox 是一个开源项目，它提供了大约 400 个常见 UNIX/Linux
命令的精简实现，扩展了 powershell 命令。</p>
<p>安装方式：scoop</p>
<h2 id="sudo">sudo</h2>
<p>powershell 提权，直接使用 <code>sudo pwsh</code> 即可将当前 shell
升级成管理员权限</p>
<p>安装方式：<code>scoop install sudo</code></p>
<h2 id="oh-my-posh">oh-my-posh</h2>
<p>powershell 样式美化</p>
<p>安装方式：<a
href="https://ohmyposh.dev/docs/installation/windows">Windows | Oh My
Posh</a></p>
<p>自己使用的主题为 <code>montys</code>：</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230613224321201.png"
alt="image-20230613224321201" />
<figcaption aria-hidden="true">image-20230613224321201</figcaption>
</figure>
<h2 id="z.lua">z.lua</h2>
<p>实现路径快速跳转</p>
<p>参考：<a
href="https://github.com/skywind3000/z.lua/blob/master/README.cn.md">z.lua</a></p>
<h2 id="自定义别名">自定义别名</h2>
<p>可以自定义一些自己常用的别名，方便使用</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置打开当前目录名称</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openCurrentPathInExplore</span><span class="params">()</span></span>&#123; explorer.exe .&#125;</span><br><span class="line"><span class="built_in">Set-Alias</span> open openCurrentPathInExplore</span><br></pre></td></tr></table></figure>
<h2 id="安装-psreadline-插件">安装 PSReadLine 插件</h2>
<p>PSReadLine
给命令行操作提供更加强大的线性编辑体验，比如显示输入历史，语法着色等等。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看PS仓库</span></span><br><span class="line"><span class="built_in">Get-PSRepository</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 若没有仓库，可以添加一个默认</span></span><br><span class="line"><span class="built_in">Register-PSRepository</span> <span class="literal">-Default</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新 PowerShellGet</span></span><br><span class="line"><span class="built_in">Install-Module</span> <span class="literal">-Name</span> PowerShellGet <span class="literal">-Force</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 PSReadLine</span></span><br><span class="line"><span class="built_in">Install-Module</span> PSReadLine</span><br></pre></td></tr></table></figure>
<p><strong>配置 PSReadLine</strong> :</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开 pwsh 配置</span></span><br><span class="line">notepad $profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加如下配置</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置 PSReadLine</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">PSOption = @&#123;</span></span><br><span class="line">    PredictionSource = &#x27;HistoryAndPlugin&#x27;</span><br><span class="line">    # 使用 vim 的模式，可以按 esc 后，执行 vim 快捷键</span><br><span class="line">    EditMode = &#x27;Vi&#x27;</span><br><span class="line">    PredictionViewStyle = &#x27;ListView&#x27;</span><br><span class="line">    ShowToolTips = $true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">...</span></span><br><span class="line">&#125;</span><br><span class="line">Set-PSReadLineOption @PSOption</span><br></pre></td></tr></table></figure>
<h2 id="修改启动默认路径">修改启动默认路径</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在配置中添加如下内容，启动时自动定位到用户目录</span></span><br><span class="line">Set-Location ~</span><br></pre></td></tr></table></figure>
<h2 id="完整配置">完整配置</h2>
<p>在 powershell 中输入<code>notepad $profile</code>
来打开配置文件，如果没有的话，输入
<code>New-Item -Path $PROFILE -Type File -Force</code> 来进行新建。</p>
<p><code>$profile</code>
的位置为：<code>C:\Users\%username%\Documents\PowerShell</code></p>
<p>配置后的文件内容如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># oh-my-posh初始化</span></span><br><span class="line"><span class="built_in">oh</span><span class="literal">-my-posh</span> init pwsh <span class="literal">--config</span> <span class="string">&#x27;C:\Users\galens\.posh\montys.json&#x27;</span> | <span class="built_in">Invoke-Expression</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># z.lua 配置</span></span><br><span class="line"><span class="built_in">Invoke-Expression</span> (&amp; &#123; (lua D:/Application/z.lua/z.lua <span class="literal">--init</span> powershell once enhanced) <span class="operator">-join</span> <span class="string">&quot;`n&quot;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置打开当前目录名称</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openCurrentPathInExplore</span><span class="params">()</span></span>&#123; explorer.exe .&#125;</span><br><span class="line"><span class="built_in">Set-Alias</span> open openCurrentPathInExplore</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<p><a
href="https://github.com/PowerShell/PSReadLine">PowerShell/PSReadLine: A
bash inspired readline implementation for PowerShell
(github.com)</a></p>
<p><a
href="https://github.com/PowerShell/PSReadLine/blob/master/PSReadLine/SamplePSReadLineProfile.ps1">PSReadLine/PSReadLine/SamplePSReadLineProfile.ps1
at master · PowerShell/PSReadLine (github.com)</a></p>
<p><a
href="https://learn.microsoft.com/zh-cn/powershell/scripting/install/install-ubuntu?view=powershell-7.4">在
Ubuntu 上安装 PowerShell - PowerShell | Microsoft Learn</a></p>
<p><a
href="https://learn.microsoft.com/zh-cn/powershell/module/psreadline/set-psreadlineoption?view=powershell-7.4">Set-PSReadLineOption
(PSReadLine) - PowerShell | Microsoft Learn</a></p>
]]></content>
      <categories>
        <category>Software</category>
        <category>Powershell</category>
      </categories>
      <tags>
        <tag>Software</tag>
        <tag>Powershell7</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>创建和发布 NuGet 包</title>
    <url>/posts/2024/2CAZW8Q.html</url>
    <content><![CDATA[<p>NuGet 是适用于 .NET 的包管理器。
它使开发人员能够创建、共享和使用有用的 .NET 库。 NuGet
客户端工具可生成这些库并将其作为“包”。</p>
<p>本文简要记录了如何创建 NuGet 包并发布。</p>
<span id="more"></span>
<h2 id="安装-nuget">安装 NuGet</h2>
<p>可以使用 scoop 安装</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install nuget</span><br></pre></td></tr></table></figure>
<p>其它安装方式参考：<a
href="https://learn.microsoft.com/zh-cn/nuget/install-nuget-client-tools?tabs=windows">安装
NuGet 客户端工具 | Microsoft Learn</a></p>
<h2 id="首发准备">首发准备</h2>
<ol type="1">
<li><p>生成 <code>.nuspec</code> 配置文件</p>
<p>在含有<code>&lt;project-name&gt;.csproj</code>或者<code>&lt;project-name&gt;.vbproj</code>文件的文件夹中执行下列命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">nuget spec</span><br></pre></td></tr></table></figure></li>
<li><p>设置 NuGet 密钥</p>
<p>通过 <a href="https://www.nuget.org/account/apikeys#">NuGet Gallery |
API Keys</a> 生成 nuget 密钥，然后通过下列命令进行设置</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">nuget setApiKey &lt;your_API_key&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="发布-nuget-包">发布 NuGet 包</h2>
<ol type="1">
<li><p>修改 <code>*.nuspec</code> 配置文件</p>
<p>修改项目信息，包括版本号、标题、作者等信息</p></li>
<li><p>生成包</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">nuget pack &lt;project<span class="literal">-name</span>&gt;.csproj <span class="literal">-Build</span> <span class="literal">-Properties</span> Configuration=Release <span class="literal">-Properties</span> Platform=x64</span><br></pre></td></tr></table></figure></li>
<li><p>发布包</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">nuget push YourPackage.nupkg <span class="literal">-Source</span> https://api.nuget.org/v3/index.json</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<p><a href="https://learn.microsoft.com/zh-cn/nuget/">NuGet 文档 |
Microsoft Learn</a></p>
<p><a
href="https://blog.csdn.net/forever_008/article/details/104616529">.NET
Framework生成NuGet包_.net framework 4.6.1 打包成nuget-CSDN博客</a></p>
]]></content>
      <categories>
        <category>Software</category>
        <category>Nuget</category>
      </categories>
      <tags>
        <tag>DotNET</tag>
        <tag>NuGet</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis6 及以后版本安装为 windows 服务</title>
    <url>/posts/2023/2N7QY7C.html</url>
    <content><![CDATA[<p>网上安装 redis 为 windows 服务的教程大多基于 redis3
编写的，然而这并不适用于 redis 更高的版本。redis
高版本安装为服务应使用如下方法：</p>
<span id="more"></span>
<p>一定要安在 <a
href="https://github.com/redis-windows/redis-windows/releases">Redis for
Windows Release</a> 中下载 <code>xxx-Service 版本</code> 来安装。</p>
<p>以管理员身份运行终端：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建 redis 服务</span></span><br><span class="line"><span class="built_in">sc</span> create Redis binpath=C:\Software\Redis\RedisService.exe <span class="built_in">start</span>=auto</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">net <span class="built_in">start</span> Redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭服务</span></span><br><span class="line">net stop Redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载服务</span></span><br><span class="line"><span class="built_in">sc</span> delete Redis</span><br></pre></td></tr></table></figure>
<p><strong>参考：</strong></p>
<p>https://github.com/redis-windows/redis-windows</p>
]]></content>
      <categories>
        <category>Software</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Software</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>scoop 安装与重置</title>
    <url>/posts/2020/WCF13S.html</url>
    <content><![CDATA[<p>本文主要介绍 scoop 初始安装及重置电脑后的恢复。</p>
<span id="more"></span>
<h2 id="安装">安装</h2>
<p>scoop 安装环境要求：</p>
<ul>
<li>Windows 版本不低于 Windows 7</li>
<li>PowerShell 3+</li>
<li>.NET Framework 4.5+</li>
<li>用户名无中文</li>
</ul>
<p>首先，保证电脑有 PowerShell 3，如果没有，需要安装 Windows Management
Framework，下载地址：https://www.microsoft.com/en-us/download/details.aspx?id=54616</p>
<p>将下列脚本保存为 .ps1 文件，然后用管理员身份运行即可</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># scoop.ps1</span></span><br><span class="line"><span class="comment"># 设置用户变量</span></span><br><span class="line">[<span class="type">environment</span>]::setEnvironmentVariable(<span class="string">&#x27;SCOOP&#x27;</span>,<span class="string">&#x27;D:\scoop&#x27;</span>,<span class="string">&#x27;User&#x27;</span>)</span><br><span class="line"><span class="comment"># 启用</span></span><br><span class="line"><span class="variable">$env:SCOOP</span>=<span class="string">&#x27;D:\scoop&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置系统全局变量</span></span><br><span class="line">[<span class="type">environment</span>]::setEnvironmentVariable(<span class="string">&#x27;SCOOP_GLOBAL&#x27;</span>,<span class="string">&#x27;D:\scoop_global&#x27;</span>,<span class="string">&#x27;Machine&#x27;</span>)</span><br><span class="line"><span class="comment"># 启用</span></span><br><span class="line"><span class="variable">$env:SCOOP_GLOBAL</span>=<span class="string">&#x27;D:\scoop_global&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许本地脚本执行</span></span><br><span class="line"><span class="built_in">set-executionpolicy</span> remotesigned <span class="literal">-s</span> cu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载安装scoop</span></span><br><span class="line"><span class="comment"># 官方</span></span><br><span class="line"><span class="comment"># iex (new-object net.webclient).downloadstring(&#x27;https://get.scoop.sh&#x27;)</span></span><br><span class="line"><span class="comment"># 或国内</span></span><br><span class="line"><span class="built_in">iwr</span> <span class="literal">-useb</span> https://gitee.com/RubyKids/scoop<span class="literal">-cn</span>/raw/main/install.ps1 | <span class="built_in">iex</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 extras</span></span><br><span class="line">scoop bucket add extras https://github.com/lukesampson/scoop<span class="literal">-extras</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加自用源</span></span><br><span class="line">scoop bucket add uamazing https://gitee.com/galensgan/galens<span class="literal">-bucket</span>.git</span><br></pre></td></tr></table></figure>
<h2 id="aria2-多线程下载">aria2 多线程下载</h2>
<p>下载 aria2 多线程加速下载</p>
<p><code>scoop install aria2</code></p>
<p>设置 aria2 走代理</p>
<p>打开 <code>C:\Users\%username%\.config\scoop\config.json</code>
文件，在里面添加：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// aria2 配置</span></span><br><span class="line">    <span class="attr">&quot;aria2-options&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;--check-certificate false&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;--https-proxy=http://192.168.3.14:7890&quot;</span><span class="punctuation">,</span> <span class="comment">// https 代理的地址</span></span><br><span class="line">        <span class="string">&quot;--http-proxy=http://192.168.3.14.7890&quot;</span> <span class="comment">// http 代理地址</span></span><br><span class="line">  	<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="重置后恢复">重置后恢复</h2>
<p>由于电脑重置后，环境变量的丢失，导致原本安装的 scoop
失效，此时只需要恢复其环境变量就可以了。</p>
<p>分别添加如下环境变量：</p>
<table>
<thead>
<tr class="header">
<th>变量名</th>
<th>值</th>
<th>操作</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>scoop</td>
<td>局部 scoop 路径</td>
<td>新增</td>
</tr>
<tr class="even">
<td>scoop_global</td>
<td>全局 scoop 路径新增</td>
<td>新增</td>
</tr>
<tr class="odd">
<td>path</td>
<td>scop 路径 + ''</td>
<td>追加</td>
</tr>
</tbody>
</table>
<p>添加完成后，就可以恢复 scoop 使用了。</p>
]]></content>
      <categories>
        <category>Software</category>
        <category>Scoop</category>
      </categories>
      <tags>
        <tag>scoop</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>iEPC 安装教程</title>
    <url>/posts/2022/R23RB6.html</url>
    <content><![CDATA[<p>本文为 iEPC 安装教程，方便新用户安装使用。</p>
<span id="more"></span>
<p>安装 iEPC 有两种方式，分别为：</p>
<ol type="1">
<li>通过命令行安装</li>
<li>手动安装</li>
</ol>
<p>建议通过命令行的方式进行安装，这种方式更简单。</p>
<h2 id="命令行方式">命令行方式</h2>
<p>打开 Powershell（不要以管理员启动），将以下命令依次复制到命令行中，按
Enter 执行。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 scoop 软件安装器</span></span><br><span class="line"><span class="built_in">irm</span> https://app<span class="literal">-installer</span>.pages.dev/install | <span class="built_in">iex</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 iepc</span></span><br><span class="line">scoop install iepc</span><br></pre></td></tr></table></figure>
<p>至此，安装完成！</p>
<h3 id="启动方式">启动方式</h3>
<p>安装完成后，在搜索栏输入 <code>iepc</code>
即可搜索到已经安装的程序。</p>
<p>也可以直接在命令行中输入 <code>iepc</code> 启动程序。</p>
<h3 id="错误处理">错误处理</h3>
<p>上述第一个命令若出现如下错误：</p>
<p>PowerShell requires an execution policy in [Unrestricted,
RemoteSigned, ByPass] to run Scoop. For example, to set the execution
policy to 'RemoteSigned' please run 'Set-ExecutionPolicy RemoteSigned
-Scope CurrentUser'.</p>
<p>需要以管理员身份打开 Powershell，输入
<code>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</code>
，然后输入 <code>A</code>，开启远程脚本执行权限。</p>
<h2 id="手动方式">手动方式</h2>
<h3 id="软件下载">软件下载</h3>
<p>请通过企业微信中的<code>iEPC数字化管理平台</code>登陆
iEPC，然后在知识文库中进行下载。或者向同事拷贝安装包进行安装。</p>
<h3 id="安装环境">安装环境</h3>
<p>该软件需要安装以下两个环境:</p>
<table>
<colgroup>
<col style="width: 3%" />
<col style="width: 15%" />
<col style="width: 23%" />
<col style="width: 57%" />
</colgroup>
<thead>
<tr class="header">
<th>序号</th>
<th>名称</th>
<th>版本要求</th>
<th>官网下载地址</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>WebView2 Runtime</td>
<td>大于或等于 103.0.1264.71</td>
<td><a
href="https://developer.microsoft.com/zh-cn/microsoft-edge/webview2">win10及以上</a>，<a
href="https://share.weiyun.com/RAh0rLTA">win7 x64位</a></td>
</tr>
<tr class="even">
<td>2</td>
<td>.NET Framework</td>
<td>大于或等于 4.6.2</td>
<td><a
href="https://dotnet.microsoft.com/download/dotnet-framework">点击跳转</a></td>
</tr>
</tbody>
</table>
<p>如果是 win10 用户，只需要安装第一个环境；如果是 win7
用户，需要安装上面两个环境。</p>
<blockquote>
<p>特别说明：</p>
<p>win7 受支持的 webview2 最高版本为：</p>
<ul>
<li>runtime：109.x</li>
<li>sdk: 1.0.1519.0</li>
</ul>
</blockquote>
<p>选择官网下载时，对 <code>WebView2 Runtime</code>
按下图所示选择版本：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220708162900802.png"></p>
<p>对 <code>.NET Framework</code> 按下图所示选择版本：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220708163650264.png"></p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20221117114034963.png"
alt="image-20221117114034963" />
<figcaption aria-hidden="true">image-20221117114034963</figcaption>
</figure>
<blockquote>
<p>选择<code>运行时</code>版本</p>
</blockquote>
<h3 id="安装-iepc-desktop">安装 iEPC Desktop</h3>
<ol type="1">
<li><p>下载新版本软件，可以从企业微信的
<strong>iEPC数字化工程管理平台</strong> 上下载</p></li>
<li><p>解压软件到安装目录
解压位置根据自己需求来，想放到哪儿就解压到那儿。
如果已经安装过，直接解压到原安装目录覆盖即可更新。</p></li>
<li><p>点击 <code>iEPCDesktop.exe</code> 开始使用
可以将它建立一个快捷方式到桌面，方便使用。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220708164006662.png"
alt="image-20220708164006662" />
<figcaption aria-hidden="true">image-20220708164006662</figcaption>
</figure></li>
</ol>
<h2 id="iepc-目录说明">iEPC 目录说明</h2>
<table>
<colgroup>
<col style="width: 19%" />
<col style="width: 49%" />
<col style="width: 30%" />
</colgroup>
<thead>
<tr class="header">
<th>目录</th>
<th>作用</th>
<th>可删除</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Config</td>
<td>软件配置</td>
<td><strong style="color:red">否</strong></td>
</tr>
<tr class="even">
<td>Resources</td>
<td>系统资源目录，比如图标</td>
<td><strong style="color:red">否</strong></td>
</tr>
<tr class="odd">
<td>runtimes</td>
<td>系统目录</td>
<td><strong style="color:red">否</strong></td>
</tr>
<tr class="even">
<td>Update</td>
<td>系统更新模块</td>
<td><strong style="color:red">否</strong></td>
</tr>
<tr class="odd">
<td>Data</td>
<td>保存用户的操作历史，比如项目登陆历史</td>
<td>是</td>
</tr>
<tr class="even">
<td>iEPCDesktop.exe.WebView2</td>
<td>打开 iEPC
后自动生成，用于页面的缓存。若使用中出现异常问题，可以考虑删除该目录进行重置</td>
<td>是</td>
</tr>
<tr class="odd">
<td>Log</td>
<td>运行日志目录</td>
<td>是</td>
</tr>
<tr class="even">
<td>public</td>
<td>静态数据，主要用于缓存模型文件</td>
<td>是</td>
</tr>
<tr class="odd">
<td>temp</td>
<td>临时目录</td>
<td>是</td>
</tr>
</tbody>
</table>
<h2 id="常见问题汇总">常见问题汇总</h2>
<ol type="1">
<li><p>安装 iEPC 后，打开是空白怎么处理？ 这种情况是由于没有
<code>webview2</code>
运行环境导致的，按上述环境要求安装后即可恢复正常。</p></li>
<li><p>安装 iEPC 后，打开时闪退怎么处理？ 这种情况是由于
<code>.netframwork</code> 的版本太低导致的，安装最新版本的
<code>.netframework</code> 环境即可恢复正常。</p></li>
<li><p><strong>如何查看 <code>WebView2 Runtime</code> 版本？</strong>
打开 PowerShell（win+X），在里面输入下列内容：</p>
<p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-ItemProperty</span> <span class="literal">-Path</span> <span class="string">&#x27;Registry::HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\EdgeUpdate\Clients\&#123;F3017226-FE2A-4295-8BDF-00C3A9A7E4C5&#125;&#x27;</span> <span class="literal">-Name</span> pv</span><br></pre></td></tr></table></figure></p>
<p>如图即为 <code>WebView2 Runtime</code> 版本：</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220726132715459.png"
alt="image-20220726132715459" />
<figcaption aria-hidden="true">image-20220726132715459</figcaption>
</figure>
<p>如果小于 <code>103.0.1264.71</code>，则需安装更高版本，<a
href="https://developer.microsoft.com/zh-cn/microsoft-edge/webview2">&gt;&gt;&gt;传送门</a></p>
<p>如果运行结果如下图，说明环境完全没有，需要安装。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/noWebview2.png"
alt="noWebview2" />
<figcaption aria-hidden="true">noWebview2</figcaption>
</figure></li>
<li><p><strong>如何查看 <code>.NET Framework</code> 版本？</strong> 打开
PowerShell，在里面输入下列内容：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-ChildItem</span> <span class="string">&#x27;HKLM:\SOFTWARE\Microsoft\NET Framework Setup\NDP&#x27;</span> <span class="literal">-Recurse</span> | <span class="built_in">Get-ItemProperty</span> <span class="literal">-Name</span> version <span class="literal">-EA</span> <span class="number">0</span> | <span class="built_in">Where</span> &#123; <span class="variable">$_</span>.PSChildName <span class="operator">-Match</span> <span class="string">&#x27;^(?!S)\p&#123;L&#125;&#x27;</span>&#125; | <span class="built_in">Select</span> PSChildName, version</span><br></pre></td></tr></table></figure>
<p>如图所示即为 <code>.NET Framework</code> 版本 <img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220726133040529.png"
alt="image-20220726133040529" /></p>
<p>如果小于 4.6.2，则需安装更高版本，<a
href="https://dotnet.microsoft.com/download/dotnet-framework">单击跳转下载</a></p></li>
</ol>
]]></content>
      <categories>
        <category>Software</category>
        <category>iEPC</category>
      </categories>
      <tags>
        <tag>软件安装</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode 个人常用快捷键</title>
    <url>/posts/2020/1G6WK1H.html</url>
    <content><![CDATA[<p>总结一下 vscode 的常用快捷键，避免在今后的开发中遗忘，同时，也减少从
google 查询相关资料的时间。</p>
<span id="more"></span>
<h2 id="快捷键">快捷键</h2>
<h3 id="基本">基本</h3>
<table>
<thead>
<tr class="header">
<th>功能</th>
<th>快捷键</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>F1</td>
<td>Show Command Palette</td>
</tr>
<tr class="even">
<td>Ctrl+,</td>
<td>User Settings</td>
</tr>
<tr class="odd">
<td>Ctrl+K Ctrl+S</td>
<td>Keyboard Shortcuts</td>
</tr>
</tbody>
</table>
<h3 id="编辑">编辑</h3>
<table>
<thead>
<tr class="header">
<th>功能</th>
<th>快捷键</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Ctrl+/</td>
<td>Toggle line comment</td>
</tr>
<tr class="even">
<td>Ctrl+ left click</td>
<td>jump to definition</td>
</tr>
</tbody>
</table>
<h2 id="设置">设置</h2>
<h3 id="右侧预览小地图">右侧预览小地图</h3>
<p>右侧预览要地图要的名称叫 Minimap, 如果要打开或者关闭，在设置里面搜索
minimap，然后在 enable 那项打上钩就可以了。</p>
<h2 id="更多">更多</h2>
<p>All: https://code.visualstudio.com/docs/getstarted/keybindings</p>
<p>windows：
https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf</p>
]]></content>
      <categories>
        <category>Software</category>
        <category>VSCode</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 VSCode 远程开发最佳实践</title>
    <url>/posts/2024/1XYHCAM.html</url>
    <content><![CDATA[<p>首先分析一下，为什么要远程开发？本人认为远程开发主要有以下优点：</p>
<ol type="1">
<li><p>一处搭建，多处使用</p>
<p>只需要在远程机上搭建好开发环境，在任何电脑上都可以进行开发，非常便利</p></li>
<li><p>开发环境隔离，可以在不同的开发环境之间快速切换</p></li>
<li><p>对本机性能要求低</p></li>
</ol>
<span id="more"></span>
<h2 id="远程开发方式选择">远程开发方式选择</h2>
<p><strong>远程开发方式</strong>：</p>
<ol type="1">
<li><p>Remote - SSH</p>
<p>通过使用 SSH 远程连接计算机或者虚拟机中</p></li>
<li><p>Remote - Containers</p>
<p>通过 SSH 远程连接到 Docker 容器，在 Docker 中进行开发</p></li>
<li><p>Remote - WSL</p>
<p>在 Windows 中远程 WSL 进行开发。这种方式无法实现环境隔离，但是可以在
Windows 中获取 Linux 开发的体验</p></li>
</ol>
<p><strong>选择比较：</strong></p>
<p>由于业务原因，有的软件必须基于 Windows 进行开发，只能选择 Windows+WSL
组合，但是 WSL 无法实现开发隔离，因此还需要加上 Docker。</p>
<p>虽然可以仅使用 Docker
实现远程开发，但这会带来一个问题，需要在每个开发容器中安装 ssh、git、zsh
等一系列工具，增加部署负担；若需要增加映射端口或者新增挂载，则必须要重建容器，这个时候，容器里的配置将会清空，又得从头配置一次。</p>
<p>综合考虑，最终选择了 Windows + Docker Desktop + WSL
组合使用的方式。</p>
<h2 id="方案实施">方案实施</h2>
<p>具体的实施方案为：</p>
<ol type="1">
<li>在 Docker 中跑应用</li>
<li>将代码文件挂载到 WSL 的某个工作目录</li>
<li>使用 VSCode 远程 WSL，打开工作目录进行编程</li>
</ol>
<h2 id="举例说明">举例说明</h2>
<p>下面以 vue 项目为例举例说明</p>
<p>首先，在 WSL 中，创建一个远程工作目录，例如
<code>~/docker-envs</code>，将下面的 <code>docker-compose.yml</code>
复制过去，运行 <code>docker compose up -d</code> 启动开发环境</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">vue-env:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">vue-env</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">node:lts</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./vue:/app</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/app</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9527</span><span class="string">:9527</span></span><br><span class="line">    <span class="comment"># 为容器启动一个轻量级的 init 系统，可以处理孤儿进程并转发信号，解决 stop 速度慢的问题</span></span><br><span class="line">    <span class="attr">init:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">command:</span> [ <span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;exec sleep infinity&quot;</span> ]</span><br></pre></td></tr></table></figure>
<p>然后，使用下面的命令进入到容器内开始初始化项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it vue-env bash</span><br><span class="line"><span class="comment"># 项目初始化及依赖安装此处省略</span></span><br><span class="line">...</span><br><span class="line"><span class="comment"># 退出容器</span></span><br></pre></td></tr></table></figure>
<p>接着，执行 <code>docker exec -it vue-env npm run dev</code>
启动开发环境，这个终端不能退出，在开发中需要一直保持。</p>
<p>最后，使用 VSCode 远程 WSL，打开 <code>~/docker-envs/vue</code>
进行开发。</p>
]]></content>
      <categories>
        <category>Software</category>
        <category>VSCode</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode 中使用 prettier 格式化代码和 eslint 校验语法</title>
    <url>/posts/2021/2VC1G0D.html</url>
    <content><![CDATA[<p>本文主要针对 ESLint 和 Prettier
的使用进行总结，通读本文，你将理解：</p>
<ol type="1">
<li>ESLint 和 Prettier 是什么?</li>
<li>为什么在进行 Javascript 编码时，要使用它们？</li>
<li>在 vscode 中怎么使用它们？</li>
</ol>
<span id="more"></span>
<h2 id="关于学习-eslint-与-prettier">关于学习 ESLint 与 Prettier</h2>
<p>看到某些up,文章把 ESLint、Prettier
写得很复杂，有的还不全面，导致入门者在网上学得云里雾里的，然后就觉得这个好难。</p>
<p>这两个东西其实很简单，这就娓娓道来。等读完此篇文章后，建议在使用中根据需求再去阅读官方文档，不要去看别人的各种总结，因为大部分总结都很片面。看个一两篇入门是可以。</p>
<h2 id="eslint-是什么">ESLint 是什么</h2>
<p>是一个开源的 JavaScript 的 linting 工具，使用 <a
href="https://github.com/eslint/espree">espree</a> 将 JavaScript
代码解析成抽象语法树 (AST)，然后通过AST
来分析我们代码，从而给予我们两种提示：</p>
<ol type="1">
<li><strong>代码质量问题：使用方式有可能有问题(problematic
patterns)</strong></li>
<li><strong>代码风格问题：风格不符合一定规则 (doesn’t adhere to certain
style guidelines)</strong></li>
</ol>
<p>简单来说，ESLint
对代码的语法和格式按照规则进行检测，并提示和自动修正。</p>
<h2 id="prettier-是什么">Prettier 是什么</h2>
<p>ESLint
主要解决的是<strong>代码质量问题</strong>，但是对于<strong>代码风格</strong>（一般使用
<a href="https://github.com/lin-123/javascript">Airbnb JavaScript
风格指南</a>），ESLint 未完全实现。所以此时，就会使用 Prettier
进行补充。</p>
<p>简单来说，Prettier <em>只对代码的格式</em> 进行检查和修正，用来补充
ESLint 对代码格式规范的不足。</p>
<h2 id="怎么使用">怎么使用</h2>
<h3 id="为什么-vscode-中要安装插件">为什么 vscode 中要安装插件</h3>
<p>上述两个工具都是通过安装的 Eslint 和 Prettier
这两个包来实现代码检查和格式化的。在我们使用 vscode 进行编码的时候，
vscode 需要安装 EsLit 和 Prettier 这两个插件，监听 vscode
的操作事件(比如保存事件)，然后对代码按包中的规则来进行处理。</p>
<h3 id="如何配置">如何配置</h3>
<p>推荐在项目中增加配置文件来配置 vscode、 Eslint 和
Prettier，这样，配置可以共享给其它成员，也不会影响另外的项目开发。</p>
<table>
<colgroup>
<col style="width: 31%" />
<col style="width: 68%" />
</colgroup>
<thead>
<tr class="header">
<th>配置文件（相对于项目根目录）</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>.vscode/settings.json</td>
<td>vscode 在当前项目中的配置文件</td>
</tr>
<tr class="even">
<td>.eslintrc.js</td>
<td>eslint 配置文件</td>
</tr>
<tr class="odd">
<td>.prettierrc</td>
<td>prettier 配置文件，更多文件格式参考 <a
href="https://prettier.io/docs/en/configuration.html">Configuration File
· Prettier</a></td>
</tr>
</tbody>
</table>
<p>由于 prettier 与 eslint
之间有些配置不能完全兼容，在使用的时候，很难配置，因此，<a
href="Prettier%20VS%20Code%203.0%20#958">原作者推荐</a> 使用
Prettier-Eslint 插件，方便用户配置和使用。</p>
<p>下面讲如何使用 Prettier-ESLint 插件</p>
<h3 id="prettier-eslint-使用">Prettier-ESLint 使用</h3>
<h4 id="插件安装">插件安装</h4>
<ol type="1">
<li>vscode 中安装 Prettier-ESLint、和 Eslint 插件</li>
</ol>
<h4 id="npm-包安装">npm 包安装</h4>
<p>一般 js 项目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add -D prettier eslint</span><br></pre></td></tr></table></figure>
<p>TypeScript 项目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add -D prettier eslint @typescript-eslint/parser typescript</span><br></pre></td></tr></table></figure>
<p>Vue 项目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add -D prettier eslint vue-eslint-parser</span><br></pre></td></tr></table></figure>
<h4 id="项目设置">项目设置</h4>
<p>找到项目目录下的 <code>.vscode/settings.json</code>
文件，添加如下内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rvest.vs-code-prettier-eslint&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnPaste&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// required </span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnType&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// required</span></span><br><span class="line">  <span class="comment">// 关闭VSCode在Save时候自动格式化，因为VSCode自带的格式化和ESlint规范并不兼容</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// optional </span></span><br><span class="line">  <span class="comment">// 函数名后添加空格，与 eslint 规范兼容</span></span><br><span class="line">  <span class="comment">// 在代码开发时，可以使用 shift+alt+f 来格式化代码</span></span><br><span class="line">  <span class="attr">&quot;typescript.format.insertSpaceBeforeFunctionParenthesis&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;javascript.format.insertSpaceBeforeFunctionParenthesis&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files.autoSave&quot;</span><span class="punctuation">:</span> <span class="string">&quot;onFocusChange&quot;</span><span class="punctuation">,</span> <span class="comment">// optional but recommended</span></span><br><span class="line">  <span class="comment">// set as &quot;true&quot; to run &#x27;prettier&#x27; last not first</span></span><br><span class="line">  <span class="attr">&quot;vs-code-prettier-eslint.prettierLast&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 在保存时，自动根据 eslint 来修复格式问题</span></span><br><span class="line">  <span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;source.fixAll.eslint&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>更多设置参考：<a
href="https://code.visualstudio.com/docs/getstarted/settings#_default-settings">Visual
Studio Code Default Settings</a></p>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<ol type="1">
<li><a
href="https://github.com/idahogurl/vs-code-prettier-eslint">官方：idahogurl/vs-code-prettier-eslint:
A Visual Studio Code Extension to format JavaScript and TypeScript code
using the prettier-eslint package. (github.com)</a></li>
<li><a href="https://eslint.org/">ESLint 官方文档</a></li>
<li><a href="https://prettier.io/">Prettier 官方文档</a></li>
<li><a href="https://prettier.io/playground/">Prettier 在线配置</a></li>
<li><a
href="https://blog.logrocket.com/using-prettier-eslint-automate-formatting-fixing-javascript/">Using
Prettier and ESLint to automate formatting and fixing JavaScript -
LogRocket Blog</a></li>
<li><a
href="https://enlear.academy/integrating-prettier-and-eslint-with-vs-code-1d2f6fb53bc9">Integrating
Prettier and ESLint With VS Code</a></li>
<li><a
href="https://enlear.academy/eslint-vs-prettier-57882d0fec1d">eslint-vs-prettier</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/80574300">搞懂 ESLint 和
Prettier</a></li>
<li><a
href="https://code.visualstudio.com/docs/getstarted/settings#_default-settings">Visual
Studio Code Default Settings</a></li>
</ol>
]]></content>
      <categories>
        <category>Software</category>
        <category>VSCode</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>prettier</tag>
        <tag>eslint</tag>
      </tags>
  </entry>
  <entry>
    <title>Powershell 安装 NerdFonts 字体</title>
    <url>/posts/2023/2SJBCB8.html</url>
    <content><![CDATA[<figure>
<img data-src="https://www.nerdfonts.com/assets/img/nerd-fonts-logo.svg"
alt="image-20230613234640253" />
<figcaption aria-hidden="true">image-20230613234640253</figcaption>
</figure>
<p>为了支持 <code>oh-my-posh</code> 的美化，我们需要在 powershell 中安装
<code>NerdFonts</code> 字体。下面将分别介绍在不同场景下 PowerShell
的字体安装方法。</p>
<span id="more"></span>
<h2 id="字体安装">字体安装</h2>
<p>从 <a href="https://www.nerdfonts.com/font-downloads">Nerd Fonts -
Iconic font aggregator, glyphs/icons collection, &amp; fonts
patcher</a>下载 NerdFonts
字体，里面有很多变体，选择自己喜欢的一个下载，然后安装即可。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230613234640253.png"
alt="image-20230613234640253" />
<figcaption aria-hidden="true">image-20230613234640253</figcaption>
</figure>
<h2 id="windows-terminal-中设置-powershell-字体">windows terminal 中设置
powershell 字体</h2>
<p>在日常的使用中，一般都是通过 windows terminal 来打开 powershell
使用，因此，可以找到 windows terminal
的设置-&gt;找到对应的shell，打开外观设置，然后指定相应的字体。</p>
<h2 id="vscode-中设置-powershell-字体">vscode 中设置 powershell
字体</h2>
<p>按 <code>Ctrl+,</code>打开【设置】界面，搜索
font，切换到【用户】设置区，找到 【功能/终端】，在
<code>Integrated: Font Family</code>
中输入自己需要的字段，如果字体之间有空格，需要放到引号内。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230614001020595.png"
alt="image-20230614001020595" />
<figcaption aria-hidden="true">image-20230614001020595</figcaption>
</figure>
]]></content>
      <categories>
        <category>Software</category>
        <category>Powershell</category>
      </categories>
      <tags>
        <tag>Software</tag>
        <tag>PowerShell</tag>
        <tag>NerdFonts</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>vs中生成操作：内容、编译、嵌入资源的区别</title>
    <url>/posts/2021/1K35WF3.html</url>
    <content><![CDATA[<p>vs 中不同的生成操作有什么区别呢？请让我娓娓道来。</p>
<span id="more"></span>
<h2 id="概述">概述</h2>
<ul>
<li><p>内容(Content)</p>
<p>不编译该文件，但将其包含在“内容”(Content) 输出组中。</p></li>
<li><p>编译(Compile)</p>
<p>将该文件编译到生成输出中。此设置用于代码文件。</p></li>
<li><p>嵌入资源(Embedded Resource)</p>
<p>将该文件作为 DLL 或可执行文件嵌入主项目生成输出中。</p></li>
</ul>
<h2 id="读写">读写</h2>
<ul>
<li><p>内容的读写和运行目录下的其他文件没有区分。</p></li>
<li><p>编译和嵌入资源读写，需要按如下方法读取：</p></li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读取程序中嵌入的文件</span></span><br><span class="line">Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(<span class="string">&quot;命名空间.文件夹名（多层级用.分隔）.文件名（带后缀）&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p><a
href="https://learn.microsoft.com/zh-cn/visualstudio/ide/build-actions?view=vs-2022">vs2022
生成操作</a></p>
]]></content>
      <categories>
        <category>Software</category>
        <category>VisualStudio</category>
      </categories>
      <tags>
        <tag>vs</tag>
      </tags>
  </entry>
  <entry>
    <title>VisualAssistX破解安装教程(一手资料)</title>
    <url>/posts/2023/11S1RTW.html</url>
    <content><![CDATA[<p>Visual Assist X（以下简称 VAX）是一款功能强大的 Visual Studio
插件，它可以具有强大的<a
href="https://www.wholetomato.com/features">代码导航、代码重构、代码生成、代码校正等
12 项主要功能</a>，简而言之，用上它之后，编程更加高效了。</p>
<p>本文将介绍如何安装与破解</p>
<span id="more"></span>
<h2 id="软件安装">软件安装</h2>
<p>下载破解补丁对应的 VAX 版本，可以从此处<a
href="https://support.wholetomato.com/default.asp?W422">Archive of
Visual Assist builds and release notes
(wholetomato.com)</a>进行下载。</p>
<blockquote>
<p>作者为保护正版，仅提供最新版本的前一个版本的补丁。</p>
</blockquote>
<p><strong>如何查看版本：</strong></p>
<p>以 2488 版本为例，我们在<a
href="https://support.wholetomato.com/default.asp?W404">历史版本界面</a>，找到
<a
href="https://wholetomato.com/downloads/getBuild.asp?VA_X_Setup2488_0.exe">Visual
Assist Build 2023.2</a>，然后右键，复制链接，链接中
<code>https://wholetomato.com/downloads/getBuild.asp?VA_X_Setup2488_0.exe</code>
Setup 后面的数字即版本信息。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230823181501026.png"
alt="image-20230823181501026" />
<figcaption aria-hidden="true">image-20230823181501026</figcaption>
</figure>
<p>软件下载完成后，直接安装即可，不再赘述。</p>
<h2 id="软件破解">软件破解</h2>
<p><strong>破解工具下载：</strong></p>
<p>破解工具从作者的博客中下载，地址：<a
href="https://www.cnblogs.com/i1tao/">i1tao - 博客园
(cnblogs.com)</a></p>
<p><a href="https://www.cnblogs.com/i1tao/">i1tao - 博客园
(cnblogs.com)</a></p>
<blockquote>
<p>重要：</p>
<p>如果之前注册安装过VAX的，请先运行
<code>..\\VAX Reginfo Clearner\\Trial-Reset.exe</code>
对之前注册信息进行清理.</p>
</blockquote>
<ol type="1">
<li><p>安装 VAX</p></li>
<li><p>将附件中的 oledlg.dll
复制到VS各个版本的主程序(devenv.exe)所在的目录.</p></li>
<li><p>启动VS，进入VAX的配置项来输入下面的key完成注册：</p></li>
</ol>
<table>
<colgroup>
<col style="width: 10%" />
<col style="width: 89%" />
</colgroup>
<thead>
<tr class="header">
<th>keyName</th>
<th>value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Key1</td>
<td>Cracked_By_Cr39_0xc5(i1tao) (255-user license) Support ends
2029.1.1<br/>00001R-4AK2FM-EZ4NC1-R3NGD9-AE98BE-XWCZ8E-HA59TD-E5UJBE-JUKWMD-E3KTC9-7WJAWR</td>
</tr>
<tr class="even">
<td>key2</td>
<td>Cracked_By_Cr39_0xc5(i1tao) (255-user license) Support ends
2029.1.1<br/>00001R-4AK2FM-EZ4NC1-R3NMFW-W5PKG4-7CZFJW-PE9PV8-WRQJKU-1QWPTK-AVCE77-WG9BCM</td>
</tr>
</tbody>
</table>
<p>激活流程按下图红字标识序号进行：</p>
<figure>
<img data-src="C:\Users\galens\AppData\Roaming\Typora\typora-user-images\image-20230823182754397.png"
alt="image-20230823182754397" />
<figcaption aria-hidden="true">image-20230823182754397</figcaption>
</figure>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此表示诚挚谢意，同时，感谢作者对该破解资源的付出和分享！</p>
<ol type="1">
<li><p><a href="https://www.wholetomato.com/features">Features in Visual
Assist - Whole Tomato Software</a></p></li>
<li><p><a href="https://www.cnblogs.com/i1tao/">i1tao - 博客园
(cnblogs.com)</a></p></li>
<li><p><a
href="https://support.wholetomato.com/default.asp?W422">Archive of
Visual Assist builds and release notes (wholetomato.com)</a></p></li>
</ol>
]]></content>
      <categories>
        <category>Software</category>
        <category>VisualStudio</category>
      </categories>
      <tags>
        <tag>VS</tag>
        <tag>VAX</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>iEPC 设计协同使用教程</title>
    <url>/posts/2023/2W88WG9.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容">
  <script id="hbeData" type="hbeData" data-hmacdigest="66000e9ccac20034e48633014f9849f09201397b401193f0fc26e90a661c378c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">当前文档已加密，请输入密码查看</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Software</category>
        <category>iEPC</category>
      </categories>
      <tags>
        <tag>Software</tag>
        <tag>iEPC</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Terminal 终端安装及美化</title>
    <url>/posts/2021/3APEE3Y.html</url>
    <content><![CDATA[<figure>
<img data-src="https://pic2.zhimg.com/80/v2-59db8c16ee82335a0f6229b1f01f5481_720w.jpg"
alt="常规展示" />
<figcaption aria-hidden="true">常规展示</figcaption>
</figure>
<p>Windows 上的终端难用又难看，直到我遇到了 Windows Terminal 和
Powershell
7。那丝滑般的操作手感，美得不可方物的界面，还有其强大的功能支持，瞬间坠入爱河，爱了爱了~</p>
<blockquote>
<p>由于 WindowsTerminal 设置已经 UI 可视化，因此该文章已经弃用。关于
Powershell 的相关配置，已经更新到 <a
href="/categories/Software/Powershell">PowerShell</a> 的分类中</p>
</blockquote>
<span id="more"></span>
<p>下面我们就一步一步开始安装和配置。</p>
<h2 id="安装-windows-terminal">安装 Windows Terminal</h2>
<ol type="1">
<li><p>如果是 win10，直接去 <strong>Microsoft Store</strong> 搜索
<code>Windows Terminal</code> 下载即可;</p></li>
<li><p>如果是 windows server，按照以下步骤进行安装:</p>
<ul>
<li><p>下载 GitHub 下载 <code>.msixbundle</code> 软件包，<a
href="https://github.com/microsoft/terminal/releases">Releases ·
microsoft/terminal (github.com)</a></p></li>
<li><p>用管理员身份运行 Powershell，在里面输入如下命令进行安装</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">Add-AppPackage 安装包的全路径名称</span><br></pre></td></tr></table></figure>
<p>路径如果有空格，需要用双引号括起来。</p></li>
</ul></li>
<li><p>还可以通过 scoop 进行安装</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install windows<span class="literal">-terminal</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="安装字体">安装字体</h2>
<p>这里仅推荐一款字体：<strong>Fira Code</strong>。该字体支持 ligature
连字功能，而且是一款专门为代码显示准备的字体。该字体开源，广受海内外程序员好评！</p>
<p><a
href="https://link.zhihu.com/?target=https%3A//github.com/tonsky/FiraCode/releases/download/3.1/FiraCode_3.1.zip">单击此处从
GitHub 下载</a></p>
<p>下载完成后，解压，然后打开 <code>ttf</code>
目录，全选，右键点击安装。</p>
<blockquote>
<p>otf 与 ttf 的字体区别在于 ttf 字体定位更准，建议使用 ttf。</p>
</blockquote>
<h2 id="安装新款-powershell-core">安装新款 Powershell Core</h2>
<p>首先声明，我们这儿用的 Powershell 与 Windows 自带的 Powershell
是完全不同的两个东西，除了功能相似和名字相同，两者内在已经天差地别。</p>
<p>自带的 Powershell
<strong>错误提示冗长</strong>，<strong>颜值低</strong>，<strong>速度慢</strong>，总之就是不值得去用。</p>
<p>那么 Powershell Core 是什么呢？这是伟大的 <strong>.Net Core
跨平台战略</strong>的一个重要组成部分，微软设想，要让强大的 .Net
在所有平台上通用，让这么强大的 Powershell 在所有平台上都能用，古老的
bash 可以退休了！</p>
<p>基于以上愿景，微软开始了漫长而辉煌的征程。</p>
<p>下载地址：<a
href="https://github.com/PowerShell/PowerShell/releases">Releases ·
PowerShell/PowerShell (github.com)</a></p>
<p>安装过程中会提示安装选项，全部勾选就可以了。</p>
<figure>
<img data-src="https://i.loli.net/2021/06/05/WCQI3UnNl4LDbOo.png"
alt="安装界面" />
<figcaption aria-hidden="true">安装界面</figcaption>
</figure>
<p>上面的各个选项分别是：</p>
<ul class="task-list">
<li><input type="checkbox" />添加 PowerShell 到环境变量</li>
<li><input type="checkbox" />注册到 Windows 事件</li>
<li><input type="checkbox" />允许 PowerShell 远程</li>
<li><input type="checkbox" />在文件管理器中右键菜单</li>
<li><input type="checkbox" />给 PowerShell 文件添加用 PowerShell
7-preview 右键菜单</li>
</ul>
<h2 id="安装-powershell-插件">安装 Powershell 插件</h2>
<p>这一步是整个过程的灵魂。</p>
<p>直接上代码：打开刚装好的新版 powershell，逐行输入命令。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 安装 PSReadline 包，该插件可以让命令行很好用，类似 zsh</span></span><br><span class="line"><span class="built_in">Install-Module</span> <span class="literal">-Name</span> PSReadLine <span class="literal">-AllowPrerelease</span> <span class="literal">-Force</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 安装 posh-git 包，让你的 git 更好用</span></span><br><span class="line"><span class="built_in">Install-Module</span> posh<span class="literal">-git</span> <span class="literal">-Scope</span> CurrentUser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 安装 oh-my-posh 包，让你的命令行更酷炫、优雅</span></span><br><span class="line"><span class="built_in">Install-Module</span> <span class="built_in">oh</span><span class="literal">-my-posh</span> <span class="literal">-Scope</span> CurrentUser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4。安装 ZLocation，可以通过 z xx(xx是路径的关键词) 快速定位路径</span></span><br><span class="line"><span class="built_in">Install-Module</span> ZLocation <span class="literal">-Scope</span> CurrentUser</span><br></pre></td></tr></table></figure>
<p>安装过程可能有点慢，<strong>好像卡住了一样</strong>，但是请耐心等待几分钟。另外，可能需要挂代理才能下载、安装。这几个包的都不大，所以如果迟迟装不上，就基本上是网络问题。</p>
<p>后面两个包的<strong>来源可能不受系统信任</strong>，不用管它，如果让你选择是否信任，直接输入
<code>Y</code> 即可。</p>
<h2 id="配置-windows-terminal">配置 Windows Terminal</h2>
<p>这一项也是灵魂。</p>
<p>只有新款 Powershell 而没有 Windows Terminal，好比吃肉不放盐。</p>
<p>打开Windows Terminal，然后按快捷键 <code>Ctrl+Shift+,</code>
打开配置文件，直接上配置代码，遇到不懂的地方，自己读注释。记得将此设置默认配置（代码已经给出）。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// This file was initially generated by Windows Terminal Preview 1.4.2652.0</span></span><br><span class="line"><span class="comment">// It should still be usable in newer versions, but newer versions might have additional</span></span><br><span class="line"><span class="comment">// settings, help text, or changes that you will not see unless you clear this file</span></span><br><span class="line"><span class="comment">// and let us generate a new one for you.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// To view the default settings, hold &quot;alt&quot; while clicking on the &quot;Settings&quot; button.</span></span><br><span class="line"><span class="comment">// For documentation on these settings, see: https://aka.ms/terminal-documentation</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;$schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://aka.ms/terminal-profiles-schema&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认的配置就是我们的新 powershell（重要！！！）</span></span><br><span class="line">    <span class="comment">// 认准这个Id: &quot;&#123;574e775e-4f2a-5b96-ac1e-a2962a402336&#125;&quot;</span></span><br><span class="line">    <span class="attr">&quot;defaultProfile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;574e775e-4f2a-5b96-ac1e-a2962a402336&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// You can add more global application settings here.</span></span><br><span class="line">    <span class="comment">// To learn more about global settings, visit https://aka.ms/terminal-global-settings</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// If enabled, selections are automatically copied to your clipboard.</span></span><br><span class="line">    <span class="attr">&quot;copyOnSelect&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// If enabled, formatted data is also copied to your clipboard</span></span><br><span class="line">    <span class="attr">&quot;copyFormatting&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// A profile specifies a command to execute paired with information about how it should look and feel.</span></span><br><span class="line">    <span class="comment">// Each one of them will appear in the &#x27;New Tab&#x27; dropdown,</span></span><br><span class="line">    <span class="comment">//   and can be invoked from the commandline with `wt.exe -p xxx`</span></span><br><span class="line">    <span class="comment">// To learn more about profiles, visit https://aka.ms/terminal-profile-settings</span></span><br><span class="line">    <span class="attr">&quot;profiles&quot;</span><span class="punctuation">:</span></span><br><span class="line">    <span class="punctuation">&#123;</span>		</span><br><span class="line">        <span class="attr">&quot;defaults&quot;</span><span class="punctuation">:</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="comment">// Put settings here that you want to apply to all profiles.</span></span><br><span class="line">			<span class="attr">&quot;startingDirectory&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;useAcrylic&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="comment">// Make changes here to the powershell.exe profile.</span></span><br><span class="line">                <span class="attr">&quot;guid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Windows PowerShell&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;commandline&quot;</span><span class="punctuation">:</span> <span class="string">&quot;powershell.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;hidden&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="comment">// 隐藏原来的 PowerShell</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="comment">// Make changes here to the cmd.exe profile.</span></span><br><span class="line">                <span class="attr">&quot;guid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;命令提示符&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;commandline&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cmd.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;hidden&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="comment">// 隐藏 cmd</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;guid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;b453ae62-4e3d-5e58-b989-0a998ec441b8&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;hidden&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 隐藏 Azure Cloud Shell</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Azure Cloud Shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Windows.Terminal.Azure&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;guid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;574e775e-4f2a-5b96-ac1e-a2962a402336&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;hidden&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PowerShell&quot;</span><span class="punctuation">,</span>             </span><br><span class="line">				<span class="comment">// 注意：一定要写上 -nologo，否则开启 powershll 会有一段话输出，很讨厌！</span></span><br><span class="line">                <span class="comment">// 路径自己去核实，如果是正式版本，就是 .../7/pwsh.exe</span></span><br><span class="line">				<span class="attr">&quot;commandline&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:/Program Files/PowerShell/7-preview/pwsh.exe -nologo&quot;</span><span class="punctuation">,</span> </span><br><span class="line">				<span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Windows.Terminal.PowershellCore&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="comment">// 启动菜单一定要设置为 &lt;.&gt;，否则后面重要的一步将会无效！</span></span><br><span class="line">				<span class="attr">&quot;startingDirectory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="comment">// 字体</span></span><br><span class="line">				<span class="attr">&quot;fontFace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Fira Code&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;fontSize&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;historySize&quot;</span><span class="punctuation">:</span> <span class="number">9001</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;padding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5, 5, 20, 25&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;snapOnInput&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;useAcrylic&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">				<span class="comment">// 颜色</span></span><br><span class="line">				<span class="attr">&quot;colorScheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Homebrew&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add custom color schemes to this array.</span></span><br><span class="line">    <span class="comment">// To learn more about color schemes, visit https://aka.ms/terminal-color-schemes</span></span><br><span class="line">    <span class="attr">&quot;schemes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="comment">// Homebrew 配色，该配色经过 刘鹏 改良</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Homebrew&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;black&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;red&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FC5275&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;green&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#00a600&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;yellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#999900&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;blue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#6666e9&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;purple&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#b200b2&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;cyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#00a6b2&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;white&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#bfbfbf&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;brightBlack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#666666&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;brightRed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#e50000&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;brightGreen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#00d900&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;brightYellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#e5e500&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;brightBlue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#0000ff&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;brightPurple&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#e500e5&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;brightCyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#00e5e5&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;brightWhite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#e5e5e5&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#283033&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#00ff00&quot;</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add custom actions and keybindings to this array.</span></span><br><span class="line">    <span class="comment">// To unbind a key combination from your defaults.json, set the command to &quot;unbound&quot;.</span></span><br><span class="line">    <span class="comment">// To learn more about actions and keybindings, visit https://aka.ms/terminal-keybindings</span></span><br><span class="line">    <span class="attr">&quot;actions&quot;</span><span class="punctuation">:</span></span><br><span class="line">    <span class="punctuation">[</span></span><br><span class="line">        <span class="comment">// Copy and paste are bound to Ctrl+Shift+C and Ctrl+Shift+V in your defaults.json.</span></span><br><span class="line">        <span class="comment">// These two lines additionally bind them to Ctrl+C and Ctrl+V.</span></span><br><span class="line">        <span class="comment">// To learn more about selection, visit https://aka.ms/terminal-selection</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;copy&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;singleLine&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span> <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ctrl+c&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;paste&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ctrl+v&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Press Ctrl+Shift+F to open the search box</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;find&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ctrl+shift+f&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Press Alt+Shift+D to open a new pane.</span></span><br><span class="line">        <span class="comment">// - &quot;split&quot;: &quot;auto&quot; makes this pane open in the direction that provides the most surface area.</span></span><br><span class="line">        <span class="comment">// - &quot;splitMode&quot;: &quot;duplicate&quot; makes the new pane use the focused pane&#x27;s profile.</span></span><br><span class="line">        <span class="comment">// To learn more about panes, visit https://aka.ms/terminal-panes</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;splitPane&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;split&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;splitMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;duplicate&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="string">&quot;alt+shift+d&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>特别注意，用其他配色可能<strong>降低颜值</strong>。</p>
</blockquote>
<h2 id="添加-powershell-启动参数">添加 Powershell 启动参数</h2>
<p>在 powershell 中输入</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">notepad.exe <span class="variable">$Profile</span></span><br></pre></td></tr></table></figure>
<p>紧接着在弹出的页面中输入下面这一长串代码，保存并关闭。这个 Profile
配置文件与 .zshrc / .bashrc 文件一样，都是控制启动前参数的。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&lt;#</span><br><span class="line"> * FileName<span class="punctuation">:</span> Microsoft.PowerShell_profile.ps1</span><br><span class="line"> * Author<span class="punctuation">:</span> 刘 鹏</span><br><span class="line"> * Email<span class="punctuation">:</span> littleNewton6@outlook.com</span><br><span class="line"> * Date<span class="punctuation">:</span> <span class="number">2020</span><span class="punctuation">,</span> May. <span class="number">1</span></span><br><span class="line"> * Copyright<span class="punctuation">:</span> No copyright. You can use this code for anything with no warranty.</span><br><span class="line">#&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------- Import Modules BEGIN -------------------------------</span><br><span class="line"># 引入 posh-git</span><br><span class="line">Import-Module posh-git</span><br><span class="line"></span><br><span class="line"># 引入 oh-my-posh</span><br><span class="line">Import-Module oh-my-posh</span><br><span class="line"></span><br><span class="line"># 设置 PowerShell 主题</span><br><span class="line">Set-PoshPrompt -Theme Paradox</span><br><span class="line">#------------------------------- Import Modules END   -------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#-------------------------------  Set Hot-keys BEGIN  -------------------------------</span><br><span class="line"># 设置 Tab 键补全</span><br><span class="line"># Set-PSReadlineKeyHandler -Key Tab -Function Complete</span><br><span class="line"></span><br><span class="line"># 设置 Ctrl+d 为菜单补全和 Intellisense</span><br><span class="line">Set-PSReadLineKeyHandler -Key <span class="string">&quot;Tab&quot;</span> -Function MenuComplete</span><br><span class="line"></span><br><span class="line"># 设置 Ctrl+d 为退出 PowerShell</span><br><span class="line">Set-PSReadlineKeyHandler -Key <span class="string">&quot;Ctrl+d&quot;</span> -Function ViExit</span><br><span class="line"></span><br><span class="line"># 设置 Ctrl+z 为撤销</span><br><span class="line">Set-PSReadLineKeyHandler -Key <span class="string">&quot;Ctrl+z&quot;</span> -Function Undo</span><br><span class="line"></span><br><span class="line"># 设置向上键为后向搜索历史记录</span><br><span class="line">Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward</span><br><span class="line"></span><br><span class="line"># 设置向下键为前向搜索历史纪录</span><br><span class="line">Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward</span><br><span class="line">#-------------------------------  Set Hot-keys END    -------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#-------------------------------  引用与上述冲突的模块 BEGIN    -------------------------------</span><br><span class="line"></span><br><span class="line"># 引用模块 ZLocation，必须放到上面模块设置完成后的位置，否则会不生效</span><br><span class="line">Import-Module ZLocation</span><br><span class="line"></span><br><span class="line">#-------------------------------    Functions BEGIN   -------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#-------------------------------    Functions BEGIN   -------------------------------</span><br><span class="line"># Python 直接执行</span><br><span class="line">$env<span class="punctuation">:</span>PATHEXT += <span class="string">&quot;;.py&quot;</span></span><br><span class="line"></span><br><span class="line"># 更新 pip 的方法</span><br><span class="line">function Update-Packages <span class="punctuation">&#123;</span></span><br><span class="line">    # update pip</span><br><span class="line">    Write-Host <span class="string">&quot;Step 1: 更新 pip&quot;</span> -ForegroundColor Magenta -BackgroundColor Cyan</span><br><span class="line">    $a = pip list --outdated</span><br><span class="line">    $num_package = $a.Length - <span class="number">2</span></span><br><span class="line">    for ($i = <span class="number">0</span>; $i -lt $num_package; $i++) <span class="punctuation">&#123;</span></span><br><span class="line">        $tmp = ($a<span class="punctuation">[</span><span class="number">2</span> + $i<span class="punctuation">]</span>.Split(<span class="string">&quot; &quot;</span>))<span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span></span><br><span class="line">        pip install -U $tmp</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">    # update TeX Live</span><br><span class="line">    $CurrentYear = Get-Date -Format yyyy</span><br><span class="line">    Write-Host <span class="string">&quot;Step 2: 更新 TeX Live&quot;</span> $CurrentYear -ForegroundColor Magenta -BackgroundColor Cyan</span><br><span class="line">    tlmgr update --self</span><br><span class="line">    tlmgr update --all</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">#-------------------------------    Functions END     -------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#-------------------------------   Set Alias Begin    -------------------------------</span><br><span class="line"># <span class="number">1.</span> 编译函数 make</span><br><span class="line">function MakeThings <span class="punctuation">&#123;</span></span><br><span class="line">    nmake.exe $args -nologo</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">Set-Alias -Name make -Value MakeThings</span><br><span class="line"></span><br><span class="line"># <span class="number">2.</span> 更新系统 os-update</span><br><span class="line">Set-Alias -Name os-update -Value Update-Packages</span><br><span class="line"></span><br><span class="line"># <span class="number">3.</span> 查看目录 ls &amp; ll</span><br><span class="line">function ListDirectory <span class="punctuation">&#123;</span></span><br><span class="line">    (Get-ChildItem).Name</span><br><span class="line">    Write-Host(<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">Set-Alias -Name ls -Value ListDirectory</span><br><span class="line">Set-Alias -Name ll -Value Get-ChildItem</span><br><span class="line">#-------------------------------    Set Alias END     -------------------------------</span><br></pre></td></tr></table></figure>
<p>到此，配置完成！在命令行里面狂欢吧。</p>
<h2 id="参考">参考</h2>
<p>[1] <a
href="https://zhuanlan.zhihu.com/p/137595941">原文链接：Windows Terminal
完美配置 PowerShell 7.1</a></p>
<p>[2] <a
href="https://github.com/janikvonrotz/awesome-powershell">awesome-powershell</a></p>
<p>[3] <a href="https://github.com/dahlbyk/posh-git">posh-git</a></p>
<p>[4] <a
href="https://github.com/PowerShell/PSReadLine">PSReadLine</a></p>
<p>[5] <a href="https://github.com/vors/ZLocation">ZLocation</a></p>
<p>[6] <a
href="https://github.com/jandedobbeleer/oh-my-posh">oh-my-posh</a></p>
<p>[7] <a
href="https://juejin.cn/post/6933384126363877384#heading-21">其它参考</a></p>
]]></content>
      <categories>
        <category>Software</category>
        <category>WindowsTerminal</category>
      </categories>
      <tags>
        <tag>WindowsTerminal</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Terminal 配置文件详解</title>
    <url>/posts/2020/S47705.html</url>
    <content><![CDATA[<p>Windows Terminal
让人一见到就爱上了，为了能够更加方便的自定义，下面列出相关的配置及说明。</p>
<span id="more"></span>
<h2 id="settings.json">settings.json</h2>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// This file was initially generated by Windows Terminal Preview 1.4.2652.0</span></span><br><span class="line"><span class="comment">// It should still be usable in newer versions, but newer versions might have additional</span></span><br><span class="line"><span class="comment">// settings, help text, or changes that you will not see unless you clear this file</span></span><br><span class="line"><span class="comment">// and let us generate a new one for you.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// To view the default settings, hold &quot;alt&quot; while clicking on the &quot;Settings&quot; button.</span></span><br><span class="line"><span class="comment">// For documentation on these settings, see: https://aka.ms/terminal-documentation</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;$schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://aka.ms/terminal-profiles-schema&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;defaultProfile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// You can add more global application settings here.</span></span><br><span class="line">    <span class="comment">// To learn more about global settings, visit https://aka.ms/terminal-global-settings</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// If enabled, selections are automatically copied to your clipboard.</span></span><br><span class="line">    <span class="attr">&quot;copyOnSelect&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// If enabled, formatted data is also copied to your clipboard</span></span><br><span class="line">    <span class="attr">&quot;copyFormatting&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// A profile specifies a command to execute paired with information about how it should look and feel.</span></span><br><span class="line">    <span class="comment">// Each one of them will appear in the &#x27;New Tab&#x27; dropdown,</span></span><br><span class="line">    <span class="comment">//   and can be invoked from the commandline with `wt.exe -p xxx`</span></span><br><span class="line">    <span class="comment">// To learn more about profiles, visit https://aka.ms/terminal-profile-settings</span></span><br><span class="line">    <span class="attr">&quot;profiles&quot;</span><span class="punctuation">:</span></span><br><span class="line">    <span class="punctuation">&#123;</span>		</span><br><span class="line">        <span class="attr">&quot;defaults&quot;</span><span class="punctuation">:</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="comment">// Put settings here that you want to apply to all profiles.</span></span><br><span class="line">			<span class="attr">&quot;startingDirectory&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#013456&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;acrylicOpacity&quot;</span><span class="punctuation">:</span> <span class="number">0.8</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;useAcrylic&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="comment">// Make changes here to the powershell.exe profile.</span></span><br><span class="line">                <span class="attr">&quot;guid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Windows PowerShell&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;commandline&quot;</span><span class="punctuation">:</span> <span class="string">&quot;powershell.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;hidden&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="comment">// Make changes here to the cmd.exe profile.</span></span><br><span class="line">                <span class="attr">&quot;guid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;命令提示符&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;commandline&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cmd.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;hidden&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;guid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;b453ae62-4e3d-5e58-b989-0a998ec441b8&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;hidden&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Azure Cloud Shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Windows.Terminal.Azure&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add custom color schemes to this array.</span></span><br><span class="line">    <span class="comment">// To learn more about color schemes, visit https://aka.ms/terminal-color-schemes</span></span><br><span class="line">    <span class="attr">&quot;schemes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add custom actions and keybindings to this array.</span></span><br><span class="line">    <span class="comment">// To unbind a key combination from your defaults.json, set the command to &quot;unbound&quot;.</span></span><br><span class="line">    <span class="comment">// To learn more about actions and keybindings, visit https://aka.ms/terminal-keybindings</span></span><br><span class="line">    <span class="attr">&quot;actions&quot;</span><span class="punctuation">:</span></span><br><span class="line">    <span class="punctuation">[</span></span><br><span class="line">        <span class="comment">// Copy and paste are bound to Ctrl+Shift+C and Ctrl+Shift+V in your defaults.json.</span></span><br><span class="line">        <span class="comment">// These two lines additionally bind them to Ctrl+C and Ctrl+V.</span></span><br><span class="line">        <span class="comment">// To learn more about selection, visit https://aka.ms/terminal-selection</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;copy&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;singleLine&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span> <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ctrl+c&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;paste&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ctrl+v&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Press Ctrl+Shift+F to open the search box</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;find&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ctrl+shift+f&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Press Alt+Shift+D to open a new pane.</span></span><br><span class="line">        <span class="comment">// - &quot;split&quot;: &quot;auto&quot; makes this pane open in the direction that provides the most surface area.</span></span><br><span class="line">        <span class="comment">// - &quot;splitMode&quot;: &quot;duplicate&quot; makes the new pane use the focused pane&#x27;s profile.</span></span><br><span class="line">        <span class="comment">// To learn more about panes, visit https://aka.ms/terminal-panes</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;splitPane&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;split&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;splitMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;duplicate&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="string">&quot;alt+shift+d&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="来源">来源</h2>
<p>【1】<a href="https://zhuanlan.zhihu.com/p/163785375">详解Windows
Terminal配置文件settings.json</a></p>
<p>【2】<a
href="https://docs.microsoft.com/zh-cn/windows/terminal/">windows
terminal 官方文档</a></p>
]]></content>
      <categories>
        <category>Software</category>
        <category>WindowsTerminal</category>
      </categories>
      <tags>
        <tag>WindowsTerminal</tag>
      </tags>
  </entry>
  <entry>
    <title>判断给定点是否在 CurveVector 上</title>
    <url>/posts/2022/37DM65S.html</url>
    <content><![CDATA[<p>判断给定点在否在 CurveVector 上可以使用下列方法：</p>
<span id="more"></span>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">CurveVector curve;</span><br><span class="line">Dpoint3d testPnt;</span><br><span class="line">InOutClassification location = curve.PointInOnOutXY(testPnt);</span><br><span class="line"></span><br><span class="line"><span class="comment">// InOutClassification 的定义如下</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> InOutClassification</span><br><span class="line">&#123;</span><br><span class="line">    Unknown,</span><br><span class="line">    In,</span><br><span class="line">    Out,</span><br><span class="line">    On</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>Curve</category>
      </categories>
      <tags>
        <tag>CurveVector</tag>
      </tags>
  </entry>
  <entry>
    <title>Microstation EC 编程程序集介绍</title>
    <url>/posts/2023/9PQA9Z.html</url>
    <content><![CDATA[<p>本文将对 Microstation 中 EC
编程所需要的程序集作一个简要介绍，并推荐一个默认引用配置。</p>
<span id="more"></span>
<h2 id="参考">参考</h2>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>EC</category>
      </categories>
      <tags>
        <tag>Microstation</tag>
        <tag>EC</tag>
      </tags>
  </entry>
  <entry>
    <title>MS Addin 开发常用 DLL 引用配置推荐</title>
    <url>/posts/2022/1YQEJF9.html</url>
    <content><![CDATA[<p>本文收集了在 MS 二次开发的过程中常用的 DLL
引用配置，方便今后开辟新项目直接拷贝使用，在使用的过程中，会根据需要，逐渐添加。</p>
<span id="more"></span>
<h2 id="command-配置">Command 配置</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">EmbeddedResource</span> <span class="attr">Include</span>=<span class="string">&quot;AddinAndKeyIn\ExtendedCommands.xml&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LogicalName</span>&gt;</span>CommandTable.xml<span class="tag">&lt;/<span class="name">LogicalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SubType</span>&gt;</span>Designer<span class="tag">&lt;/<span class="name">SubType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">EmbeddedResource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="ms-引用列表">MS 引用列表</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.DgnDisplayNet&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Bentley.DgnDisplayNet.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.DgnPlatformNET&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Bentley.DgnPlatformNET.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.EC.Persistence3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Assemblies\ECFramework\Bentley.EC.Persistence3.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.ECObjects.Interop3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Assemblies\ECFramework\Bentley.ECObjects.Interop3.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.ECObjects.MixedMode3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Assemblies\ECFramework\Bentley.ECObjects.MixedMode3.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.ECObjects3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Assemblies\ECFramework\Bentley.ECObjects3.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.ECSystem3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Assemblies\ECFramework\Bentley.ECSystem3.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.General.1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Assemblies\ECFramework\Bentley.General.1.0.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.Platform&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Assemblies\ECFramework\Bentley.Platform.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.UI&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Assemblies\ECFramework\Bentley.UI.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.Windowing&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Assemblies\ECFramework\Bentley.Windowing.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.GeometryNET&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Bentley.GeometryNET.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.GeometryNET.Common&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Bentley.GeometryNET.Common.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.GeometryNET.Structs&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Bentley.GeometryNET.Structs.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.Interop.MicroStationDGN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Assemblies\Bentley.Interop.MicroStationDGN.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.MicroStation&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Assemblies\Bentley.MicroStation.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.MicroStation.Interfaces.1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Assemblies\Bentley.MicroStation.Interfaces.1.0.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.MicroStation.Ribbon&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Assemblies\Bentley.MicroStation.Ribbon.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.MicroStation.WinForms.Controls&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Assemblies\Bentley.MicroStation.WinForms.Controls.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.MicroStation.WPF&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Assemblies\Bentley.MicroStation.WPF.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.MicroStation.WPF&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Assemblies\Bentley.MicroStation.WPF.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.PrintAPI&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Assemblies\Bentley.PrintAPI.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.PrintDefinitions&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Assemblies\Bentley.PrintDefinitions.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.PrintEngine&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Assemblies\Bentley.PrintEngine.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.PrinterConfigurationEditor&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Assemblies\Bentley.PrinterConfigurationEditor.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.PrintFoundation&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Assemblies\Bentley.PrintFoundation.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.PrintManager&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Assemblies\Bentley.PrintManager.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.TerrainModelNET&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Assemblies\Bentley.TerrainModelNET.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.TerrainModelNET.Formats&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Assemblies\Bentley.TerrainModelNET.Formats.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Bentley.TerrainModel.ElementTemplate&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Assemblies\Bentley.TerrainModel.ElementTemplate.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;ustation&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\ustation.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Newtonsoft.Json&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Assemblies\Newtonsoft.Json.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">private</span>&gt;</span>False<span class="tag">&lt;/<span class="name">private</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="sw-引用列表">Sw 引用列表</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;SWOpenRoadsSDK&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(SWORD)\sw_Standards\mdlapps\SWOpenRoadsSDK.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;SWOrdCPPSDK&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(SWORD)\sw_Standards\mdlapps\SWOrdCPPSDK.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="测试插件引用">测试插件引用</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;MSAddinTest&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>$(Bentley)\Mdlapps\MSAddinTest.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>MDL入门</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
        <tag>Bentley二次开发</tag>
      </tags>
  </entry>
  <entry>
    <title>MDL入门技术栈</title>
    <url>/posts/2020/14RZ2W.html</url>
    <content><![CDATA[<p>随着 Bentley 二开的深入，对各种需求的不断增加，面向 .NET 提供的 API
已经有些不能满足需求了，这就迫使我们必须接触 MDL 的开发，利用 Bentley
面向 C++ 提供的丰富接口，达到我们的需求。</p>
<p>本教程基于优先社区的 <a
href="https://communities.bentley.com/communities/other_communities/bdn_other_communities/b/bdn-blog/posts/ce-mdl-0">一步步学习MDL</a>
教程，再根据自己的知识短板，进行其它相关知识的补充以及对教程的深入解读。</p>
<span id="more"></span>
<h2 id="必备条件">必备条件</h2>
<ul>
<li>VS2015及以上</li>
<li>安装 Microstation</li>
<li>安装 Microstation SDK</li>
</ul>
<p>SDK 目录介绍</p>
<ul>
<li><p>bin文件夹
该文件夹下含有生成最终应用程序所需的执行程序以及启动开发环境的批处理文件。这下面的执行程序主要是负责<strong>生成最终应用程序的资源部分</strong>的（关于资源的详细介绍请看后续文章），C++代码的编译和链接其实是调用VS2015中的cl.exe和link.exe的。</p></li>
<li><p>Documentation文件夹 该文件夹下会有五个开发帮助文档，其中的
MicroStationApi.chm 就是我们要用到的 MDL C++
帮助文档。其它四个是有关用C#开发Mstn应用程序的帮助文档。</p></li>
<li><p>Readme文件夹 网页格式的SDK
Readme。双击其下的index.html文件在浏览器中打开。其中含有各个SDK版本的变化、如何安装SDK以及开发者注意事项等。</p></li>
<li><p>Migration文件夹 将V8i升级到CE的一些升级指南。</p></li>
<li><p>examples文件夹 大量的MDL
C++或C#样例代码。其中有一些是老旧的，一些是新写的（比如，在用到写命令工具时，如果是调用的mdlState_xxx类函数的，一定是老旧的例子，用派生于DgnTool类的应该就是比较新的）。最好读新的例子。</p></li>
<li><p>include文件夹 C++头文件。</p></li>
<li><p>library文件夹 C++库文件。</p></li>
<li><p>MigrationTools文件夹
帮助您从V8i代码迁移到CE代码的一些工具。主要是通过Python程序对一些关键字做映射。您可以手工修改文件0811to1000Published.remap中的内容来扩展这个映射库。</p></li>
<li><p>mki文件夹 制作文件的头文件（make
include）。为mke文件服务的一些系统文件。</p></li>
<li><p>eula.pdf文件 Bentley软件最终用户许可协议（End User License
Agreement）。大量的法律条文说明哪些行为是被法律禁止的。</p></li>
<li><p>MicroStationDeveloperShell.bat文件
启动开发环境的批处理文件。</p></li>
</ul>
<h2 id="制作文件-mkefile">制作文件 mkefile</h2>
<p>因为从未接触，总结稍详细，篇幅较多，转到 <a
href="/2020/09/20/MDL开发中如何创建makefile文件/#">MDL开发中如何创建makefile文件</a>
阅读</p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>MDL入门</category>
      </categories>
      <tags>
        <tag>Bentley二次开发</tag>
        <tag>MDL</tag>
      </tags>
  </entry>
  <entry>
    <title>元素间相互转换</title>
    <url>/posts/2021/1KH1955.html</url>
    <content><![CDATA[<p>本节主要对不同元素间的转换进行总结，以便今后使用。</p>
<span id="more"></span>
<h2 id="element-转-solidkernelentity">Element 转 SolidKernelEntity</h2>
<table>
<thead>
<tr class="header">
<th>程序集</th>
<th>命名空间</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Bentley.DgnDisplayNet.dll</td>
<td>Bentley.DgnPlatformNET</td>
</tr>
</tbody>
</table>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Convert1.ElementToBody(<span class="keyword">out</span> SolidKernelEntity entityOut, Element ehIn, <span class="built_in">bool</span> getSolidIn, <span class="built_in">bool</span> getSheetIn, <span class="built_in">bool</span> getWireIn);</span><br></pre></td></tr></table></figure>
<h2 id="element-转-curvevector">Element 转 CurveVector</h2>
<table>
<thead>
<tr class="header">
<th>程序集</th>
<th>命名空间</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Bentley.DgnPlatformNET.dll</td>
<td>Bentley.DgnPlatformNET.Elements</td>
</tr>
</tbody>
</table>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">CurvePathQuery.ElementToCurveVector(ele);</span><br></pre></td></tr></table></figure>
<h2 id="t-转-element">T 转 Element</h2>
<p>T
代表的类型有：<strong>SolidKernelEntity，SolidPrimitive，CurvePrimitive，CurveVector</strong></p>
<table>
<thead>
<tr class="header">
<th>程序集</th>
<th>命名空间</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Bentley.DgnPlatformNET.dll</td>
<td>Bentley.DgnPlatformNET.Elements</td>
</tr>
</tbody>
</table>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> element = DraftingElementSchema.ToElement(DgnModel dgnModel, T entity, Element templateElement);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>Elements</category>
      </categories>
      <tags>
        <tag>Bentley 二次</tag>
      </tags>
  </entry>
  <entry>
    <title>MDL开发中如何创建makefile文件</title>
    <url>/posts/2020/353AZ4N.html</url>
    <content><![CDATA[<h2 id="什么是-makefile">什么是 makefile ?</h2>
<p>makefile关系到了整个工程的编译规则。一个工程中的源文件不计其数，并且按类型、功能、模块分别放在若干个目录中，makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为makefile就像一个Shell脚本一样，其中也可以执行操作系统的命令。</p>
<blockquote>
<p>因为 windows
集成的开发环境为我们做了上述工作，所以在平时开发的时候，没有太多的感觉。</p>
</blockquote>
<span id="more"></span>
<h2 id="mdl-的开发需要熟悉的几种-mke-语法">MDL 的开发需要熟悉的几种 mke
语法:</h2>
<ol type="1">
<li><p>注释：以#号开头的行为注释行</p></li>
<li><p>变量定义（Bentley 的说明中称它为宏，仅此处使用变量一词） 如
<code>appName = HelloWorld</code> 这样的形式。appName
被称为变量，HelloWorld 被当成值赋予给 appName。
也可以对变量赋予多个值,值之间用空格分开，也可以使用 <code>\</code>
换行，比如：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">objects = main.o kbd.o command.o display.o \</span><br><span class="line">   insert.o search.o files.o utils.o</span><br></pre></td></tr></table></figure></li>
<li><p>变量使用：以 <code>$(变量名)</code> 形式，比如
<code>$(appName)</code> 为 HelloWorld</p></li>
<li><p>依赖定义 定义格式如下：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">target... : prerequisites...</span><br><span class="line"> command1</span><br><span class="line"> ...</span><br><span class="line"> commandN</span><br></pre></td></tr></table></figure>
<p><strong>特别注意的是：command 前面必须是 Tab</strong></p>
<p>上面的参数说明如下：</p>
<ul>
<li><p>target 可以是一个 object
file（目标文件），也可以是一个执行文件，还可以是一个标签（label）。对于标签这种特性，在后续的“伪目标”章节中会有叙述。</p></li>
<li><p>prerequisites 生成该 target 所依赖的文件</p></li>
<li><p>command 该target要执行的命令（任意的shell命令）
坦白说，可以这样理解：</p>
<blockquote>
<p><strong>prerequisites中如果有一个以上的文件比 target
文件要新的话，command 命令就会被执行。</strong></p>
</blockquote></li>
</ul></li>
</ol>
<h2 id="宏">宏</h2>
<h3 id="在-makefile-中定义宏">在 makefile 中定义宏</h3>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>形式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>macro = definition</td>
<td>将 definition 的值赋给 macro。标准赋值方法，用得比较多</td>
</tr>
<tr class="even">
<td>macro =% definition</td>
<td>先计算 definition 的值，再赋值给 macro</td>
</tr>
<tr class="odd">
<td>macro + definition</td>
<td>将 definition 添加到 marco 值后面，和编程中 += 用法颇似</td>
</tr>
<tr class="even">
<td>macro +% definition</td>
<td>先计算 definition 的值，然后再追加到 macro 上面</td>
</tr>
</tbody>
</table>
<h3 id="宏的使用">宏的使用</h3>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>形式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><span class="math inline">\((name)|通过迭代替换展开|
|\)</span>{name}</td>
<td>通过迭代替换展开，如果最后一个字符是路径分隔符，则删除它</td>
</tr>
<tr class="even">
<td>$[name]</td>
<td>展开值;将宏展开成迭代字符串值，且不做任何进一步的替换</td>
</tr>
</tbody>
</table>
<h3 id="保留的宏和其展开值">保留的宏和其展开值</h3>
<table>
<thead>
<tr class="header">
<th>宏</th>
<th>展开值</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><span class="math inline">\(@|当前目标文件| |\)</span>?</td>
<td>所有比目标文件更新的依赖文件</td>
</tr>
<tr class="even">
<td><span class="math inline">\(=|最新的依赖文件| |\)</span>&lt;</td>
<td>当前的依赖文件</td>
</tr>
<tr class="odd">
<td><span class="math inline">\(*|目标文件的基础文件| |\)</span>%</td>
<td>第一个目标文件的目录</td>
</tr>
</tbody>
</table>
<p>每个操作平台都预定了宏，可以通过 <code>bmake -p</code> 来查看</p>
<h3 id="实例">实例</h3>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">%if defined (_MakeFilePath) </span><br><span class="line">baseDir = <span class="variable">$(_MakeFilePath)</span> </span><br><span class="line">%<span class="keyword">else</span></span><br><span class="line">baseDir = <span class="variable">$(MS)</span>/mdl/examples/basic/</span><br><span class="line">%<span class="keyword">endif</span></span><br></pre></td></tr></table></figure>
<h2 id="依赖定义规则符号解释">依赖定义规则符号解释</h2>
<h2 id="依赖定义规则实例来自-mdl.mki">依赖定义规则实例（来自
mdl.mki）</h2>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">.mt.r: </span></span><br><span class="line"><span class="variable">$(msg)</span></span><br><span class="line">&gt; <span class="variable">$(o)</span>temp.cmd</span><br><span class="line">-o<span class="variable">$@</span></span><br><span class="line">%if privateInc</span><br><span class="line">-i<span class="variable">$(privateInc)</span></span><br><span class="line">%<span class="keyword">endif</span>&lt;BR&gt; </span><br><span class="line"><span class="variable">$(rscCompIncs)</span></span><br><span class="line"><span class="variable">$(altIncs)</span></span><br><span class="line">-i<span class="variable">$(publishInc)</span></span><br><span class="line">-i<span class="variable">$(publishIdsInc)</span></span><br><span class="line">-i<span class="variable">$(stdlibInc)</span></span><br><span class="line"><span class="variable">$%</span><span class="variable">$*</span>.mt<span class="variable">$(RTypeCmd)</span> @<span class="variable">$(o)</span>temp.cmd</span><br><span class="line">&lt;</span><br><span class="line"><span class="variable">$(RTypeCmd)</span> @<span class="variable">$(o)</span>temp.cmd </span><br><span class="line">~time</span><br></pre></td></tr></table></figure>
<h2 id="后记">后记</h2>
<p>如果想了解更多 makefile 语法，可以参考：</p>
<ul>
<li><a
href="https://seisman.github.io/how-to-write-makefile/overview.html">概述
— 跟我一起写Makefile 1.0 文档</a></li>
<li>SDK帮助文档MicroStationApi.chm的Creating a Makefile and Using the
bmake Utility</li>
<li>要想更深入地理解mke文件，还需要您读系统的mki文件，这些文件定义了许多系统内置的宏定义和规则</li>
</ul>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>MDL入门</category>
      </categories>
      <tags>
        <tag>Bentley二次开发</tag>
        <tag>MDL</tag>
      </tags>
  </entry>
  <entry>
    <title>元素的复制</title>
    <url>/posts/2021/2VBGV0Z.html</url>
    <content><![CDATA[<p>在使用中，经常需要对 Benlety 中的对象进行克隆，以下进行总结。</p>
<span id="more"></span>
<h2 id="element-克隆">Element 克隆</h2>
<table>
<thead>
<tr class="header">
<th>程序集</th>
<th>命名空间</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Bentley.DgnPlatformNET.dll</td>
<td>Bentley.DgnPlatformNET</td>
</tr>
</tbody>
</table>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//复制元素</span></span><br><span class="line"><span class="keyword">using</span> (ElementCopyContext cc = <span class="keyword">new</span> ElementCopyContext(dgnModel)) </span><br><span class="line">&#123;</span><br><span class="line">    cc.WriteElements = <span class="literal">false</span>;  <span class="comment">//调整复制上下文环境不要立即写入元素</span></span><br><span class="line">    Element _cloneEle = cc.DoCopy(_el);</span><br><span class="line">    ElementPropertiesSetter eps = <span class="keyword">new</span> ElementPropertiesSetter();</span><br><span class="line">    eps.SetColor(lineColor);</span><br><span class="line">    eps.SetWeight(LineWeight);</span><br><span class="line">    eps.Apply(_cloneEle); <span class="comment">//设置颜色</span></span><br><span class="line">    _cloneEle.AddToModel();</span><br><span class="line">    <span class="keyword">return</span> _cloneEle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="solidkernelentity-克隆">SolidKernelEntity 克隆</h2>
<table>
<thead>
<tr class="header">
<th>程序集</th>
<th>命名空间</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Bentley.DgnDisplayNet.dll</td>
<td>Bentley.DgnPlatformNET</td>
</tr>
</tbody>
</table>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 复制 SolidKernelEntity</span></span><br><span class="line">CopyEntity(<span class="keyword">out</span> SolidKernelEntity entityOut, SolidKernelEntity entityIn)</span><br></pre></td></tr></table></figure>
<h2 id="curvevector-克隆">CurveVector 克隆</h2>
<p>调用对象的 <code>Clone()</code> 方法。</p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>Elements</category>
      </categories>
      <tags>
        <tag>Bentley二次开发</tag>
      </tags>
  </entry>
  <entry>
    <title>如何获取元素的范围</title>
    <url>/posts/2023/81FDDJ.html</url>
    <content><![CDATA[<p>在 C# 中可以将 Element 转换成 DisplayableElement，然后调用
<code>CalcElementRange</code> 计算其包围盒范围。</p>
<span id="more"></span>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> displayableElement = x <span class="keyword">as</span> DisplayableElement;</span><br><span class="line">StatusInt status = displayableElement.CalcElementRange(<span class="keyword">out</span> DRange3d range);</span><br></pre></td></tr></table></figure>
<p><strong>参考：</strong></p>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<p>[<a
href="https://communities.bentley.com/communities/other_communities/chinafirst/f/microstation-projectwise/200644/msce-c-element-range/711063">MSCE
C++] 怎样获取Element的Range - ◆ 二次开发(MicroStation编程,
ProjectWise编程等) - Bentley 中国优先社区 - Bentley Communities</a></p>
<p><a
href="https://communities.bentley.com/communities/other_communities/chinafirst/f/microstation-projectwise/235764/mscs-c-element/732437">MSCS
C# 如何获取Element的坐标 - ◆ 二次开发(MicroStation编程,
ProjectWise编程等) - Bentley 中国优先社区 - Bentley Communities</a></p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>Elements</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
        <tag>Elements</tag>
      </tags>
  </entry>
  <entry>
    <title>MS DgnTool 学习（一）</title>
    <url>/posts/2019/14CGG7V.html</url>
    <content><![CDATA[<p>DgnTool 是在 MS
上二次开发时会经常用到的交互类，重要性便不言而喻了。在此记录自己的学习心得。</p>
<span id="more"></span>
<h2 id="继承关系">继承关系</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph BT</span><br><span class="line">locate[LocateSubEntityTool]--&gt;iview[IViewTransients]</span><br><span class="line">region[DgnRegionElementTool]--&gt;iview</span><br><span class="line"></span><br><span class="line">locate--&gt;graphic[ElementGraphicsTool]</span><br><span class="line"></span><br><span class="line">graphic--&gt;eleset[DgnElementSetTool]</span><br><span class="line">eleset--&gt;primitive[DgnPrimitiveTool]</span><br><span class="line"></span><br><span class="line">region--&gt;eleset</span><br><span class="line">eleset--&gt;redraw[IRedrawOperation]</span><br><span class="line">eleset--&gt;modify[ModifyOp]</span><br><span class="line">modify--&gt;imodify[IModifyElement]</span><br><span class="line"></span><br><span class="line">primitive--&gt;tool[DgnTool]</span><br><span class="line">tool--&gt;counted[RefCountedBase]</span><br><span class="line">counted--&gt;countedlist[RefCounted &lt; IRefCounted &gt;]</span><br><span class="line"></span><br><span class="line">countedlist--&gt;icount[IRefCounted]</span><br><span class="line"></span><br><span class="line">dgnview[DgnViewTool]--&gt;tool</span><br></pre></td></tr></table></figure>
<h2 id="dgntool">DgnTool</h2>
<p>DgnTool 是所有 Tool 类的基类。</p>
<p>应用程序创建的交互类不能从 DgnTool 直接继承，要继承于 DgnViewTool
或者 DgnPrimitiveTool。</p>
<h2 id="dgnviewtool">DgnViewTool</h2>
<p>DgnViewTool 可以用来实现视图命令。</p>
<p>使用 DgnViewTool 将挂起当前活动的原命令，直到它退出。 使用
DgnViewTool 不应该更改文件或任何可能影响活动原命令的内容。</p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Bentley二次开发</tag>
        <tag>C#</tag>
        <tag>DgnTool</tag>
      </tags>
  </entry>
  <entry>
    <title>Microstation 中实现非阻塞进度条</title>
    <url>/posts/2024/2MEYC7T.html</url>
    <content><![CDATA[<p>在进行 Microstation
二开时，若在代码执行耗时任务，则可能会导致界面出现假死的情况，此时窗体无法拖动、进度条也无法更新。</p>
<p>由于 Microstation
的非线程安全问题，代码必须在主线程上执行，但进度条位于主线程上，因此进度必定会卡死，这是一个矛盾的问题。</p>
<p>有两种方法来解决这个问题。</p>
<span id="more"></span>
<h2 id="为什么假死">为什么假死</h2>
<p>首先简要解释下，为什么为假死。</p>
<p>Windows 的窗体靠消息循环来更新 UI，UI 位于主线程上。而 Microstation
的 SDK 是非线程安全的，因此所有的任务都是在主线程上执行。</p>
<p>当在主线程执行耗时计算时，主线程将被这个任务给占用，从而导致消息无法被处理，因此造成界面假死的情况。</p>
<h2 id="原生进度条方案">原生进度条方案</h2>
<p>上面提到，卡死是由于窗体无法处理消息循环导致的，因此我们可以在进度变动时，让系统先处理一下消息，然后再继续执行代码。</p>
<p>通过调用 <code>System.Windows.Forms.Application.DoEvents();</code>
来让线程处理窗体消息。</p>
<blockquote>
<p>详细参见：<a
href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.forms.application.doevents?view=windowsdesktop-8.0">Application.DoEvents
方法 (System.Windows.Forms) | Microsoft Learn</a></p>
</blockquote>
<p>部分代码如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">region</span> P/Invoke</span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> 打开窗体</span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;messageText&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"> [<span class="meta">DllImport(<span class="string">&quot;ustation.dll&quot;</span>, CharSet = CharSet.Unicode)</span>]</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">extern</span> <span class="keyword">static</span> IntPtr <span class="title">mdlDialog_completionBarOpen</span>(<span class="params"><span class="built_in">string</span> messageText</span>)</span>;</span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> 更新窗体内容</span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;dialog&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;messageText&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;percent&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"> [<span class="meta">DllImport(<span class="string">&quot;ustation.dll&quot;</span>, CharSet = CharSet.Unicode)</span>]</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">extern</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mdlDialog_completionBarUpdate</span>(<span class="params">IntPtr dialog, <span class="built_in">string</span> messageText, <span class="built_in">int</span> percent</span>)</span>;</span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> 显示消息</span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;dialog&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;messageText&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"> [<span class="meta">DllImport(<span class="string">&quot;ustation.dll&quot;</span>, CharSet = CharSet.Unicode)</span>]</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">extern</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mdlDialog_completionBarDisplayMessage</span>(<span class="params">IntPtr dialog, <span class="built_in">string</span> messageText</span>)</span>;</span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> 关闭进度条</span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;dialog&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"> [<span class="meta">DllImport(<span class="string">&quot;ustation.dll&quot;</span>, CharSet = CharSet.Unicode)</span>]</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">extern</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mdlDialog_completionBarClose</span>(<span class="params">IntPtr dialog</span>)</span>;</span><br><span class="line"> <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">   </span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 更新进度条</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 总进度为 100</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;message&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;progress&quot;&gt;</span>进度值，默认 0-100<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"><span class="built_in">string</span> message, <span class="built_in">int</span> progress</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    mdlDialog_completionBarUpdate(_dialogPtr, message, progress);</span><br><span class="line">    <span class="comment">// 让窗体处理消息事件</span></span><br><span class="line">    Application.DoEvents();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体效果如下：</p>
<video id="video" controls preload="none" poster="https://obs.uamazing.cn:52443/public/files/images/image-20240308235919675.png">
<source id="mp4" src="https://obs.uamazing.cn:52443/public/files/video/thread-progress.mp4" type="video/mp4" />
</video>
<p>虽然很方便，但是也有一些缺点：</p>
<ul>
<li>速度慢</li>
<li>可能导致调用混乱无法调试</li>
</ul>
<p>参考：</p>
<ul>
<li><a
href="https://stackoverflow.com/questions/1115397/application-doevents-when-its-necessary-and-when-its-not">Application.DoEvents,
when it's necessary and when it's not? - Stack Overflow</a></li>
<li><a
href="http://www.skcircle.com/?id=1927">Application.DoEvents()造成的问题</a></li>
</ul>
<h2 id="多线程方案">多线程方案</h2>
<p>前面提到，由于进度条位于主线程，才导致它被阻塞，那么若能将其放到另一个线程里，与主线程分离，也就不会出现阻塞的情况了。</p>
<p>要实现将 UI
放到另外的线程，只需要注意一个关键点，就是需要将线程设置成
<code>STA</code> 模式，代码如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartProgress</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 新建一个线程并运行</span></span><br><span class="line">    <span class="keyword">var</span> thread = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        _window = <span class="keyword">new</span> ProgressWindow(<span class="keyword">this</span>);</span><br><span class="line">        _window.ShowDialog();</span><br><span class="line">    &#125;);</span><br><span class="line">	 <span class="comment">// 下列设置是关键</span></span><br><span class="line">    thread.SetApartmentState(ApartmentState.STA);</span><br><span class="line">    thread.Start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<video id="video" controls preload="none" poster="https://obs.uamazing.cn:52443/public/files/images/image-20240309001008033.png">
<source id="mp4" src="https://obs.uamazing.cn:52443/public/files/video/ms-progress.mp4" type="video/mp4" />
</video>
<blockquote>
<p>STA 模式可自行百度了解：<a
href="https://blog.csdn.net/fuhanghang/article/details/122043360">什么是单线程单元（STA）什么是多线程单元（MTA）</a></p>
</blockquote>
<h2 id="源代码">源代码</h2>
<p>本文示例代码已开源，地址：<a
href="https://github.com/GalensGan/AwsomeBentley/tree/master/Examples/CSharpBentley/CSharpMicrostation/ProgressExamples">AwsomeBentley/Examples/CSharpBentley/CSharpMicrostation/ProgressExamples
at master · GalensGan/AwsomeBentley (github.com)</a></p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>Progress</category>
      </categories>
      <tags>
        <tag>Microstation</tag>
        <tag>Progress</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>DgnPrimitiveTool 详细说明文档</title>
    <url>/posts/2022/K0VDR.html</url>
    <content><![CDATA[<p>本文主要总结 DgnTool 的触发逻辑，同时介绍其中的参数设置。</p>
<p>它是所有 Tool 的基类，在使用过程中，不能直接派生于它，而是要从
<code>DgnViewTool</code> 和 <code>DgnPrimitiveTool</code> 派生。</p>
<span id="more"></span>
<h2 id="方法分类">方法分类</h2>
<p>dgnTool 中的方法按作用分类，分为：</p>
<ol type="1">
<li><p>事件回调</p></li>
<li><p>参数设置</p>
<p>参数设置分为两种，一种是调用型，一种是重写型。</p>
<p>调用型的方法无法重写，使用时需要主动调用；</p>
<p>重写型的方法可以通过重写，来进行设置，工具会自动调用。</p></li>
<li><p>工具方法</p>
<p>工具方法分为一般方法、虚方法、静态方法。这些都需要主动调用才产生效果。</p></li>
</ol>
<p>DgnTool 中的方法按功能分类大致可以分为以下几类：</p>
<ul>
<li>修饰器</li>
<li>鼠标事件</li>
<li>鼠标滚轮和键盘事件</li>
<li>弹出菜单事件</li>
<li>手势相关</li>
<li>初始化化及资源释放</li>
<li>工具类</li>
</ul>
<h2 id="全局设置">全局设置</h2>
<p>在 Tool 中可以打开全局设置，比如启用精确绘图，捕捉等等。</p>
<table>
<thead>
<tr class="header">
<th>名称</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>AccuSnap.SnapEnabled = true</td>
<td>激活动态捕捉</td>
</tr>
<tr class="even">
<td>AccuDraw.Active = true;</td>
<td>激活精确绘图</td>
</tr>
</tbody>
</table>
<blockquote>
<p>全局设置必须在 Tool 初始化完成后调用，一般在 OnPostInstall
中调用。</p>
</blockquote>
<h2 id="修饰器">修饰器*</h2>
<p>这个功能只有一个函数：<code>DecorateScreen(Viewport vp)</code>，它用于在
overlay 模式下显示非图形元素。</p>
<p>该函数只要鼠标有变动就会触发。</p>
<h2 id="工具类">工具类</h2>
<h3 id="实例方法">实例方法</h3>
<table>
<colgroup>
<col style="width: 32%" />
<col style="width: 58%" />
<col style="width: 8%" />
</colgroup>
<thead>
<tr class="header">
<th>名称</th>
<th>作用</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>GetCurrentDgnButtonEvent</td>
<td>获取代表当前鼠标位置的事件</td>
<td>工具方法</td>
</tr>
<tr class="even">
<td>*SetAdjustedDataPoint</td>
<td>将调整后的点设置为最后一个数据点位置</td>
<td>工具方法</td>
</tr>
<tr class="odd">
<td>GetModifierKeyTransitionState</td>
<td>获取键盘按键，按键值通过currentQualifierMask参数返回</td>
<td>工具方法</td>
</tr>
<tr class="even">
<td>SetModifierKeyTransitionState</td>
<td>设置键盘按键</td>
<td>工具方法</td>
</tr>
</tbody>
</table>
<h3 id="静态方法">静态方法</h3>
<table>
<colgroup>
<col style="width: 24%" />
<col style="width: 66%" />
<col style="width: 8%" />
</colgroup>
<thead>
<tr class="header">
<th>名称</th>
<th>作用</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>GetActiveViewTool</td>
<td>获取当前的 DgnViewTool 实例</td>
<td>工具方法</td>
</tr>
<tr class="even">
<td>GetActivePrimitiveTool</td>
<td>获取当前的 DgnPrimitiveTool 实例。有些遗留的工具没有使用
DgnTool，所以返回的会是空</td>
<td>工具方法</td>
</tr>
</tbody>
</table>
<h2 id="鼠标事件">鼠标事件</h2>
<blockquote>
<p>在 Bentley
中，事件是按数据键和重置键来区分的，对应到鼠标的设备上就是左键和右键，当然这个对应关系可以设置。下方中就用左/右键来分别代表数据/重置键，方便理解。</p>
</blockquote>
<table>
<colgroup>
<col style="width: 22%" />
<col style="width: 68%" />
<col style="width: 9%" />
</colgroup>
<thead>
<tr class="header">
<th>名称</th>
<th>作用</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>OnResetButton</td>
<td>右键单击时触发，默认返回 false</td>
<td>事件回调</td>
</tr>
<tr class="even">
<td>OnResetButtonUp</td>
<td>右键弹起后触发</td>
<td>事件回调</td>
</tr>
<tr class="odd">
<td>OnDataButton</td>
<td>左键单击时触发，默认返回 false</td>
<td>事件回调</td>
</tr>
<tr class="even">
<td>OnModelMotion</td>
<td>当鼠标在视图中移动时触发，默认返回 false，移动时，会不断触发</td>
<td>事件回调</td>
</tr>
<tr class="odd">
<td>OnModelNoMotion</td>
<td>当鼠标在视图中静止时触发，默认返回 false，静止后，会不断触发</td>
<td>事件回调</td>
</tr>
<tr class="even">
<td>OnModelMotionStopped</td>
<td>当鼠标在视图中停止移动后触发，默认返回
false，只在停止后触发一次，然后再触发<code>OnModelNoMotion</code></td>
<td>事件回调</td>
</tr>
<tr class="odd">
<td>OnModelStartDrag</td>
<td>鼠鼠标开始拖拽，默认返回 false</td>
<td>事件回调</td>
</tr>
<tr class="even">
<td>OnModelEndDrag</td>
<td>鼠标结束拖拽，默认返回 false</td>
<td>事件回调</td>
</tr>
</tbody>
</table>
<h2 id="鼠标滚动和键盘事件">鼠标滚动和键盘事件</h2>
<table>
<colgroup>
<col style="width: 25%" />
<col style="width: 65%" />
<col style="width: 8%" />
</colgroup>
<thead>
<tr class="header">
<th>名称</th>
<th>作用</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>OnMouseWheel</td>
<td>鼠标滚动时触发，默认返回 false</td>
<td>事件回调</td>
</tr>
<tr class="even">
<td>OnModifierKeyTransition</td>
<td>当 Shift、Control 或 Alt 键被按下和释放时都会触发，它们的值分别是
4、8 和 16。返回 true 时会更新视图</td>
<td>事件回调</td>
</tr>
<tr class="odd">
<td>*On3DInputEvent</td>
<td>未知</td>
<td>事件回调</td>
</tr>
</tbody>
</table>
<h2 id="弹出菜单">弹出菜单</h2>
<table>
<colgroup>
<col style="width: 35%" />
<col style="width: 56%" />
<col style="width: 7%" />
</colgroup>
<thead>
<tr class="header">
<th>名称</th>
<th>作用</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>DisableEditAction</td>
<td>在按下右键后，OnResetButton前执行。
用于阻止按下右键时弹出菜单，默认为 false，禁止弹出。</td>
<td>参数设置</td>
</tr>
<tr class="even">
<td>StatusInt PerformEditAction(int index)</td>
<td>重写右键弹出菜单，index
代表菜单编号，-1代表不显示。当成功设置后，应返回
<code>StatusInt.Success</code></td>
<td>参数设置</td>
</tr>
</tbody>
</table>
<h2 id="手势相关">手势相关</h2>
<p>手势相关 API 名称中一般包含 <code>Gesture</code> 字符。</p>
<p>手势相关的 API 在日常开发中几乎不使用，此处不进行介绍。</p>
<h2 id="加载与资源释放">加载与资源释放</h2>
<table>
<colgroup>
<col style="width: 22%" />
<col style="width: 68%" />
<col style="width: 9%" />
</colgroup>
<thead>
<tr class="header">
<th>名称</th>
<th>作用</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>OnInstall</td>
<td>被 InstallTool 调用，返回 false 时，取消工具初始化。可以用于限制仅在
3d 模型中生效</td>
<td>事件回调</td>
</tr>
<tr class="even">
<td>GetToolName</td>
<td>设置工具名称</td>
<td>参数设置</td>
</tr>
<tr class="odd">
<td>PopulateToolSettings</td>
<td>生成工具设置窗体。如果为
true，由当前工具决定显示内容，表现为不显示。</td>
<td>参数设置</td>
</tr>
<tr class="even">
<td>OnPostInstall</td>
<td>当工具加载完成后调用</td>
<td>事件回调</td>
</tr>
<tr class="odd">
<td>ExitTool</td>
<td>调用后，退出当前工具</td>
<td>工具方法</td>
</tr>
<tr class="even">
<td>OnCleanup</td>
<td>当前工具结束时调用，不论什么原因结束，最后都会调用</td>
<td>事件回调</td>
</tr>
<tr class="odd">
<td>OnReinitialize</td>
<td>重置工具到初始化状态，是为了方便操作，仅在 DgnElementSetTool
中可以使用。</td>
<td>/</td>
</tr>
</tbody>
</table>
<p><strong>什么是工具设置窗体？</strong></p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220522072349830.png"
alt="image-20220522072349830" />
<figcaption aria-hidden="true">image-20220522072349830</figcaption>
</figure>
<p>每次启动一个工具时，都有这么一个窗体弹出，这就是工具的设置窗体。可以通过
<code>PopulateToolSettings</code> 返回 true 来关闭。</p>
<h2 id="流程">流程</h2>
<p>由于DgnTool无法单独使用，所以此处不介绍其流程。每一个工具的流程详见子类相关文章。</p>
<h2 id="说明">说明</h2>
<p>标记为 * 号的表示未弄明白其用途。</p>
<h2 id="参考">参考</h2>
<p>《Microstation API Document》</p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
        <tag>Bentley二次开发</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>DgnPrimitiveTool 使用文档</title>
    <url>/posts/2022/1FJ4HP4.html</url>
    <content><![CDATA[<p>本文主要总结 DgnPrimitiveTool
的触发逻辑，同时介绍其中的参数设置。</p>
<span id="more"></span>
<h2 id="简介">简介</h2>
<p>DgnPrimitiveTool 继承自
DgnTool，它增加了动态显示、回退相关的事件回调。</p>
<h2 id="继承关系">继承关系</h2>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220520131412036.png"
alt="image-20220520131412036" />
<figcaption aria-hidden="true">image-20220520131412036</figcaption>
</figure>
<h2 id="动态显示">动态显示</h2>
<table>
<colgroup>
<col style="width: 18%" />
<col style="width: 81%" />
</colgroup>
<thead>
<tr class="header">
<th>函数名称</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>BeginDynamics</td>
<td>打开动态显示</td>
</tr>
<tr class="even">
<td>EndDynamics</td>
<td>关闭动态显示</td>
</tr>
<tr class="odd">
<td>OnDynamicFrame</td>
<td>在此处进行动态元素的显示；<br />动态元素显示需要使用
RedrawElems，详见相关文章</td>
</tr>
</tbody>
</table>
<h2 id="ctrlz-回退">Ctrl+Z 回退</h2>
<p>通过以下步骤方式可以开启 Ctrl+Z 回退回调功能</p>
<ol type="1">
<li>在 <code>OnPostInstall</code> 中调用方法
<code>EnableUndoPreviousStep()</code> 打开回退功能</li>
<li>重写 <code>OnUndoPreviousStep</code> 事件</li>
</ol>
<h2 id="onrestarttool">OnRestartTool</h2>
<p>本类中新增一个抽象方法
<code>OnRestartTool</code>，当外部事件可能使当前工具的状态失效时调用。</p>
<p>例如 undo
操作，它可能使对元素的任何引用失效，或者导致引用的绑定/取绑。</p>
<p>在这个事件回调中，需要初始化新实例并调用
<code>InstallTool</code>，或者调用 <code>ExitTool</code>
来退出工具。</p>
<h2 id="单次触发模式">单次触发模式</h2>
<p>Single-shot模式的意思就是你执行完一个命令后就会回到系统默认命令，往往是选择工具命令。</p>
<p>当不处于Single-shot模式时，执行完当前命令后仍然保持这个命令。比如你执行了画线命令，画完后仍然可以继续画线而不用再选择画线命令。</p>
<p>这个选项目前已经被废弃。</p>
<p>详见 <a
href="https://communities.bentley.com/communities/other_communities/chinafirst/f/microstation-projectwise/171116/msce-c-single-shot-mode-single-shot-mode/492647#492647">single-shot
mode</a></p>
<h2 id="执行流程">执行流程</h2>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/DgnPrimitiveTool执行流程-schetch.png"
alt="DgnPrimitiveTool执行流程-schetch" />
<figcaption
aria-hidden="true">DgnPrimitiveTool执行流程-schetch</figcaption>
</figure>
<h2 id="参考">参考</h2>
<p>《Microstation API Document》</p>
<p><a href="">DgnTool详细说明文档</a></p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
        <tag>Bentley二次开发</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>DgnElementSetTool 使用文档</title>
    <url>/posts/2022/9YRV0H.html</url>
    <content><![CDATA[<p>本文主要总结 DgnElementSetTool
的触发逻辑，同时介绍其中的参数设置。</p>
<span id="more"></span>
<h2 id="简介">简介</h2>
<p>DgnElementSetTool 主要用于实现对元素的<strong>修改</strong>。</p>
<p>基本的工具操作是从激活的围栅、选择集或用户选择来填充 ElementAgenda。
然后调用 <code>OnElementModify</code> 来处理。</p>
<h2 id="继承关系">继承关系</h2>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220522105109562.png"
alt="image-20220522105109562" />
<figcaption aria-hidden="true">image-20220522105109562</figcaption>
</figure>
<h2 id="基本概念">基本概念</h2>
<p><strong>什么是 ElementAgenda？</strong></p>
<p>ElementAgenda 是 Microstation
从元素源（包含激活的围栅、选择集或用户选择）创建的一个引用集合。</p>
<h2 id="加载和资源释放">加载和资源释放</h2>
<p>本类中重新实现了 OnReinitialize，它将 Tool
的状态重置为初始状态，这样就可以不用重新启动一个新的 Tool。</p>
<p>它在 <code>OnModifyComplete</code> 中被调用。</p>
<h2 id="动态显示">动态显示</h2>
<p>除了 <code>DgnPrimitiveTool</code>
提供的动态显示事件回调外，本类还额外提供了其它函数进行控制。</p>
<table>
<colgroup>
<col style="width: 18%" />
<col style="width: 69%" />
<col style="width: 12%" />
</colgroup>
<thead>
<tr class="header">
<th>名称</th>
<th>作用</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>WantDynamics</td>
<td>当 ElementAgenda 有值后，判断是否启用动态显示</td>
<td>事件回调</td>
</tr>
</tbody>
</table>
<h2 id="重绘接口实现">重绘接口实现</h2>
<p>重绘接口主要负责元素的重绘显示逻辑，在开发中一般不需要修改，此处不作详细研究。</p>
<table>
<colgroup>
<col style="width: 20%" />
<col style="width: 70%" />
<col style="width: 9%" />
</colgroup>
<thead>
<tr class="header">
<th>名称</th>
<th>作用</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>OnRedrawInit</td>
<td>重绘初始化：访问元素之前调用，用来设置哪些 Elements 可以被绘制</td>
<td>事件回调</td>
</tr>
<tr class="even">
<td>OnRedrawOperation</td>
<td>可以修改每个元素的显示</td>
<td>事件回调</td>
</tr>
<tr class="odd">
<td>OnResymbolize</td>
<td>工具可以重写元素显示的符号</td>
<td>事件回调</td>
</tr>
<tr class="even">
<td>OnRedrawComplete</td>
<td>在重绘结束，访问元素之前调用</td>
<td>事件回调</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
        <tag>Bentley二次开发</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>Bentley中在.NET下监听元素双击事件</title>
    <url>/posts/2021/2JZQM2W.html</url>
    <content><![CDATA[<p>在用C#进行Bentley二次开发的过程中，我们可能有这个需求：希望获取双击的元素，然后响应修改命令。通过查找相关资料，最终实现方式如下。</p>
<span id="more"></span>
<p>在继承自 Bentley.MstnPlatformNET.AddIn 的类中，重写 <code>Run</code>
方法，并在此处监听 <code>OnSelectionChanged</code>
事件，从事件参数中可以获取 <code>Action</code>，当 <code>Action</code>
为 <code>SelectionChangedEventArgs.ActionKind.DoubleClickElement</code>
时，就代表双击的元素。具体代码如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该类继承 Bentley.MstnPlatformNET.AddIn</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="built_in">int</span> <span class="title">Run</span>(<span class="params"><span class="built_in">string</span>[] commandLine</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 其它操作</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 监听双击鼠标事件，实现修改</span></span><br><span class="line">    <span class="keyword">this</span>.SelectionChangedEvent += OnSelectionChanged;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnSelectionChanged</span>(<span class="params"><span class="built_in">object</span> sender, SelectionChangedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (e.Action)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> SelectionChangedEventArgs.ActionKind.DoubleClickElement:</span><br><span class="line">            <span class="comment">// 通过 FilePosition 获取元素</span></span><br><span class="line">            <span class="keyword">var</span> elem = GetElementByFilePosition(e.FilePosition);</span><br><span class="line">            <span class="comment">// 对元素进行其它操作</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="literal">default</span>:<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 filePosition 获取 Element</span></span><br><span class="line"><span class="comment">// 采用 COM 接口获取 filePosition 对应的 ElementId</span></span><br><span class="line"><span class="comment">// 然后通过 elementId 获取.NET下的 Element</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Element <span class="title">GetElementByFilePosition</span> (<span class="params"><span class="built_in">uint</span> filePosition</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> app = Utilities.ComApp;</span><br><span class="line">    <span class="keyword">var</span> elemCache = app.ActiveModelReference.GraphicalElementCache;</span><br><span class="line">    <span class="keyword">var</span> index = elemCache.IndexFromFilePosition((<span class="built_in">int</span>)filePosition);</span><br><span class="line">    <span class="keyword">if</span> (elemCache.IsElementValid(index))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> elem = elemCache.GetElement(index);</span><br><span class="line">        <span class="keyword">var</span> longId = elem.ID;</span><br><span class="line">        <span class="keyword">return</span> Session.Instance.GetActiveDgnModel().FindElementById((ElementId)eleId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>程序使用了 COM 接口，所以需要的引入
Bentley.MicroStation.dll，COM接口位于
Bentley.MstnPlatformNET.InteropServices 命名空间中。</p>
</blockquote>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>事件</category>
      </categories>
      <tags>
        <tag>Bentley二次开发</tag>
      </tags>
  </entry>
  <entry>
    <title>一文带你全面了解 Microstation 中的 Keyin 配置</title>
    <url>/posts/2023/2VRVT60.html</url>
    <content><![CDATA[<p>本文将详细介绍 Microstation 中 Keyin 的配置，包括 Keyin
命令表的结构、各项参数等等，最后将分享如何通过代码的方式来自动生成
command 表。</p>
<span id="more"></span>
<p>Addin 中使用 XML 来定义命令表。</p>
<h2 id="命令表结构">命令表结构</h2>
<p>Keyin 命令表结构如下图所示：</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/keyinCommandStructure.png"
alt="keyinCommandStructure" />
<figcaption aria-hidden="true">keyinCommandStructure</figcaption>
</figure>
<p>命令表是一个 xml 文件，每个命令表中有且仅有一个
<code>KeyinTree</code> 根节点，其下由三部分组成，分别为
<code>RootKeyinTable</code>、<code>SubKeyinTables</code> 和
<code>KeyinHandlers</code>，它们分别表示根命令表、子命令表以及命令对应的处理函数映射。</p>
<p>command.xml 命令表代码示例如下：</p>
<blockquote>
<p>使用 <code>&lt;!--xxx--&gt;</code> 包含的内容为注释</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">KeyinTree</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.bentley.com/schemas/1.0/MicroStation/AddIn/KeyinTree.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--根命令表,其 ID 为 root--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">RootKeyinTable</span> <span class="attr">ID</span>=<span class="string">&quot;rootId&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用 keyword 定义根命令,通过 SubtableRef 来指向 KeyinTable 的 ID，指定下一级命令。CommandWord 表示命令的单词(不区分大小写)--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Keyword</span> <span class="attr">SubtableRef</span>=<span class="string">&quot;CommandsId&quot;</span> <span class="attr">CommandWord</span>=<span class="string">&quot;fenceExample&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--定义 Keyword 的选项--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Options</span> <span class="attr">Required</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">Keyword</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">RootKeyinTable</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">SubKeyinTables</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyinTable</span> <span class="attr">ID</span>=<span class="string">&quot;CommandsId&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Keyword</span> <span class="attr">SubtableRef</span>=<span class="string">&quot;FromCmdId&quot;</span> <span class="attr">CommandWord</span>=<span class="string">&quot;from&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">Options</span> <span class="attr">Required</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">Keyword</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Keyword</span> <span class="attr">SubtableRef</span>=<span class="string">&quot;ModifyCmdId&quot;</span> <span class="attr">CommandWord</span>=<span class="string">&quot;modify&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">Options</span> <span class="attr">Required</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">Keyword</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Keyword</span> <span class="attr">CommandWord</span>=<span class="string">&quot;clear&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">Options</span> <span class="attr">Required</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">Keyword</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">KeyinTable</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyinTable</span> <span class="attr">ID</span>=<span class="string">&quot;FromCmdId&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Keyword</span> <span class="attr">CommandWord</span>=<span class="string">&quot;element&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Keyword</span> <span class="attr">CommandWord</span>=<span class="string">&quot;points&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">KeyinTable</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyinTable</span> <span class="attr">ID</span>=<span class="string">&quot;ModifyCmdId&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Keyword</span> <span class="attr">CommandWord</span>=<span class="string">&quot;move&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Keyword</span> <span class="attr">CommandWord</span>=<span class="string">&quot;clip&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Keyword</span> <span class="attr">CommandWord</span>=<span class="string">&quot;stretch&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">KeyinTable</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">SubKeyinTables</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">KeyinHandlers</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyinHandler</span> <span class="attr">Keyin</span>=<span class="string">&quot;fenceExample from element&quot;</span> <span class="attr">Function</span>=<span class="string">&quot;ManagedFenceExample.Keyin.CmdPlaceFenceFromElement&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyinHandler</span> <span class="attr">Keyin</span>=<span class="string">&quot;fenceExample from points&quot;</span> <span class="attr">Function</span>=<span class="string">&quot;ManagedFenceExample.Keyin.CmdPlaceFenceFromPoints&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyinHandler</span> <span class="attr">Keyin</span>=<span class="string">&quot;fenceExample clear&quot;</span> <span class="attr">Function</span>=<span class="string">&quot;ManagedFenceExample.Keyin.CmdClearFence&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyinHandler</span> <span class="attr">Keyin</span>=<span class="string">&quot;fenceExample modify move&quot;</span> <span class="attr">Function</span>=<span class="string">&quot;ManagedFenceExample.Keyin.CmdMoveFenceContents&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyinHandler</span> <span class="attr">Keyin</span>=<span class="string">&quot;fenceExample modify clip&quot;</span> <span class="attr">Function</span>=<span class="string">&quot;ManagedFenceExample.Keyin.CmdClipFenceContents&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyinHandler</span> <span class="attr">Keyin</span>=<span class="string">&quot;fenceExample modify stretch&quot;</span> <span class="attr">Function</span>=<span class="string">&quot;ManagedFenceExample.Keyin.CmdStretchFenceContents&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">KeyinHandlers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">KeyinTree</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上例中的代码命令可以表示为：</p>
<figure>
<img data-src="https://obs.uamazing.cn:52443/public/files/images/keyinCommand结构-代码命令示例.png"
alt="keyinCommand结构-代码命令示例" />
<figcaption
aria-hidden="true">keyinCommand结构-代码命令示例</figcaption>
</figure>
<h2 id="节点标签介绍">节点标签介绍</h2>
<p><code>KeyinTree</code> 节点包含
<code>RootKeyinTable</code>、<code>SubKeyinTables</code> 和
<code>KeyinHandlers</code> 三个部分。</p>
<p><code>KeyinTable</code> 中有属性
<code>ID</code>，表示该表的名称。命令表的内容由一个或多个<code>Keyword</code>
元素组成，<code>Keyword</code>属性 <code>SubtableRef</code>
指向其下级命令表的
<code>ID</code>。这样，通过当前表中<code>Keyword</code> 的
<code>SubtableRef</code> 和下级表中 <code>KeyinTable&gt;</code> 的
<code>ID</code> 就能构成一个命令树。</p>
<p>Mstn 中的命令由一到五个单词组成，因而，我们在定义自己的 commands.xml
时在 <code>SubKeyinTables</code> 段中最多可以定义四级命令。</p>
<p><code>Keyword</code> 还必须有属性
<code>CommandWord</code>，这是用户在 Mstn
键入域中可输入的单词。<code>Keyword</code> 中还可以包含
<code>Options</code>
项，该项是对<code>Keyword</code>的进一步说明，其属性有
<code>Required</code>、<code>Default</code>、<code>TryParse</code>、<code>Hidden</code>
等。</p>
<h3 id="rootkeyintable">RootKeyinTable</h3>
<p><code>KeyinTree</code> 中必须包含 <code>RootKeyinTable</code>
标签，且只能有一个标签。</p>
<p><code>RootKeyinTable</code> 中应至少包含一个 <code>Keyword</code>
标签，用于定义根命令单词。</p>
<h3 id="keyword">Keyword</h3>
<p><code>Keyword</code> 标签用于定义命令的单词，它可以在
<code>RootKeyinTable</code> 和 <code>KeyinTable</code> 中使用。</p>
<p><code>Keyword</code> 有如下属性：</p>
<table>
<thead>
<tr class="header">
<th>属性名称</th>
<th>默认值</th>
<th>可选</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>SubtableRef</td>
<td>-</td>
<td>-</td>
<td>指定下一级命令</td>
</tr>
<tr class="even">
<td>CommandClass</td>
<td>Inherit</td>
<td>是</td>
<td>指定命令类别</td>
</tr>
<tr class="odd">
<td>CommandWord</td>
<td>-</td>
<td>必须</td>
<td>[必须] 用于定义命令单词</td>
</tr>
</tbody>
</table>
<p>其中 <code>CommandClass</code> 属性表示命令的类别，当为
<code>Inherit</code> 时，表示继承上一个命令的类型。除了
<code>Inherit</code> 外，还有以下类别：</p>
<p>Placement、Viewing、Fence、Parameters、Locks、MacroCommand、Manipulation、Show、Plot、Newfile、Measure、Input、Celllib、Filedesign、Compress、Reference、Database、Dimension、Locate、Tutorial、WorkingSet、List、Undo、SubProcess、ViewParam、ViewImmediate、WindowManager、DialogManager</p>
<p>在 <code>Keyword</code> 中，可以添加 <code>Option</code> 标签来对
<code>Keyword</code> 进行设置。<code>Option</code>
标签是可选的，它拥有如下属性：</p>
<table>
<thead>
<tr class="header">
<th>属性名称</th>
<th>默认值</th>
<th>是否可选</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Required</td>
<td>false</td>
<td>是</td>
</tr>
<tr class="even">
<td>Default</td>
<td>false</td>
<td>是</td>
</tr>
<tr class="odd">
<td>TryParse</td>
<td>false</td>
<td>是</td>
</tr>
<tr class="even">
<td>Hidden</td>
<td>false</td>
<td>是</td>
</tr>
</tbody>
</table>
<p><code>Required="true"</code>
表示该命令字不是最后一个单词，必须有下级子节点；</p>
<p><code>Default="true"</code>
表示该命令字为默认，当省略这一级命令字时取该命令字，在同一级别中只能有一个命令字为
<code>Default</code> 。</p>
<p><code>TryParse="true"</code>表示该命令字后可跟用户输入的任意字符，这些不在命令表中的字符串将被传递到命令处理函数的
unparsed 参数中。比如 Active Color 命令后可跟 Red、Green、Blue
等，也可以跟一个数字，如 Active Color
245。我们不可能在命令表中列出每个这样的键入，此时可用
<code>TryParse</code> 属性。</p>
<p><code>Hidden="true"</code> 表示该命令隐藏，用户在 Mstn
的命令浏览器中看不到该命令，但该命令仍然有效。这些隐藏的命令往往为程序所用或暂时不想对用户公开。</p>
<h3 id="subkeyintables">SubKeyinTables</h3>
<p><code>SubKeyinTables</code> 是可选标签。若命令大于 1 个单词时，需要用
<code>SubKeyinTables</code> 来定义剩余的单词。</p>
<p><code>SubKeyinTables</code> 最多只能在配置文件中出现 1
次。它下面必须至少有一个 <code>KeyinTable</code> 子节点，每个
<code>KeyinTable</code> 都必须有一个唯一的 <code>ID</code> 属性值。</p>
<p>每个 <code>KeyinTable</code> 中应至少有 1 个 <code>Keyword</code>
子节点。</p>
<p>每个 <code>KeyinTable</code> 中的 <code>Keyword</code> 可以通过
<code>SubtableRef = "ID"</code> 的方式来指定到其它的
<code>KeyinTable</code>，从而形成命令链。</p>
<h3 id="keyinhandlers">KeyinHandlers</h3>
<p><code>KeyinHandlers</code> 标签中只有 <code>KeyinHandler</code>
一种元素。<code>KeyinHandler</code> 中必须拥有 <code>Keyin</code> 和
<code>Function</code> 两个属性。</p>
<p><code>KeyinHandler</code> 中的 <code>Keyin</code>
属性表示完整的键入命令字符串， 它的 <code>Function</code>
属性为该键入命令对应的处理函数名，该函数名格式为：命名空间名.类名.函数名(或称方法名)
。换句话说，当用户在 Mstn 中输入 <code>Keyin</code>
中的字符串时，就会调用到 <code>Function</code> 指定的函数。</p>
<h2 id="将命令表嵌入-addin">将命令表嵌入 Addin</h2>
<p>若要使命令表能够正确被 Microstsation 识别，需要在项目的工程配置文件
(*.csproj) 中的 <code>Project</code> 节点中增加如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">EmbeddedResource</span> <span class="attr">Include</span>=<span class="string">&quot;填写commands.xml相对于.csproj文件的相对路径&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LogicalName</span>&gt;</span>CommandTable.xml<span class="tag">&lt;/<span class="name">LogicalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SubType</span>&gt;</span>Designer<span class="tag">&lt;/<span class="name">SubType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">EmbeddedResource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="快速生成命令表">快速生成命令表</h2>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<ol type="1">
<li><a
href="https://communities.bentley.com/communities/other_communities/bdn_other_communities/b/bdn-blog/posts/addin-xml">自动检查Addin程序中XML格式命令表语法
- 中国BDN社区-博客 - 中国BDN社区 - Bentley Communities</a></li>
<li><a
href="https://communities.bentley.com/communities/other_communities/bdn_other_communities/w/chinabdn-wiki/38460/4-addins">第4章、给Addins添加命令
- 中国BDN社区-威客 - 中国BDN社区 - Bentley Communities</a></li>
<li><a
href="https://communities.bentley.com/communities/other_communities/bdn_other_communities/b/bdn-blog/posts/learn-microstation-addins-step-by-step-4">Learning
MicroStation Addins Step by Step 4 - 中国BDN社区-博客 - 中国BDN社区 -
Bentley Communities</a></li>
</ol>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>Keyin</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
        <tag>Keyin</tag>
      </tags>
  </entry>
  <entry>
    <title>Microstation 中监听元素修改事件</title>
    <url>/posts/2022/1GXJ3PN.html</url>
    <content><![CDATA[<p>在进行 Microstation
二次开发时，有时候需要监听元素的修改事件，实现联动修改，可以在 Addin
上注册 <code>ElementChangedEventHander</code> 事件。</p>
<span id="more"></span>
<p>事件有一个
<code>ElementChangedEventArgs</code>，从这个参数中可以获取需要的信息。</p>
<h2 id="获取操作">获取操作</h2>
<p>获取是什么操作导致元素被修改，可以通过 <code>ChangeTrackKind</code>
来获取，它的值如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> ChangeTrackKind</span><br><span class="line">&#123;</span><br><span class="line">    Delete = <span class="number">1</span>,</span><br><span class="line">    Add = <span class="number">2</span>,</span><br><span class="line">    Modify = <span class="number">3</span>,</span><br><span class="line">    ModifyFence = <span class="number">5</span>,</span><br><span class="line">    Mark = <span class="number">7</span>,</span><br><span class="line">    ModelAdd = <span class="number">9</span>,</span><br><span class="line">    ModelDelete = <span class="number">10</span>,</span><br><span class="line">    AddXAttribute = <span class="number">11</span>,</span><br><span class="line">    DeleteXAttribute = <span class="number">12</span>,</span><br><span class="line">    ModifyXAttribute = <span class="number">13</span>,</span><br><span class="line">    ReplaceXAttribute = <span class="number">14</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="获取新元素">获取新元素</h2>
<p>属性 <code>NewElement</code> 代表新元素。</p>
<h2 id="获取旧元素">获取旧元素</h2>
<h2 id="参考">参考</h2>
<ol type="1">
<li><p><a
href="https://www.yuque.com/bentleysystems/csharp/nkb543#qzYS7">事件API</a></p></li>
<li><p><a
href="https://communities.bentley.com/communities/other_communities/chinafirst/f/microstation-projectwise/189214/ms-ce-c-c/557010#557010">元素拷贝、移动事件</a></p></li>
</ol>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>事件</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
        <tag>Bentley二次开发</tag>
      </tags>
  </entry>
  <entry>
    <title>如何调用 Microstation 的消息管理器</title>
    <url>/posts/2022/1NF37FV.html</url>
    <content><![CDATA[<p>在进行Bentley二次开发的时候，通常我们需要向用户输出一些信息，比如操作的提示，错误的提示等等，本文特对这些方式进行总结，方便下次随心所欲地使用。</p>
<span id="more"></span>
<h2 id="通知管理器">通知管理器</h2>
<p>通过使用 NotificationManager
向用户推送消息。可以用此类来生成提示、错误消息和警报对话框。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220512074020104.png"
alt="image-20220512074020104" />
<figcaption aria-hidden="true">image-20220512074020104</figcaption>
</figure>
<table>
<colgroup>
<col style="width: 38%" />
<col style="width: 32%" />
<col style="width: 28%" />
</colgroup>
<thead>
<tr class="header">
<th>DLL 名称</th>
<th>命名空间</th>
<th>类名</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Bentley.DgnPlatformNET.dll</td>
<td>Bentley.DgnPlatformNET</td>
<td>NotificationManager</td>
</tr>
</tbody>
</table>
<h3 id="源码注解">源码注解</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//打开消息弹窗</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MessageBoxValue <span class="title">OpenMessageBox</span>(<span class="params">MessageBoxType mbType, <span class="built_in">string</span> message, MessageBoxIconType icon</span>)</span>;</span><br><span class="line"><span class="comment">//向MS的底部通知栏写入提示</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StatusInt <span class="title">OutputMessage</span>(<span class="params">NotifyMessageDetails message</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OutputPrompt</span>(<span class="params"><span class="built_in">string</span> prompt</span>)</span>;</span><br><span class="line"><span class="comment">//设置一个标志来分配（value==true时）事件，以便在执行费时算法时，刷新界面，从而不卡顿。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetDispatchEvents</span>(<span class="params"><span class="built_in">bool</span> <span class="keyword">value</span></span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> MessageBoxType</span><br><span class="line">&#123;</span><br><span class="line">    YesNo = <span class="number">-121</span>,</span><br><span class="line">    LargeOk = <span class="number">-119</span>,</span><br><span class="line">    YesNoCancel = <span class="number">-113</span>,</span><br><span class="line">    MediumAlert = <span class="number">-112</span>,</span><br><span class="line">    Ok = <span class="number">-97</span>,</span><br><span class="line">    OkCancel = <span class="number">-13</span>,</span><br><span class="line">    None = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> MessageBoxIconType</span><br><span class="line">&#123;</span><br><span class="line">    NoSymbol = <span class="number">0</span>,</span><br><span class="line">    Information = <span class="number">1</span>,</span><br><span class="line">    Question = <span class="number">2</span>,</span><br><span class="line">    Warning = <span class="number">3</span>,</span><br><span class="line">    Critical = <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> MessageBoxValue</span><br><span class="line">&#123;</span><br><span class="line">    None = <span class="number">0</span>,</span><br><span class="line">    Apply = <span class="number">1</span>,</span><br><span class="line">    Reset = <span class="number">2</span>,</span><br><span class="line">    Ok = <span class="number">3</span>,</span><br><span class="line">    Cancel = <span class="number">4</span>,</span><br><span class="line">    Default = <span class="number">5</span>,</span><br><span class="line">    Yes = <span class="number">6</span>,</span><br><span class="line">    No = <span class="number">7</span>,</span><br><span class="line">    Retry = <span class="number">8</span>,</span><br><span class="line">    Stop = <span class="number">9</span>,</span><br><span class="line">    Help = <span class="number">10</span>,</span><br><span class="line">    YesToAll = <span class="number">11</span>,</span><br><span class="line">    NoToAll = <span class="number">12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用">使用</h3>
<ul>
<li><p>OpenMessageBox方法</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">NotificationManagerOpenMessageBox</span>()</span></span><br><span class="line">&#123;  </span><br><span class="line">    NotificationManager.OpenMessageBox(NotificationManager.MessageBoxType.MediumAlert, <span class="string">&quot;Medium alert&quot;</span>,NotificationManager.MessageBoxIconType.Warning);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>OutputMessage方法</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">NotificationManagerOutputMessage</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    OutputMessagePriority outputMessagePriority = OutputMessagePriority.Information;</span><br><span class="line">    <span class="built_in">string</span> briefMsg = <span class="string">&quot;this is a brief msg&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> detailMsg = <span class="string">&quot;this is a detail msg&quot;</span>;</span><br><span class="line">    NotifyTextAttributes notifyTextAttributes = NotifyTextAttributes.AlwaysBeveled;</span><br><span class="line">    NotifyMessageDetails notifyMessageDetails = <span class="keyword">new</span> NotifyMessageDetails(outputMessagePriority,briefMsg,detailMsg,notifyTextAttributes,OutputMessageAlert.Balloon);</span><br><span class="line">    NotificationManager.OutputMessage(notifyMessageDetails);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220512074152131.png"
alt="image-20220512074152131" />
<figcaption aria-hidden="true">image-20220512074152131</figcaption>
</figure></li>
<li><p>OutputPrompt方法</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">NotificationManagerOutputPrompt</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    NotificationManager.OutputPrompt(<span class="string">&quot;this is ouput prompt&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220512073913334.png"
alt="image-20220512073913334" />
<figcaption aria-hidden="true">image-20220512073913334</figcaption>
</figure></li>
</ul>
<h2 id="消息中心messagecenter">消息中心（MessageCenter）</h2>
<p>在 Bentley.MstnPlatformNET
中也存在与消息管理器一样的类以供调用向用户传递消息。</p>
<table>
<thead>
<tr class="header">
<th>DLL 名称</th>
<th>命名空间</th>
<th>类名</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>ustation.dll</td>
<td>Bentley.MstnPlatformNET</td>
<td>MessageCenter</td>
</tr>
</tbody>
</table>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 其内部代码如下</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MessageCenter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MessageCenter Instance &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StatusWarning &#123; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StatusMessage &#123; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StatusPrompt &#123; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StatusCommand &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetStringFromMessageListResource</span>(<span class="params"><span class="built_in">int</span> listId, <span class="built_in">int</span> stringId</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowDebugMessage</span>(<span class="params"><span class="built_in">string</span> briefMessage, <span class="built_in">string</span> detailedMessage, <span class="built_in">bool</span> openAlertBox</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowDebugMessage</span>(<span class="params"><span class="built_in">string</span> briefMessage, <span class="built_in">string</span> detailedMessage, MessageAlert alertType</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowErrorMessage</span>(<span class="params"><span class="built_in">string</span> briefMessage, <span class="built_in">string</span> detailedMessage, <span class="built_in">bool</span> openAlertBox</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowErrorMessage</span>(<span class="params"><span class="built_in">string</span> briefMessage, <span class="built_in">string</span> detailedMessage, MessageAlert alertType</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowInfoMessage</span>(<span class="params"><span class="built_in">string</span> briefMessage, <span class="built_in">string</span> detailedMessage, <span class="built_in">bool</span> openAlertBox</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowInfoMessage</span>(<span class="params"><span class="built_in">string</span> briefMessage, <span class="built_in">string</span> detailedMessage, MessageAlert alertType</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowMessage</span>(<span class="params">MessageType messageType, <span class="built_in">string</span> briefMessage, <span class="built_in">string</span> detailedMessage, MessageAlert alertType</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在使用时，通过单例来调用其中的实例方法：<code>MessageCenter.Instance.xxx</code></p>
<h2 id="测试代码">测试代码</h2>
<p>最后，附上 Notification Manager 测试代码的链接。</p>
<p>加载编译之后的 <a
href="https://github.com/GalensGan/ArticleSourceCode">ArticleSourceCode.dll</a>，调用
Key-in：<code>test message manager</code>，此时会弹出一个操作窗体，通过选择不同选项，即可查看相应方法的效果。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220512073946491.png"
alt="image-20220512073946491" />
<figcaption aria-hidden="true">image-20220512073946491</figcaption>
</figure>
<p><a href="https://github.com/GalensGan/ArticleSourceCode">&gt;
GitHub源代码</a></p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>消息中心</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
        <tag>Bentley二次开发</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>C# 中如何向 Microstation 输出调试信息</title>
    <url>/posts/2022/38K28WD.html</url>
    <content><![CDATA[<p>在进行 MS 开发时，有时候需要输出调试信息，方便查看，主要有 4
种方式：</p>
<ol type="1">
<li>通过 P/Invoke 技术调用
<code>void mdlDialog_dmsgsPrint(byte[] wMsg)</code> 方法来输出</li>
<li>通过 <a href="https://galens.uamazing.cn/posts/2022/1NF37FV.html">MS
消息管理器</a> 来输出，但是这种是输出是模态的，不太方便</li>
<li>通过现有的 Log 库，比如 Log4net 来进行输出，在 MS 中无法打开 console
进行输出，所以使用起来有些不方便</li>
<li>自己写一个输出窗体，来显示调试信息</li>
</ol>
<p>本文介绍最简单的方式，即调用原生的消息输出窗体来展示。</p>
<span id="more"></span>
<h2 id="代码">代码</h2>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Utils.Message</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> MS 中的输出窗体</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Console</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">DllImport(<span class="string">&quot;ustation.dll&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">mdlDialog_dmsgsPrint</span>(<span class="params"><span class="built_in">byte</span>[] wMsg</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">WriteLine</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            mdlDialog_dmsgsPrint(Encoding.Unicode.GetBytes(message));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>使用效果：</strong></p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220519085734183.png"
alt="image-20220519085734183" />
<figcaption aria-hidden="true">image-20220519085734183</figcaption>
</figure>
<h2 id="参考">参考</h2>
<p><a
href="https://communities.bentley.com/communities/other_communities/chinafirst/f/microstation-projectwise/179897/msce-c-mdldialog_dmsgsprint-c/523460#523460">请问mdlDialog_dmsgsPrint对应C#什么方法？</a></p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>消息中心</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
        <tag>Bentley二次开发</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>Bentley工程属性入门</title>
    <url>/posts/2022/33P3D91.html</url>
    <content><![CDATA[<p>本文主要介绍在 Bentley 平台上进行二次开发时，如何向 dgn
保存自己的数据。</p>
<span id="more"></span>
<h2 id="序">序</h2>
<p>对于工程信息，主要分为<strong>几何数据</strong>与<strong>工程数据</strong>两个部分，对于几何数据，Bentley采用模型来表达。而工程数据，起初
Bentley 采用 XAttribute 的方式在 dgn
文件中开辟一个特定空间存储非几何数据，但是在由于没有统一数据存储的方式和格式，导致不同专业软件之间的信息无法交流。最后，Bentley
经过大量的摸索和借鉴形成了一套系统的数据解决方案系统 ECFramework
(Engineering Content Framework )，通过这套方案
Bentley真正实现各个专业软件之间数据的无损流动和互动。</p>
<p>对于仅需要向 dgn 保存自己工具所产生的数据，可以有如下三种方式：</p>
<ol type="1">
<li>EC</li>
<li>ItemType</li>
<li>XAttribute</li>
</ol>
<h2 id="ec">EC</h2>
<h3 id="查询所有-ecinstance">查询所有 ECInstance</h3>
<h3 id="查询特定-ecinstance">查询特定 ECInstance</h3>
<h2 id="itemtype">ItemType</h2>
<h2 id="xattribute">XAttribute</h2>
<h2 id="参考">参考</h2>
<p><a href="https://www.yuque.com/bentleysystems/csharp">Bentley
软件开发教程 C#语言</a></p>
<p><a
href="https://www.yuque.com/bentleysystems/csharp/rgcgyp#2lqg5">工程信息数据开发API(EC框架)</a></p>
<p><a
href="https://www.yuque.com/bentleysystems/nkoply/qdgygi#AgunG">MicroStation二次开发基础教学（七）</a></p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>数据存储</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
        <tag>EC</tag>
      </tags>
  </entry>
  <entry>
    <title>Bentley 程序集学习</title>
    <url>/posts/2022/5X1QK2.html</url>
    <content><![CDATA[<p>今天起要开始研究 Bentley 二开中常用的程序集内容了。</p>
<span id="more"></span>
<p>为什么会突然有这个想法呢？</p>
<p>是因为我发现，如果在开发的过程中，如果对 SDK
了解太少的话，会导致思路闭塞，会大大降低了编程的效率。</p>
<p>虽然搞开发已经 4
年了，但是积累的东西还是不够，但是我坚信，日积跬步，终至千里。</p>
<p>所以，谨以此文记录本人学习之决心，以此为序，迈上大神之路。</p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>程序集</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
        <tag>Bentley程序集学习</tag>
      </tags>
  </entry>
  <entry>
    <title>给元素添加自定义数据的几种方式</title>
    <url>/posts/2023/283FNHQ.html</url>
    <content><![CDATA[<p>参考：<a
href="https://communities.bentley.com/communities/other_communities/chinafirst/f/microstation-projectwise">Addin给元素添加自定义Linkage数据</a></p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>数据存储</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
      </tags>
  </entry>
  <entry>
    <title>MS 关于 Fraction 的使用说明</title>
    <url>/posts/2020/4JEF7M.html</url>
    <content><![CDATA[<p>在利用 MS 二开的时候，我们经常会等分线段，通常我们会用到 fraction
来操作，在此记录下 MS 中 fraction 小坑，以作提醒。</p>
<span id="more"></span>
<h2 id="原理介绍">原理介绍</h2>
<p>fraction 对于 B样条曲线 来说不是各段长度相等的等分点。</p>
<p>fraction 在开始时总是 0，然后结束时总是 1。</p>
<p>fraction 只有在下列基础类型时，才是线性增加的</p>
<ul>
<li>line segment，线段</li>
<li>circular arc，圆或者圆弧</li>
<li>transition spirals，螺旋线</li>
</ul>
<p>而在其它复杂类型的曲线中， fraction
的含义与曲线类型的内部参数化有关。</p>
<ul>
<li>对于有N个线段（即N+1个点）的线串 (Linestring)，各个顶点的 fraction
分别为 0，1/N，2/N，…1。</li>
<li>对于bspline 曲线，fraction 表示节点范围的分数。</li>
<li>对于椭圆弧（elliptic arc），fraction 与角度变化成正比，公式为：X =
center + vector0 * cos(theta) + vector90 * sin (theta)</li>
</ul>
<h2 id="源代码">源代码</h2>
<p>在此，分享一个等分线段的算法，若有不足之处，还请指教。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 用 fraction 获取 curve 上的点</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 该方法将全局 fraction 换算到每根线上的 fraction 来进行计算</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;curve&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;globalFraction&quot;&gt;</span>值在 [0,1] 之间，如果不在该区间，则会向外延伸<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DPoint3d <span class="title">GlobalFraction2Point</span>(<span class="params"><span class="keyword">this</span> CurveVector curve, <span class="built_in">double</span> globalFraction, <span class="keyword">out</span> DVector3d vectorAtFraction</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 如果 &lt;=0,按切线反向延长获取点</span></span><br><span class="line">    <span class="keyword">if</span> (globalFraction &lt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        curve.GetStartEnd(<span class="keyword">out</span> DPoint3d pa, <span class="keyword">out</span> _, <span class="keyword">out</span> DVector3d ua, <span class="keyword">out</span> _);</span><br><span class="line">        <span class="built_in">double</span> length = curve.SumOfLengths();</span><br><span class="line">        DPoint3d pnt = pa + ua * length * globalFraction;</span><br><span class="line">        vectorAtFraction = ua;</span><br><span class="line">        <span class="keyword">return</span> pnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 正向切线延长</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (globalFraction &gt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        curve.GetStartEnd(<span class="keyword">out</span> _, <span class="keyword">out</span> DPoint3d pb, <span class="keyword">out</span> _, <span class="keyword">out</span> DVector3d ub);</span><br><span class="line">        <span class="built_in">double</span> length = curve.SumOfLengths();</span><br><span class="line">        DPoint3d pnt = pb + ub * length * (globalFraction - <span class="number">1</span>);</span><br><span class="line">        vectorAtFraction = ub;</span><br><span class="line">        <span class="keyword">return</span> pnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按 fraction 返回</span></span><br><span class="line">    <span class="built_in">double</span> totalLength = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">double</span> targetLength = globalFraction * curve.SumOfLengths();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> cp <span class="keyword">in</span> curve)</span><br><span class="line">    &#123;</span><br><span class="line">        cp.Length(<span class="keyword">out</span> <span class="keyword">var</span> length);</span><br><span class="line">        totalLength += length;</span><br><span class="line">        <span class="keyword">if</span>(totalLength &gt;= targetLength)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 说明位于当前分段上</span></span><br><span class="line">            <span class="keyword">var</span> distance = targetLength - totalLength;</span><br><span class="line">            <span class="keyword">var</span> curveDetail = cp.PointAtSignedDistanceFromFraction(<span class="number">1</span>, distance, <span class="literal">false</span>);</span><br><span class="line">            cp.FractionToPoint(curveDetail.Fraction, <span class="keyword">out</span> DPoint3d point, <span class="keyword">out</span> vectorAtFraction);</span><br><span class="line">            <span class="keyword">return</span> point;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vectorAtFraction = DVector3d.Zero;</span><br><span class="line">    <span class="keyword">return</span> DPoint3d.Zero;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p><a
href="https://communities.bentley.com/communities/other_communities/chinafirst/f/microstation-projectwise/167155/msce-c-curvelocationdetail-fraction/479929#479929">CurveLocationDetail的fraction总是得不到正确结果</a></p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>几何变换</category>
      </categories>
      <tags>
        <tag>Bentley二次开发</tag>
      </tags>
  </entry>
  <entry>
    <title>CurveVector 相关实现笔记</title>
    <url>/posts/2020/6W94V6.html</url>
    <content><![CDATA[<h2 id="判断-curvevector-是否在一个平面">判断 CurveVector
是否在一个平面</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C#</span></span><br><span class="line">cv.IsPlanar(<span class="keyword">out</span> DTransform3d localToWorld, <span class="keyword">out</span> DTransform3d worldToLocal, <span class="keyword">out</span> DRange3d range3D);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转到 xy 平面</span></span><br><span class="line">cv.Transform(worldToLocal);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>返回的第一个参数为 <code>localToWorld</code>，该坐标系是 curve
的局部坐标第，曲线位于局部坐标系的 xy 平面。如果要将其变成世界坐标系的
xy，则要将左乘 <code>localToWorld</code> 的逆矩阵，即
<code>worldToLocal</code>。</p>
</blockquote>
<h2 id="创建线串">创建线串</h2>
<h3 id="curvevector静态">CurveVector静态</h3>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CurveVector 类中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CurveVector <span class="title">CreateLinear</span>(<span class="params">IList&lt;DPoint3d&gt; points, BoundaryType boundaryType, <span class="built_in">bool</span> forceXYOrientation</span>)</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最后一个参数在使用中经常会让人误解，当它为 <code>true</code>
时，将强制生成的曲线外部和内部循环具有正确的(CCW/CW)顺序。</p>
</blockquote>
<h3 id="curveprimitive静态">CurvePrimitive静态</h3>
<h2 id="判断点与曲线的关系">判断点与曲线的关系</h2>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CurveVector 类中</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> InOutClassification <span class="title">PointInOnOutXY</span>(<span class="params">[In] DPoint3d xyz</span>)</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>几何变换</category>
      </categories>
      <tags>
        <tag>CurveVector</tag>
        <tag>BentleySDK</tag>
      </tags>
  </entry>
  <entry>
    <title>SolidKernelEntity 如何进行矩阵变换</title>
    <url>/posts/2021/F3GB3M.html</url>
    <content><![CDATA[<p>一般元素在进行矩阵变换时，直接使用
<code>ApplyTransform(TransformInfo transInfo)</code> 即可进行变化，但
SolidKernelEntity 在进行矩阵变换时，操作有所不同。</p>
<span id="more"></span>
<h2 id="步骤">步骤：</h2>
<ol type="1">
<li>获取 SolidKernelEntity 原来的矩阵</li>
<li>用变换矩阵左乘原来的矩阵</li>
<li>对 SolidKernelEntity 设置新的矩阵</li>
</ol>
<h2 id="why">Why？</h2>
<p>因为从 Element 向 SolidKernelEntity 转换时内部已经针对 Design
Coordinate System 到 ParaSolid coordinate system做了transform了，而
SolidKernelEntity 的变换使用的是
<code>SetEntityTransform(ref DTransform3d transform)</code>
，该方法是覆盖原来的矩阵，所以要将原变换矩阵左乘变换矩阵，然后赋给
SolidKernelEntity。</p>
<h2 id="代码">代码</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">SolidKernelEntity solidKernelEntity = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 新变换</span></span><br><span class="line">DTransform3d targetTrans = DTransform3d.Identity;</span><br><span class="line"><span class="comment">// 原变换</span></span><br><span class="line">DTransform3d existTrans = solidKernelEntity.GetEntityTransform();</span><br><span class="line"><span class="comment">// 最终变换</span></span><br><span class="line">DTransform3d finallyTrans = targetTrans * existTrans;</span><br><span class="line">solidKernelEntity.SetEntityTransform(<span class="keyword">ref</span> finallyTrans);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>几何变换</category>
      </categories>
      <tags>
        <tag>BentleySDK</tag>
        <tag>SolidKernelEntity</tag>
        <tag>矩阵变换</tag>
      </tags>
  </entry>
  <entry>
    <title>图形变换</title>
    <url>/posts/2020/XDTNKH.html</url>
    <content><![CDATA[<p>在利用 MS
二开的时候，图形变换经常用到，下面对图形变换相关知识进行简要总结。如果想更加深入地学习，可以阅读《计算机图形学》</p>
<span id="more"></span>
<h2 id="二维几何变换">二维几何变换</h2>
<h3 id="基本变换">基本变换</h3>
<h4 id="平移">平移</h4>
<p><img data-src="https://i.loli.net/2021/09/26/z47YA2dxCfiRlP9.png" /></p>
<p>将 P 移到 P' 点，代数表达为： <span class="math display">\[
\begin{align}
x&#39;=x+t_x \\\\
y&#39;=y+t_y
\end{align}
\]</span> 转化成矩阵表达为： <span class="math display">\[
\displaylines{
P&#39;= P+T \\
P&#39;= \begin{bmatrix}
   x&#39; \\
   y&#39; \\
  \end{bmatrix},
P= \begin{bmatrix}
   x \\
   y \\
  \end{bmatrix},
T= \begin{bmatrix}
   t_x \\
   t_y \\
  \end{bmatrix}
}
\]</span></p>
<h4 id="旋转">旋转</h4>
<p><img data-src="https://i.loli.net/2021/09/26/ZqK6PpCMavHec2O.png" /></p>
<p>将 (x,y) 绕 (0,0) 旋转 θ 角，代数表达为： <span
class="math display">\[
\begin{aligned}
x&#39;=xcos\theta-ysin\theta \\
y&#39; =xsin\theta+ycos\theta
\end{aligned}
\]</span></p>
<blockquote>
<p>通过极坐标来推导</p>
</blockquote>
<p>转化为矩阵表达为： <span class="math display">\[
\begin{align}
P&#39;=R \cdot P \\
R= \begin{bmatrix}
   cos\theta &amp; -sin\theta \\
   sin\theta &amp; cos\theta \\
  \end{bmatrix}
\end{align}
\]</span></p>
<blockquote>
<p>对于绕任意点的旋转，可以将任意点先平移到原点，旋转之后，再反向平移，其矩阵表达式见齐次坐标章节。</p>
</blockquote>
<h4 id="缩放">缩放</h4>
<p>绽放的代数表达为： <span class="math display">\[
\begin{align}
x&#39;=S_x\cdot x \\
y&#39;=S_y\cdot y
\end{align}
\]</span> 转化为矩阵表达为： <span class="math display">\[
\begin{align}
P&#39;=S \cdot P \\
S= \begin{bmatrix}
   S_x \\
   S_y \\
  \end{bmatrix}
\end{align}
\]</span></p>
<h3 id="齐次坐标">齐次坐标</h3>
<p>从上面的基本变换中，我们可以看出，每个基本变换都可以表示为普通矩阵形式：
<span class="math display">\[
P&#39; = M_1 \cdot P + M_2
\]</span></p>
<ul>
<li><p>对于平移</p>
<p><span class="math inline">\(M_1\)</span> 为单位矩阵，<span
class="math inline">\(M_2\)</span> 为平移的参数</p></li>
<li><p>对于旋转和缩放</p>
<p><span class="math inline">\(M_1\)</span>
为以原点为基准的旋转缩放矩阵，<span class="math inline">\(M_2\)</span>
为实际基准点的平移参数</p></li>
</ul>
<p>所以，为了利用这个公式产生先缩放，再旋转，后平移这样的变换顺序，必须一步一步地计算变换的坐标，不仅不方便使用，且效率低下。为了解决这个问题，将
2x2 的矩阵扩充为 3x3 矩阵，从而将所有的变化组合成单一矩阵来表示。</p>
<h4 id="齐次坐标-1"><a
href="https://zh.wikipedia.org/zh-sg/%E9%BD%90%E6%AC%A1%E5%9D%90%E6%A0%87">齐次坐标</a></h4>
<p>将二维坐标表示 (x,y) 扩充到三维表示 (<span
class="math inline">\(x_w,y_w,w\)</span>) ,称为<strong>齐次坐标</strong>
(homogeneous coordinate) ，<strong>齐次坐标</strong> (homogeneous
coordinates) 或<strong>投影坐标</strong> (projective coordinates)
是指一个用于<a
href="https://zh.wikipedia.org/wiki/投影幾何">投影几何</a>里的坐标系统，如同用于<a
href="https://zh.wikipedia.org/wiki/欧氏几何">欧氏几何</a>里的<a
href="https://zh.wikipedia.org/wiki/笛卡儿坐标">笛卡儿坐标</a>一般。</p>
<h4 id="齐次坐标的引入">齐次坐标的引入</h4>
<p>在<strong>欧式空间</strong>里，两条公面的平行线无法相交，但是在<strong>投影空间</strong>(Projective
Space)里不是这样。一个直观的表示如下：两条轨道的间距随着视线变远而逐渐变小，直到在无限远处相交。</p>
<figure>
<img data-src="https://xhy3054.github.io/assets/img/homogeneous_coordinates/railway.jpg"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<p>在欧式空间里采用<span class="math inline">\((x, y,
z)\)</span>表示一个三维点，但是<strong>无穷远点</strong><span
class="math inline">\((\infty, \infty,
\infty)\)</span>在欧式空间里是没有意义的，<strong>在投影空间中进行图形和几何运算</strong>并不是一个简单的问题，为了解决这个问题，数学家　August
Ferdinand Möbius　提出了齐次坐标系，使用 N+1 个量来表示　N
维坐标。例如在二维齐次坐标系中，我们引入一个量w，将一个二维点<span
class="math inline">\((x, y)\)</span>重新表示为<span
class="math inline">\((X, Y, w)\)</span>的形式，其中转换关系为： <span
class="math display">\[
\begin{align}
x = \frac{X}{w} \\
y = \frac{Y}{w}
\end{align}
\]</span></p>
<p>例如，欧式坐标中的一个二维点<span class="math inline">\((1,
2)\)</span>可以在齐次坐标中表示为<span class="math inline">\((1, 2,
1)\)</span>，如果点逐渐移动向无穷远处，其欧式坐标变为<span
class="math inline">\((\infty, \infty,
\infty)\)</span>，齐次坐标变为<span class="math inline">\((1, 2,
0)\)</span>。其中齐次坐标在表示无穷远处的点时不需要用到<span
class="math inline">\(\infty\)</span>。</p>
<blockquote>
<p>其中齐次坐标<span class="math inline">\((1, 2,
1)\)</span>等价于齐次坐标<span class="math inline">\((2, 4,
2)\)</span>…即<span class="math inline">\((k, 2k, k)，k \in
R\)</span>，此处这些点具有<strong>尺度不变性</strong>，是齐性的（结构相似的），所以称为<strong>齐次坐标</strong></p>
</blockquote>
<h4 id="平行线相交的不太严格的证明">平行线相交的不太严格的证明</h4>
<p>欧式空间中假设有如下两条平行线: <span class="math display">\[
\begin{align}
Ax + By + C = 0 \\
Ax + By + D = 0
\end{align}
\]</span> 上面两条先在欧式空间中除非 <span class="math inline">\(C =
D\)</span>，否则不相交。使用 <span class="math inline">\(\frac{x}{w},
\frac{y}{w}\)</span> 替换 <span class="math inline">\(x, y\)</span>
(正如前文提到的使用<span class="math inline">\(N+1\)</span>个量表示 N
维坐标，这里增加了一个量 w)，可以得到： <span class="math display">\[
\begin{align}
Ax + By + Cw = 0 \\
Ax + By + Dw = 0
\end{align}
\]</span> 上式可以得到解<span class="math inline">\((x, y,
0)\)</span>，即两条平行线的齐次坐标表示在<span class="math inline">\((x,
y, 0)\)</span>也就是无穷点处相遇</p>
<blockquote>
<p>当然这只是一个不严格不严谨的表示，齐次坐标真正的作用在于下文。</p>
</blockquote>
<h4 id="齐次坐标可以区分点与向量">齐次坐标可以区分点与向量</h4>
<p>以二维空间为例，<span class="math inline">\((a, b)\)</span>
这样的表示既可以是一个坐标表示，也可以是一个向量表示。假设这个坐标系
<span class="math inline">\(xOy\)</span> 中两个基向量为 <span
class="math inline">\(\vec{x}, \vec{y}\)</span>，坐标原点为
o，则其中</p>
<ul>
<li>表示向量 <span class="math inline">\(\vec{v}\)</span> 时，代表 <span
class="math inline">\(\vec{v} = a\vec{x} + b\vec{y}\)</span></li>
<li>表示一个点 p 时，代表 $ p - o = a + b $</li>
</ul>
<p>如果没有附加说明，我们不能区别 <span class="math inline">\((a,
b)\)</span>
表示的是向量还是点。用三个量来表示的话，我们可以明确的区分向量和点</p>
<ul>
<li><p>齐次点 <span class="math inline">\((a, b, 1)\)</span></p>
<p>取 <span class="math inline">\(w=1\)</span>
是为了方便与欧拉坐标进行对应</p></li>
<li><p>齐次向量 <span class="math inline">\((a, b, 0)\)</span></p>
<p>欧拉坐标系中，向量是一个射向无穷远的射线，所以用 <span
class="math inline">\(w=0\)</span> 来表示。</p></li>
</ul>
<h3 id="基于齐次坐标的矩阵表示">基于齐次坐标的矩阵表示</h3>
<p>通过基本变换，可以很容易得到下列矩阵：</p>
<h4 id="平移-1">平移</h4>
<p>矩阵表达： <span class="math display">\[
\begin{bmatrix}
   x&#39; \\
   y&#39; \\
   1 \\
  \end{bmatrix} = \begin{bmatrix}
  1 &amp; 0 &amp; t_x \\
  0 &amp; 1 &amp; t_y \\
  0 &amp; 0 &amp; 1
  \end{bmatrix} \cdot \begin{bmatrix}
  x \\
  y \\
  1
  \end{bmatrix}
\]</span> 简写为： <span class="math display">\[
P&#39;=T_{(t_x,t_y)} \cdot P
\]</span></p>
<p>逆平移变换为： <span class="math display">\[
T_{(t_x,t_y)}^{-1} = \begin{bmatrix}
  1 &amp; 0 &amp; -t_x \\
  0 &amp; 1 &amp; -t_y \\
  0 &amp; 0 &amp; 1
  \end{bmatrix}
\]</span></p>
<h4 id="旋转-1">旋转</h4>
<p>矩阵表达： <span class="math display">\[
\begin{bmatrix}
   x&#39; \\
   y&#39; \\
   1 \\
  \end{bmatrix} = \begin{bmatrix}
  cos \theta &amp; -sin \theta &amp; 0 \\
  sin \theta &amp; cos \theta  &amp; 0 \\
  0 &amp; 0 &amp; 1
  \end{bmatrix} \cdot \begin{bmatrix}
  x \\
  y \\
  1
  \end{bmatrix}
\]</span></p>
<p>简写为： <span class="math display">\[
P&#39;=R_{(\theta)} \cdot P
\]</span></p>
<p>逆旋转变换为： <span class="math display">\[
R_{(\theta)}^{-1} = \begin{bmatrix}
  cos (-\theta) &amp; -sin (-\theta) &amp; 0 \\
  sin (-\theta) &amp; cos (-\theta)  &amp; 0 \\
  0 &amp; 0 &amp; 1
  \end{bmatrix} = \begin{bmatrix}
   cos \theta &amp; sin \theta &amp; 0 \\
  -sin \theta &amp; cos \theta &amp; 0 \\
  0 &amp; 0 &amp; 1
  \end{bmatrix}
\]</span></p>
<h4 id="缩放-1">缩放</h4>
<p>矩阵表达： <span class="math display">\[
\begin{bmatrix}
   x&#39; \\
   y&#39; \\
   1 \\
  \end{bmatrix} = \begin{bmatrix}
  S_x &amp; 0 &amp; 0 \\
  0 &amp; S_y &amp; 0 \\
  0 &amp; 0   &amp; 1
  \end{bmatrix} \cdot \begin{bmatrix}
  x \\
  y \\
  1
  \end{bmatrix}
\]</span> 简写为： <span class="math display">\[
P&#39;=S_{(S_x,S_y)} \cdot P
\]</span> 逆绽放矩阵为： <span class="math display">\[
S_{(S_X,X_Y)}^{-1} = \begin{bmatrix}
  \frac{1}{S_x} &amp; 0 &amp; 0 \\
  0 &amp; \frac{1}{S_y} &amp; 0 \\
  0 &amp; 0   &amp; 1
  \end{bmatrix}
\]</span></p>
<h4 id="反射镜像">反射（镜像）</h4>
<p><img data-src="https://i.loli.net/2021/09/26/42dPCMbHVWrDuFJ.png" /></p>
<h5 id="关于-x-轴镜像">关于 x 轴镜像</h5>
<p><span class="math display">\[
\begin{bmatrix}
   x&#39; \\
   y&#39; \\
   1 \\
  \end{bmatrix} = \begin{bmatrix}
  1 &amp; 0 &amp; 0 \\
  0 &amp; -1 &amp; 0 \\
  0 &amp; 0   &amp; 1
  \end{bmatrix} \cdot \begin{bmatrix}
  x \\
  y \\
  1
  \end{bmatrix}
\]</span></p>
<h5 id="关于-y-轴镜像">关于 y 轴镜像</h5>
<p><span class="math display">\[
\begin{bmatrix}
   x&#39; \\
   y&#39; \\
   1 \\
  \end{bmatrix} = \begin{bmatrix}
  -1 &amp; 0 &amp; 0 \\
   0 &amp; 1 &amp; 0 \\
   0 &amp; 0 &amp; 1
  \end{bmatrix} \cdot \begin{bmatrix}
  x \\
  y \\
  1
  \end{bmatrix}
\]</span></p>
<h5 id="绕任意轴镜像">绕任意轴镜像</h5>
<p>可以先将任意轴旋转到 x 或 y 轴上，然后再应用上述镜像矩阵。</p>
<h4 id="错切">错切</h4>
<p><img data-src="https://i.loli.net/2021/09/26/UWNbX63puslceHS.png" /></p>
<h5 id="相对于-x-轴的-x-方向错切">相对于 x 轴的 x 方向错切</h5>
<p><span class="math display">\[
\begin{bmatrix}
   x&#39; \\
   y&#39; \\
   1 \\
  \end{bmatrix} = \begin{bmatrix}
  1 &amp; sh_x &amp; 0 \\
  0 &amp; 1 &amp; 0 \\
  0 &amp; 0 &amp; 1
  \end{bmatrix} \cdot \begin{bmatrix}
  x \\
  y \\
  1
  \end{bmatrix}
\]</span></p>
<p>该矩阵将坐标转换成： <span class="math display">\[
x&#39;=x+sh_x \cdot y \\
y&#39;=y
\]</span></p>
<h5 id="相对于-y-轴的-y-方向错切">相对于 y 轴的 y 方向错切</h5>
<p><span class="math display">\[
\begin{bmatrix}
   x&#39; \\
   y&#39; \\
   1 \\
  \end{bmatrix} = \begin{bmatrix}
  1 &amp; 0 &amp; 0 \\
  sh_y &amp; 1 &amp; 0 \\
  0 &amp; 0 &amp; 1
  \end{bmatrix} \cdot \begin{bmatrix}
  x \\
  y \\
  1
  \end{bmatrix}
\]</span></p>
<p>该矩阵将坐标转换成： <span class="math display">\[
\begin{align}
x&#39;=x \\
y&#39;=y+sh_y \cdot y
\end{align}
\]</span></p>
<h3 id="逆变换">逆变换</h3>
<p>将经过矩阵变换的点再逆反到原来的位置，需要对点进行逆变换。逆变换其实就是对原矩阵求逆。
<span class="math display">\[
\begin{align}
P&#39; &amp;= M \cdot P \\
M^{-1} \cdot P&#39; &amp;= M ^{-1} \cdot M \cdot P \\
所以: P &amp;= M^{-1} \cdot P&#39;
\end{align}
\]</span> <strong>怎么求逆矩阵呢？</strong></p>
<p>一般通过初等变换法求取矩阵的逆，详见《代数》。</p>
<h3 id="二维复合变换">二维复合变换</h3>
<p>利用矩阵表达式，可以将各个矩阵变换相乘，把任意的变换序列组合成一个复合的变换矩阵，提高计算效率。通过复合矩阵，可以实现图形的任意变化。</p>
<blockquote>
<p>复合变换矩阵是<strong>从右向左</strong>变换的。</p>
</blockquote>
<h4 id="复合二维平移">复合二维平移</h4>
<p><span class="math display">\[
\begin{bmatrix}
  1 &amp; 0 &amp; t_{x2} \\
  0 &amp; 1 &amp; t_{y2} \\
  0 &amp; 0 &amp; 1
  \end{bmatrix}
\cdot   
\begin{bmatrix}
  1 &amp; 0 &amp; t_{x1} \\
  0 &amp; 1 &amp; t_{y1} \\
  0 &amp; 0 &amp; 1
  \end{bmatrix} =
\cdot
\begin{bmatrix}
  1 &amp; 0 &amp; t_{x1}+t_{x2} \\
  0 &amp; 1 &amp; t_{y1}+t_{y2} \\
  0 &amp; 0 &amp; 1
  \end{bmatrix}
\]</span></p>
<h4 id="复合二维旋转">复合二维旋转</h4>
<p><span class="math display">\[
R_{(\theta 2)} \cdot R_{(\theta 1)} = R_{(\theta1+\theta2)}
\]</span></p>
<h4 id="复合二维缩放">复合二维缩放</h4>
<p><span class="math display">\[
\begin{bmatrix}
  S_{x2} &amp; 0 &amp; 0 \\
  0 &amp; S_{y2} &amp; 0 \\
  0 &amp; 0   &amp; 1
  \end{bmatrix} \cdot
\begin{bmatrix}
  S_{x1} &amp; 0 &amp; 0 \\
  0 &amp; S_{y1} &amp; 0 \\
  0 &amp; 0   &amp; 1
  \end{bmatrix} =
\begin{bmatrix}
  S_{x1} \cdot S_{x2} &amp; 0 &amp; 0 \\
  0 &amp; S_{y1} \cdot S_{y2} &amp; 0 \\
  0 &amp; 0   &amp; 1
  \end{bmatrix}
\]</span></p>
<h4 id="通用二维基准点旋转">通用二维基准点旋转</h4>
<p>假设需要绕 <span class="math inline">\((x_r,y_r)\)</span>
进行旋转，可以采用如下步骤实现：</p>
<ol type="1">
<li>平移对象使基准点位置移动到坐标原点</li>
<li>将对象绕坐标原点进行旋转</li>
<li>将对象平移回原位置</li>
</ol>
<p><span class="math display">\[
\begin{bmatrix}
  1 &amp; 0 &amp; x_r \\
  0 &amp; 1 &amp; y_r \\
  0 &amp; 0 &amp; 1
  \end{bmatrix} \cdot
\begin{bmatrix}
  cos \theta &amp; -sin \theta &amp; 0 \\
  sin \theta &amp; cos \theta  &amp; 0 \\
  0 &amp; 0 &amp; 1
  \end{bmatrix} \cdot
\begin{bmatrix}
  1 &amp; 0 &amp; -x_r \\
  0 &amp; 1 &amp; -y_r \\
  0 &amp; 0 &amp; 1
  \end{bmatrix}
\]</span></p>
<h4 id="通用二维基准点缩放">通用二维基准点缩放</h4>
<p>假设需要绕 <span class="math inline">\((x_s,y_s)\)</span>
进行缩放，可以采用如下步骤实现：</p>
<ol type="1">
<li>平移对象使旋转点与坐标原点重合</li>
<li>将对象基于坐标原点进行缩放</li>
<li>将对象平移回原位置</li>
</ol>
<p><span class="math display">\[
\begin{bmatrix}
  1 &amp; 0 &amp; x_s \\
  0 &amp; 1 &amp; y_s \\
  0 &amp; 0 &amp; 1
  \end{bmatrix} \cdot
\begin{bmatrix}
  S_x &amp; 0 &amp; 0 \\
0 &amp; S_y  &amp; 0 \\
  0 &amp; 0 &amp; 1
  \end{bmatrix} \cdot
\begin{bmatrix}
  1 &amp; 0 &amp; -x_s \\
  0 &amp; 1 &amp; -y_s \\
  0 &amp; 0 &amp; 1
  \end{bmatrix}
\]</span></p>
<h4 id="通用二维定向缩放">通用二维定向缩放</h4>
<ol type="1">
<li>先将定向缩放方向旋转至与 x 或 y 轴重合</li>
<li>利用参数 <span class="math inline">\(S_x\)</span> 或 <span
class="math inline">\(S_y\)</span> 进行缩放</li>
<li>最后将对象旋转回原位置</li>
</ol>
<h3 id="矩阵的理解">矩阵的理解</h3>
<strong>齐次矩阵各个分量的含义：</strong> $$
<span class="math display">\[\begin{bmatrix}
  a_{11}(x方向的缩放) &amp; a_{12}(x相对于y的变化量) &amp;
a_{13}(x的平移值) \\
  a_{21}(y相对于x的变化量) &amp; a_{22}(y方向的缩放) &amp;
a_{23}(y的平移值) \\
  0 &amp; 0 &amp; 1 \\
  \end{bmatrix}\]</span>
<p><span class="math display">\[\begin{align}
&amp;--x 影响因子 \\
&amp;--y影响因子 \\
&amp;--齐次因子
  \end{align}\]</span> $$</p>
<p><strong>复合矩阵复合顺序：</strong></p>
<p>在进行矩阵的复合时，<strong>一定下一个矩阵左乘上一个矩阵</strong>，千万不能弄反了。在变换时，是从右向左变换的。</p>
<h3 id="二维坐标系间的变换">二维坐标系间的变换</h3>
<p><img data-src="https://i.loli.net/2021/09/26/hwWdEaf6GM2BJgk.png" /></p>
<p>在进行图形处理时，经常需要将对象从一个坐标系变换到另一个坐标系中，比如从对象的局部坐标系切换到世界坐标。</p>
<p>如上图所示，为了将 P 的 xy 坐标变换到 x'y' 坐标，必须将 x'y' 轴叠加到
xy 轴上，需要分两步进行：</p>
<ol type="1">
<li>将 x'y' 系统的坐标原点 <span
class="math inline">\((x_0,y_0)\)</span> 平移到 xy 系统的原点 <span
class="math inline">\((0,0)\)</span></li>
<li>将 x' 轴旋转到 x 轴上（顺时针旋转 <span
class="math inline">\(\theta\)</span> ）</li>
</ol>
<p><span class="math display">\[
\begin{bmatrix}
  const \theta &amp; -sin(-\theta) &amp; 0 \\
  sin(-\theta) &amp; const \theta &amp; 0 \\
  0 &amp; 0 &amp; 1
  \end{bmatrix} \cdot  
\begin{bmatrix}
  1 &amp; 0 &amp; -x_0 \\
  0 &amp; 1 &amp; -y_0 \\
  0 &amp; 0 &amp; 1
  \end{bmatrix}
\]</span></p>
<h2 id="三维几何变换">三维几何变换</h2>
<p>三维几何变换的方法是在二维的基础上扩充了 Z 坐标而得到的。</p>
<h3 id="三维平移">三维平移</h3>
<p><span class="math display">\[
\begin{bmatrix}
x&#39; \\
y&#39; \\
z&#39; \\
1
\end{bmatrix} =
\begin{bmatrix}
1 &amp; 0 &amp; 0 &amp; t_x \\
0 &amp; 1 &amp; 0 &amp; t_y \\
0 &amp; 0 &amp; 1 &amp; t_z \\
0 &amp; 0 &amp; 0 &amp; 1
\end{bmatrix} \cdot
\begin{bmatrix}
x \\
y \\
z \\
1
\end{bmatrix}
\]</span></p>
<h3 id="三维旋转">三维旋转</h3>
<p>在三维空间中，图形对象可以绕任意轴进行旋转，但绕平行于坐标轴旋转是容易处理的。所以，我们通过适当的平移旋转，使得旋转轴与坐标轴对齐，然后再构建基于坐标轴的旋转矩阵，最后将上述矩阵复合成一个空间中的旋转矩阵。</p>
<p><img data-src="https://i.loli.net/2021/09/27/dO8EVqTNMxlDkWh.png" /></p>
<p>如果沿着坐标轴正半轴观察原点时，绕坐标轴的正向旋转方向是逆时针方向。</p>
<h4 id="绕-z-轴旋转">绕 z 轴旋转</h4>
<p><span class="math display">\[
\begin{bmatrix}
   x&#39; \\
   y&#39; \\
   z&#39; \\
   1 \\
  \end{bmatrix} = \begin{bmatrix}
  cos \theta &amp; -sin \theta &amp; 0 &amp; 0\\
  sin \theta &amp; cos \theta  &amp; 0 &amp; 0 \\
  0 &amp; 0 &amp; 1 &amp; 0 \\
  0 &amp; 0 &amp; 0 &amp; 1
  \end{bmatrix} \cdot \begin{bmatrix}
  x \\
  y \\
  z \\
  1
  \end{bmatrix}
\]</span></p>
<h4 id="绕-x-轴旋转">绕 x 轴旋转</h4>
<p>将 x 替换成 y，y 替换成 z，z 替换成 x 即可得到。 <span
class="math display">\[
\begin{bmatrix}
   y&#39; \\
   z&#39; \\
   x&#39; \\
   1 \\
  \end{bmatrix} = \begin{bmatrix}
  cos \theta &amp; -sin \theta &amp; 0 &amp; 0\\
  sin \theta &amp; cos \theta  &amp; 0 &amp; 0 \\
  0 &amp; 0 &amp; 1 &amp; 0 \\
  0 &amp; 0 &amp; 0 &amp; 1
  \end{bmatrix} \cdot \begin{bmatrix}
  y \\
  z \\
  x \\
  1
  \end{bmatrix}
\]</span></p>
<p>标准形式： <span class="math display">\[
\begin{bmatrix}
   x&#39; \\
   y&#39; \\
   z&#39; \\
   1 \\
\end{bmatrix} =  
\begin{bmatrix}
  1 &amp; 0 &amp; 0 &amp; 0\\
  0 &amp; cos \theta  &amp; -sin \theta &amp; 0 \\
  0 &amp; sin \theta  &amp; cos \theta &amp; 0 \\
  0 &amp; 0 &amp; 0 &amp; 1
  \end{bmatrix} \cdot  
\begin{bmatrix}
   x \\
   y \\
   z \\
   1 \\
\end{bmatrix}
\]</span></p>
<h4 id="绕-y-轴旋转">绕 y 轴旋转</h4>
<p>在上式中，将 x 替换成 y，y 替换成 z，z 替换成 x 即可得到。 <span
class="math display">\[
\begin{bmatrix}
   z&#39; \\
   x&#39; \\
   y&#39; \\
   1 \\
  \end{bmatrix} = \begin{bmatrix}
  cos \theta &amp; -sin \theta &amp; 0 &amp; 0\\
  sin \theta &amp; cos \theta  &amp; 0 &amp; 0 \\
  0 &amp; 0 &amp; 1 &amp; 0 \\
  0 &amp; 0 &amp; 0 &amp; 1
  \end{bmatrix} \cdot \begin{bmatrix}
  z \\
  x \\
  y \\
  1
  \end{bmatrix}
\]</span></p>
<p>标准矩阵为： <span class="math display">\[
\begin{bmatrix}
   x \\
   y \\
   z \\
   1 \\
  \end{bmatrix} = \begin{bmatrix}
  cos \theta &amp; 0 &amp; sin \theta &amp; 0\\
  0 &amp; 1 &amp; 0 &amp; 0 \\
  -sin \theta &amp; 0 &amp; cos \theta &amp; 0 \\
  0 &amp; 0 &amp; 0 &amp; 1
  \end{bmatrix} \cdot \begin{bmatrix}
  x \\
  y \\
  z \\
  1
  \end{bmatrix}
\]</span></p>
<h4 id="绕任意轴旋转">绕任意轴旋转</h4>
<ol type="1">
<li>平移对象，使得旋转轴通过坐标原点</li>
<li>旋转对象使得旋转轴与某一坐标轴重合</li>
<li>绕该坐标轴完成指定的旋转</li>
<li>利用逆旋转使旋转轴回到其原始方向</li>
<li>利用逆平移使旋转轴回到其原始位置</li>
</ol>
<p><img data-src="https://i.loli.net/2021/09/27/emy2cdqOwGDhH8A.png" /></p>
<h3 id="三维缩放">三维缩放</h3>
<p><strong>缩放矩阵：</strong> <span class="math display">\[
\begin{bmatrix}
S_x &amp; 0 &amp; 0 &amp; 0 \\
0   &amp; S_y &amp; 0 &amp; 0 \\
0 &amp; 0 &amp; S_z &amp; 0 \\
0 &amp; 0 &amp; 0 &amp; 1
\end{bmatrix}
\]</span> 相对于任意点 <span
class="math inline">\((x_s,y_s,z_s)\)</span> 的缩放步骤：</p>
<ol type="1">
<li>平移给定点到原点</li>
<li>使用上述矩阵相对于坐标原点进行缩放</li>
<li>平移给定点回到原始位置</li>
</ol>
<h3 id="三维反射镜像">三维反射（镜像）</h3>
<p><span class="math display">\[
\begin{bmatrix}
R_x &amp; 0 &amp; 0 &amp; 0 \\
0   &amp; R_y &amp; 0 &amp; 0 \\
0 &amp; 0 &amp; R_z &amp; 0 \\
0 &amp; 0 &amp; 0 &amp; 1
\end{bmatrix}
\]</span></p>
<p>反射矩阵是缩放矩阵的特例，即缩放因子小于0时，就变成了反射。</p>
<h3 id="投影到平面">投影到平面</h3>
<p>当某一个轴的缩放因子为0时，代表向另外两个轴形成的平面进行投影。比如下列矩阵代表向
<span class="math inline">\(z=t_z\)</span> 平面投影。 <span
class="math display">\[
\begin{bmatrix}
R_x &amp; 0 &amp; 0 &amp; 0 \\
0   &amp; R_y &amp; 0 &amp; 0 \\
0 &amp; 0 &amp; 0 &amp; t_z \\
0 &amp; 0 &amp; 0 &amp; 1
\end{bmatrix}
\]</span>
对于绕任意平面的投影，可以将投影平面旋转到标准平面，然后再进行标准投影变换。</p>
<h3 id="三维错切">三维错切</h3>
<p>三维错切与二维错切类似，不过前者较后者在每个方向上多一个影响变量。比如，影响
x 方向的错切有 y 和 z 两个方向。</p>
<h2 id="三维观察">三维观察</h2>
<h3 id="二维观察显示流程">二维观察显示流程</h3>
<ol type="1">
<li>使用建模坐标 (MC) 变换构造世界坐标 (WC) 系场景</li>
<li>将世界坐标转换为观察坐标 (VC)</li>
<li>将观察坐标 (VC) 转换为规范化设备坐标 (NC)</li>
<li>将规范化设备坐标 (NC) 映射到设备坐标 (DC)</li>
</ol>
<h3 id="三维观察显示流程">三维观察显示流程</h3>
<p>三维场景视图的计算机生成步骤有点类似于拍一张照片的过程。</p>
<ol type="1">
<li>安放相机，即在场景中确定一个观察位置</li>
<li>确定相机方向，即照相机朝哪个方向照及如果绕视线旋转照相机以确定相片的向上方向</li>
<li>按照相机的 “裁剪窗口”（镜头）
来修剪场景，让光线从可视表面<strong>投影</strong>到照相机的胶片上</li>
</ol>
<p>三维观察实际流程：</p>
<ol type="1">
<li>建模变换</li>
<li>观察变换</li>
<li>投影变换</li>
<li>规范化变换和裁剪</li>
<li>视口变换</li>
</ol>
<h3 id="局部坐标">局部坐标</h3>
<p>局部坐标系中的坐标称之为局部坐标，在使用中，我们经常需要获取局部坐标，那么如何获取呢？</p>
<p>这里再引用一下《飞出个未来》里的一句话：</p>
<blockquote>
<p>引擎推动的不是飞船而是宇宙。飞船压根就没动过。</p>
</blockquote>
<p>仔细想想，计算机中摄像机的原理也是相通的。如果想换个角度观察一座山，您可以移动摄像机也可以……移动山。后者在实际中不可行，但在计算机图形学中却十分方便。</p>
<p>所以，在计算机图形变换过程中，我们操作的永远是图形。</p>
<p>可以这样理解：局部坐标是将图形的局部坐标系通过平移、旋转、缩放等矩阵变换后，使得图形的局部坐标系与世界坐标系重合，这个时候，获得的世界坐标其它就是局部坐标。</p>
<p>此时，你可能会有疑问：在实际的三维软件里，定义了 ACS
后，图形相对于世界坐标系的位置一直没变，为什么会说变换的是图形呢？</p>
<p>这个就涉及到图形的变换与显示了，图形坐标系的变换公式为： <span
class="math display">\[
P&#39; =M_{local}^{-1} \cdot M_{world} \cdot P
\]</span> <span class="math inline">\(P&#39;\)</span>
表示局部坐标，<span class="math inline">\(P\)</span>
表示世界坐标，从上面的公式里可以看到，坐标的变化都是通过矩阵变换得到的，原坐标
<span class="math inline">\(P\)</span> 一直没变。</p>
<h3 id="局部坐标与世界坐标互转">局部坐标与世界坐标互转</h3>
<p>在空间中，任意点的局部坐标系与世界坐标系的关系如下： <span
class="math display">\[
M_{local} \cdot P&#39; = M_{world} \cdot P
\]</span> 通常情况下，世界坐标系 <span class="math inline">\(M_{world} =
I\)</span>，即为单位矩阵。</p>
<p>所以，局部坐标可由正式求得： <span class="math display">\[
P&#39; = M_{local}^{-1} \cdot P
\]</span>
在实际的坐标变换中，如果想将世界坐标转换为局部坐标，我们可以：</p>
<ol type="1">
<li>构建局部坐标系矩阵 <span
class="math inline">\(M_{local}\)</span></li>
<li>对局部坐标系求逆得 <span
class="math inline">\(M_{local}^{-1}\)</span></li>
<li>用局部坐标系的逆矩阵左乘世界坐标系的矩阵</li>
</ol>
<blockquote>
<p>从上面可以看出，要将对象从坐标系 A 转换到坐标系 B，只需要在 A
的度量矩阵上左乘坐标系 B 的度量矩阵的逆变换即可。</p>
</blockquote>
<p>即： <span class="math display">\[
P_B = M_B^{-1} \cdot M_A \cdot P_A
\]</span></p>
<h3 id="如何构建坐标系的度量矩阵">如何构建坐标系的度量矩阵</h3>
<p>构建某个坐标系的矩阵其原理是将世界坐标系矩阵（单位矩阵）进行平移旋转。</p>
<p>比如已知局部坐标系的原点为 <span
class="math inline">\(P(x,y,z)\)</span> 和三个基向量分别为<span
class="math inline">\(V_1\)</span>, <span
class="math inline">\(V_2\)</span>, <span
class="math inline">\(V_3\)</span>，其度量矩阵为： <span
class="math display">\[
M = \begin{bmatrix}
V_1.x &amp; V_2.x &amp; V_3.x &amp; P.x \\
V_1.y &amp; V_2.y &amp; V_3.y &amp; P.y \\
V_1.z &amp; V_2.z &amp; V_3.z &amp; P.z \\
0 &amp; 0 &amp; 0 &amp; 1
\end{bmatrix}
\]</span></p>
<p>从上面的公式中，可以推导得到世界坐标系的度量矩阵为： <span
class="math display">\[
M = \begin{bmatrix}
1 &amp; 0 &amp; 0 &amp; 0 \\
0 &amp; 1 &amp; 0 &amp; 0 \\
0 &amp; 0 &amp; 1 &amp; 0 \\
0 &amp; 0 &amp; 0 &amp; 1
\end{bmatrix}
\]</span></p>
<h2 id="扩充阅读">扩充阅读</h2>
<ol type="1">
<li><a
href="http://www.opengl-tutorial.org/cn/beginners-tutorials/tutorial-3-matrices/#%E9%BD%90%E6%AC%A1%E5%9D%90%E6%A0%87homogeneous-coordinates">矩阵</a></li>
<li><a
href="https://zhuanlan.zhihu.com/p/26663064">矩阵的乘积/复合变换</a></li>
</ol>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>几何变换</category>
      </categories>
      <tags>
        <tag>Bentley二次开发</tag>
      </tags>
  </entry>
  <entry>
    <title>DTranform3d和DMatrix理解</title>
    <url>/posts/2021/17DF183.html</url>
    <content><![CDATA[<p>DTransform3d 是 Bentley
中几何变换的类，通过它可以快速生成变换矩阵。</p>
<span id="more"></span>
<table>
<thead>
<tr class="header">
<th>程序集</th>
<th>命名空间</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Bentley.GeometryNET.Structs.dll</td>
<td>Bentley.GeometryNET</td>
</tr>
</tbody>
</table>
<h2 id="dpoint3d">DPoint3d</h2>
<p>代表点，点也可以看成是从原点开始的向量</p>
<h2 id="dvector3d">DVector3d</h2>
<p>代表向量</p>
<h2 id="dmatrix">DMatrix</h2>
<p>它的类型的是 Struct，代表方阵，有
DMatrix2d、DMatrix3d、DMatrix4d，是基本的数学几何表达。</p>
<h2 id="dtransform3d">DTransform3d</h2>
<p>DTransform3d 是齐次表达式型矩阵的一种封装，有 DTransform2d 和
DTransform3d，分别代表 2x3 和 3x4 阶矩阵。</p>
<p>它内部的一些变换使用到了 DMatrix，因为 DMatrix
是结构体，运行在栈上，执行效率高。</p>
<p>Bentley 中使用 DTransform3d
来实现三维变换，它使用三维矩阵加上一个平移矩阵的方式来表达齐次矩阵。</p>
<p>Bentley 在进行三维仿射时，其原理是先将 DTransform3d
中的数据转成一个三维齐次矩阵，然后再对图形左乘变换矩阵进行变换。</p>
<h2 id="左乘">左乘</h2>
<p>要对图形进行仿射变换，需要左乘矩阵，同时，变换的顺序是从右向左的。</p>
<p>Bentley
中很多对象重载了运算符，可以方便进行仿射变换，在使用的过程中，直接使用
<code>*</code> 号即可。</p>
<p>例如: 对 DVector3d 进行变换，可以使用：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">DVector3d vector = DVector3d.UnitZ;</span><br><span class="line">DTransform3d trans = DTransform3d.Identity;</span><br><span class="line">DVector3d result = trans * vector;</span><br></pre></td></tr></table></figure>
<h2 id="关于矩阵的理解">关于矩阵的理解</h2>
<p>矩阵的通用表达式为： <span class="math display">\[
M_{local} \cdot P_{local} = M_{world} \cdot P_{world} = I \cdot P
\]</span> 从上面的表达式中，我们可以理解为：</p>
<ol type="1">
<li>对象的真实坐标为 <span class="math inline">\(P\)</span></li>
<li>P 在世界坐标系中是 <span
class="math inline">\(P_{world}\)</span></li>
<li>P 在局部坐标系中是 <span
class="math inline">\(P_{local}\)</span></li>
</ol>
<p>所以，如果要将一个坐标系转换到另一个坐标系，可以先将该坐标系中的点转换到真实坐标，然后再通过真实坐标转换到另一个坐标系中。</p>
<p>假设有坐标系： <span class="math display">\[
\begin{align}
M_1 \cdot P_1 = M \cdot P \\
M_2 \cdot P_2 = M \cdot P
\end{align}
\]</span> 如果要将 <span class="math inline">\(P_1\)</span> 变成 <span
class="math inline">\(P_2\)</span>,则可以： <span
class="math display">\[
M_1 \cdot P_1 = M_2 \cdot P_2 =&gt; P_2 = M_2^{-1} \cdot M_1 \cdot P_1
\]</span>
<strong>要转换到某个坐标系，就要左乘该坐标系的逆矩阵。</strong></p>
<h2 id="混淆概念解析">混淆概念解析</h2>
<p>在使用 DTranform3 时，经常会有 <code>worldToLocal</code> 和
<code>localToWorld</code>，它们的关系如下： <span
class="math display">\[
\begin{align}
P_{world} = M_{localToWorld} \cdot P_{local} \\
M_{worldToLocal} = M_{localToWorld}^{-1}
\end{align}
\]</span></p>
<ul>
<li><p>worldToLocal</p>
<p>将世界坐标系转换到局部坐标系，从而获取局部坐标，即是<strong>局部坐标系矩阵的逆矩阵</strong>。</p>
<p>对于元素来说，就是将世界坐标系中的元素旋转到自己定义的坐标系下</p></li>
<li><p>localToWorld</p>
<p>worldToLocal的逆矩阵</p></li>
</ul>
<h2 id="求逆变换">求逆变换</h2>
<h3 id="逆矩阵">逆矩阵</h3>
<p>在 <code>DTransform3d</code> 的实例上，有一个
<code>TryInvert</code>，调用该方法可以获取一个变换的逆变换。因为一个矩阵，不一定是可逆的，所以
<code>TryInvert</code> 不一定会获取到逆变换，需要根据返回值来确定。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用代码片段</span></span><br><span class="line">DTransform3d trans = <span class="keyword">new</span> DTransform3d(cursorLocation.ViewRotation);</span><br><span class="line">trans.TryInvert(<span class="keyword">out</span> DTransform3d invertTras);</span><br></pre></td></tr></table></figure>
<h3 id="伪逆">伪逆</h3>
<p>一个矩阵不一定有逆矩阵，但是一定有伪逆。所以可以通过下列方法求得：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DTransform 中包含静态 FromPseudoInverse，直接调用即可</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DTransform3d <span class="title">FromPseudoInverse</span>(<span class="params">DTransform3d transform</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 先转置</span></span><br><span class="line">    DMatrix3d matrix = <span class="keyword">new</span> DMatrix3d(transform).Transpose();</span><br><span class="line">    DVector3d vector = DMatrix3d.Multiply(matrix,-transform.coffxw,-transform.coffyw,-transform.coffzw);</span><br><span class="line">    <span class="comment">// 对转置进行平移</span></span><br><span class="line">    <span class="keyword">return</span> FromMatrixAndTranslation(matrix, vector);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<ol type="1">
<li><p><a
href="https://www.yuque.com/bentleysystems/ms/zgo461#Vs7J7">几何变换/坐标变换/矩阵变换
等基础概念和代码应用</a></p></li>
<li><p><a
href="https://www.cnblogs.com/yeyublog/p/5734374.html">计算机中 堆
、栈、</a></p></li>
</ol>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>几何变换</category>
      </categories>
      <tags>
        <tag>Bentley二次开发</tag>
        <tag>DTransform3d</tag>
      </tags>
  </entry>
  <entry>
    <title>DgnButtonEvent 中 RawPoint,Point,ViewPoint 的区别</title>
    <url>/posts/2022/192YQY2.html</url>
    <content><![CDATA[<p>DgnButtonEvent 有三个成员，分别是
RawPoint、Point和ViewPoin，它们的区别如下：</p>
<span id="more"></span>
<h2 id="正文">正文</h2>
<ul>
<li>RawPoint（原始点，未经加工过的点），即用户点的点坐标</li>
<li>Point，经过 Snap 等手段修正后捕捉到元素上的点坐标</li>
<li>ViewPoint，点在视图坐标系（视图窗口）中的坐标。</li>
</ul>
<p>其中，<code>RawPoint</code> 和 <code>Point</code>
都是在设计坐标系中的点坐标。</p>
<p><code>ViewPoint</code> 一般在视图窗口中定位。</p>
<p>在平常的使用中，通常使用 <code>Point</code>。</p>
<h2 id="参考">参考</h2>
<p><a
href="https://communities.bentley.com/communities/other_communities/chinafirst/f/microstation-projectwise/211500/ord-c-up7-dgnbuttonevent/640627#640627">DgnButtonEvent的成员含义</a></p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>几何变换</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
      </tags>
  </entry>
  <entry>
    <title>Bentley 中几何变换实例</title>
    <url>/posts/2022/38A8BYH.html</url>
    <content><![CDATA[<p>本文总结了一些常用的几何变换实例，以便后续开发。</p>
<span id="more"></span>
<h2 id="dvector3d-变换">DVector3d 变换</h2>
<p>使用 <code>DTranform*DVector3d</code> 即可进行变换。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">DVector3d screenZ = <span class="keyword">new</span> DVector3d(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 将屏幕 z 转到世界坐标系中</span></span><br><span class="line"><span class="comment">// cursorLocation 是自定义的类，此处传入当前视图的旋转矩阵即可</span></span><br><span class="line">DTransform3d trans = <span class="keyword">new</span> DTransform3d(cursorLocation.ViewRotation);</span><br><span class="line">trans.TryInvert(<span class="keyword">out</span> DTransform3d invertTrans);</span><br><span class="line"><span class="keyword">var</span> screenZInWorld = invertTrans * screenZ;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>几何变换</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
        <tag>几何变换</tag>
      </tags>
  </entry>
  <entry>
    <title>Bentley中的坐标系理解</title>
    <url>/posts/2021/2HTB36N.html</url>
    <content><![CDATA[<p>本节主要阐述 Bentley 平台的坐标系系统。</p>
<span id="more"></span>
<h2 id="模型变换概念">模型变换概念</h2>
<p>在进行模型变换过程中，有时候对模型与坐标系理解不通透，会导致变换过程变得很艰辛，因此将其关键概念总结如下：</p>
<ol type="1">
<li><p>所有的模型都是存储在全局世界坐标系下的</p></li>
<li><p>我们在视图中观察到的模型，是程序将原模型左乘一个视图旋转矩阵，然后左乘一个投影矩阵投影到屏幕上产生的</p></li>
<li><p>当将一个模型变换到局部坐标系后，再
<code>AddToModel</code>，最后在世界坐标系中显示出来的模型就是局部坐标系的样子。</p></li>
<li><p><code>引擎推动的不是飞船而是宇宙。飞船压根就没动过。</code></p>
<p>引擎代表坐标系，图形中，坐标系只有一个世界坐标系，其它的局部坐标系是为了方便理解而产生出来的。坐标系的变换就是对模型的变换。</p>
<p>所以在理解第 3
条时，不能理解成将局部坐标系与世界坐标系对齐，而应理解成<strong>将世界坐标系与局部坐标系对齐（换言之，就是对模型进行仿射变换）</strong></p>
<p>变换完成后，在视图中显示的就是局部坐标系下的状态了</p></li>
</ol>
<h2 id="世界坐标系">世界坐标系</h2>
<p>模型中，所有点的坐标都是依赖于世界坐标系的。</p>
<h2 id="视图坐标系">视图坐标系</h2>
<p>视图坐标系遵循右手定则，其中 Z 轴朝向屏幕外，X 轴水平向右，Y
轴竖直向上。</p>
<p>因此，要获取垂直于屏幕的向量（在世界坐标系下的表达），可以通过如下步骤获取：</p>
<ol type="1">
<li>获取视图的旋转矩阵 <span class="math inline">\(R\)</span></li>
<li>对旋转矩阵求逆 <span class="math inline">\(R^{-1}\)</span></li>
<li>然后将点 <span class="math inline">\(V_{local}\)</span>（0,0,1）应用
<span class="math inline">\(R^{-1}\)</span> 变换</li>
</ol>
<blockquote>
<p>因为 <span class="math inline">\(V_{local} = R \cdot
V_{world}\)</span></p>
<p>所以 <span class="math inline">\(R^{-1} \cdot V_{local} =
V_{wold}\)</span></p>
</blockquote>
<h2 id="任意坐标系">任意坐标系</h2>
<p>任意坐标系的<strong>度量矩阵</strong>是通过对单位矩阵的旋转平移后得到的。可以通过
<code>DTranform3d</code> 中的一些静态方法生成。</p>
<p>如果想将任意坐标系下的元素变换到世界坐标系中，需要左乘度量矩阵的逆。</p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>几何变换</category>
      </categories>
      <tags>
        <tag>Bentley二次开发</tag>
      </tags>
  </entry>
  <entry>
    <title>向量点乘与叉乘</title>
    <url>/posts/2022/3HJTYAD.html</url>
    <content><![CDATA[<p>在几何开发中，如何能够了解几何相关的知识，可以帮助我们快速解决问题，减少对现有
SDK 的依赖。本文总结了向量点乘和叉乘的区别及一些应用场景。</p>
<span id="more"></span>
<h2 id="点乘dot-product">点乘（Dot Product）</h2>
<h3 id="定义">定义</h3>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/Dot_Product.png"
alt="Dot_Product" />
<figcaption aria-hidden="true">Dot_Product</figcaption>
</figure>
<p>从代数上讲，点积是两个数列中对应项的乘积的和。</p>
<p>假设有两个向量 <span
class="math inline">\(\vec{a}=[a_1,a_2,...,a_n]\)</span>、<span
class="math inline">\(\vec{b}=[b_1,b2,...,b_n]\)</span>，则有 <span
class="math display">\[
\vec{a} \cdot \vec{b} = \sum_{i=1}^n{a_ib_i}=a_1b_1+a_2b_2+...+a_nb_n
\]</span>
从几何上讲，它是两个向量在欧几里空间里的长度值和它们夹角的余弦值的乘积。
<span class="math display">\[
\vec a \cdot \vec b = |\vec a|\cdot |\vec b| cos \theta
\]</span></p>
<blockquote>
<p>点乘又叫内积、数量积、投影积</p>
</blockquote>
<h3 id="特点">特点</h3>
<ol type="1">
<li><p>交换律</p>
<p><span class="math inline">\(\vec a \cdot \vec b = \vec b \cdot \vec
a\)</span></p></li>
<li><p>分布律</p>
<p><span class="math inline">\(\vec a \cdot (\vec b + \vec c) = \vec a
\cdot \vec b + \vec a \cdot \vec c\)</span></p></li>
<li><p>双线性</p>
<p><span class="math inline">\(\vec a \cdot (\gamma \vec b + \vec c) =
\gamma(\vec a \cdot \vec b) +(\vec a \cdot \vec c)\)</span></p></li>
<li><p>标量相乘</p>
<p><span class="math inline">\((c_1\vec a)\cdot (c_2\vec b)=c_1c_2(\vec
a \cdot \vec b)\)</span></p></li>
<li><p>不满足结合律</p>
<p><span class="math inline">\(\vec a \cdot (\vec b \vec c) \neq (\vec a
\vec b)\cdot \vec c \iff \vec a \cdot \gamma \neq \beta \cdot \vec
c\)</span></p>
<p>由于向量 <span class="math inline">\(\vec a \neq \vec
c\)</span>，从上式中可以看出，向量内积不满足结合律。</p></li>
<li><p>正交性</p>
<p>当两个非零向量垂直时，它们的内积为 0。</p></li>
<li><p>不满足消除律</p>
<p>在代数中，当 <span class="math inline">\(a\cdot b = a \cdot
c\)</span> 时，一定有 <span
class="math inline">\(b=c\)</span>，但是在向量中不满足这个规律。</p>
<p>当 <span class="math inline">\(\vec a \cdot \vec b = \vec a \cdot
\vec c\)</span> 且 <span class="math inline">\(\vec a \neq \vec
0\)</span> 时，通过分布律有 <span class="math inline">\(\vec a \cdot
(\vec b- \vec c) = 0\)</span>，只需要满足 <span
class="math inline">\(\vec a\)</span> 垂直于 <span
class="math inline">\(\vec b - \vec c\)</span> 即可，而不一定非要求
<span class="math inline">\(\vec b - \vec c = \vec 0\)</span></p></li>
<li><p>乘积律</p>
<p>当向量 <span class="math inline">\(\vec a\)</span> 和 <span
class="math inline">\(\vec b\)</span> 可微，则有 <span
class="math inline">\((\vec a \cdot \vec b)^{&#39;}=\vec a ^{&#39;}
\cdot \vec b + \vec a \cdot \vec b ^{&#39;}\)</span></p></li>
</ol>
<h3 id="实际应用">实际应用</h3>
<ol type="1">
<li><p>判断两个向量是否垂直</p>
<p>内积为 0</p></li>
<li><p>判断两个向量同向还是反向</p>
<p>同向内积为下，返回为负</p></li>
<li><p>用于求两个向量的夹角</p>
<p><span class="math inline">\(cos \theta = \frac{\vec a \cdot \vec
b}{|\vec a|\cdot |\vec b|}\)</span></p></li>
</ol>
<h2 id="叉乘cross-product">叉乘（Cross Product）</h2>
<h3 id="定义-1">定义</h3>
<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/Cross_product_vector.png"  height="300px"></p>
<p>假设有两个向量 <span class="math inline">\(\vec a\)</span> 和 <span
class="math inline">\(\vec b\)</span>，它们的叉乘表达如下： <span
class="math display">\[
\vec a \times \vec b = |\vec a| \cdot |\vec b| \cdot sin \theta \cdot
\vec n
\]</span></p>
<ul>
<li><p><span class="math inline">\(\theta\)</span>
是两个向量的夹角</p></li>
<li><p><span class="math inline">\(\vec n\)</span> 是同时包含向量 <span
class="math inline">\(\vec a\)</span> 和 <span
class="math inline">\(\vec b\)</span> 的平面的单位法向量</p></li>
<li><p>当两个向量平行时，其值为 <span class="math inline">\(\vec
0\)</span></p></li>
<li><p>向量的叉乘满足右手定律</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/Right_hand_rule_cross_product.png"  height="200px"></p></li>
</ul>
<blockquote>
<p>叉乘又叫外积</p>
</blockquote>
<h3 id="几何意义">几何意义</h3>
<p>两个向量叉乘的模代表分别以两个向量为边的四边形的面积。 <span
class="math display">\[
S= |\vec a \times \vec b | = |\vec a|\cdot |\vec b| \cdot sin \theta
\]</span> <img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/Cross_product_parallelogram.png"
alt="Cross_product_parallelogram" /></p>
<h3 id="混合积">混合积</h3>
<p>向量的混合积代表以这三个向量为边的六面体的体积。 <span
class="math display">\[
\begin{align}
\vec a \cdot (\vec b \times \vec c) = b \cdot (\vec c \times \vec a) = c
\cdot (\vec a \times \vec b)
\\
V= |\vec a \cdot (\vec b \times \vec c)|
\end{align}
\]</span> <img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/Parallelepiped_volume.png"
alt="Parallelepiped_volume" /></p>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a href="https://en.wikipedia.org/wiki/Dot_product">Dot
product-wiku</a></li>
<li><a href="https://en.wikipedia.org/wiki/Cross_product">Cross
product</a></li>
<li><a
href="https://www.zhihu.com/question/21080171">点乘和叉乘的区别是什么</a></li>
</ol>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>几何变换</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
        <tag>Bentley二次开发</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>求解矩阵的逆</title>
    <url>/posts/2022/3MW6BH0.html</url>
    <content><![CDATA[<p>在进行 MS
二次开发时，往往需要将图形转到一个平面去处理，处理完成后，需要再转回到原位置，这个时候就会需要求转换矩阵的逆，虽然
MS 中的 SDK 有提供求逆方法，但是深入原理会用得更加得心应手。</p>
<span id="more"></span>
<h2 id="定义">定义</h2>
<p>逆矩阵（inverse matrix），又称乘法反方阵、反矩阵。</p>
<p>在线性代数中，给定一个 n 阶方阵 <span
class="math inline">\(A\)</span>，若存在一 n 阶方阵 <span
class="math inline">\(B\)</span>，使得 <span
class="math inline">\(AB=BA=I_{n}\)</span>，其中 <span
class="math inline">\(I_n\)</span> 为 n 阶单位矩阵，则称 <span
class="math inline">\(A\)</span> 是可逆的，且 <span
class="math inline">\(B\)</span> 是 <span
class="math inline">\(A\)</span> 的逆矩阵，记作 <span
class="math inline">\(A^{-1}\)</span>。</p>
<p>只有方阵（n×n 的矩阵）才可能有逆矩阵。若方阵 <span
class="math inline">\(A\)</span> 的逆矩阵存在，则称 <span
class="math inline">\(A\)</span> 为非奇异方阵或可逆方阵。</p>
<p>与行列式类似，逆矩阵一般用于求解联立方程组。</p>
<h2 id="求法">求法</h2>
<h3 id="伴随矩阵法">伴随矩阵法</h3>
<h3 id="初等变换法">初等变换法</h3>
<h2 id="广义逆矩阵">广义逆矩阵</h2>
<p>广义逆阵（Generalized
inverse）又称伪逆，是对逆阵的推广。一般所说的伪逆是指<a
href="https://zh.wikipedia.org/wiki/摩尔－彭若斯广义逆">摩尔－彭若斯广义逆</a>，它是由E.
H. Moore和Roger Penrose分别独立提出的。伪逆在求解线性<a
href="https://zh.wikipedia.org/wiki/最小二乘法">最小二乘问题</a>中有重要应用。</p>
<h2 id="参考">参考</h2>
<p><a
href="https://zh.wikipedia.org/wiki/%E9%80%86%E7%9F%A9%E9%98%B5">逆矩阵-wiki</a></p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>几何变换</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
        <tag>Bentley二次开发</tag>
      </tags>
  </entry>
  <entry>
    <title>由浅入深地理解样条曲线</title>
    <url>/posts/2022/1CPW2GG.html</url>
    <content><![CDATA[<p>本文简要介绍计算机图图形学中的常用的各个样条曲线，同时梳理他们的之间的关系。</p>
<span id="more"></span>
<h2 id="前言">前言</h2>
<p>在阅读本文之前，请先静下心来，一步一步理解公式，不要因公式复杂而望而却步。如果慢慢理解，它其实也挺简单。</p>
<p>对于下列形式的公式说明： <span class="math display">\[
\begin{equation}
P(t) = \sum_{i=0}^{n}P_iB_{i}(t)
\end{equation}
\]</span> 上述公式表示 <span class="math inline">\(P_t\)</span>
是通过将多个点乘以一个函数 <span
class="math inline">\(B_i(t)\)</span>相加求得，这个公式的可以理解成曲线上的每个点
<span class="math inline">\(P_t\)</span> 是 n 维线性空间中的点，<span
class="math inline">\(B_i(t)\)</span> 是线性空间中的基函数。</p>
<p>n 维线性空间不是指笛卡尔坐标系下的 n
维，而是线性代数上的维度，如果对这个概念不是很清楚，可以查阅相关书籍，当然，上述的这个理解方式也可以忽略。</p>
<h2 id="贝塞尔曲线bézier-curve">贝塞尔曲线（Bézier curve）</h2>
<p><a href="https://www.jasondavies.com/animated-bezier/"><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220513132345112.png"
alt="点击图片可查看动画" /></a></p>
<h3 id="定义">定义</h3>
<p><span class="math display">\[
\begin{split}
P(t) &amp;= \sum_{i=0}^{n}P_i \cdot B_{i,n}(t),t \in [0,1] \\
B_{i,n}(t) &amp;=
C_n^it^i(1-t)^{n-i}=\frac{n!}{i!(n-i)!}t^i(1-t)^{n-i},i
\in[0,1,\cdot\cdot\cdot,n]
\end{split}
\]</span> ### 理解</p>
<h4 id="参数说明">参数说明</h4>
<ol type="1">
<li><p><span class="math inline">\(t\)</span></p>
<p>参数 <span class="math inline">\(t\)</span> 是隐函数 <span
class="math inline">\(P(t)\)</span> 的参数，它的值域是
[0,1]，在计算机中，通过将 <span class="math inline">\(t\)</span> 从 0
递增到 1，来生成贝塞尔曲线上的点，因此 <span
class="math inline">\(t\)</span> 的步长越短，其生成的曲线越光滑</p></li>
<li><p><span class="math inline">\(P_i\)</span></p>
<p><span class="math inline">\(P_i\)</span> 是由用户给定的控制点，下标
<span class="math inline">\(i\)</span> 代表点的顺序</p></li>
<li><p><span class="math inline">\(C_n^i\)</span></p>
<p><span class="math inline">\(C_n^i\)</span> 称为二项式系数。</p>
<p>二项式展开定义如下： <span class="math display">\[
\begin{split}
(a+b)^n = \sum_i^n C_n^i a^{n-i} b^i
\end{split} = \sum_i^n \frac{n!}{i!(n-i)!}\cdot a^{n-i} \cdot b^i
\]</span></p></li>
<li><p><span class="math inline">\(B_{i,n}(t)\)</span></p>
<p>这个叫做贝塞尔曲线的基函数，它的计算公式见上面的公式。<span
class="math inline">\(\sum_i^n B_{i,n}(t)\)</span> 是二项式 <span
class="math inline">\((t+(1-t))^n\)</span> 的展开公式。</p>
<p><span class="math inline">\(i\)</span> 代表点的序号，从 0 开始；<span
class="math inline">\(n\)</span> 叫次数（degree）。</p>
<p>如果点的数量为 p，则 <span class="math inline">\(n\)</span> 与 <span
class="math inline">\(p\)</span> 的关系为 <span
class="math inline">\(n=p-1\)</span>。</p></li>
</ol>
<h4 id="其它说明">其它说明</h4>
<ol type="1">
<li>一条贝塞尔曲线是由多个控制点共同决定的，n（次数）决定了生成一条曲线需要使用多少个控制点。</li>
<li>复杂形状通常要将多条贝塞尔曲线拼接在一起表达。</li>
</ol>
<h4 id="线性贝塞尔曲线">线性贝塞尔曲线</h4>
<p>线性曲线的次数为1，其所需要的控制点为 2 个，假设为 <span
class="math inline">\(P_0,P_1\)</span> <span class="math display">\[
\begin{split}
P(t) &amp;= \sum_{i=0}^{n}P_iB_{i,n}(t)=P_0 B_{0,1}(t)+P_1 B_{1,1}(t) \\
\therefore P_t &amp;= P_0 \cdot \frac{1!}{0!(1-0)!}t^0(1-t)^{1-0}+
P_1 \cdot \frac{1!}{1!(1-1)!}t^1(1-t)^{1-1} \\
&amp; 又 \because 0! = 1 \\
\therefore P_t &amp;= P_0 \cdot (1-t)+P1\cdot t = P_0+t\cdot(P_1-P_0)
\end{split}
\]</span></p>
<h4 id="异形曲线">异形曲线</h4>
<p>为了能够表达复杂的异形曲线，我们将多条贝塞尔曲线连接在一起，在连接处保证其几何连续，这样就形成了一条复杂的贝塞尔曲线了。</p>
<h3 id="性质">性质</h3>
<ol type="1">
<li><p>各项系数之和为1 这个很好理解,因为系数 <span
class="math inline">\(\sum_i^n B_{i,n}(t)\)</span> 是二项式 <span
class="math inline">\((t+(1-t))^n\)</span> 的展开，所以其值始终为
1</p></li>
<li><p>对称性 第 <span class="math inline">\(i\)</span> 项系数和倒数第
<span class="math inline">\(i\)</span> 项系数（即 <span
class="math inline">\(n-i\)</span> 项）相同</p></li>
<li><p>递归性 递归性指其系数满足下式： <span class="math display">\[
B{i,n}(t) = (1-t)B_{i,n-1}(t)+tB_{i-1,n-1}(t),i \in
[0,1,\cdot\cdot\cdot,n]
\]</span></p></li>
<li><p>凸包性质
贝塞尔曲线始终会在<strong>包含了所有控制点的最小凸多边形</strong>中，不是按照控制点的顺序围成的最小多边形。这点大家一定注意。</p>
<p>这一点的是很关键的，也就是说可以通过控制点的凸包来限制规划曲线的范围，在路径规划是很需要的一个性质。</p></li>
<li><p>端点性质
第一个控制点和最后一个控制点，恰好是曲线的起始点和终点。这一点可以套用二项式展开来理解，ｔ＝１或者０的时候，相乘二项式的系数，除了初始点或者末尾点，其余的都是０。</p></li>
<li><p>一阶导数性质</p></li>
</ol>
<h2 id="b样条曲线b-spline">B样条曲线（B-Spline）</h2>
<p>贝塞尔曲线有很多优点，但也有几个不足之处：</p>
<p>（1）一旦确定了特征多边形的顶点数，就决定了曲线的阶数。当数据点的数量太多时，计算量急剧增加。</p>
<p>（2）由于光滑性很高，反而导致拼接比较复杂。</p>
<p>（3）无法做局部修改，这是一个很大的局限性，牵一发而动全身。</p>
<p>1972年，在贝塞尔提出他的方法十年后，Gordon和Riesenfeld等人又提出了B样条方法，在保留了贝塞尔方法的全部优点的同时，克服了以上三大缺点。</p>
<p>B样条曲线有如下性质：</p>
<ol type="1">
<li>可以指定阶次</li>
<li>移动控制点仅仅改变曲线的部分形状，而不是整体</li>
</ol>
<h3 id="定义-1">定义</h3>
<p>b 样条曲线有很多种定义方式，相对简单的表达是 de Boor-Cox
递归公式，其定义如下：</p>
$$
<span class="math display">\[\begin{split}
P(t) &amp;= \sum_{i=0}^{n}P_i \cdot N_{i,k}(t),t \in [t_{k-1},t_{n+1}]
\\

N_{i,1}(t) &amp;= \left\{
\begin{array}{left}
1 \ ,t_i&lt;t&lt;t_{i+1} \\
0 \ ,Otherwise
\end{array}
\right.  ，注意，N_{i,1}(t) 中的 1 代表阶\\

N_{i,k}(t) &amp;=\frac{t-t_i}{t_{i+k-1}-t_i}\cdot
N_{i,k-1}(t)+\frac{t_{i+k}-t}{t_{i+k}-t_{i+1}}\cdot N_{i+1,k-1}(t) \\

&amp; 同时约定: \frac{0}{0} = 0
\end{split}\]</span>
<p>$$</p>
<h3 id="理解">理解</h3>
<h4 id="参数">参数</h4>
<ol type="1">
<li><p><span class="math inline">\(P(t)\)</span></p>
<p>曲线上的点</p></li>
<li><p>t</p>
<p>隐式方程的参数，与贝塞尔曲线的 t 相同</p></li>
<li><p><span class="math inline">\(P(i)\)</span></p>
<p>用户给定的控制点</p></li>
<li><p>n</p>
<p>控制点数组中下标的最大值，其值等于控制点的总数减 1</p></li>
<li><p>i</p>
<p>每一个控制点的下标</p></li>
<li><p>k</p>
<p>代表 b 样条曲线的阶数。</p>
<p>阶数的表达的意义是：</p>
<ul>
<li><strong>b 样条必须有 k 个基函数才有意义</strong></li>
<li>每个基函数的定义域跨越了 k 个区间</li>
</ul>
<p>特别注意，上面的表达式中用的是阶，而在有的文章里面，是用次来表示的，阶与次都是同一个概念，只是它们的值不一样，阶(order)=次(degree)+1。</p>
<p>为什么会出现阶和次两种表达方式呢？</p>
<p>在图形学中，有两个很著名的教授，一个叫 G Farin，一个叫 Les
Piegl，他们分别是 Computer Aided Geometric Design 和 Computer Aided
Design 杂志的主编。这两位主编分别写了一本书，G Farin 叫 k 阶 b
样条曲线，Les Piegl 叫 k 次 b 样条曲线。</p>
<p>这两个概念大家都在用，所以就导致了这种不同名称的定义。</p></li>
<li><p><span class="math inline">\(N_{i,k}(t)\)</span></p>
<p>表示第 <span class="math inline">\(i\)</span> 个 <span
class="math inline">\(k\)</span>
阶（order）B样条基函数。它是由节点向量（knot vector）唯一决定的。</p>
<p><strong>特别注意，上面的分段函数是 <span
class="math inline">\(N_{i,1}(t)\)</span></strong></p>
<p>通过 <span class="math inline">\(N_{i,k}(t)\)</span>
的公式，我们可以作如下推导： <span class="math display">\[
\begin{split}
N_{i,k}(t) &amp;=\frac{t-t_i}{t_{i+k-1}-t_i}\cdot
N_{i,k-1}(t)+\frac{t_{i+k}-t}{t_{i+k}-t_{i+1}}\cdot N_{i+1,k-1}(t)
\\
&amp;= \frac{t-t_i}{t_{i+(k-1)}-t_i}\cdot N_{i,k-1}(t) +
\frac{t_{(i+1)+(k-1)}-t}{t_{(i+1)+(k-1)}-t_{i+1}}\cdot N_{i+1,k-1}(t)
\end{split}
\]</span> 通过上式，可以知 <span
class="math inline">\(N_{i,k}(t)\)</span> 其实是 <span
class="math inline">\(N_{i,k-1}(t)\)</span> 在区间 <span
class="math inline">\([t_i,t_{i+k-1}]\)</span> 上的插值加上 <span
class="math inline">\(N_{i+1,k-1}(t)\)</span> 在区间 <span
class="math inline">\([t_{i+1},t_{i+1+k-1}]\)</span> 上的插值。</p>
<p>更通俗地讲就是，第 i 个 k 阶基函数是第 i 和 i+1 个 k-1
阶基函数的线性插值。</p></li>
<li><p>节点向量</p>
<p>设 T 是 m+ 1 个非递减数的集合，<span class="math inline">\(t_0 &lt;=
t_1 &lt;= t_2&lt;= ... &lt;= t_m\)</span>。<span
class="math inline">\(t_i\)</span>称为<strong>节点（knots）</strong>,
集合 T 称为<strong>节点向量（knot vector）</strong>, 半开区间 <span
class="math inline">\([t_i,t_{i+1}]\)</span> 是第 <em>i</em>
个节点区间（<em>knot span</em>）</p>
<p>节点向量本质就是一组非减的实数序列，一般取 [0,1]。</p>
<p>看到此处，可能会很疑惑，为什么需要定义节点向量，节点向量有什么作用呢？后文将会一一道来。</p></li>
<li><p>重复度</p>
<p>在节点向量（节点数组）中，如果某一个节点连续出现 m
次，则称该节点的重复度为 m。</p></li>
</ol>
<h4 id="示例">示例</h4>
<p>为了方便理解 b样条曲线，我们先计算一些低阶曲线。</p>
<ol type="1">
<li><p>第 0 个 1 阶基函数 <span
class="math inline">\(N_{0,1}（i=0,k=1）\)</span></p>
<p>当 <span class="math inline">\(t_i&lt;t&lt;t_{i+1}\)</span> 时，即
<span class="math inline">\(t_i\)</span> 在区间 <span
class="math inline">\([t_0,t1]\)</span> 上时，有：</p></li>
</ol>
<p><span class="math display">\[
\begin{equation}
N_{0,1}(t) = \left\{
\begin{array}{left}
1 \ ,t_0&lt;t&lt;t_{1} \\
0 \ ,Otherwise
\end{array}
\right.
\end{equation}
\]</span></p>
<ol start="2" type="1">
<li><p>第 1 个 1 阶基函数 <span
class="math inline">\(N_{1,1}（i=1,k=1）\)</span> <span
class="math display">\[
\begin{equation}
N_{1,1}(t) = \left\{
\begin{array}{left}
1 \ ,t_1&lt;t&lt;t_{2} \\
0 \ ,Otherwise
\end{array}
\right.
\end{equation}
\]</span></p></li>
<li><p>第 0 个 2 阶基函数 <span
class="math inline">\(N_{0,2}（i=0,k=2）\)</span> <span
class="math display">\[
\begin{split}
N_{0,2}(t) = \frac{t-t_0}{t_1-t_0}\cdot N_{0,1}(t) +
\frac{t_2-t}{t_2-t_1}\cdot N_{0,1}(t)
\end{split}
\]</span></p></li>
</ol>
<h3 id="节点向量的作用">节点向量的作用</h3>
<p>首先抛出一个定义，节点向量是对 <span class="math inline">\(t\)</span>
定义域的一个划分。</p>
<p>因为节点向量是是分段的，基函数在仅在某些段上有值，所以公式 <span
class="math inline">\(P(t) = \sum_{i=0}^{n}P_i \cdot N_{i,k}(t)\)</span>
中实际参与组合的点并不是全部（实际上只有 k 个，文会详细解释）。</p>
<p>因此，节点区间通过控制基函数是否为 0，来确定计算 b
样条曲线上的点时，采用哪些控制点。</p>
<p>在生成曲线的时候，将 t
从小到大变化，从而得到曲线上的一系列点，它的详细步骤如下：</p>
<ol type="1">
<li>根据 t，确定 t 所在的节点区间 <span
class="math inline">\(T_i\)</span></li>
<li>通过迭代公式，求出每个点在该区间（<span
class="math inline">\(T_i\)</span>）上的基函数</li>
<li>将每个基函数与对应的控制点相乘取和，得到曲线上实际的点</li>
</ol>
<h3 id="节点向量的取值">节点向量的取值</h3>
<p>上文讲到节点向量是一组非减实数序列，从插值公式中可以知道，向量中的每个节点大小不会影响结果，影响结果的是两个节点的步长。</p>
<p>因此，节点向量可以是任意实数序列。</p>
<p>那么步长怎么确定呢？</p>
<h3 id="节点向量的步长取值">节点向量的步长取值</h3>
<p>上面一节讲到，b
样条上每个点只与节点向量的步长有关，因此，根据设置不同的步长，b
样条就会产生不同的效果。</p>
<p>如果节点向量没有任何特别的结构，那么产生的曲线不会与控制折线（<em>polyline</em>）的第一边（<em>leg</em>）和最后一边（<em>leg</em>）接触，如下面图所示。</p>
<figure>
<img data-src="http://www.cs.mtu.edu/~shene/COURSES/cs3621/NOTES/spline/B-spline/bs-cv-open-1.jpg"
alt="open" />
<figcaption aria-hidden="true">open</figcaption>
</figure>
<p>这种类型的<em>B-</em>样条曲线称为开（<strong>open</strong> ）b
样条曲线。</p>
<p>我们可能想强制曲线使得它分别与第一个控制点和最后一个控制点的第一边和最后一边相切，像贝塞尔曲线那样。为了做到这些，第一个节点和最后一个节点必须是重复度为
<span class="math inline">\(k(代表阶数)\)</span>。这就产生了所谓的
<strong>clamped</strong> b 样条曲线。参见下图。</p>
<figure>
<img data-src="http://www.cs.mtu.edu/~shene/COURSES/cs3621/NOTES/spline/B-spline/bs-cv-clamped-1.jpg"
alt="clamped" />
<figcaption aria-hidden="true">clamped</figcaption>
</figure>
<p>通过重复某些节点和控制点，产生的曲线会是闭（<strong>closed</strong>）曲线。
这种情况，产生的曲线的开始和结尾连接在一起形成了一个闭环如下图所示。</p>
<figure>
<img data-src="http://www.cs.mtu.edu/~shene/COURSES/cs3621/NOTES/spline/B-spline/bs-cv-closed-1.jpg"
alt="close" />
<figcaption aria-hidden="true">close</figcaption>
</figure>
<h3 id="节点的个数确定">节点的个数确定</h3>
<p>从公式定义中，可以得知，第 i 个 k 阶 b 样条曲线的基函数等于第 i 个
k-1 阶基函数和第 i+1 个 k-1
阶基函数的线性插值。它们的关系可以用下图来表示。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220705222132936.png" style="max-width:400px"></p>
<p>从上图中，我们可以看到，如果要求第 0 个 5 阶 b 样条函数基函数，则需要
5 个 1 阶基函数，需要 6 个节点。由此，可以得到如下结论： <span
class="math display">\[
结点数量(KnotsCount) = 控制点数量(PointCount)+阶数k(order)
\]</span></p>
<h3 id="有效定义区间">有效定义区间</h3>
<p>上面在解释 k 这个符号的时候，提到了 k 阶的概念。</p>
<p>一个 k 阶 b 样条，它必须有 k 个基函数才有意义，所以，一个 b
样条曲线的有效定义区间必须包含 k 个 基函数定义。</p>
<p>从公式 <span class="math display">\[
\begin{split}
   P(t) = \sum_{i=0}^{n}P_i \cdot N_{i,k}(t),t \in [t_{k-1},t_{n+1}]
   \end{split}
\]</span>
可以看出，曲线上的点是通过每个点乘以其基函数然后进行相加，从3.6节的计算图中我们可以看到，每个点的基函数的计算仅使用了有限个区间，比如
<span class="math inline">\(N_{0,2}(t)\)</span> 使用的区间为 <span
class="math inline">\([t_0,t_2)\)</span>。</p>
<p>因此，我们可以将一个高阶基函数用 1 阶基函数来表示： <span
class="math display">\[
\begin{split}
   N_{i,k}(t) &amp;= \sum_{i}^{i+k-1}C_i(t) \cdot N_{i,1}(t), \ t \in
[t_i,t_{i+k}) \\
  C_{i}(t) &amp;-一阶基函数系数
   \end{split}
\]</span></p>
<p>从上式可以看出，k 阶基函数跨越了 <span class="math inline">\((i+k)-i
= k\)</span> 个区间。</p>
<p>假设一个 4 阶 b 样条有 5
个控制点，其基函数的区间可以用下图来表示：</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220707124032974.png"
alt="image-20220707124032974" />
<figcaption aria-hidden="true">image-20220707124032974</figcaption>
</figure>
<p>从图中我们发现，仅在 <span class="math inline">\([t_3,t_5]\)</span>
区间上存在 4 个基函数，所以仅在该区间上，b 样条曲线才有定义。</p>
<p>推而广之，我们就得到，一个有 (n+1) 个控制点的 k 阶 b
样条曲线的有效定义区间为 <span
class="math inline">\([t_{k-1},t_{n+1}]\)</span>。</p>
<h3 id="b-样条本质">b 样条本质</h3>
<p>b 样条曲线的本质是由多个 k-1 次多项式组合而成，这些分段曲线之间 k-2
次连续。</p>
<p>假设一个 4 阶 b 样条有 5 个控制点，任意点公式可以写成： <span
class="math display">\[
\begin{split}
   P(t) =
N_{0,k}(t)P_0+N_{1,k}(t)P_1+N_{2,k}(t)P_2+N_{3,k}(t)P_3+N_{4,k}(t)P_4
\end{split}
\]</span> 由于是 4 阶 5 点，所以有 9 个节点，8
个节点区间，因此可以画出基函数的有效区间图如下：</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220707124032974.png"
alt="image-20220707124032974" />
<figcaption aria-hidden="true">image-20220707124032974</figcaption>
</figure>
<p>所以，可以得到下列分段函数</p>
<table>
<colgroup>
<col style="width: 9%" />
<col style="width: 12%" />
<col style="width: 70%" />
<col style="width: 7%" />
</colgroup>
<thead>
<tr class="header">
<th>区间序号</th>
<th>定义域</th>
<th>公式</th>
<th>有效性</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td><span class="math inline">\([t_0,t_1)\)</span></td>
<td><span class="math inline">\(P(t) = N_{0,k}(t)P_0\)</span></td>
<td>无效</td>
</tr>
<tr class="even">
<td>2</td>
<td><span class="math inline">\([t_1,t_2)\)</span></td>
<td><span class="math inline">\(P(t) =
N_{0,k}(t)P_0+N_{1,k}(t)P_1\)</span></td>
<td>无效</td>
</tr>
<tr class="odd">
<td>3</td>
<td><span class="math inline">\([t_2,t_3)\)</span></td>
<td><span class="math inline">\(P(t) =
N_{0,k}(t)P_0+N_{1,k}(t)P_1+N_{2,k}(t)P_2\)</span></td>
<td>无效</td>
</tr>
<tr class="even">
<td>4</td>
<td><span class="math inline">\([t_3,t_4)\)</span></td>
<td><span class="math inline">\(P(t) =
N_{0,k}(t)P_0+N_{1,k}(t)P_1+N_{2,k}(t)P_2+N_{3,k}(t)P_3\)</span></td>
<td>有效</td>
</tr>
<tr class="odd">
<td>5</td>
<td><span class="math inline">\([t_4,t_5)\)</span></td>
<td><span class="math inline">\(P(t) =
N_{1,k}(t)P_1+N_{2,k}(t)P_2+N_{3,k}(t)P_3+N_{4,k}(t)P_4\)</span></td>
<td>有效</td>
</tr>
<tr class="even">
<td>6</td>
<td><span class="math inline">\([t_5,t_6)\)</span></td>
<td><span class="math inline">\(P(t) =
N_{3,k}(t)P_3+N_{4,k}(t)P_4\)</span></td>
<td>无效</td>
</tr>
<tr class="odd">
<td>7</td>
<td><span class="math inline">\([t_6,t_7)\)</span></td>
<td><span class="math inline">\(P(t) =
N_{3,k}(t)P_3+N_{4,k}(t)P_4\)</span></td>
<td>无效</td>
</tr>
<tr class="even">
<td>8</td>
<td><span class="math inline">\([t_7,t_8)\)</span></td>
<td><span class="math inline">\(P(t) = N_{4,k}(t)P_4\)</span></td>
<td>无效</td>
</tr>
</tbody>
</table>
<p>从表中可以看出，5个控制点的 4 阶 b样条曲线仅在第 4 和 5
个节点区间上生成曲线。</p>
<h3 id="性质-1">性质</h3>
<ol type="1">
<li><p>非负性</p>
<p><span class="math inline">\(N_{i,k}(t)\)</span> 是非负的</p></li>
<li><p>局部支持性</p>
<ul>
<li>区间 <span class="math inline">\([t_i,t_i+1]\)</span>
上的曲线仅至多由 k 个控制</li>
</ul></li>
</ol>
<ul>
<li><p><span class="math inline">\(P_j,j \in [i-k+1,...,i]\)</span>
决定</p></li>
<li><p><span class="math inline">\(P_i\)</span> 只影响在区间 <span
class="math inline">\([t_i,t_i+k)\)</span> 上的曲线。</p></li>
</ul>
<ol type="1">
<li><p>归一性</p>
<p>区间 <span class="math inline">\([t_{k-1},t_{n+1}]\)</span> 上的所有
k 阶分段非零基函数的和为 1 <span class="math display">\[
\sum_i^n N_{i,k}(t) = 1,\ t \in [t_{k-1},t_{n+1}]
\]</span></p></li>
<li><p>可求导 <span class="math display">\[
N_{i,k}^{&#39;}(t) = \frac{k-1}{t_{i+k-1}-t_i}\cdot
N_{i,k-1}(t)+\frac{k-1}{t_{i+k}-t_{i+1}} \cdot N_{i+1,k-1}(t)
\]</span> 为什么分子是 k-1 呢？</p>
<p>因为 k 阶基函数是一个 k-1
次函数，在对其求导的时，其次数作为导数的系数，所以是 k-1</p></li>
<li><p>连续性</p>
<p><span class="math inline">\(P(t)\)</span> 在每一个重复度为 r
的节点上具有 <span class="math inline">\(C^{k-1+r}\)</span> 的连续性</p>
<p><span class="math inline">\(C^{k-1+r}\)</span> 表示具有 <span
class="math inline">\(k-1+r\)</span> 次（degree）连续。C 是 Continue
的首字母。</p></li>
<li><p>凸包性</p>
<p>一个 b 样条曲线被包围在其控制顶点的凸包内部。更精确地，对区间
$[t_i,t_{i+1}],k-1 i n $ 上的任何 t，<span
class="math inline">\(P(t)\)</span> 都在控制点 <span
class="math inline">\(P_{i-k+1},...,P_i\)</span> 的凸包内部。</p></li>
<li><p>分段多项式性质</p>
<p>在任何一个由相邻结点确定的节点区间（knot span）上，<span
class="math inline">\(P(t)\)</span> 是一个关于 t 的次数不超过 k
的多项式。</p></li>
<li><p>变差缩减性（Variation Diminishing Property）</p>
<p>任何曲一条直线与 B 样条曲线的交点数量不会超过该直线与 B
样条曲线的控制多边形的交点的数量。</p></li>
<li><p>几何不变性</p>
<p>曲线的形状和相对于控制点的位置不取决于坐标系的选择。</p></li>
<li><p>仿射不变性</p>
<p>将仿射变换作用于等式两边，等式依然成立 <span class="math display">\[
A[P(t)]= \sum_i^nA[P_i]N_{i,k}(t),t \in [t_{k-1},t_{n+1}]
\]</span></p></li>
<li><p>直线保持性</p>
<p>如果控制多边形退货成为一条直线，那么 B
样条曲线依然在这条直线上。</p></li>
</ol>
<h3 id="分类">分类</h3>
<p>根据起起终点是否重合，可分为:</p>
<ol type="1">
<li><p>开曲线</p>
<p>起终点不重合的曲线</p></li>
<li><p>闭曲线</p>
<p>起终点重合的曲线</p></li>
</ol>
<p>根据节点向量的分布，又可为分为：</p>
<ol type="1">
<li>均匀 b 样条曲线</li>
<li>非均匀 b 样条曲线</li>
<li>分段 Bezier 曲线</li>
<li>非均匀无理 b 样条曲线</li>
</ol>
<h3 id="均匀uniform-b-样条曲线">均匀（uniform） b 样条曲线</h3>
<p>当节点成等差数列均匀排列时，这样形成的 b 样条曲线就叫均匀 b
样条曲线。</p>
<p>例如：<span class="math inline">\(\vec{T} =
[0,1,2,3,4,5,6,7]\)</span></p>
<p>均匀 b 样条曲线有一个非常重要的特点，先上图：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220707133020413.png" style="max-width:400px"></p>
<p>均匀 b 样条曲线的起点位于 B 点垂直于AC两个点连线的 1/3 处，方向为
<span class="math inline">\(\vec{AC}\)</span>，终点位于 D 点垂直于 CE
两个点连线的 1/3，方向为 <span
class="math inline">\(\vec{CE}\)</span>。</p>
<p>均匀 b 样条的一个特点是：</p>
<p><strong>均匀 b 样条曲线一定通过非端点垂直于它前后两个点连线的 1/3
处，且其方向与前后两个点的连线相切。</strong></p>
<h3 id="准均匀quasi-uniform-b-样条曲线">准均匀（quasi-uniform） b
样条曲线</h3>
<p>k 阶准均匀 b 样条曲线有以下特点：</p>
<ol type="1">
<li>它的起终点分别为控制点的起终点</li>
<li>起始节点与终止节点都有 k 个重复度</li>
</ol>
<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220707134509292.png" style="max-width:400px"></p>
<blockquote>
<p>小提示：</p>
<p>如果想让 b 样条曲线经过起终点，可以让起始节点都具有 k 个重复度</p>
</blockquote>
<h3 id="分段-bezier-曲线">分段 Bezier 曲线</h3>
<p>当 b 样条曲线具有如下特点时，它就是分段 Bezier 曲线：</p>
<ul>
<li>起终节点具有 k 个重复度</li>
<li>所有其它节点具有 k-1 个重复度</li>
</ul>
<h3 id="曲线包含线段">曲线包含线段</h3>
<p>如果需要在样条曲线中包含一条线段，只需要指定 k(阶数)
个控制顶点共线。</p>
<p>如果要保证插入的直线在控制点范围内是一条直线，还必须保证线段的首尾点分别具有
1 个重复度。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220709181500332.png"
alt="image-20220709181500332" />
<figcaption aria-hidden="true">image-20220709181500332</figcaption>
</figure>
<p>左图是仅 3 个点共线，右图是 3 个点共线且共线的首尾点重复 1 次。</p>
<h3 id="曲线经过控制点">曲线经过控制点</h3>
<p>通过均匀 b 样条的特点可以知，如果 3 个点相同（这种重复3次的点，叫做 3
重点），则曲线经过该点。</p>
<p>因为 3 个点相同，所以它们的连线与垂线都位于这个点上。</p>
<h3 id="曲线与某直线l相切">曲线与某直线L相切</h3>
<p>如果希望某段曲线与某直线 L 相切，需满足以下条件：</p>
<ul>
<li><span class="math inline">\(P_i,P_{i+1},P_{i+2}\)</span>
都在直线上</li>
<li><span class="math inline">\(t_{i+3}\)</span> 重复度小于 2</li>
</ul>
<p>因此，如果想要曲线与两个控制点的连线相切，可以通过添加一个相同的控制点，将两个点变成
3 个点，因为有一个点是重复的，所以 3
个点必然在一条直线上，这样就达到了曲线与直线相切的条件了。</p>
<h3 id="闭曲线">闭曲线</h3>
<p>构件闭曲线的方式有很多种，此处只介绍一种简单的方法：重复起始节点法。</p>
<p>假设我们想要构建一个由 n+1 个控制点 <span
class="math inline">\([P_0,P1,...,P_n]\)</span> 定义的 k 次闭 B 样条曲线
<span class="math inline">\(C_t\)</span>。构建过程如下：</p>
<ol type="1">
<li>增加一个新控制点 <span
class="math inline">\(P_{n+1}=P_0\)</span>，因此控制点的数目是 <span
class="math inline">\(n+2\)</span>。</li>
<li>按开曲线方式，增加 n+k+1 个节点 <span
class="math inline">\([t_0,t_1,...,t_{n+k}]\)</span>。这些节点可以不需要是均匀的。</li>
<li>将前 p-1 节点复制到节点序列末尾，最终结果为：<span
class="math inline">\(t_0,t_1,...,t_n+k,t_0,t_1,...,t_{k-1}]\)</span></li>
</ol>
<p>通过对比开闭曲线，我们可以得到如下规律：</p>
<ul>
<li><p>开曲线：节点数量=控制点数量+阶数</p></li>
<li><p>闭曲线：节点数量=控制点数量+2x阶数</p></li>
</ul>
<blockquote>
<p>小提示：在 Microstation
软件中，生成闭曲线时不需要在末尾增加第一个点</p>
</blockquote>
<h2 id="非均匀有理b样条曲线nurbs">非均匀有理B样条曲线（NURBS）</h2>
<h3 id="order阶数">Order（阶数）</h3>
<p>NURBS曲线的 order 定义了影响曲线上任何给定点附近的控制点的数量。</p>
<p>这条曲线用比 order 小 1 次的多项式表示。 因此，order 为 2
时表示线性曲线，order 为 3 时表示二次曲线。</p>
<blockquote>
<p>控制点的个数必须大于或等于曲线的 order。</p>
</blockquote>
<p>在实践中，三次曲线是最常用的曲线。
五阶和六阶曲线有时是有用的，特别是对于获得连续的高阶导数，但高阶曲线实际上从未使用过，因为它们会导致内部数值问题，往往需要大量的计算时间。</p>
<h3 id="control-point-与-knot">Control Point 与 Knot</h3>
<p>这两个概念与 b 样条的概念是一样的</p>
<h3 id="weight">Weight</h3>
<p>nurbs 还有一个特殊的参数权重（weight），权重范围是
[0，100]，正常权重是 1，值越大，控制点对曲线影响越在，越靠近点，值为 0
值，控制点对曲线没有影响，相当于没有这个控制点。</p>
<h2 id="bézierb-splinenurbs-区别">Bézier、B-Spline、NURBS 区别</h2>
<p>Bezier
曲线中的每个控制点都会影响整个曲线的形状，而B样条中的控制点只会影响整个曲线的一部分，显然
B样条提供了更多的灵活性</p>
<p>Bezier和B样条都是多项式参数曲线，不能表示一些基本的曲线，比如圆，所以引入了
NURBS，即非均匀有理B样条来解决这个问题</p>
<p>Bezier 曲线只是 B样条的一个特例而已，而 B样条又是 NURBS
的一个特例，它们的关系可以图示为：</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/relationshipAmongCurves.png"
alt="relationshipAmongCurves" />
<figcaption aria-hidden="true">relationshipAmongCurves</figcaption>
</figure>
<h2
id="msbsplinecurvemicrostation中的对象">MSBsplineCurve（Microstation中的对象）</h2>
<p>它是一条非均匀有理B样条曲线，简称（NURBS）。</p>
<blockquote>
<p>MSBsplineCurve is a "Non uniform, rational Bspline curve".</p>
</blockquote>
<h3 id="pole-and-knot-counts">Pole and knot counts</h3>
<table>
<thead>
<tr class="header">
<th>曲线类型</th>
<th>关系</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Open curve （非闭合曲线）</td>
<td>knots = poles + order</td>
</tr>
<tr class="even">
<td>Closed (periodc) curve （闭合线）</td>
<td>knots = poles + 2 * order - 1</td>
</tr>
</tbody>
</table>
<h3 id="b样条曲线上的参数化位置">B样条曲线上的参数化位置</h3>
<p>有两种方法来确定 B 样条曲线的位置，分别是通过 Fraction 和 Knot
点。</p>
<table>
<colgroup>
<col style="width: 15%" />
<col style="width: 15%" />
<col style="width: 16%" />
<col style="width: 53%" />
</colgroup>
<thead>
<tr class="header">
<th>Convention</th>
<th>start value</th>
<th>end value</th>
<th>remarks</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Fraction position</td>
<td>一直是 0.0</td>
<td>一直是 1.0</td>
<td>这个值不是沿曲线线性变化的。如果想要获取等分点，需要先通过<code>FractionAtSignedDistance</code>
获取 Fraction，然后再通过 Fraction 去获取点。</td>
</tr>
<tr class="even">
<td>Knot postion</td>
<td>第一个激活的 Knot</td>
<td>最后一个激活的 Knot</td>
<td>“激活”的意思是除去(order-1)开头和结尾的Knot后剩余的中间 Knot</td>
</tr>
</tbody>
</table>
<p>The word Fraction or Knot in a method name indicates how the
arguments for that method are interpreted.</p>
<h3 id="通过控制点的-b-样条曲线">通过控制点的 b 样条曲线</h3>
<p>Microstation 中可以通过控制点创建 b
样条曲线，这个实现目前没有找到相关资料，今后发现了之后再更新本节。</p>
<h2 id="源代码">源代码</h2>
<p>本文使用的一些代码示例（基于 Microstation 平台）位于<a
href="https://github.com/GalensGan/ArticleSourceCode/tree/master/ArticleSourceCode/Bspline">ArticleSourceCode-Bspline</a>
中。</p>
<h2 id="参考">参考</h2>
<p><a href="https://www.bilibili.com/video/BV1cW411a7yB">计算机图形学 13
和 14 - B 样条曲线-bilibili (建议先看完)</a></p>
<p><a
href="https://www.zhihu.com/question/29565629">怎么理解贝塞尔曲线？</a></p>
<p><a
href="https://zh.m.wikipedia.org/zh-hans/%E9%9D%9E%E5%9D%87%E5%8C%80%E6%9C%89%E7%90%86B%E6%A0%B7%E6%9D%A1">非均匀有理B样条-Wikipedia</a></p>
<p><a href="http://www.whudj.cn/">Fun With Geometry</a></p>
<p><a
href="https://en.wikipedia.org/wiki/Non-uniform_rational_B-spline">NURBS-非均匀有理B样条</a></p>
<p><a
href="https://pages.mtu.edu/~shene/COURSES/cs3621/NOTES/">Introduction
to Computing with Geometry Notes</a></p>
<p><a
href="https://zhuanlan.zhihu.com/p/50626506">B-样条曲线入门</a></p>
<p><a
href="https://blog.csdn.net/tuqu/article/details/5402645">B-样条曲线：系数计算</a></p>
<p><a
href="https://juejin.cn/post/6844904170256859143">深入理解B样条曲线（上）</a></p>
<p><a
href="https://pages.mtu.edu/~shene/COURSES/cs3621/NOTES/spline/B-spline/bspline-curve-closed.html">B-spline
Curves: Closed Curves</a></p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>几何变换</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
        <tag>Bentley二次开发</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>Microstation 中坐标变换</title>
    <url>/posts/2024/1EMPAND.html</url>
    <content><![CDATA[<p>在进行矩阵转换时，谨记如下公式： <span class="math display">\[
\begin{aligned}
M_{world} \cdot P_{world} &amp;= M_{local} \cdot P_{local} \\
\because M_{world} &amp;= E \\
\therefore P_{world} &amp;= M_{local} \cdot P_{local} \\
\end{aligned}
\]</span> <span class="math inline">\(M\)</span>
可以叫做坐标系的度量矩阵，将某个坐标系统转到另一个坐标系，是在原坐标系的值上左乘新坐标系度量矩阵的逆。</p>
<p>在理解 MS 中各个对象返回的 <code>DTransform</code>
含义时，先弄明白谁是度量矩阵，另一个是它的逆，就很好理解了。</p>
<span id="more"></span>
<h2 id="度量矩阵">度量矩阵</h2>
<p><a
href="https://baike.baidu.com/item/度量矩阵/1052455">度量矩阵_百度百科
(baidu.com)</a> 是指<a
href="https://baike.baidu.com/item/欧氏空间/8282013?fromModule=lemma_inlink">欧氏空间</a>的一组基之间的<a
href="https://baike.baidu.com/item/内积/422863?fromModule=lemma_inlink">内积</a>作为元素构成的矩阵。</p>
<p>在三维空间中，假设 3 组基向量分别为 <span
class="math inline">\(\vec{X}=(xx,xy,xz)\)</span>、<span
class="math inline">\(\vec{Y}=(yx,yy,yz)\)</span>、<span
class="math inline">\(\vec{Z} = (zx,zy,zz)\)</span>；原点为 <span
class="math inline">\(O=(wx,wy,wz)\)</span>；</p>
<p>则度量矩阵表示为： <span class="math display">\[
M = \begin{bmatrix}
xx &amp; yx &amp; zx &amp; wx \\
xy &amp; yy &amp; zy &amp; wy \\
xz &amp; yz &amp; zz &amp; wz \\
0 &amp; 0 &amp; 0 &amp; 1
\end{bmatrix}
\]</span> <span class="math inline">\(M\)</span>
为非奇异矩阵，添加最后一行是为了构成方阵，使得矩阵的秩为满秩。方便程序进行计算。</p>
<h2 id="矩阵生成">矩阵生成</h2>
<p>在 Microstation 中，主要有两种方式表示矩阵，分别为
<code>DMatrix</code> 系列和 <code>DTransform</code>
系列。<code>DMatrix</code> 系列有
<code>DMatrix2d/DMatrix3d/DMtrix4d</code>，它是 Microstation
提供的最基础的矩阵操作结构体，其提供的功能有限，在实际的开发中一般使用
<code>DTransform</code> 系列。</p>
<p><code>DTransform</code> 系列有
<code>DTransform2d/DTransform3d</code>。 三维开发中使用
<code>DTransform3d</code>。</p>
<p>下面将介绍经常使用的矩阵创建方式。</p>
<h3 id="直接构造法">直接构造法</h3>
<p>通过
<code>public DTransform3d(double axx, double axy, double axz, double axw, double ayx, double ayy, double ayz, double ayw, double azx, double azy, double azz, double azw)</code>
这个构造函数直接生成 <code>DTransform3d</code></p>
<p>例：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 向 xy 平面投影</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 默认 z=0</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;xPlane&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DTransform3d <span class="title">ProjectToXY</span>(<span class="params"><span class="built_in">double</span> zValue = <span class="number">0</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DTransform3d(</span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, zValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>构造函数与上述度量矩阵参数的对应关系为：<span
class="math inline">\((axx,axy,axz) = (xx,xy,xz)\)</span>、<span
class="math inline">\((ayx,ayy,ayz)=(yx,yy,yz)\)</span>、<span
class="math inline">\((azx,azy,azz)=(zx,zy,zz)\)</span>、<span
class="math inline">\((axw,ayw,azw)=(wx,wy,wz)\)</span></p>
<h3 id="通过-dtransform3d-生成">通过 DTransform3d 生成</h3>
<p><code>DTransform3d</code> 提供了一些静态方法来快速创建实例</p>
<p>比如下面这个方法：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// origin 代表的是平移值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DTransform3d <span class="title">FromOriginAndColumns</span>(<span class="params">DPoint3d origin, DVector3d xVector, DVector3d yVector, DVector3d zVector</span>)</span></span><br></pre></td></tr></table></figure>
<p>上述静态方法通过局部坐标系（原点和三个方向）来生成一个矩阵，这个矩阵是该坐标系度量矩阵的逆，所以如果想要将模型变换到该坐标系下，直接左乘该矩阵即可。</p>
<h3 id="通过-dplane3d-生成">通过 DPlane3d 生成</h3>
<p>通过 DPlane3d 提供的
<code>public DPlane3d(DPoint3d origin, DVector3d normal)</code>
构造函数生成。</p>
<p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> plane = <span class="keyword">new</span> DPlane3d(origin,normal);</span><br><span class="line">plane.GetTransforms(<span class="keyword">out</span> DTransform3d planeToWorld, <span class="keyword">out</span> DTransform3d worldToPlane)</span><br></pre></td></tr></table></figure></p>
<p>基中，planeToWorld 是 plane 坐标系的度量矩阵，worldToPlane 是
planeToWorld 的逆。</p>
<blockquote>
<p>这种方式无法很好地控制 <span class="math inline">\(\vec {X}\)</span>
和 <span class="math inline">\(\vec {Y}\)</span> 基向量的方向</p>
</blockquote>
<h2 id="常用转换示例">常用转换示例</h2>
<h3 id="局部坐标转到世界坐标">局部坐标转到世界坐标</h3>
<p><span class="math display">\[
\begin{aligned}
P_{world} = M_{local}*P_{local}
\end{aligned}
\]</span></p>
<ul>
<li><span class="math inline">\(P_{world}\)</span>
为世界坐标系中的坐标</li>
<li><span class="math inline">\(M_{local}\)</span>
为局部坐标系的度量矩阵</li>
<li><span class="math inline">\(P_{local}\)</span>
为局部坐标系中的坐标</li>
</ul>
<blockquote>
<p>相当于将局部坐标转换成世界坐标</p>
</blockquote>
<h3 id="世界坐标系到局部坐标">世界坐标系到局部坐标</h3>
<p><span class="math display">\[
\begin{aligned}
P_{local} = M_{local}^{-1}*P_{world}
\end{aligned}
\]</span></p>
<ul>
<li><span class="math inline">\(M_{local}^{-1}\)</span>
为局部坐标系的度量矩阵的逆</li>
</ul>
<blockquote>
<p>相当于将世界坐标转换成局部坐标</p>
<p>局部坐标可以看成是原点位于 (0,0,0) 的世界坐标</p>
</blockquote>
<h3 id="世界坐标由坐标系-a-变换到坐标系-b">世界坐标由坐标系 A
变换到坐标系 B</h3>
<p>若已知坐标系 A 和 B 的度量矩阵，求由 A 变化到 B 的变换矩阵？ <span
class="math display">\[
\begin{aligned}
假设: M_{A-&gt;B} \cdot M_{A} &amp;= M_{B} \\
则: M_{A-&gt;B} &amp;= M_{B} \cdot M_{A}^{-1}
\end{aligned}
\]</span></p>
<ul>
<li><span class="math inline">\(M_{A-&gt;B}\)</span> 从坐标系 A 变换 B
的变换矩阵</li>
</ul>
<p>所以最终公式为： <span class="math display">\[
\begin{aligned}
P&#39;= M_{B} \cdot M_{A}^{-1} \cdot P
\end{aligned}
\]</span></p>
<h2 id="测试用例">测试用例</h2>
<p>待补充......</p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>几何变换</category>
      </categories>
      <tags>
        <tag>Bentley</tag>
        <tag>二次开发</tag>
      </tags>
  </entry>
  <entry>
    <title>LiteDB中id的理解与使用</title>
    <url>/posts/2021/2NDY00Q.html</url>
    <content><![CDATA[<p>在使用 LiteDB 中，它 Id
规则有些复杂，为了更好地理解，将其总结如下，不足之处，欢迎斧正。</p>
<span id="more"></span>
<p>LiteDB 的集合（collection）在存储文档（document）时，文档必需有
<code>_id</code>
字段，因为数据库使用这个字段作为主键，在进行文档更新的时候，也是通过
<code>_id</code> 去匹配更新对象。</p>
<p><strong>在使用中，我们要如何定义 <code>_id</code> 呢？</strong></p>
<h2 id="使用默认-_id">使用默认 <code>_id</code></h2>
<p>如果在定义类的时候，没有 <code>ID</code> 字段，程序就会自动添加一个
<code>_id</code>，这个 <code>_id</code> 的类型是
<code>ObjectId</code>。</p>
<p><strong>此处要注意：</strong> <code>ObjectId</code> 在进行 json
序列化时，并不会序列化成字符串，而是序列化为一个 <code>ObjectId</code>
对象，如果将其传到前端，前端对这个 <code>_id</code>
就会非常不方便使用，所以我们一般会指定 <code>_id</code> 字段。</p>
<h2 id="使用-bsonid-定义">使用 <code>BsonId</code> 定义</h2>
<p>我们可以在类中的任意字段添加 <code>BsonId</code> 特性来指定其为
<code>_id</code>，如下例：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">BsonId</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> userId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> password &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DateTime createDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> avatar &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>C# 读者请不要在意属性的命名规范问题，本人采用的是 js
的命名风格，方便与 js 前端交互。</p>
</blockquote>
<p>上面的定义中，我们在 <code>userId</code> 属性上添加
<code>BsonId</code> 特性，标记该字段作为 <code>User</code> 对象的
<code>_id</code>。数据存储的时候，它会将 <code>userId</code> 保存为
<code>_id</code> 而不是 <code>userId</code>，这一点要特别注意。</p>
<p>截取了实际中的一个对象，其保存的形式如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;createDate&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;$date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-08-21T13:04:36.6340000Z&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>所以，在使用 <code>BsonExpression</code> 的时候，去匹配
<code>userId</code> 需要写成
<code>_id</code>。为了使代码更易理解，建议在类中定义 <code>Id</code>
时，若没有明确的 <code>Id</code> 时，直接命名为 <code>_id</code>。</p>
<h2 id="定义递增的-int32-id">定义递增的 <code>int32</code> Id</h2>
<p>鉴于 <code>ObjecId</code> 对 json
序列化不友好的支持，所以我们希望有一种
<code>_id</code>，它既可以自动添加，又可以 json
序列化成一个字段，而不是像 <code>ObjectId</code> 那样。</p>
<p>这样的 <code>_id</code> 是存在的，就用用 <code>BsonId</code>
对指定一个 <code>int</code> 型的字段，并在任何时候，保证该字段的值为
0。如下所示：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">BsonId</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> _id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> userId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> password &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DateTime createDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> avatar &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>此处要注意：</strong></p>
<ul>
<li><code>_id</code> 的值必须是 0</li>
<li>在实例 <code>User</code> 时，不要对它赋值</li>
</ul>
<p>这样定义的 <code>_id</code> 就会随着每次 <code>insert</code>
操作而自动增加。即使中间删除了某些数据，它也不会去补充删除的数据，而是在上一条数据的基础上自动增加。</p>
<p>但是，用 <code>int</code> 类型作为 <code>_id</code>
也有一个弊端，因为 <code>int32</code> 的最大值为
65535，集合中的文档总数会有限制。</p>
<p>所以，一般使用下列方式定义：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    	_id = ObjectId.NewObjectId().ToString();    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [<span class="meta">BsonId</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> _id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> userId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> password &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DateTime createDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> avatar &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>LiteDB</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>LiteDB</tag>
      </tags>
  </entry>
  <entry>
    <title>几何继承关系层次图</title>
    <url>/posts/2022/1C9ATGS.html</url>
    <content><![CDATA[
<div class="markmap-container" style="height:400px">
  <svg data="{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;AnyGeometry&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;AnyCurve&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;CurvePrimitive&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;BsplineCurve&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;ParametricCurve&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[7,8],&quot;f&quot;:true},&quot;v&quot;:&quot;CircularArc&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[8,9],&quot;f&quot;:true},&quot;v&quot;:&quot;EllipticArc&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[9,10],&quot;f&quot;:true},&quot;v&quot;:&quot;LineSegment&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[10,11],&quot;f&quot;:true},&quot;v&quot;:&quot;LineString&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;TransitionSpiral&quot;}]}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;AnyGroup&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;GeometryGroup&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;AnyPoint&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;AnySinglePoint&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;Coordinate&quot;}]}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[18,19]},&quot;v&quot;:&quot;AnySolid&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[19,20]},&quot;v&quot;:&quot;AnyAnalyticSolid&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[20,21]},&quot;v&quot;:&quot;SolidPrimitive&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[21,22]},&quot;v&quot;:&quot;CircularCone&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[22,23]},&quot;v&quot;:&quot;CircularCylinder&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[23,24]},&quot;v&quot;:&quot;SkewedCone&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[24,25]},&quot;v&quot;:&quot;StronglyTypedSolidPrimitive&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[25,26],&quot;f&quot;:true},&quot;v&quot;:&quot;Block&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[26,27],&quot;f&quot;:true},&quot;v&quot;:&quot;DgnBox&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[27,28],&quot;f&quot;:true},&quot;v&quot;:&quot;DgnCone&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[28,29],&quot;f&quot;:true},&quot;v&quot;:&quot;DgnExtrusion&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[29,30],&quot;f&quot;:true},&quot;v&quot;:&quot;DgnRotationalSweep&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[30,31],&quot;f&quot;:true},&quot;v&quot;:&quot;DgnRuledSweep&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[31,32],&quot;f&quot;:true},&quot;v&quot;:&quot;DgnSphere&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[32,33],&quot;f&quot;:true},&quot;v&quot;:&quot;DgnTorusPipe&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[33,34],&quot;f&quot;:true},&quot;v&quot;:&quot;Sphere&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[34,35],&quot;f&quot;:true},&quot;v&quot;:&quot;TorusPipe&quot;}]}]}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[35,36]},&quot;v&quot;:&quot;AnySurface&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[36,37]},&quot;v&quot;:&quot;AnyParametricSurface&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[37,38]},&quot;v&quot;:&quot;CurveBoundedRegion&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[38,39]},&quot;v&quot;:&quot;CurvePrimitiveCollection &amp;lt; Bentley::GeometryNET::CurveBoundedRegion &amp;gt;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[39,40],&quot;f&quot;:true},&quot;v&quot;:&quot;UnionRegion&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[40,41]},&quot;v&quot;:&quot;CurvePrimitiveCollection&amp;lt; Bentley::GeometryNET::CurvePrimitive&amp;gt;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[41,42],&quot;f&quot;:true},&quot;v&quot;:&quot;CurveVector&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:12,&quot;p&quot;:{&quot;lines&quot;:[42,43],&quot;f&quot;:true},&quot;v&quot;:&quot;CircularDisk&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:12,&quot;p&quot;:{&quot;lines&quot;:[43,44],&quot;f&quot;:true},&quot;v&quot;:&quot;CurveChain&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:12,&quot;p&quot;:{&quot;lines&quot;:[44,45],&quot;f&quot;:true},&quot;v&quot;:&quot;DgnCurveVector&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:12,&quot;p&quot;:{&quot;lines&quot;:[45,46],&quot;f&quot;:true},&quot;v&quot;:&quot;EllipticDisk&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:12,&quot;p&quot;:{&quot;lines&quot;:[46,47],&quot;f&quot;:true},&quot;v&quot;:&quot;Polygon&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:12,&quot;p&quot;:{&quot;lines&quot;:[47,48],&quot;f&quot;:true},&quot;v&quot;:&quot;SurfacePatch&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[48,49],&quot;f&quot;:true},&quot;v&quot;:&quot;SingleLoopRegion&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[50,51]},&quot;v&quot;:&quot;CurvePrimitiveCollection&amp;lt; Bentley::GeometryNET::SingleLoopRegion&amp;gt;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[51,52],&quot;f&quot;:true},&quot;v&quot;:&quot;ParityRegion&quot;}]}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[52,53]},&quot;v&quot;:&quot;MSBsplineSurface&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[53,54]},&quot;v&quot;:&quot;PolyfaceHeader&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[54,55]},&quot;v&quot;:&quot;IndexedMesh&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[55,56]},&quot;v&quot;:&quot;SingleLineText&quot;}]}"></svg>
</div>

<span id="more"></span>
<h2 id="参考">参考</h2>
<p><a
href="https://www.yuque.com/bentleysystems/ms/gw1qex">几何继承关系层次图</a>
查看。</p>
]]></content>
      <categories>
        <category>Bentley</category>
        <category>Develop</category>
        <category>几何变换</category>
      </categories>
      <tags>
        <tag>NexT</tag>
        <tag>Bentley</tag>
      </tags>
  </entry>
  <entry>
    <title>用命令行安装mongodb指南</title>
    <url>/posts/2020/35KNZY8.html</url>
    <content><![CDATA[<p>在用 scoop 安装 mongodb
后，没有像直接使用安装包那样，会将数据库服务一次安装到位，而是需要使用命令行来进行安装。</p>
<p>网上虽然有很多的教程，但是参差不齐，每次想找到一个能使用，还是会浪费一些时间，于是根据自己的需要，进行了总结。</p>
<span id="more"></span>
<h2 id="小提示">小提示</h2>
<p>不知从什么版本开始，用 scoop 安装的 mongodb
没有安装导入导出这些工具了，如果有需要，可以单独安装：<code>scoop install mongodb-database-tools</code></p>
<h2 id="初始配置">初始配置</h2>
<p>我的 mongodb 是安装在 <code>E:\scoop\apps\mongodb\current\bin</code>
位置</p>
<ul>
<li><p>打开 <code>E:\scoop\apps\mongodb\current\bin\mongod.cfg</code>
文件，配置相关参数。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># Where and how to store data.</span><br><span class="line">storage</span><br><span class="line">  dbPath<span class="punctuation">:</span> D<span class="punctuation">:</span>\Applications\Scoop\apps\mongodb\<span class="number">4.2</span><span class="number">.7</span>\data</span><br><span class="line">  journal<span class="punctuation">:</span></span><br><span class="line">    enabled<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">#  engine<span class="punctuation">:</span></span><br><span class="line">#  mmapv1<span class="punctuation">:</span></span><br><span class="line">#  wiredTiger<span class="punctuation">:</span></span><br><span class="line"></span><br><span class="line"># where to write logging data.</span><br><span class="line">systemLog<span class="punctuation">:</span></span><br><span class="line">  destination<span class="punctuation">:</span> file</span><br><span class="line">  logAppend<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  path<span class="punctuation">:</span>  D<span class="punctuation">:</span>\Applications\Scoop\apps\mongodb\<span class="number">4.2</span><span class="number">.7</span>\log\mongod.log</span><br><span class="line"></span><br><span class="line"># network interfaces</span><br><span class="line">net<span class="punctuation">:</span></span><br><span class="line">  port<span class="punctuation">:</span> <span class="number">27017</span></span><br><span class="line">  bindIp<span class="punctuation">:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>
<p>dbPath 设置数据保存的路径</p>
<p>systemLog:path 设置日志的保存路径</p></li>
<li><p>以管理员身份打开 cmd 窗口。</p>
<p>输入 <code>cd E:\scoop\apps\mongodb\current\bin</code> 进入到 scoop
目录 <code>E:\scoop\apps\mongodb\current\bin</code> 中</p></li>
<li><p>在命令行中输入下面的命令安装 mogodb</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">mongod --config <span class="string">&quot;E:\scoop\apps\mongodb\current\bin\mongod.cfg&quot;</span> --install</span><br></pre></td></tr></table></figure>
<p>可以使用 <code>--serviceName</code> 和
<code>--serviceDisplayName</code> 指定服务名，从而可以安装多个 mogodb
实例</p></li>
<li><p>启动 mongodb 服务</p>
<p><code>net start mongodb</code></p></li>
</ul>
<h2 id="设置用户名和密码">设置用户名和密码</h2>
<h3 id="设置超级管理员">设置超级管理员</h3>
<ul>
<li><p>在命令行中输入 <code>mongo</code> 进入mongodb的交互界面</p></li>
<li><p>在 admin 库中添加 admin 角色</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">use admin  </span><br><span class="line">db.createUser(<span class="punctuation">&#123;</span></span><br><span class="line">  user<span class="punctuation">:</span> &#x27;admin&#x27;<span class="punctuation">,</span>  <span class="comment">// 用户名</span></span><br><span class="line">  pwd<span class="punctuation">:</span> &#x27;<span class="number">123456</span>&#x27;<span class="punctuation">,</span>  <span class="comment">// 密码</span></span><br><span class="line">  roles<span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    role<span class="punctuation">:</span> &#x27;root&#x27;<span class="punctuation">,</span>  <span class="comment">// 角色</span></span><br><span class="line">    db<span class="punctuation">:</span> &#x27;admin&#x27;  <span class="comment">// 数据库</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span>)</span><br></pre></td></tr></table></figure>
<p>设置完成，可以输入 <code>show users</code>
查看是否设置成功。</p></li>
<li><p>开启验证</p>
<p>找到 MongoDB 安装目录，打开
<code>mongod.cfg</code>文件，找到以下这句：</p>
<p>将</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#security<span class="punctuation">:</span></span><br></pre></td></tr></table></figure>
<p>改为</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">security<span class="punctuation">:</span></span><br><span class="line">  authorization<span class="punctuation">:</span> enabled</span><br></pre></td></tr></table></figure></li>
<li><p>重启 mongodb</p>
<p>在cmd窗口中</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">net stop mongodb</span><br><span class="line">net start mongodb</span><br></pre></td></tr></table></figure>
<p>也可以在任务管理器中找到相应的服务，然后重新启动</p></li>
<li><p>登陆数据库</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一</span></span><br><span class="line">mongo</span><br><span class="line">use admin</span><br><span class="line">db.auth(&#x27;admin&#x27;<span class="punctuation">,</span> &#x27;<span class="number">123456</span>&#x27;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line">mongo admin -u admin -p <span class="number">123456</span></span><br></pre></td></tr></table></figure>
<p>这时候我们就可以正常访问和操作数据了。</p></li>
</ul>
<h3 id="添加数据库用户">添加数据库用户</h3>
<p>我们除了可以设置数据库的超级管理员以外，还可以给每个数据库设置单独的管理员。其只有操作单独数据的一定权限。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">use test  <span class="comment">// 跳转到需要添加用户的数据库</span></span><br><span class="line">db.createUser(<span class="punctuation">&#123;</span></span><br><span class="line">  user<span class="punctuation">:</span> &#x27;fooadmin&#x27;<span class="punctuation">,</span>  <span class="comment">// 用户名</span></span><br><span class="line">  pwd<span class="punctuation">:</span> &#x27;<span class="number">123456</span>&#x27;<span class="punctuation">,</span>  <span class="comment">// 密码</span></span><br><span class="line">  roles<span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    role<span class="punctuation">:</span> &#x27;readWrite&#x27;<span class="punctuation">,</span>  <span class="comment">// 角色</span></span><br><span class="line">    db<span class="punctuation">:</span> &#x27;test&#x27;  <span class="comment">// 数据库名</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="常用命令">常用命令</h3>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">show users  <span class="comment">// 查看当前库下的用户</span></span><br><span class="line"></span><br><span class="line">db.dropUser(&#x27;testadmin&#x27;)  <span class="comment">// 删除用户</span></span><br><span class="line"></span><br><span class="line">db.updateUser(&#x27;admin&#x27;<span class="punctuation">,</span> <span class="punctuation">&#123;</span>pwd<span class="punctuation">:</span> &#x27;<span class="number">654321</span>&#x27;<span class="punctuation">&#125;</span>)  <span class="comment">// 修改用户密码</span></span><br><span class="line"></span><br><span class="line">db.auth(&#x27;admin&#x27;<span class="punctuation">,</span> &#x27;<span class="number">654321</span>&#x27;)  <span class="comment">// 密码认证</span></span><br></pre></td></tr></table></figure>
<h3 id="mongodb-数据库默认角色">MongoDB 数据库默认角色</h3>
<table>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">分类</th>
<th style="text-align: left;">role(角色)</th>
<th style="text-align: left;">简要说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">数据库用户角色(DB User Roles)</td>
<td style="text-align: left;"><code>read</code>
<code>readWrite</code></td>
<td style="text-align: left;">为某个数据库创建一个用户,
分配该数据库的读写权力</td>
</tr>
<tr class="even">
<td style="text-align: left;">数据库管理员角色(DB Admin Roles)</td>
<td style="text-align: left;"><code>dbAdmin</code> <code>dbOwner</code>
<code>userAdmin</code></td>
<td style="text-align: left;">拥有创建数据库, 和创建用户的权力</td>
</tr>
<tr class="odd">
<td style="text-align: left;">集群管理角色(Culster Administration
Roles)</td>
<td style="text-align: left;"><code>clusterAdmin</code>
<code>clusterManager</code> <code>clusterMonitor</code>
<code>hostManager</code></td>
<td style="text-align: left;">管理员组, 针对整个系统进行管理</td>
</tr>
<tr class="even">
<td style="text-align: left;">备份还原角色(Backup and Restoration
Roles)</td>
<td style="text-align: left;"><code>backup</code>
<code>restore</code></td>
<td style="text-align: left;">备份数据库, 还原数据库</td>
</tr>
<tr class="odd">
<td style="text-align: left;">所有数据库角色(All-Database Roles)</td>
<td style="text-align: left;"><code>readAnyDatabase</code>
<code>readWriteAnyDatabase</code> <code>userAdminAnyDatabase</code>
<code>dbAdminAnyDatabase</code></td>
<td style="text-align: left;">拥有对admin操作的权限</td>
</tr>
<tr class="even">
<td style="text-align: left;">Superuser Roles(超级管理员)</td>
<td style="text-align: left;"><code>root</code></td>
<td style="text-align: left;"><code>dbOwner</code>
<code>userAdmin</code>
<code>userAdminAnyDatabase</code>这几个角色角色提供了任何数据任何用户的任何权限的能力，拥有这个角色的用户可以在任何数据库上定义它们自己的权限</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongodb</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb的备份、还原、导出、导入</title>
    <url>/posts/2020/3H6MPWC.html</url>
    <content><![CDATA[<p>有时候，我们需要将 mongodb 的数据进行备份和还原，然后采用 Navicat
这种可视化工具导出的数据集合会有一个问题，就是一个文档的字段里面如果包含对象，它是不能支持的。所以我们需要用到原生的命令来进行。</p>
<span id="more"></span>
<h2 id="备份">备份</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongodump -h IP --port 端口 -u 用户名 -p 密码 --authenticationDatabase 验证账号的数据库（一般是 admin） -d 数据库 -o 文件存在路径</span><br></pre></td></tr></table></figure>
<p>如果不输入 -h 和 --port，表示使用默认的 IP 和端口</p>
<p>如果想导出所有的数据库，可以去掉 -d</p>
<p>如果 mongodb 设置了密码并且启用了验证，那必须输入
<code>-u -p --authenticationDatabase</code> 三个参数才行</p>
<p>可以使用 <code>mongodump --help</code> 来查看所有的命令</p>
<p>生成的结果目录为
<code>文件存在的路径/数据库名称/数据库数据文件</code></p>
<h2 id="还原">还原</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongorestore -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 --authenticationDatabase 验证账号的数据库（一般是 admin） --drop 文件存在路径</span><br></pre></td></tr></table></figure>
<p>要注意的是，--drop 的路径和上面 -o
的路径不同，这儿是指数据库文件数据真正存放的位置.</p>
<h2 id="导出表或者表中的部分字段">导出表或者表中的部分字段</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongoexport -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -c 表名 -f 字段 -o </span><br></pre></td></tr></table></figure>
<p>-q 条件导出</p>
<p>-o 文件名</p>
<p>-f
导出指字段，以字号分割，<code>-f name,email,age</code>导出<code>name,email,age</code>这三个字段</p>
<p>-q 可以根查询条件导出，<code>-q '&#123; "_id" : "10001" &#125;'</code>导出 uid
为 100 的数据</p>
<p>--csv 表示导出的文件格式为 csv
的，这个比较有用，因为大部分的关系型数据库都是支持 csv</p>
<p>--type json 表示导出的文件格式为 json 格式</p>
<h2 id="导入表或者表中部分字段">导入表或者表中部分字段</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongoimport -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -c 表名 --upsert --drop 文件名</span><br></pre></td></tr></table></figure>
<p><code>--upsert</code> 表示插入或者更新现有的数据</p>
<h2 id="致谢">致谢</h2>
<p>本文借鉴于：https://segmentfault.com/a/1190000006236494</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongodb</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>读mongodb使用手册笔记</title>
    <url>/posts/2020/PWMVCG.html</url>
    <content><![CDATA[<p>使用<code>mongodb</code>已经有一段时间了，入门是从<a
href="https://www.runoob.com/mongodb/mongodb-tutorial.html">mongodb
菜鸟教程</a>入的门，工作中遇到问题就 google 或者 baidu,
但是发现这样太累了，对于知识的掌握不系统，于是计划将 mongodb
的官方手册读一遍，梳理一下自己对于 mongodb 的使用。</p>
<span id="more"></span>
<h2 id="聚合">聚合</h2>
<h2 id="更新">更新</h2>
<p>形式</p>
<p><strong>bulkWrite(operations, options,
callback){Promise}</strong></p>
<p>使用方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">insertOne</span>: &#123; <span class="attr">document</span>: &#123; <span class="attr">a</span>: <span class="number">1</span> &#125; &#125; &#125;</span><br><span class="line"></span><br><span class="line">&#123; <span class="attr">updateOne</span>: &#123; <span class="attr">filter</span>: &#123;<span class="attr">a</span>:<span class="number">2</span>&#125;, <span class="attr">update</span>: &#123;<span class="attr">$set</span>: &#123;<span class="attr">a</span>:<span class="number">2</span>&#125;&#125;, <span class="attr">upsert</span>:<span class="literal">true</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line">&#123; <span class="attr">updateMany</span>: &#123; <span class="attr">filter</span>: &#123;<span class="attr">a</span>:<span class="number">2</span>&#125;, <span class="attr">update</span>: &#123;<span class="attr">$set</span>: &#123;<span class="attr">a</span>:<span class="number">2</span>&#125;&#125;, <span class="attr">upsert</span>:<span class="literal">true</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line">&#123; <span class="attr">updateMany</span>: &#123; <span class="attr">filter</span>: &#123;&#125;, <span class="attr">update</span>: &#123;<span class="attr">$set</span>: &#123;<span class="string">&quot;a.$[i].x&quot;</span>: <span class="number">5</span>&#125;&#125;, <span class="attr">arrayFilters</span>: [&#123; <span class="string">&quot;i.x&quot;</span>: <span class="number">5</span> &#125;]&#125; &#125;</span><br><span class="line"></span><br><span class="line">&#123; <span class="attr">deleteOne</span>: &#123; <span class="attr">filter</span>: &#123;<span class="attr">c</span>:<span class="number">1</span>&#125; &#125; &#125;</span><br><span class="line"></span><br><span class="line">&#123; <span class="attr">deleteMany</span>: &#123; <span class="attr">filter</span>: &#123;<span class="attr">c</span>:<span class="number">1</span>&#125; &#125; &#125;</span><br><span class="line"></span><br><span class="line">&#123; <span class="attr">replaceOne</span>: &#123; <span class="attr">filter</span>: &#123;<span class="attr">c</span>:<span class="number">3</span>&#125;, <span class="attr">replacement</span>: &#123;<span class="attr">c</span>:<span class="number">4</span>&#125;, <span class="attr">upsert</span>:<span class="literal">true</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>document, filter, update, replacement 是描述语言</p>
<p>比如：</p>
<p><code>&#123; insertOne: &#123; document: &#123; a: 1 &#125; &#125; &#125;</code> 实际形式应为:</p>
<p><code>insertOne(&#123;a: 1&#125;)</code></p>
</blockquote>
<h2 id="查找">查找</h2>
<h3 id="仅查找">仅查找</h3>
<p><strong>find(query, options){<a
href="http://mongodb.github.io/node-mongodb-native/3.6/api/Cursor.html">Cursor</a>}</strong></p>
<h3 id="获取数量">获取数量</h3>
<p>形式</p>
<ol type="1">
<li><p><strong>countDocuments(query, options,
callback){Promise}</strong></p></li>
<li><p><strong>estimatedDocumentCount(options,
callback){Promise}</strong></p></li>
</ol>
<p>区别</p>
<p>第一个方法速度较慢，但是获取的数量很准确。第二个方法则相反。</p>
<h3 id="获取某个字段的非重复值">获取某个字段的非重复值</h3>
<p><strong>distinct(key, query, options, callback){Promise}</strong></p>
<blockquote>
<p>key 是一个 string，不是 object</p>
</blockquote>
<h2 id="索引">索引</h2>
<h3 id="创建索引">创建索引</h3>
<p>形式</p>
<ol type="1">
<li><strong>createIndex(fieldOrSpec, options,
callback){Promise}</strong></li>
<li><strong>createIndexes(indexSpecs, options,
callback){Promise}</strong></li>
</ol>
<h3 id="删除索引">删除索引</h3>
<ol type="1">
<li><strong>dropIndex(indexName, options,
callback){Promise}</strong></li>
<li><strong>dropIndexes(options, callback){Promise}</strong></li>
<li><strong>dropAllIndexes(callback){Promise}</strong></li>
</ol>
<h3 id="检测索引">检测索引</h3>
<p><strong>ensureIndex(fieldOrSpec, options,
callback){Promise}</strong></p>
<p>判断索引是否存在，如果不存在，则新建</p>
<h2 id="集合">集合</h2>
<h3 id="删除集合">删除集合</h3>
<p><strong>drop(options, callback){Promise}</strong></p>
<h2 id="参考">参考</h2>
<p><a
href="http://mongodb.github.io/node-mongodb-native/3.6/api/index.html">Node.js
MongoDB Driver API</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongodb</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb 数组求和问题</title>
    <url>/posts/2021/3HKW9DE.html</url>
    <content><![CDATA[<p>mongodb 中求和有两种方法可以进行数组求和，一种是分组求和，一种是
reduce 求和，但是前者在与 $unwind
联合使用的时候，会出现一些意想不到的问题，推荐使用第二种方式</p>
<span id="more"></span>
<h2 id="假设">假设</h2>
<p>假设分别有如下集合：</p>
<ul>
<li><p>student，学生表</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;user1&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;user2&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;user3&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
<li><p>achievement，成绩表</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">		<span class="attr">name</span>: <span class="string">&#x27;user1&#x27;</span>,</span><br><span class="line">		<span class="attr">courseName</span>:<span class="string">&#x27;语文&#x27;</span>,</span><br><span class="line">		<span class="attr">score</span>: <span class="string">&#x27;99&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="attr">name</span>: <span class="string">&#x27;user1&#x27;</span>,</span><br><span class="line">		<span class="attr">courseName</span>:<span class="string">&#x27;数学&#x27;</span>,</span><br><span class="line">		<span class="attr">score</span>: <span class="string">&#x27;98&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">		<span class="attr">name</span>: <span class="string">&#x27;user2&#x27;</span>,</span><br><span class="line">		<span class="attr">courseName</span>:<span class="string">&#x27;语文&#x27;</span>,</span><br><span class="line">		<span class="attr">score</span>: <span class="string">&#x27;100&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="attr">name</span>: <span class="string">&#x27;user2&#x27;</span>,</span><br><span class="line">		<span class="attr">courseName</span>:<span class="string">&#x27;数学&#x27;</span>,</span><br><span class="line">		<span class="attr">score</span>: <span class="string">&#x27;100&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="需求">需求</h2>
<ul class="task-list">
<li><input type="checkbox" />求学生的平均年龄</li>
<li><input type="checkbox" />求每个学生的总分数</li>
</ul>
<h2 id="解决方法">解决方法</h2>
<ol type="1">
<li><p>针对第一种需求，直接一个聚合就搞定</p>
<p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="title function_">aggregate</span>([</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">$group</span>:&#123;</span><br><span class="line">        <span class="attr">_id</span>:<span class="literal">null</span>,</span><br><span class="line">        <span class="attr">studentsCount</span>: &#123; <span class="attr">$sum</span>: <span class="number">1</span> &#125;</span><br><span class="line">        <span class="attr">studentsAge</span>: &#123; <span class="attr">$sum</span>: <span class="string">&#x27;$age&#x27;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">studentsCount</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">studentsAge</span>: <span class="number">55</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p></li>
<li><p>对第二种需求，就要分步讨论了。</p>
<ul>
<li>achievement 集合中，每个学生都有分数录入</li>
</ul>
<p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="title function_">aggregate</span>([</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">$lookup</span>:&#123;</span><br><span class="line">            <span class="attr">from</span>: <span class="string">&#x27;achievement&#x27;</span>,</span><br><span class="line">            <span class="attr">localField</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">            <span class="attr">foreignField</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">            <span class="attr">as</span>: <span class="string">&#x27;achievements&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">$unwind</span>:<span class="string">&#x27;$achievements&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">$group</span>:&#123;</span><br><span class="line">        <span class="attr">_id</span>:<span class="literal">null</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;$name&#x27;</span>,</span><br><span class="line">        <span class="attr">totalScore</span>: &#123; <span class="attr">$sum</span>: <span class="string">&#x27;$achievements.score&#x27;</span> &#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure></p>
<ul>
<li>像上面记录那样，<code>user3</code> 的分数还没有录入</li>
</ul>
<p>在 <code>user3</code>
还没有分数记录的时候，如果上面的聚合查询，由于使用了
<code>$unwind</code>，这就会导致一个问题，输出的成果里面，我们会发现，<code>user3</code>
丢失了。</p>
<p>这是由于 <code>$unwind</code> 的特性导致的。官方的解释如下：</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Deconstructs an array field from the input documents to output a document for each element. Each output document is the input document with the value of the array field replaced by the element.</span><br><span class="line"></span><br><span class="line">解构数组的每个元素。输入文档的数组字段的值被数组元素替换后生成输出文档。</span><br></pre></td></tr></table></figure></p>
<p>所以，从上面可以知道，因为 <code>$lookup</code>
后，<code>user3</code> 的 <code>achievements</code>
为空，导致解析时，就会丢失 <code>user3</code>，而我们想要的是，每一个
user 都有一个 <code>totalScore</code>，如果数组为空，就显示 0。</p>
<p>所以，上述的<strong>分组求和</strong>不能满足我们的需求，我们可以采用
<code>$project</code> 来解决这个问题，代码如下：</p>
<p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="title function_">aggregate</span>([</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">$lookup</span>:&#123;</span><br><span class="line">            <span class="attr">from</span>: <span class="string">&#x27;achievement&#x27;</span>,</span><br><span class="line">            <span class="attr">localField</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">            <span class="attr">foreignField</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">            <span class="attr">as</span>: <span class="string">&#x27;achievements&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="attr">$project</span>:&#123;</span><br><span class="line">           <span class="attr">name</span>: <span class="number">1</span>,</span><br><span class="line">           <span class="attr">totalScore</span>:&#123;</span><br><span class="line">               <span class="comment">// 使用方法见：https://docs.mongodb.com/manual/reference/operator/aggregation/reduce/</span></span><br><span class="line">               <span class="attr">$reduce</span>:&#123;</span><br><span class="line">                   <span class="attr">input</span>: <span class="string">&#x27;$achievements&#x27;</span>,</span><br><span class="line">                   <span class="attr">initialValue</span>: <span class="number">0</span>,</span><br><span class="line">                   <span class="attr">in</span>: &#123;</span><br><span class="line">                     <span class="attr">$add</span>: [<span class="string">&quot;$$value&quot;</span>, <span class="string">&quot;$$this.score&quot;</span>],</span><br><span class="line">                   &#125;,</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure></p></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongodb</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb实用技巧总结</title>
    <url>/posts/2020/1TF781D.html</url>
    <content><![CDATA[<p>后端使用mongodb作为数据库，有时候会面对各种需求，google
太费时间，所以将自己使用过的一些技巧总结出来。</p>
<span id="more"></span>
<h2 id="增">增</h2>
<h2 id="删">删</h2>
<h2 id="查">查</h2>
<h3
id="批量更新文档中数组对象里面的某个字段">批量更新文档中数组对象里面的某个字段</h3>
<ul>
<li><p>文档示例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">_id</span>: <span class="title class_">ObjectId</span>(<span class="string">&#x27;5f68710c4da61820f461e0b8&#x27;</span>)</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">freinds</span>:[</span><br><span class="line">        &#123;<span class="attr">name</span>:<span class="string">&#x27;lisi&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">name</span>:<span class="string">&#x27;xiaowang&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>目标</p>
<p>文档如上，假如现在我们需要更新 <code>freinds</code>
中小王（xiaowang）的年龄，但是同时，我们也不知道小王这个元素位于数组的下标索引。</p></li>
<li><p>查询</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = <span class="keyword">await</span> collection.<span class="title function_">findById</span>(<span class="string">&#x27;5f68710c4da61820f461e0b8&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> index = person.<span class="property">freinds</span>.<span class="title function_">findIndex</span>(<span class="function"><span class="params">f</span>=&gt;</span>f.<span class="property">name</span>===<span class="string">&#x27;xiaowang&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> freind = person.<span class="property">freinds</span>[index];</span><br><span class="line">freind.<span class="property">age</span> = <span class="number">22</span>; <span class="comment">// 修改年龄</span></span><br><span class="line"><span class="comment">// 如果是修改 freind 中原有的字段，这句可以不要</span></span><br><span class="line"><span class="comment">// 如果是新增字段，这句就必须加上，否则 save 会失效</span></span><br><span class="line">person.<span class="property">freinds</span>.<span class="title function_">splice</span>(index,<span class="number">1</span>,freind);</span><br><span class="line">person.<span class="title function_">save</span>();</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="改">改</h2>
<h2 id="疑问解答">疑问解答</h2>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongodb</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb 配置副本集</title>
    <url>/posts/2021/28R2YWM.html</url>
    <content><![CDATA[<h2 id="什么是mongodb副本集">什么是MongoDB副本集</h2>
<p>副本集是一组mongod维护相同数据集的实例。</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2013/12/replication.png" style="max-width:min(100%,300px)" /></p>
<span id="more"></span>
<p>它提供了数据的冗余备份，并在多个服务器上存储数据副本，提高了数据的可用性，
并可以保证数据的安全性；还允许您从硬件故障和服务中断中恢复数据；实现自动故障转移，还可以采用分布式方式读取数据。</p>
<h2 id="副本集的原理">副本集的原理</h2>
<p>mongodb的复制至少需要两个节点。其中一个是主节点，负责处理客户端请求，其余的都是从节点，负责复制主节点上的数据。mongodb各个节点常见的搭配方式为：一主一从、一主多从。</p>
<p>主节点记录在其上的所有操作oplog，从节点定期轮询主节点获取这些操作，然后对自己的数据副本执行这些操作，从而保证从节点的数据与主节点一致。</p>
<p>通过在不同数据库服务器上提供多个数据副本，复制可提供一定级别的容错功能，以防止丢失单个数据库服务器。</p>
<h2 id="配置流程">配置流程</h2>
<h3 id="新建目录">新建目录</h3>
<p>新建一个副本集数据目录。可以将下面的内容保存为 .bat 文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:\Scoop\persist\mongodb\current\data</span><br><span class="line"><span class="comment"># 创建副本集目录</span></span><br><span class="line">mkdir replicaSet</span><br><span class="line"><span class="built_in">cd</span> replicaSet</span><br><span class="line"><span class="comment"># 创建分级目录</span></span><br><span class="line">mkdir <span class="literal">-p</span> confs,key,log,replSet1,replSet2,replSet3</span><br></pre></td></tr></table></figure>
<h3 id="生成密钥">生成密钥</h3>
<p>利用 openssl 生成密钥。可以使用 <code>scoop</code> 安装 openssl。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> key</span><br><span class="line">openssl rand <span class="literal">-base64</span> <span class="number">756</span> &gt; rs<span class="literal">-key</span></span><br></pre></td></tr></table></figure>
<h3 id="修改配置文件">修改配置文件</h3>
<p>在 <code>confs</code> 目录新建下列文件：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../confs</span><br><span class="line">// 新建下列 <span class="number">3</span> 个文件</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# mongodb config&quot;</span> &gt; mongodb27018.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# mongodb config&quot;</span> &gt; mongodb27019.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# mongodb config&quot;</span> &gt; mongodb27020.conf</span><br></pre></td></tr></table></figure>
<p>以下列文件内容为模板，分别修改其副本集配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mongod.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for documentation of all options, see:</span></span><br><span class="line"><span class="comment"># http://docs.mongodb.org/manual/reference/configuration-options/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Where and how to store data.</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">dbPath:</span> <span class="string">D:\Program</span> <span class="string">Files\Scoop\apps\mongodb\current\data\rs\replSet1</span></span><br><span class="line">  <span class="attr">journal:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#  engine:</span></span><br><span class="line"><span class="comment">#  mmapv1:</span></span><br><span class="line"><span class="comment">#  wiredTiger:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># where to write logging data.</span></span><br><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">  <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">  <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">path:</span>  <span class="string">D:\Program</span> <span class="string">Files\Scoop\apps\mongodb\current\data\rs\log\replSet1.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># network interfaces</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">27018</span></span><br><span class="line">  <span class="attr">bindIp:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="comment"># 如果需要局域网访问，上述 bindIp 应为 0.0.0.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#processManagement:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#security:</span></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">authorization:</span> <span class="string">enabled</span></span><br><span class="line">  <span class="attr">keyFile:</span> <span class="string">D:\Program</span> <span class="string">Files\Scoop\apps\mongodb\current\data\rs\key\rs-key</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#operationProfiling:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#replication:</span></span><br><span class="line"><span class="attr">replication:</span></span><br><span class="line">  <span class="attr">oplogSizeMB:</span> <span class="number">2048</span></span><br><span class="line">  <span class="attr">replSetName:</span> <span class="string">rs_auth</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sharding:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Enterprise-Only Options:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#auditLog:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#snmp:</span></span><br></pre></td></tr></table></figure>
<h3 id="安装服务">安装服务</h3>
<p>使用管理员打开 <code>PowerShell</code>，运行如下指令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入到目录</span></span><br><span class="line"><span class="built_in">cd</span> ..\..\..\bin\</span><br><span class="line"></span><br><span class="line">./mongod.exe <span class="literal">--config</span> <span class="string">&quot;D:\Program Files\Scoop\apps\mongodb\current\data\rs\confs\mongodb27018.conf&quot;</span> <span class="literal">--serviceName</span> mongodb27018 <span class="literal">--install</span></span><br><span class="line"></span><br><span class="line">./mongod.exe <span class="literal">--config</span> <span class="string">&quot;D:\Program Files\Scoop\apps\mongodb\current\data\rs\confs\mongodb27019.conf&quot;</span> <span class="literal">--serviceName</span> mongodb27019 <span class="literal">--install</span></span><br><span class="line"></span><br><span class="line">./mongod.exe <span class="literal">--config</span> <span class="string">&quot;D:\Program Files\Scoop\apps\mongodb\current\data\rs\confs\mongodb27020.conf&quot;</span> <span class="literal">--serviceName</span> mongodb27020 <span class="literal">--install</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：</p>
<ol type="1">
<li><p>要用管理员身份运行命令</p></li>
<li><p>提示
<code>Error parsing command line:  Multiple occurrences of option "--config</code>
错误</p>
<p>这种情况是使用了 <code>mongod</code> 命令导致的，一定要跳转到
<code>mongod.exe</code> 目录执行 <code>mongod</code> 命令</p></li>
<li><p>--config 后面的路径要全路径</p></li>
<li><p>在命令行中，路径中有空格时，一定要加引号</p></li>
</ol>
</blockquote>
<h3 id="启动服务">启动服务</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net start mongodb27018</span><br><span class="line">net start mongodb27019</span><br><span class="line">net start mongodb27020</span><br></pre></td></tr></table></figure>
<blockquote>
<p>若三个服务不能启动，请检查配置文件中的 <code>dbPath</code>
是否重复</p>
</blockquote>
<h3 id="初始化副本集">初始化副本集</h3>
<p>使用 PowerShell 连接 mongoDB，连接任意一个端口即可。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mongo <span class="literal">--host</span> <span class="number">127.0</span>.<span class="number">0.1</span> <span class="literal">--port</span> <span class="number">27018</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到 admin</span></span><br><span class="line">use admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义配置文件</span></span><br><span class="line"><span class="comment"># 配置中的 host 必须是本机的 ip，不能是 127.0.0.1，否则局域网无法访问</span></span><br><span class="line"><span class="comment"># 如果要通过域名访问，则必须是域名</span></span><br><span class="line">rsconf = &#123;</span><br><span class="line">  _id: <span class="string">&quot;rs_share&quot;</span>,</span><br><span class="line">  members: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">_id</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="type">host</span>: <span class="string">&quot;192.168.23.1:27018&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">_id</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="type">host</span>: <span class="string">&quot;192.168.23.1:27019&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">_id</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="type">host</span>: <span class="string">&quot;192.168.23.1:27020&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化副本集</span></span><br><span class="line">rs.initiate(rsconf)</span><br></pre></td></tr></table></figure>
<p>当出现如下提示时，说明成功了：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&#123; <span class="string">&quot;ok&quot;</span> : <span class="number">1</span> &#125;</span><br><span class="line">rs_auth:SECONDARY&gt;</span><br></pre></td></tr></table></figure>
<h3 id="新建用户">新建用户</h3>
<p>继上述 Shell 进行操作，新建用户：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">db.createUser(&#123;user:<span class="string">&quot;root&quot;</span>,<span class="built_in">pwd</span>:<span class="string">&quot;root8888&quot;</span>,roles:[&#123;<span class="type">role</span>:<span class="string">&quot;userAdminAnyDatabase&quot;</span>,<span class="type">db</span>:<span class="string">&quot;admin&quot;</span>&#125;]&#125;)</span><br></pre></td></tr></table></figure>
<p>如果需要改密码，可以:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mongo <span class="literal">--host</span> <span class="number">127.0</span>.<span class="number">0.1</span> <span class="literal">--port</span> <span class="number">27018</span> <span class="literal">-u</span> root <span class="literal">-p</span> root8888</span><br><span class="line">use admin</span><br><span class="line">db.changeUserPassword(<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;newpassword&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检验密码修改情况</span></span><br><span class="line">db.auth(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;password&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>新建账号后，需要重新连接 mongo：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exit</span></span><br><span class="line"><span class="comment"># 重新连接</span></span><br><span class="line">mongo <span class="literal">--host</span> <span class="number">127.0</span>.<span class="number">0.1</span> <span class="literal">--port</span> <span class="number">27018</span> <span class="literal">-u</span> root <span class="literal">-p</span> root8888</span><br><span class="line">use admin</span><br><span class="line">db.grantRolesToUser(<span class="string">&quot;root&quot;</span>, [<span class="string">&quot;clusterAdmin&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据库 mongodbshare 权限赋予 root</span></span><br><span class="line">db.grantRolesToUser(<span class="string">&quot;root&quot;</span>, [&#123;<span class="type">role</span>: <span class="string">&quot;read&quot;</span>, <span class="type">db</span>: <span class="string">&#x27;mongodbshare&#x27;</span>&#125;])</span><br><span class="line">db.grantRolesToUser(<span class="string">&quot;root&quot;</span>, [&#123;<span class="type">role</span>: <span class="string">&quot;root&quot;</span>, <span class="type">db</span>: <span class="string">&#x27;admin&#x27;</span>&#125;])</span><br></pre></td></tr></table></figure>
<h3 id="事务超时设置">事务超时设置</h3>
<p>这种方式在数据库重启后，会重置设置，需要在配置文件中定义。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">db.adminCommand( &#123; getParameter: <span class="number">1</span>, transactionLifetimeLimitSeconds: <span class="number">1</span> &#125; )  <span class="comment"># 默认是60</span></span><br><span class="line">db.adminCommand( &#123; getParameter: <span class="number">1</span>, maxTransactionLockRequestTimeoutMillis: <span class="number">1</span> &#125; ) <span class="comment"># 默认是5</span></span><br><span class="line"></span><br><span class="line">db.adminCommand( &#123; setParameter: <span class="number">1</span>, transactionLifetimeLimitSeconds: <span class="number">300</span> &#125; ) <span class="comment"># 修改事务超时时间为5分钟开启事务支持</span></span><br><span class="line">db.adminCommand( &#123; setParameter: <span class="number">1</span>, maxTransactionLockRequestTimeoutMillis: <span class="number">20</span> &#125; ) <span class="comment"># 修改事务获取锁的等待时间20毫秒</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>操作时，要连接主节点</p>
</blockquote>
<h2 id="mongoose-连接副本集">Mongoose 连接副本集</h2>
<p>mongoose 中 url 的连接语句如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;mongodb://root:root8888@127.0.0.1:27026,127.0.0.1:27027,127.0.0.1:27028/iepAuth?authSource=admin&amp;replicaSet=rs_auth&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="备份与还原">备份与还原</h2>
<p>备份与还原需要 <code>mongodump</code> 程序，该程序可由
<code>scoop</code> 安装。</p>
<p><strong>dump:</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mongodump <span class="literal">-h</span> localhost:<span class="number">27017</span> <span class="literal">-d</span> databaseName <span class="literal">-u</span> test <span class="literal">-p</span> testpwd <span class="literal">-o</span> D:\dump <span class="literal">--authenticationDatabase</span> admin</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-h</code> 地址</li>
<li><code>-d</code> 数据库名称</li>
<li><code>-u</code> 用户名</li>
<li><code>-p</code> 密码</li>
<li><code>-o</code> 输出地址</li>
<li><code>--authenticationDatabase admin</code> 验证账户的数据库</li>
</ul>
<p><strong>restore</strong>:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mongorestore <span class="literal">-h</span> localhost:<span class="number">27018</span> <span class="literal">-u</span> root <span class="literal">-p</span> whfy8888 <span class="literal">--authenticationDatabase</span> admin <span class="literal">--objcheck</span> <span class="literal">--nsInclude</span>=swcooperation.* <span class="literal">--dir</span> D:\dump</span><br></pre></td></tr></table></figure>
<h2 id="修改-rs-中的-config">修改 rs 中的 config</h2>
<p>假如要修改 rs 中 config 里面第一个 mongodb 实例的 host
值，配置方式如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入数据库</span></span><br><span class="line">mongo <span class="literal">--host</span> <span class="number">127.0</span>.<span class="number">0.1</span> <span class="literal">--port</span> <span class="number">27018</span> <span class="literal">-u</span> root <span class="literal">-p</span> root8888</span><br><span class="line">use admin</span><br><span class="line"></span><br><span class="line">var config = rs.config()</span><br><span class="line">config.members[<span class="number">0</span>].host = <span class="string">&quot;yourdomain.com&quot;</span></span><br><span class="line">rs.reconfig(config)</span><br></pre></td></tr></table></figure>
<h2 id="修改密码">修改密码</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入数据库</span></span><br><span class="line">mongo <span class="literal">--host</span> <span class="number">127.0</span>.<span class="number">0.1</span> <span class="literal">--port</span> <span class="number">27018</span> <span class="literal">-u</span> root <span class="literal">-p</span> root8888</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到 admin</span></span><br><span class="line">use admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改密码</span></span><br><span class="line">db.changeUserPassword(<span class="string">&quot;root&quot;</span>,<span class="string">&quot;newPassword&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a href="https://www.cnblogs.com/dbabd/p/13259147.html">MongoDB
逻辑还原工具mongorestore</a></li>
<li><a
href="https://www.prisma.io/dataguide/mongodb/configuring-mongodb-user-accounts-and-authentication">How
to manage users and authentication in MongoDB</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongodb</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb 删除服务</title>
    <url>/posts/2021/BSGCK7.html</url>
    <content><![CDATA[<p>MongoDB 安装的服务不能使用 <code>sc delete serviceName</code>
来进行删除，需使用 <code>mongod</code> 命令。</p>
<span id="more"></span>
<p>删除代码：<code>mongod --remove --serviceName serviceName</code></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongodb</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb对自定义字段排序后limit为乱序</title>
    <url>/posts/2021/1K2Y9FK.html</url>
    <content><![CDATA[<p>在使用 mongodb
中，遇到这样一个问题：在对集合进行聚合查询的过程中，通过
<code>$project</code> 添加了一个新字段，然后根据这个新字段进行
<code>$sort</code> 排序，最后再使用 <code>$limit</code>
获取数据，在这个过程中，当 <code>$limit</code>
的值不一样的时候，获取的数据虽然排序了，但是取出的顺序却还是不一样。</p>
<span id="more"></span>
<p>例如有如下数据：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// students 集合</span></span><br><span class="line"></span><br><span class="line">[&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;name-1&#x27;</span></span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&#x27;name-2&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;name-3&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;name-4&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;name-5&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>使用 aggrergate 查询：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="property">students</span>.<span class="title function_">aggregate</span>([</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">$sort</span>:&#123;</span><br><span class="line">            <span class="attr">age</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">$limit</span>: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>
<p>在上述查询中，不同的 <code>$limit</code>
值，查询出来的结果的顺序不是一致的。</p>
<p>经查，这是由于 <code>$sort</code>
字段的值相同导致的，通过查看官方文档 <a
href="https://docs.mongodb.com/manual/reference/operator/aggregation/sort/#sort-consistency">Version
5.0 文档</a>，其中对于 `<code>$sort</code> 一致性的说明如下：</p>
<blockquote>
<p>MongoDB does not store documents in a collection in a particular
order. When sorting on a field which contains duplicate values,
documents containing those values may be returned in any order.</p>
<p>If consistent sort order is desired, include at least one field in
your sort that contains unique values. The easiest way to guarantee this
is to include the <code>_id</code> field in your sort query.</p>
<p>MongoDB
在集合中存储文档的顺序是不定的，当对一个有重复值的字段排序时，包含这些值的文档可能会以任意顺序返回。</p>
<p>如果想要保持顺序的一致性，在 sort
语句中应至少保证有一个字段是唯一的。最方便的方式就是在 sort 中包含 _id
字段。</p>
</blockquote>
<p>最后，将上述聚合查询改成如下便可恢复正常：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="property">students</span>.<span class="title function_">aggregate</span>([</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 先按 age 排序，再按 _id 排序</span></span><br><span class="line">        <span class="attr">$sort</span>:&#123;</span><br><span class="line">            <span class="attr">age</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">_id</span>: <span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">$limit</span>: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongodb</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb 基本数组查询</title>
    <url>/posts/2022/3S2R3P0.html</url>
    <content><![CDATA[<p>本文总结了如何在 mongoDB
中对基本数组（数组中包含基本类型的元素）进行查询。</p>
<span id="more"></span>
<h2 id="集合数据">集合数据</h2>
<p>假设有如下文档，集合名为 <code>inventory</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="title function_">collection</span>(<span class="string">&#x27;inventory&#x27;</span>).<span class="title function_">insertMany</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">item</span>: <span class="string">&#x27;journal&#x27;</span>,</span><br><span class="line">    <span class="attr">qty</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="attr">tags</span>: [<span class="string">&#x27;blank&#x27;</span>, <span class="string">&#x27;red&#x27;</span>],</span><br><span class="line">    <span class="attr">dim_cm</span>: [<span class="number">14</span>, <span class="number">21</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">item</span>: <span class="string">&#x27;notebook&#x27;</span>,</span><br><span class="line">    <span class="attr">qty</span>: <span class="number">50</span>,</span><br><span class="line">    <span class="attr">tags</span>: [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blank&#x27;</span>],</span><br><span class="line">    <span class="attr">dim_cm</span>: [<span class="number">14</span>, <span class="number">21</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">item</span>: <span class="string">&#x27;paper&#x27;</span>,</span><br><span class="line">    <span class="attr">qty</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">tags</span>: [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blank&#x27;</span>, <span class="string">&#x27;plain&#x27;</span>],</span><br><span class="line">    <span class="attr">dim_cm</span>: [<span class="number">14</span>, <span class="number">21</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">item</span>: <span class="string">&#x27;planner&#x27;</span>,</span><br><span class="line">    <span class="attr">qty</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="attr">tags</span>: [<span class="string">&#x27;blank&#x27;</span>, <span class="string">&#x27;red&#x27;</span>],</span><br><span class="line">    <span class="attr">dim_cm</span>: [<span class="number">22.85</span>, <span class="number">30</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">item</span>: <span class="string">&#x27;postcard&#x27;</span>,</span><br><span class="line">    <span class="attr">qty</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="attr">tags</span>: [<span class="string">&#x27;blue&#x27;</span>],</span><br><span class="line">    <span class="attr">dim_cm</span>: [<span class="number">10</span>, <span class="number">15.25</span>]</span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<h2 id="数组的精确匹配">数组的精确匹配</h2>
<p>使用查询文档 <code>&#123; &lt;field&gt;: &lt;value&gt; &#125;</code>
来进行集合的精确匹配。<code>&lt;value&gt;</code>
是一个数组或者操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 仅当 tags 为 [&#x27;red&#x27;, &#x27;blank&#x27;] 时才返回值</span></span><br><span class="line">db.<span class="title function_">collection</span>(<span class="string">&#x27;inventory&#x27;</span>).<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="attr">tags</span>: [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blank&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果只保证元素一致，而不要求元素顺序时，可以用 $all 操作符进行查询</span></span><br><span class="line">db.<span class="title function_">collection</span>(<span class="string">&#x27;inventory&#x27;</span>).<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="attr">tags</span>: &#123; <span class="attr">$all</span>: [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blank&#x27;</span>] &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="匹配数组中的某个元素">匹配数组中的某个元素</h2>
<p>如果要查询数组中至少有一个元素匹配给定值时，可以使用
<code>&#123; &lt;field&gt;: &lt;value&gt; &#125;</code>
样式的查询文档来查询。<code>&lt;value&gt;</code> 是一个值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回 tags 中包含 &#x27;red&#x27; 的文档</span></span><br><span class="line">db.<span class="title function_">collection</span>(<span class="string">&#x27;inventory&#x27;</span>).<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="attr">tags</span>: <span class="string">&#x27;red&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>value 也可以是<a
href="https://www.mongodb.com/docs/manual/core/document/#std-label-document-query-filter">查询过滤文档
(query filter document)</a>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="title function_">collection</span>(<span class="string">&#x27;inventory&#x27;</span>).<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="attr">dim_cm</span>: &#123; <span class="attr">$gt</span>: <span class="number">25</span> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这种情况下的查询，可以将数组直接看成一个值就可以。</p>
</blockquote>
<h2
id="对数组中的某个元素进行多条件匹配">对数组中的某个元素进行多条件匹配</h2>
<h3
id="数组中多个元素共同满足一组条件">数组中多个元素共同满足一组条件</h3>
<p>下列查询中，当满足以下情况之一时，会有返回值：</p>
<ol type="1">
<li><code>dim_cm</code> 中一个元素满足
<code>$lt: 15</code>，另一个元素满足<code>$gt: 20</code></li>
<li><code>dim_cm</code> 中一个元素同时满足条件</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="title function_">collection</span>(<span class="string">&#x27;inventory&#x27;</span>).<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="attr">dim_cm</span>: &#123; <span class="attr">$lt</span>: <span class="number">15</span>, <span class="attr">$gt</span>: <span class="number">20</span> &#125;</span><br><span class="line">&#125;,&#123; <span class="attr">item</span>:<span class="number">1</span>,<span class="attr">dim_cm</span>:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="title class_">ObjectId</span>(<span class="string">&quot;6245ad716c0b0000c00070a3&quot;</span>),</span><br><span class="line">    <span class="string">&quot;item&quot;</span>: <span class="string">&quot;journal&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dim_cm&quot;</span>: [</span><br><span class="line">        <span class="number">14</span>,</span><br><span class="line">        <span class="number">21</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="title class_">ObjectId</span>(<span class="string">&quot;6245ad716c0b0000c00070a4&quot;</span>),</span><br><span class="line">    <span class="string">&quot;item&quot;</span>: <span class="string">&quot;notebook&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dim_cm&quot;</span>: [</span><br><span class="line">        <span class="number">14</span>,</span><br><span class="line">        <span class="number">21</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="title class_">ObjectId</span>(<span class="string">&quot;6245ad716c0b0000c00070a5&quot;</span>),</span><br><span class="line">    <span class="string">&quot;item&quot;</span>: <span class="string">&quot;paper&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dim_cm&quot;</span>: [</span><br><span class="line">        <span class="number">14</span>,</span><br><span class="line">        <span class="number">21</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3
id="数组中任一个元素同时满足一组条件">数组中任一个元素同时满足一组条件</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="title function_">collection</span>(<span class="string">&#x27;inventory&#x27;</span>).<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="comment">// dim_cm 中每一个元素都必须同时满足下列条件时才返回</span></span><br><span class="line">  <span class="attr">dim_cm</span>: &#123; <span class="attr">$elemMatch</span>: &#123; <span class="attr">$gt</span>: <span class="number">22</span>, <span class="attr">$lt</span>: <span class="number">30</span> &#125; &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="匹配数组中特定序号的元素">匹配数组中特定序号的元素</h2>
<p>可以通过 <code>.</code> 点来匹配数组下标，下标从 0 开始。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询第二个元素是否满足条件</span></span><br><span class="line">db.<span class="title function_">collection</span>(<span class="string">&#x27;inventory&#x27;</span>).<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="string">&#x27;dim_cm.1&#x27;</span>: &#123; <span class="attr">$gt</span>: <span class="number">25</span> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="匹配特定长度的数组">匹配特定长度的数组</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回 tags 中有 3 个元素的文档</span></span><br><span class="line">db.<span class="title function_">collection</span>(<span class="string">&#x27;inventory&#x27;</span>).<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="attr">tags</span>: &#123; <span class="attr">$size</span>: <span class="number">3</span> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a
href="https://www.mongodb.com/docs/manual/tutorial/query-arrays/#query-an-array">Query
an Array</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongodb</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb 中查询嵌入或多级文档</title>
    <url>/posts/2022/YNTT64.html</url>
    <content><![CDATA[<p>本文总结了如何在 mongoDB 中查询嵌入或多级文档（Embedded/Nested
Document）。</p>
<span id="more"></span>
<h2 id="集合数据">集合数据</h2>
<p>假设有如下文档，集合名称为 <code>inventory</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="title function_">collection</span>(<span class="string">&#x27;inventory&#x27;</span>).<span class="title function_">insertMany</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">item</span>: <span class="string">&#x27;journal&#x27;</span>,</span><br><span class="line">    <span class="attr">qty</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="attr">size</span>: &#123; <span class="attr">h</span>: <span class="number">14</span>, <span class="attr">w</span>: <span class="number">21</span>, <span class="attr">uom</span>: <span class="string">&#x27;cm&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">status</span>: <span class="string">&#x27;A&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">item</span>: <span class="string">&#x27;notebook&#x27;</span>,</span><br><span class="line">    <span class="attr">qty</span>: <span class="number">50</span>,</span><br><span class="line">    <span class="attr">size</span>: &#123; <span class="attr">h</span>: <span class="number">8.5</span>, <span class="attr">w</span>: <span class="number">11</span>, <span class="attr">uom</span>: <span class="string">&#x27;in&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">status</span>: <span class="string">&#x27;A&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">item</span>: <span class="string">&#x27;paper&#x27;</span>,</span><br><span class="line">    <span class="attr">qty</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">size</span>: &#123; <span class="attr">h</span>: <span class="number">8.5</span>, <span class="attr">w</span>: <span class="number">11</span>, <span class="attr">uom</span>: <span class="string">&#x27;in&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">status</span>: <span class="string">&#x27;D&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">item</span>: <span class="string">&#x27;planner&#x27;</span>,</span><br><span class="line">    <span class="attr">qty</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="attr">size</span>: &#123; <span class="attr">h</span>: <span class="number">22.85</span>, <span class="attr">w</span>: <span class="number">30</span>, <span class="attr">uom</span>: <span class="string">&#x27;cm&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">status</span>: <span class="string">&#x27;D&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">item</span>: <span class="string">&#x27;postcard&#x27;</span>,</span><br><span class="line">    <span class="attr">qty</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="attr">size</span>: &#123; <span class="attr">h</span>: <span class="number">10</span>, <span class="attr">w</span>: <span class="number">15.25</span>, <span class="attr">uom</span>: <span class="string">&#x27;cm&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">status</span>: <span class="string">&#x27;A&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<h2 id="匹配整个子文档">匹配整个子文档</h2>
<p>使用 <a
href="https://www.mongodb.com/docs/manual/core/document/#query-filter-documents">query
filter document</a> <code>&#123; &lt;field&gt;: &lt;value&gt; &#125;</code>
来匹配子文档。</p>
<p><strong>例：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询</span></span><br><span class="line">db.<span class="property">inventory</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">    <span class="comment">// size 只有整个对象完全匹配时，才返回，不支持多级嵌套匹配</span></span><br><span class="line">	<span class="attr">size</span>: &#123; <span class="attr">h</span>: <span class="number">14</span>, <span class="attr">w</span>: <span class="number">21</span>, <span class="attr">uom</span>: <span class="string">&#x27;cm&#x27;</span> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="title class_">ObjectId</span>(<span class="string">&quot;6245387e951c0000ea00145b&quot;</span>),</span><br><span class="line">    <span class="string">&quot;item&quot;</span>: <span class="string">&quot;journal&quot;</span>,</span><br><span class="line">    <span class="string">&quot;qty&quot;</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="string">&quot;size&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;h&quot;</span>: <span class="number">14</span>,</span><br><span class="line">        <span class="string">&quot;w&quot;</span>: <span class="number">21</span>,</span><br><span class="line">        <span class="string">&quot;uom&quot;</span>: <span class="string">&quot;cm&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="string">&quot;A&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<p>查询不支持多级嵌套匹配。size
只有整个对象完全匹配时，才返回。下面的查询的结果为空：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="property">inventory</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">	<span class="attr">size</span>: &#123; <span class="attr">h</span>: <span class="number">8.5</span> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="匹配嵌套字段">匹配嵌套字段</h2>
<p>使用 <a
href="https://www.mongodb.com/docs/manual/core/document/#dot-notation">dot
notation</a> <code>field.nestedField</code> 来进行嵌套匹配查询。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="property">inventory</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="string">&quot;size.h&quot;</span>: <span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回结果</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="title class_">ObjectId</span>(<span class="string">&quot;6245387e951c0000ea00145f&quot;</span>),</span><br><span class="line">    <span class="string">&quot;item&quot;</span>: <span class="string">&quot;postcard&quot;</span>,</span><br><span class="line">    <span class="string">&quot;qty&quot;</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="string">&quot;size&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;h&quot;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">&quot;w&quot;</span>: <span class="number">15.25</span>,</span><br><span class="line">        <span class="string">&quot;uom&quot;</span>: <span class="string">&quot;cm&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="string">&quot;A&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用查询操作符匹配">使用查询操作符匹配</h2>
<p>在使用 <code>query filter document</code> 时，可以使用 <a
href="https://www.mongodb.com/docs/manual/reference/operator/query/#std-label-query-selectors">query
operators</a> 来进行更复杂的查询。</p>
<p><strong>格式：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123; &lt;field1&gt;: &#123; &lt;operator1&gt;: &lt;value1&gt; &#125;, ... &#125;</span><br></pre></td></tr></table></figure>
<p><strong>查询示例：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="property">inventory</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="string">&#x27;size.h&#x27;</span>: &#123; <span class="attr">$lt</span>: <span class="number">15</span> &#125;,</span><br><span class="line">  <span class="string">&#x27;size.uom&#x27;</span>: <span class="string">&#x27;in&#x27;</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="string">&#x27;D&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="其它">其它</h2>
<p>本文中提供的示例代码运行平台为 Navicat。在 nodejs 中也同样适用。</p>
<h2 id="参考">参考</h2>
<ol type="1">
<li><p><a
href="https://www.mongodb.com/docs/manual/tutorial/query-embedded-documents/#query-on-embedded-nested-documents">Query
on Embedded/Nested Documents</a></p></li>
<li><p><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/#std-label-query-selectors">Query
and Projection Operators — MongoDB Manual</a></p></li>
<li><p><a
href="https://www.mongodb.com/docs/manual/core/document/#dot-notation">Dot
Notation</a></p></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongodb</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb 事务的使用及注意事项</title>
    <url>/posts/2022/KBYMHE.html</url>
    <content><![CDATA[<h2 id="会话-session">会话 Session</h2>
<p>Session 是 MongoDB 3.6 之后引入的概念，在以前的版本中，Mongod
进程中的每一个请求会创建一个上下文（OperationContext），可以理解为一个单行事务，<strong>这个单行事务中对于数据、索引、oplog
的修改都是原子性的</strong>。</p>
<p>MongoDB 3.6 之后的 Session 本质上也是一个上下文，在这个 Session
会话中多个请求共享一个上下文，为多文档事务实现提供了基础。</p>
<span id="more"></span>
<h2 id="事务函数">事务函数</h2>
<ul>
<li><p><strong>startTransaction()</strong></p>
<p>开启一个新的事务，之后即可进行 CRUD 操作。</p></li>
<li><p><strong>commitTransaction()</strong></p>
<p>提交事务保存数据，在提交之前事务中的变更的数据对外是不可见的。</p></li>
<li><p><strong>abortTransaction()</strong></p>
<p>事务回滚，例如，一部分数据更新失败，对已修改过的数据也进行回滚。</p></li>
<li><p><strong>endSession()</strong></p>
<p>结束本次会话。</p></li>
</ul>
<h2 id="nodejs-中事务实例">Nodejs 中事务实例</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">&#x27;./db&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">testTransaction</span> = <span class="keyword">async</span> (<span class="params">goodId</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> client = <span class="keyword">await</span> db.<span class="title function_">dbInstance</span>();</span><br><span class="line">  <span class="keyword">const</span> transactionOptions = &#123;</span><br><span class="line">    <span class="attr">readConcern</span>: &#123; <span class="attr">level</span>: <span class="string">&#x27;majority&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">writeConcern</span>: &#123; <span class="attr">w</span>: <span class="string">&#x27;majority&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">readPreference</span>: <span class="string">&#x27;primary&#x27;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> session = client.<span class="title function_">startSession</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;事务状态：&#x27;</span>, session.<span class="property">transaction</span>.<span class="property">state</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    session.<span class="title function_">startTransaction</span>(transactionOptions);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;事务状态：&#x27;</span>, session.<span class="property">transaction</span>.<span class="property">state</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> goodsColl = <span class="keyword">await</span> client.<span class="title function_">db</span>(<span class="string">&#x27;test&#x27;</span>).<span class="title function_">collection</span>(<span class="string">&#x27;goods&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> orderGoodsColl = <span class="keyword">await</span> client.<span class="title function_">db</span>(<span class="string">&#x27;test&#x27;</span>).<span class="title function_">collection</span>(<span class="string">&#x27;order_goods&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> &#123; stock, price &#125; = <span class="keyword">await</span> goodsColl.<span class="title function_">findOne</span>(&#123; goodId &#125;, &#123; session &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;事务状态：&#x27;</span>, session.<span class="property">transaction</span>.<span class="property">state</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (stock &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;库存不足&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> goodsColl.<span class="title function_">updateOne</span>(&#123; goodId &#125;, &#123;</span><br><span class="line">        <span class="attr">$inc</span>: &#123; <span class="attr">stock</span>: -<span class="number">1</span> &#125; <span class="comment">// 库存减 1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">await</span> orderGoodsColl.<span class="title function_">insertOne</span>(&#123; <span class="attr">id</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1000</span>),  goodId, price  &#125;, &#123; session &#125;);</span><br><span class="line">    <span class="keyword">await</span> session.<span class="title function_">commitTransaction</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[MongoDB transaction] ERROR: <span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">await</span> session.<span class="title function_">abortTransaction</span>();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> session.<span class="title function_">endSession</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;事务状态：&#x27;</span>, session.<span class="property">transaction</span>.<span class="property">state</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">testTransaction</span>(<span class="string">&#x27;g1000&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>运行测试结果：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node index</span><br><span class="line">事务状态： NO_TRANSACTION</span><br><span class="line">事务状态： STARTING_TRANSACTION</span><br><span class="line">事务状态： TRANSACTION_IN_PROGRESS</span><br><span class="line">事务状态： TRANSACTION_COMMITTED</span><br></pre></td></tr></table></figure>
<h2 id="mogoose-中支持事务的方法">mogoose 中支持事务的方法</h2>
<table>
<thead>
<tr class="header">
<th>说明</th>
<th>方法名</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>新建文档</td>
<td>create(docs,options)</td>
<td>一定要传入数组，使用它的重载方法</td>
</tr>
</tbody>
</table>
<h2 id="注意事项">注意事项</h2>
<ol type="1">
<li>在事务中，只能使用事务语句进行操作，不能与普通语句混用</li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongodb</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb 中 project 时取数组的最后一个值</title>
    <url>/posts/2022/N9NB2K.html</url>
    <content><![CDATA[<p>在 mongodb 中进行 project
时，可以通过如下方法来获取数组中的最后一个值。</p>
<span id="more"></span>
<h2 id="正文">正文</h2>
<h3 id="arrayelemat-aggregation">$arrayElemAt (aggregation)</h3>
<p><strong>语法</strong>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> $arrayElemAt<span class="punctuation">:</span> <span class="punctuation">[</span> &lt;array&gt;<span class="punctuation">,</span> &lt;idx&gt; <span class="punctuation">]</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>idx 计数从 0 开始</li>
<li>为正时，从前向后遍历</li>
<li>为负时，从后向前遍历</li>
</ul>
<p><strong>示例</strong>:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> $arrayElemAt<span class="punctuation">:</span> <span class="punctuation">[</span> &lt;array&gt;<span class="punctuation">,</span> <span class="number">-1</span> <span class="punctuation">]</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>v3.2 新增</p>
</blockquote>
<h3 id="last">$last</h3>
<p><strong>语法</strong>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> $last<span class="punctuation">:</span> &lt;expression&gt; <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>该语法是
<code>&#123; $arrayElemAt: [ &lt;array expression&gt;, -1 ] &#125;</code>
的语法糖</p>
<blockquote>
<p>v4.4 新增</p>
</blockquote>
<h3 id="slice">$slice</h3>
<p><strong>语法</strong>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> $slice<span class="punctuation">:</span> <span class="punctuation">[</span> &lt;array&gt;<span class="punctuation">,</span> &lt;position&gt;<span class="punctuation">,</span> &lt;n&gt; <span class="punctuation">]</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>示例</strong>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> $arrayElemAt<span class="punctuation">:</span> <span class="punctuation">[</span> &lt;array&gt;<span class="punctuation">,</span> <span class="number">-1</span><span class="punctuation">,</span><span class="number">1</span> <span class="punctuation">]</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p><a
href="https://www.mongodb.com/docs/manual/reference/operator/aggregation/">Aggregation
Pipeline Operators — MongoDB Manual</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongodb</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb 对象数组查询</title>
    <url>/posts/2022/SDER9X.html</url>
    <content><![CDATA[<p>本文总结了如何在 mongoDB
中对对象数组（数组中包含的元素类型是对象）进行查询。</p>
<span id="more"></span>
<h2 id="集合数据">集合数据</h2>
<p>假设有如下文档，集合名为 <code>ventory</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="title function_">collection</span>(<span class="string">&#x27;inventory&#x27;</span>).<span class="title function_">insertMany</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">item</span>: <span class="string">&#x27;journal&#x27;</span>,</span><br><span class="line">    <span class="attr">instock</span>: [</span><br><span class="line">      &#123; <span class="attr">warehouse</span>: <span class="string">&#x27;A&#x27;</span>, <span class="attr">qty</span>: <span class="number">5</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">warehouse</span>: <span class="string">&#x27;C&#x27;</span>, <span class="attr">qty</span>: <span class="number">15</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">item</span>: <span class="string">&#x27;notebook&#x27;</span>,</span><br><span class="line">    <span class="attr">instock</span>: [&#123; <span class="attr">warehouse</span>: <span class="string">&#x27;C&#x27;</span>, <span class="attr">qty</span>: <span class="number">5</span> &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">item</span>: <span class="string">&#x27;paper&#x27;</span>,</span><br><span class="line">    <span class="attr">instock</span>: [</span><br><span class="line">      &#123; <span class="attr">warehouse</span>: <span class="string">&#x27;A&#x27;</span>, <span class="attr">qty</span>: <span class="number">60</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">warehouse</span>: <span class="string">&#x27;B&#x27;</span>, <span class="attr">qty</span>: <span class="number">15</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">item</span>: <span class="string">&#x27;planner&#x27;</span>,</span><br><span class="line">    <span class="attr">instock</span>: [</span><br><span class="line">      &#123; <span class="attr">warehouse</span>: <span class="string">&#x27;A&#x27;</span>, <span class="attr">qty</span>: <span class="number">40</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">warehouse</span>: <span class="string">&#x27;B&#x27;</span>, <span class="attr">qty</span>: <span class="number">5</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">item</span>: <span class="string">&#x27;postcard&#x27;</span>,</span><br><span class="line">    <span class="attr">instock</span>: [</span><br><span class="line">      &#123; <span class="attr">warehouse</span>: <span class="string">&#x27;B&#x27;</span>, <span class="attr">qty</span>: <span class="number">15</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">warehouse</span>: <span class="string">&#x27;C&#x27;</span>, <span class="attr">qty</span>: <span class="number">35</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<h2
id="在集合中精确匹配一个完整的嵌套文档">在集合中精确匹配一个完整的嵌套文档</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 仅当 instock 中有元素为 &#123; warehouse: &#x27;A&#x27;, qty: 5 &#125; 时才返回</span></span><br><span class="line">db.<span class="title function_">collection</span>(<span class="string">&#x27;inventory&#x27;</span>).<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="attr">instock</span>: &#123; <span class="attr">warehouse</span>: <span class="string">&#x27;A&#x27;</span>, <span class="attr">qty</span>: <span class="number">5</span> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="title class_">ObjectId</span>(<span class="string">&quot;6245b2876c0b0000c00070a8&quot;</span>),</span><br><span class="line">    <span class="string">&quot;item&quot;</span>: <span class="string">&quot;journal&quot;</span>,</span><br><span class="line">    <span class="string">&quot;instock&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;warehouse&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">            <span class="string">&quot;qty&quot;</span>: <span class="number">5</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;warehouse&quot;</span>: <span class="string">&quot;C&quot;</span>,</span><br><span class="line">            <span class="string">&quot;qty&quot;</span>: <span class="number">15</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该查询同<a href="">匹配数组中的某个基本元素</a>一样的原理。</p>
<h2
id="对数组中文档的某个字段按条件匹配">对数组中文档的某个字段按条件匹配</h2>
<h3 id="按数组中对象的某个字段匹配">按数组中对象的某个字段匹配</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只要数组中有一个元素的 qty 满足条件就返回值</span></span><br><span class="line">db.<span class="title function_">collection</span>(<span class="string">&#x27;inventory&#x27;</span>).<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="string">&#x27;instock.qty&#x27;</span>: &#123; <span class="attr">$lte</span>: <span class="number">20</span> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3
id="按数组中特定位置对象的某个字段匹配">按数组中特定位置对象的某个字段匹配</h3>
<p>数组中元素的索引从 0 开始。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当 instock 数组中第 1 个元素的 qty 满足条件时返回</span></span><br><span class="line">db.<span class="title function_">collection</span>(<span class="string">&#x27;inventory&#x27;</span>).<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="string">&#x27;instock.0.qty&#x27;</span>: &#123; <span class="attr">$lte</span>: <span class="number">20</span> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="对数组中的文档进行多条件匹配">对数组中的文档进行多条件匹配</h2>
<h3
id="数组中多个元素共同满足一组条件">数组中多个元素共同满足一组条件</h3>
<p>下列查询中，当满足以下情况之一时，会有返回值：</p>
<ol type="1">
<li><code>instock</code> 中的一个元素有字段 <code>qty</code> 且满足
<code>$gt: 15</code>，另一个元素也有字段 <code>qty</code>
且满足<code>$lte: 20</code></li>
<li><code>instock</code> 中的一个元素有字段 <code>qty</code>
且同时满足匹配条件</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="title function_">collection</span>(<span class="string">&#x27;inventory&#x27;</span>).<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="string">&#x27;instock.qty&#x27;</span>: &#123; <span class="attr">$gt</span>: <span class="number">10</span>, <span class="attr">$lte</span>: <span class="number">20</span> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>下列查询中，当满足以下情况之一时，会有返回值：</p>
<ol type="1">
<li><code>instock</code> 中的一个元素有字段 <code>qty</code> 且值为
<code>5</code>，另一个元素有字段 <code>warehouse</code> 且值为
<code>A</code></li>
<li><code>instock</code> 中的一个元素有字段 <code>qty</code> 且值为
<code>5</code>，该元素同时有字段 <code>warehouse</code> 且值为
<code>A</code></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="title function_">collection</span>(<span class="string">&#x27;inventory&#x27;</span>).<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="string">&#x27;instock.qty&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="string">&#x27;instock.warehouse&#x27;</span>: <span class="string">&#x27;A&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这种匹配机制概括为：</p>
<p>只要条件被数组中的元素共同满足后，就会返回。就像工作中分配任务一样，只要任务被完成，具体的完成人有几个可以不用关心。</p>
</blockquote>
<h3
id="数组中任一个元素同时满足一组条件">数组中任一个元素同时满足一组条件</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="title function_">collection</span>(<span class="string">&#x27;inventory&#x27;</span>).<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="attr">instock</span>: &#123; <span class="attr">$elemMatch</span>: &#123; <span class="attr">qty</span>: <span class="number">5</span>, <span class="attr">warehouse</span>: <span class="string">&#x27;A&#x27;</span> &#125; &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="title class_">ObjectId</span>(<span class="string">&quot;6245b2876c0b0000c00070a8&quot;</span>),</span><br><span class="line">    <span class="string">&quot;item&quot;</span>: <span class="string">&quot;journal&quot;</span>,</span><br><span class="line">    <span class="string">&quot;instock&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;warehouse&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">            <span class="string">&quot;qty&quot;</span>: <span class="number">5</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;warehouse&quot;</span>: <span class="string">&quot;C&quot;</span>,</span><br><span class="line">            <span class="string">&quot;qty&quot;</span>: <span class="number">15</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a
href="https://www.mongodb.com/docs/manual/tutorial/query-array-of-documents/#query-an-array-of-embedded-documents">Query
an Array of Embedded Documents</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongodb</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb 中必须了解的关于 ObjectId 的知识</title>
    <url>/posts/2022/35RJHX8.html</url>
    <content><![CDATA[<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220426140319090.png"
alt="image-20220426140319090" />
<figcaption aria-hidden="true">image-20220426140319090</figcaption>
</figure>
<span id="more"></span>
<h2 id="objectid-的构成">ObjectId 的构成</h2>
<p>ObjectId 的值由 12 个字节组成，其中：</p>
<ul>
<li>4个字节表示时间戳（自 Unix
纪元以来的<strong>秒数</strong>），记录创建时间；</li>
<li>3个字节表示机器标识符，保证不同主机产生不同的 ObjectId 值；</li>
<li>2个字节表示进程 ID，保证在同一台主机不同 MongoDB 进程产生不同的
ObjectId 值；</li>
<li>3个字节表示自增计数器（以随机值开头），保证同一主机同一进程同一秒内产生
ObjectId 的唯一性。</li>
</ul>
<p>ObjectId = 时间戳（4字节） + 机器标识码（3字节） + 进程 ID（2字节） +
计数器（3字节）</p>
<table align="center">
<tr>
<th>
1
</th>
<th>
2
</th>
<th>
3
</th>
<th>
4
</th>
<th>
5
</th>
<th>
6
</th>
<th>
7
</th>
<th>
8
</th>
<th>
9
</th>
<th>
10
</th>
<th>
11
</th>
<th>
12
</th>
</tr>
<tr>
<td rowspan="2" colspan="4">
时间戳
</td>
<td colspan="3">
机器标识码
</td>
<td colspan="2">
进程 ID
</td>
<td rowspan="2" colspan="3">
计数器
</td>
</tr>
<tr>
<td colspan="5">
机器随机数
</td>
</tr>
</table>
<p>每个字节的值为 1~254，ObjectId
转换成字符串后，是用十六进制表示，所以，字符串型 ObjectId 有 24
个字符。</p>
<h2 id="objectid-的值无法保证生成顺序">ObjectId
的值无法保证生成顺序</h2>
<p>ObjectId 前 4 个字节存的是时间戳，而时间是递增的，所以 ObjectId
总体保证递增的顺序。</p>
<p>存储的时间戳只精确到秒，在同一台机器不同的 MongoDB
进程，同一秒内生成的 ObjectId，进程 ID
小的会排在大的前面。存在这种情况，进程 ID 大 的先生成
ObjectId，但还是会排在进程 ID 小的后面。所以 ObjectId
递增不是绝对的。</p>
<h2 id="objectid-在一秒内生成的数量上限">ObjectId
在一秒内生成的数量上限</h2>
<p>3 个字节所能表达的最大的整数：<span
class="math inline">\(2^{24}-1\)</span>。所以一个 MongoDB
进程，在一秒内最多能生成 <span class="math inline">\(2^{24}-1\)</span>
个ObjectId。</p>
<p>从目前机器的性能来看，要超过这个限制几乎是不可能的。</p>
<h2 id="objectid-的唯一性">ObjectId 的唯一性</h2>
<p>ObjectId 近似唯一，理论上会出现很小概率 <span
class="math inline">\(\frac{1}{2^{24}-1}\)</span> 的重复情况，这取决于
MongoDB 驱动实现 ObjectId 方式。</p>
<p>以 C# 官方驱动来说，构成 ObjectId 的计数器，C# 使用了
Interlocked.Increment 实现，保证了同一MongoDB 进程在同一秒内生成的多个
ObjectId 的计数器是累加的，从而保证了生成的 ObjectId 是唯一的。</p>
<p>不过，有些版本的驱动是使用了随机数作为计数器，这种情况下并不能保证生成的
ObjectId 是唯一的。</p>
<p>所以，除非你使用的是一个非常老的版本，或者很小众的驱动，否则都不需要为重复的
ObjectId 担心。</p>
<h2 id="可以使用表达查询-objectid">可以使用表达查询 ObjectId</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="property">comments</span>.<span class="title function_">find</span>(&#123;<span class="attr">_id</span>: &#123;<span class="attr">$gt</span>: <span class="title class_">ObjectId</span>(<span class="string">&quot;5272e0f00000000000000000&quot;</span>)&#125;&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="objectid-无法修改">ObjectId 无法修改</h2>
<p>文档一旦写入到集合中，则其 <code>_id</code>
将不允许改变。如果需要更改某个文档的
<code>_id</code>，可以将文档删除后重新添加到集合中。</p>
<h2 id="参考">参考</h2>
<ol type="1">
<li>https://www.jianshu.com/p/7c4bfa516acf</li>
<li><a
href="https://www.mongodb.com/docs/manual/reference/method/ObjectId/">ObjectId
— MongoDB Manual</a></li>
<li><a href="https://steveridout.github.io/">MongoDB ObjectId to
Timestamp Converter</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongodb</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB 中 $in 的效率用法</title>
    <url>/posts/2022/2V5ECSD.html</url>
    <content><![CDATA[<p>MongDB 中 <code>$in</code>
查询操作符是非常强大的，但是在使用中有可能受 Mysql
的使用习惯所影响，导致忽略了 <code>$in</code>
的一些高级用法，比如对数组字段也可以使用 <code>$in</code>。</p>
<p>本文对 <code>$in</code> 的使用进行详细的总结。</p>
<span id="more"></span>
<h2 id="语法">语法</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">field</span>: &#123; <span class="attr">$in</span>: [&lt;value1&gt;, &lt;value2&gt;, ... &lt;valueN&gt; ] &#125; &#125;</span><br></pre></td></tr></table></figure>
<h2 id="非数组-in-数组">非数组 $in 数组</h2>
<p>如果 <code>field</code>
是一个非数组，则会对遍历数组中的所有元素来进行匹配。因此，如果
<code>$in</code> 后面的数组过大，会导致性能问题。</p>
<p>可能对 <code>field</code> 来建立索引提高匹配速度</p>
<h2 id="数组-in-数组">数组 $in 数组</h2>
<p><code>field</code> 的值也可以是一个数组，当 <code>field</code>
数组中至少有一个元素位于 <code>$in</code>
后面的数组中时，就匹配成功。</p>
<h2 id="正则匹配">正则匹配</h2>
<p><code>$in</code> 后面的数组中的值可以是正则表达式，形式为
<code>/pattern/</code>。但是不能使用 <code>$regex</code>
操作表达式。</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="property">inventory</span>.<span class="title function_">find</span>( &#123; <span class="attr">tags</span>: &#123; <span class="attr">$in</span>: [ <span class="regexp">/^be/</span>, <span class="regexp">/^st/</span> ] &#125; &#125; )</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/in/">MongoDB-$in</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongodb</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb 中数据比较或排序机制</title>
    <url>/posts/2022/17HZQ95.html</url>
    <content><![CDATA[<p>查询与排序是数据库常用的两个操作，如果能理解 Mongodb
中比较的机制，那么在使用中将会变得更加得心应手。</p>
<p>因此，本文对这些机制进行总结。</p>
<span id="more"></span>
<h2 id="不同-bsontype-之间的比较顺序">不同 BsonType 之间的比较顺序</h2>
<p>每一个 bsonType 都有一个 order，当使用不同的 bsonType
进行排序比较时，它们的顺序由低到高为：</p>
<ol type="1">
<li>MinKey (internal type)</li>
<li>Null</li>
<li>Numbers (ints, longs, doubles, decimals)</li>
<li>Array</li>
<li>Symbol, String</li>
<li>Object</li>
<li>BinData</li>
<li>ObjectId</li>
<li>Boolean</li>
<li>Date</li>
<li>Timestamp</li>
<li>Regular Expression</li>
<li>MaxKey (internal type)</li>
</ol>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220829220828067.png"
alt="image-20220829220828067" />
<figcaption aria-hidden="true">image-20220829220828067</figcaption>
</figure>
<h2 id="数字类型比较">数字类型比较</h2>
<p>Mongodb 将 <code>int</code>、<code>long</code>、
<code>double</code>、<code>decimal</code>
都视作一个类型，在进行比较时，会对它们进行转换。</p>
<h2 id="字符串类型比较">字符串类型比较</h2>
<h3 id="二进制">二进制</h3>
<p>默认使用二进制来比较字符串</p>
<h3 id="规则collation">规则（collation）</h3>
<p>也可以使用特定语言规则来进行比较。参考 <a
href="https://www.mongodb.com/docs/manual/reference/collation/">Collaction</a></p>
<h2 id="数组比较">数组比较</h2>
<ul>
<li>小于比较或升序排序，先对数组中的元素进行排序(<code>不同的 bsonType 按上述顺序进行排序</code>)，然后比较数组中的最小元素</li>
<li>大于大于或降序排序，比较数组的最大元素。</li>
<li>将其值为单元素数组(例如<code>[ 1 ]</code>)的字段与非数组字段(例如<code>2</code>)进行比较时，实际比较的是
<code>1</code> 和<code>2</code>。</li>
<li>比较空数组(例如<code>[ ]</code>)会将空数组视为小于<code>null</code>或缺少字段。</li>
</ul>
<h2 id="对象比较">对象比较</h2>
<p>对象比较按以下步骤进行：</p>
<ol type="1">
<li><p>按键值对在 BsonObject 中出现的顺序进行比较</p></li>
<li><p>先比较键值（字段值）的类型，如果是不同的 bsonType
的键值按开篇中的顺序进行比较</p></li>
<li><p>如果类型相等，则比较键值</p></li>
<li><p>如果键值相等，则比较键名（字段名）</p></li>
<li><p>如果上述都相等，则继续比较下一个键值对。</p>
<p>如果键值对存在于对象 A，而不存在于对象 B 中，则 A 大于 B</p></li>
</ol>
<h2
id="时间date与时间戳timestamp比较">时间（Date）与时间戳（Timestamp）比较</h2>
<p>Date 在 Timestamp 之前排序。</p>
<h2 id="不存在的字段比较">不存在的字段比较</h2>
<p>字段为 <code>null</code> 的对象视作对象不存在该字段，例如
<code>&#123;&#125;</code> 与 <code>&#123;a: null&#125;</code> 是相等的。</p>
<h2 id="二进制比较">二进制比较</h2>
<p>二进制按如下顺序进行比较：</p>
<ol type="1">
<li>先比较数据长度</li>
<li>然后比较一个字节的 bsonType 类型</li>
<li>最后再一个字节一个字节的比较</li>
</ol>
<h2 id="参考">参考</h2>
<p><a
href="https://www.mongodb.com/docs/manual/reference/bson-type-comparison-order/#comparison-sort-order">Comparison/Sort
Order</a></p>
<p><a
href="https://www.docs4dev.com/docs/zh/mongodb/v3.6/reference/reference-bson-type-comparison-order.html">Comparison/Sort
Order 中文</a></p>
<p><a
href="https://www.mongodb.com/docs/manual/reference/collation/">Collaction</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongodb</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongodb 数据库备份与还原</title>
    <url>/posts/2023/2ZVSC2C.html</url>
    <content><![CDATA[<p>MongoDB 中使用 <code>mongodump</code> 来对整个数据库进行备份，使用
<code>mongorestore</code> 来将数据从备份中还原。</p>
<p>本文介绍一种常用的备份还原的参数设置，可以在实际工作中直接使用</p>
<span id="more"></span>
<h2 id="功能安装">功能安装</h2>
<p><code>mongodump</code> 与 <code>mongorestore</code> 是
mongodb-database-tools 中提供的命令行工具，使用这两个命令，需要先安装
mongodb-database-tools。</p>
<p><strong>scoop 安装方法：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install mongodb<span class="literal">-database-tools</span></span><br></pre></td></tr></table></figure>
<p><strong>手动安装：</strong></p>
<p>从 <a href="https://www.mongodb.com/try/download/database-tools">Try
MongoDB Tools Free</a> 下载 <a
href="https://fastdl.mongodb.org/tools/db/mongodb-database-tools-windows-x86_64-100.7.3.zip">MongoDB
Command Line Database Tools Download</a> 安装包进行安装。</p>
<h2 id="备份">备份</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mongodump <span class="literal">-h</span> localhost:<span class="number">27017</span> <span class="literal">-d</span> databaseName <span class="literal">-u</span> test <span class="literal">-p</span> testpwd <span class="literal">--authenticationDatabase</span> admin <span class="literal">--gzip</span> <span class="literal">--archive</span>=C:\Users\%username%\Desktop\dump\databaseName.gzip</span><br></pre></td></tr></table></figure>
<ul>
<li><p>-h / --host</p>
<p>MongoDB
所在服务器地址，也可以同时指定端口号：127.0.0.1:27017</p></li>
<li><p>-d / --db</p>
<p>指定数据库名称</p></li>
<li><p>-u / --username</p>
<p>用于授权验证的用户名</p></li>
<li><p>-p / --password</p>
<p>用于授权验证的密码</p></li>
<li><p>--authenticationDatabase</p>
<p>验证授权的数据库名，一般是 admin</p></li>
<li><p>-o / --out</p>
<p>指定导出目录，如果不指定
<code>-archive</code>，会在该目录中导出多个文件，每个集合有两个文件。</p></li>
<li><p>--gzip</p>
<p>导出时使用 gzip 压缩</p></li>
<li><p>--archive</p>
<p>导出成单个文件</p></li>
</ul>
<h2 id="还原">还原</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mongorestore <span class="literal">-h</span> localhost:<span class="number">27018</span> <span class="literal">-u</span> test <span class="literal">-p</span> testpwd <span class="literal">--authenticationDatabase</span> admin <span class="literal">--gzip</span> <span class="literal">--objcheck</span> <span class="literal">--drop</span> <span class="literal">--noIndexRestore</span> <span class="literal">--nsInclude</span>=databaseName.*  <span class="literal">--nsFrom</span>=databaseName.* <span class="literal">--nsTo</span>=newDatabaseName.* <span class="literal">--archive</span>=C:\Users\%username%\Desktop\dump\databaseName.gzip</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果不需要重命名数据库，去掉 <code>--nsFrom</code> 和
<code>--nsTo</code> 参数即可</p>
</blockquote>
<ul>
<li><p>--drop</p>
<p>删除已经存在的集合</p></li>
<li><p>--noIndexRestore</p>
<p>禁止恢复索引</p></li>
<li><p>--nsInclude</p>
<p>包含的命名空间(namespace)，<code>databaseName.*</code> 表示数据库
databaseName 下的所有集合</p></li>
<li><p>--nsFrom</p>
<p>指定重命名前的数据库命名空间</p></li>
<li><p>--nsTo</p>
<p>指定重命名后的数据库命名空间</p></li>
</ul>
<h2 id="副本集中备份与还原">副本集中备份与还原</h2>
<p>如果 MongoDB 配置了副本集，上述中的 <code>-h</code>
需要使用<strong>主节点的 IP 地址和端口</strong>。</p>
<p>通过以下方法查看主节点：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入到 mongodb 的任意节点中</span></span><br><span class="line">mongosh <span class="literal">--host</span> <span class="number">127.0</span>.<span class="number">0.1</span> <span class="literal">--port</span> <span class="number">27018</span> <span class="literal">-u</span> yourUsername <span class="literal">-p</span> yourPassword</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取状态</span></span><br><span class="line">rs.status()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>The <a
href="https://www.mongodb.com/docs/manual/release-notes/6.0-compatibility/#legacy-mongo-shell-removed">mongo
shell is removed from MongoDB 6.0</a>. The replacement is <a
href="https://www.mongodb.com/docs/mongodb-shell/">mongosh</a>.</p>
<p>MongoDB 6.0 以后 <code>mongo</code> 命令取消了，改用
<code>mongosh</code>，<code>mongosh</code> 需要手动安装，可以使用 scoop
安装：<code>scoop install mongosh</code></p>
</blockquote>
<p>可以看到如下结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面内容省略了其它无关配置</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">members</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">_id</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;192.168.3.240:27018&quot;</span>,</span><br><span class="line">      <span class="attr">health</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">state</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">stateStr</span>: <span class="string">&quot;PRIMARY&quot;</span>, <span class="comment">// 说明是主节点</span></span><br><span class="line">      <span class="attr">uptime</span>: <span class="number">7710</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">_id</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;192.168.3.240:27019&quot;</span>,</span><br><span class="line">      <span class="attr">health</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">state</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">stateStr</span>: <span class="string">&quot;SECONDARY&quot;</span>,</span><br><span class="line">      <span class="attr">uptime</span>: <span class="number">7701</span>,      </span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">_id</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;192.168.3.240:27020&quot;</span>,</span><br><span class="line">      <span class="attr">health</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">state</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">stateStr</span>: <span class="string">&quot;SECONDARY&quot;</span>,</span><br><span class="line">      <span class="attr">uptime</span>: <span class="number">7699</span>      </span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述结果中，<code>state</code> 为 1 时（stateStr 为
"PRIMARY"）表示主节点。</p>
<p>在对副本集数据库进行恢复时，若数据过大，节点过多，会导致磁盘的读写飙升到100%，从而无法完成数据库恢复。此时可以减少副本节点，建议只使用
2 个。</p>
<h2 id="参考">参考</h2>
<p><a href="https://www.mongodb.com/try/download/database-tools">Try
MongoDB Tools Free</a></p>
<p><a
href="https://www.mongodb.com/docs/database-tools/#the-mongodb-database-tools-documentation">The
MongoDB Database Tools Documentation</a></p>
<p><a
href="https://www.helenjoscott.com/2022/01/29/mongod-mongo-mongosh-mongos-what-now/">mongod,
mongo, mongosh, mongos, what now?</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongodb</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql 匹配集合中的数据</title>
    <url>/posts/2019/1BADZMH.html</url>
    <content><![CDATA[<p>在进行表查询的时候，有时需要在列表（集合）中进行匹配查询，这个时候一般可以用三种方法实现，分别是：</p>
<p>LIKE, IN，FIND_IN_SET()。</p>
<span id="more"></span>
<h2 id="like-用法">LIKE 用法</h2>
<p>LIKE 运算符用于 WHERE
表达式中，以搜索匹配字段中的指定内容，语法如下：</p>
<ul>
<li><p>WHERE field LIKE pattern</p></li>
<li><p>WHERE field NOT LIKE pattern</p></li>
</ul>
<p>在LIKE全面加上 NOT 运算符时，表示与 LIKE 相反的意思，即选择 column
不包含 pattern 的数据记录</p>
<p>LIKE 通常与通配符%一起使用，% 表示通配 pattern
中出现的内容，而不加通配符 % 的 LIKE
语法，表示精确匹配，其实际效果等同于 = 等于运算符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `test` (  </span><br><span class="line">  `id` int(8) NOT NULL auto_increment,  </span><br><span class="line">  `name` varchar(255) NOT NULL,  </span><br><span class="line">  `list` varchar(255) NOT NULL,  </span><br><span class="line">  PRIMARY KEY  (`id`)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">INSERT INTO `test` VALUES (1, &#x27;names1&#x27;, &#x27;daodao,xiaohu,xiaoqin&#x27;);  </span><br><span class="line">INSERT INTO `test` VALUES (2, &#x27;names2&#x27;, &#x27;xiaohu,daodao,xiaoqin&#x27;);  </span><br><span class="line">INSERT INTO `test` VALUES (3, &#x27;names3&#x27;, &#x27;xiaoqin,daodao,xiaohu&#x27;); </span><br><span class="line"></span><br><span class="line">-- LIKE 用法</span><br><span class="line">SELECT * FROM test WHERE list LIKE &#x27;%daodao%&#x27;</span><br></pre></td></tr></table></figure>
<h2 id="in-用法">IN 用法</h2>
<p>IN 常用于 WHERE
表达式中，其作用是查询某个常量范围内的数据。用法如下：</p>
<ul>
<li><p>WHERE field IN (value1,value2,value3,…)</p></li>
<li><p>WHERE field NOT IN (value1,value2,value3,…)</p></li>
</ul>
<p>IN 后面的括号内为常量集合，且各个关键词之间用英文的逗号隔开。</p>
<h2 id="find_in_set-用法">FIND_IN_SET() 用法</h2>
<p>FIND_IN_SET 常用于 WHERE
表达式中，其作用是查询某个范围（常量或者字段）内的数据。用法如下：</p>
<ul>
<li>WHERE FIND_IN_SET(str,strlist)</li>
<li>WHERE NOT FIND_IN_SET(str,strlist)</li>
</ul>
<p>str 既可以是字段，也可以是常量</p>
<p>strlist
既可以是常量集合，也可以是字段，每个关键字之间用英文逗号隔开</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 在字段集合中查找</span><br><span class="line">SELECT * FROM test WHERE FIND_IN_SET(&#x27;daodao&#x27;,list)</span><br><span class="line"></span><br><span class="line">-- 在常量集合中查找</span><br><span class="line">SELECT * FROM test WHERE FIND_IN_SET(&#x27;daodao&#x27;,&#x27;daodao,xiaohu,qiaoqin&#x27;)</span><br><span class="line"></span><br><span class="line">-- 查找值是字段</span><br><span class="line">SELECT * FROM test WHERE FIND_IN_SET(name,&#x27;names1,mameother&#x27;)</span><br></pre></td></tr></table></figure>
<h2 id="最佳实践">最佳实践</h2>
<ol type="1">
<li><p>如果待查询的条件是常量那就使用 IN，是变量则使用 FIND_IN_SET。IN
可以使用索引。</p></li>
<li><p>如果使用 IN 和 FIND_IN_SET 都能满足条件，则最好使用
IN，理由同上，特别是查询字段为主键时或有索引时。</p></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql 三种注释写法</title>
    <url>/posts/2019/25CC488.html</url>
    <content><![CDATA[<span id="more"></span>
<h2 id="单行注释">单行注释</h2>
<ul>
<li><p>在行前面加上 <code>#</code> 号：</p>
<p><code># 这是单行注释</code></p></li>
<li><p>在行前面加上 <code>--空格</code></p>
<p><code>-- 这是单行注释</code></p></li>
</ul>
<h2 id="多行注释">多行注释</h2>
<p>用一对<code>/* */</code> 包围</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">*这是多行注释</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql scoop 安装</title>
    <url>/posts/2020/2EA0GRR.html</url>
    <content><![CDATA[<p>为了方便今后安装 mysql，特对 scoop 安装 MySql 的流程记录一下。</p>
<span id="more"></span>
<h2 id="安装程序">安装程序</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scoop install mysql</span><br></pre></td></tr></table></figure>
<h2 id="配置服务">配置服务</h2>
<p>根据 scoop 提示，运行 mysqld 命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqld --install MySQL --defaults-file=&quot;D:\scoop\apps\mysql\current\my.ini&quot;</span><br></pre></td></tr></table></figure>
<h2 id="运行服务">运行服务</h2>
<p>用管理员方式启动命令行窗口，在里面输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net start MySQL</span><br></pre></td></tr></table></figure>
<h2 id="修改密码">修改密码</h2>
<p>打开命令行，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root</span><br></pre></td></tr></table></figure>
<p>然后再设置密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET PASSWORD FOR &#x27;root&#x27;@&#x27;localhost&#x27; = &#x27;auth_string&#x27;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql从入门到精通</title>
    <url>/posts/2020/P0HE12.html</url>
    <content><![CDATA[<p>MySql 从入门到精通教程</p>
<span id="more"></span>
<h2 id="数据库是什么">1. 数据库是什么</h2>
<p>本节介绍数据库的基本概念，包括数据库存储方式、数据库技术的发展历史、数据库的存储结构以及数据库在开发中的作用。</p>
<h3 id="数据存储方式">数据存储方式</h3>
<p>计算机数据（Data）的存储一般以硬盘为数据存储空间资源，从而保证计算机内的数据能够持续保存。对于数据的处理，一般会采用数据库相关的技术进行处理，从而保证数据处理的高效性。</p>
<h3 id="什么是数据库">什么是数据库</h3>
<p>数据库是数据管理的有效技术，是由一批数据构成的有序集合，这些数据被存放在结构化的数据表里。数据表之间相互关联，反映客观事物间的本质联系。数据库能有效地帮助一个组织或企业科学地管理各类信息资源。</p>
<h3 id="数据库的存储结构">数据库的存储结构</h3>
<p>数据库的存储结构是指数据库中的物理数据和逻辑数据的表示形式、物理数据和逻辑数据之间关系映射方式的描述。在数据库技术中，可以使用两种形式描述客观现实的数据：物理数据描述和逻辑数据描述。物理数据和逻辑数据之间的转换通过数据库管理系统实现。</p>
<h4 id="物理数据描述">物理数据描述</h4>
<p>物理数据描述是指数据在存储设备上的存储方式，物理数据是实际存放在存储设备上的数据，这些数据也称为物理记录。根据物理记录存储的位置，又可以分为有序存储和无序存储。</p>
<ul>
<li>位（bit）：二进制的一个单位称为位，位只能取 1 或 0。</li>
<li>字节（byte）：8 个位称为一个字节，可以存放对应 ASCII
码的一个字符。</li>
<li>字（word）：若干个字节组成一个字。一个字所含的二进制的位数称为字长，许多计算机的字长是不同的，例如计算机的字长可以是
8 位、16 位、24 位、32 位等。</li>
<li>块（block）：内存储器和外存储器交换信息的最小单位，又称为物理块或物理记录，每块的大小通常为
256 字节、512 字节、1024 字节等。</li>
<li>卷（volume）：一台输入输出设备所能装载的全部有用信息，例如磁带机的一盘磁带即为一卷，磁盘设备的一个盘组也是一卷。</li>
<li>无序存储（unordered）：数据记录按照插入的顺序进行存储。</li>
</ul>
<h4 id="逻辑数据描述">逻辑数据描述</h4>
<p>逻辑数据描述是指用户或程序员用于操作的数据形式，逻辑数据是一种抽象的概念，是对客观现实世界的反映和记录，这些数据也可以称为逻辑记录。</p>
<ul>
<li>实体（entity）：客观现实存在的东西使用实体来描述。实体既可以是具体的、有形的对象，也可以是抽象的、无形的对象。例如，一本书是一个有形对象，一次借书过程则是一个无形的对象。</li>
<li>实体集（entities）：特性完全相同的同类实体的集合称为实体集。例如，一个图书馆所有的书籍是一个实体集，该图书馆的所有借书过程也是一个实体集。</li>
<li>属性（attribute）：实体的特性称为属性。每个属性都有一个值域，这些值域可以是整数类型、浮点数类型、字符类型或日期类型等。例如，实体书的属性包括书名、书号、出版日期、页数、价格以及出版社等，这些属性对应的值域分别为字符类型、字符类型、日期类型、整数类型、浮点数类型和字符类型等。</li>
<li>标识符（identifier）：能够唯一地标识每个实体的属性或属性集。例如，书的书号属性是实体书的标识符，借书过程实体的标识符包括借书证号、书号两个属性。</li>
</ul>
<p>这些逻辑数据最终要通过数据库管理系统来转换成物理数据。在数据库管理系统中，描述逻辑数据的术语包括哪些呢？</p>
<ul>
<li>数据项（data
item）：也称为字段（field），标记实体属性的可以命名的最小信息单位，数据项的命名一般采用属性的描述性名称。这些名称可以是中文、英文或汉语拼音。</li>
<li>元组（tuple）：也称为记录（record），数据项的集合称为元组。一个元组表示一个具体的实体。</li>
<li>关系（relation）：在关系型数据库系统中，同一类元组所在的集合称为关系。关系适用于描述实体集，它包括一个实体集的所有元组。例如，所有的图书可以组成一个
books 关系。</li>
<li>键码（key）：在关系型数据库系统中，能够唯一地标识关系中每个元组的数据项或数据项的组合称为关系的键码。</li>
</ul>
<p>客观实体经过两层逻辑数据的描述，最后转变成实际存储的物理数据。
从数据库系统应用角度来看，数据库系统常见的运行与应用结构有：客户端/服务器结构、浏览器/服务器结构。</p>
<h2 id="数据库涉及到哪些技术">2. 数据库涉及到哪些技术？</h2>
<p>本节主要介绍数据库涉及到的技术，包括数据库系统、SQL
语言和数据库访问技术。</p>
<h3 id="数据库系统">数据库系统</h3>
<p>数据库管理系统（Database Management
System，DBMS）是位于操作系统与用户之间的一种操纵和管理数据库的软件，按照一定的数据模型科学地组织和存储数据，同时可以提供数据高效地获取和维护。</p>
<h4 id="数据定义功能">1) 数据定义功能</h4>
<p>DBMS 提供数据定义语言（Data Definition
Language，DDL），用户通过它可以方便地对数据库中的数据对象进行定义。</p>
<h4 id="数据操纵功能">2) 数据操纵功能</h4>
<p>DBMS 还提供数据操纵语言（Data Manipulation
Language，DML），用户可以使用 DML
操作数据，实现对数据库的基本操作，如查询、插入、删除和修改等。</p>
<h4 id="数据库的运行管理">3) 数据库的运行管理</h4>
<p>数据库在建立、运用和维护时由数据库管理系统统一管理、统一控制，以保证数据的安全性、完整性、多用户对数据的并发使用及发生故障后的系统恢复。例如：</p>
<ul>
<li>数据的完整性检查功能保证用户输入的数据应满足相应的约束条件；</li>
<li>数据库的安全保护功能保证只有赋予权限的用户才能访问数据库中的数据；</li>
<li>数据库的并发控制功能使多个用户可以在同一时刻并发地访问数据库的数据；</li>
<li>数据库系统的故障恢复功能使数据库运行出现故障时可以进行数据库恢复，以保证数据库可靠地运行。</li>
</ul>
<h4 id="提供方便有效地存取数据库信息的接口和工具">4)
提供方便、有效地存取数据库信息的接口和工具</h4>
<p>编程人员可通过编程语言与数据库之间的接口进行数据库应用程序的开发。数据库管理员（Database
Administrator，DBA）可通过提供的工具对数据库进行管理。</p>
<h4 id="数据库的建立和维护功能">5) 数据库的建立和维护功能</h4>
<p>数据库功能包括数据库初始数据的输入、转换功能，数据库的转储、恢复功能，数据库的重组织功能和性能监控、分析功能等。这些功能通常由一些使用程序来完成。</p>
<figure>
<img data-src="http://c.biancheng.net/uploads/allimg/190220/4-1Z220153J2254.gif"
alt="完整的数据库系统结构关系" />
<figcaption aria-hidden="true">完整的数据库系统结构关系</figcaption>
</figure>
<h2 id="了解sql语言">了解SQL语言</h2>
<p><a href="http://c.biancheng.net/mysql/">MySQL</a>
服务器正确安装以后，就已经完成了一个完整的 DBMS
的搭建，可以通过命令行管理工具或者图形化的管理工具对 MySQL
数据库进行操作。这种操作实质上是通过结构化查询语言（Structured Query
Language，SQL）来实现的，SQL 语言是各种数据库交互方式的基础。</p>
<p>SQL
是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。与其他程序设计语言（如C、<a
href="http://c.biancheng.net/java/">Java</a>等）不同的是，SQL
由很少的关键字组成，每个 SQL 语句通过一个或多个关键字构成。</p>
<p>SQL具有如下优点。</p>
<ol type="1">
<li><p>一体化：SQL集数据定义、数据操作和数据控制于一体，可以完成数据库中的全部工作。</p></li>
<li><p>使用方式灵活：SQL具有两种使用方式，可以直接以命令方式交互使用；也可以嵌入使用，嵌入C、<a
href="http://c.biancheng.net/cplus/">C++</a>、Fortran、COBOL、Java等语言中使用。</p></li>
<li><p>非过程化：只提操作要求，不必描述操作步骤，也不需要导航。使用时只需要告诉计算机“做什么”，而不需要告诉它“怎么做”。</p></li>
<li><p>语言简洁、语法简单、好学好用：在ANSI标准中，只包含94个英文单词，核心功能只用6个动词，语法接近英语口语。</p></li>
</ol>
<blockquote>
<p>注意：SQL 语句不区分大小写，许多 SQL 开发人员习惯对 SQL
本身的关键字进行大写，而对表或者列的名称使用小写，这样可以提高代码的可阅读性和可维护性。本教程也按照这种方式组织
SQL 语句。大多数数据库都支持通用的 SQL
语句，同时不同的数据库具有各自特有的 SQL 语言特性。</p>
</blockquote>
<h2 id="数据库访问技术">数据库访问技术</h2>
<p>数据库访问技术包括 ODBC、DAO、OLE DB 和 ADO。</p>
<h3 id="odbc">ODBC</h3>
<p>ODBC（Open Database
Connectivity，开放数据库互连）是微软公司开放服务结构（Windows Open
Services
Architecture，WOSA）中有关数据库的一个组成部分，它建立了一组规范，并提供了一组对数据库访问的标准
API（应用程序编程接口）。这些 API 利用 SQL 来完成其大部分任务。</p>
<h3 id="dao">DAO</h3>
<p>DAO（Data Access Object，数据访问对象集）是 Microsoft
提供的基于一个数据库对象集合的访问技术，可以独立于 DBMS
进行数据库的访问。</p>
<h3 id="ole-db">OLE DB</h3>
<p>OLE DB（Object Linking and Embedding
Database，对象连接与嵌入）是微软战略性的通向不同数据源的低级应用程序接口。OLE
DB
不仅包括微软资助的标准数据接口，开放数据库连通性（ODBC）的结构化查询语言（SQL）能力，还具有面向其他非
SQL 数据类型的通路。</p>
<h3 id="ado">ADO</h3>
<p>ADO（ActiveX Data Objects）是一个用于存取数据源的 COM
组件，提供了编程语言和统一数据访问方式 OLE DB
的一个中间层，允许开发人员编写访问数据的代码而不用关心数据库是如何实现的，只用关心到数据库的连接。</p>
<h2 id="致谢">致谢</h2>
<p>本文来源于：<a href="http://c.biancheng.net">C 语言中文网</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB 使用 Docker 配置多节点副本集</title>
    <url>/posts/2023/39J2472.html</url>
    <content><![CDATA[<p>本文介绍如何在 Linux 系统中通过 docker-compose 创建 MongoDB
副本集，若是 Windows，可以进入到 WSL 中进行部署。</p>
<span id="more"></span>
<h2 id="生成-keyfile">生成 KeyFile</h2>
<ul>
<li>MongoDB 使用 KeyFile 认证，副本集中的每个 mongodb 实例使用 KeyFile
内容作为认证其他成员的共享密码mongod实例只有拥有正确的keyfile才可以加入副本集</li>
<li>KeyFile 的内容必须是 6~1024 个字符的长度，且副本集所有成员的 KeyFile
内容必须相同。</li>
<li>KeyFile 应允许所有者读取，权限可以设置为 <code>400</code></li>
<li>可以使用任意方法生成 KeyFile。例如，如下操作使用 openssl
生成复杂的随机的1024个字符串。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir data &amp;&amp; cd data</span><br><span class="line">openssl rand -base64 800 &gt; mongodb.key</span><br></pre></td></tr></table></figure>
<h2
id="详细的docker-compose.yml">详细的<code>docker-compose.yml</code></h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker-compose</span></span><br><span class="line"><span class="comment"># 最新版本的 docker-compose 会自动识别 version</span></span><br><span class="line"><span class="comment"># version: &quot;3.9&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="comment"># mongodb 服务</span></span><br><span class="line">  <span class="comment"># 节点1</span></span><br><span class="line">  <span class="attr">mongodb27018:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">mongodb27018</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mongodb27018</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo:latest</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">27018</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">27018</span><span class="string">:27017</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ:&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MONGO_INITDB_ROOT_USERNAME=root</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MONGO_INITDB_ROOT_PASSWORD=yourPassword</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">mongod</span> <span class="string">--bind_ip_all</span> <span class="string">--replSet</span> <span class="string">rs_share</span> <span class="string">--keyFile</span> <span class="string">/data/mongodb.key</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/rs1/db:/data/db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/rs1/configdb:/data/configdb</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/mongodb.key:/data/mongodb.key</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mongodb_network</span></span><br><span class="line">    <span class="attr">entrypoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bash</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        chmod 400 /data/mongodb.key</span></span><br><span class="line"><span class="string">        chown 999:999 /data/mongodb.key</span></span><br><span class="line"><span class="string">        exec docker-entrypoint.sh $$@</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">  <span class="comment"># 副节点</span></span><br><span class="line">  <span class="attr">mongodb27019:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">mongodb27019</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mongodb27019</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo:latest</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">27019</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">27019</span><span class="string">:27017</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ:&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MONGO_INITDB_ROOT_USERNAME=root</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MONGO_INITDB_ROOT_PASSWORD=yourPassword</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">mongod</span> <span class="string">--bind_ip_all</span> <span class="string">--replSet</span> <span class="string">rs_share</span> <span class="string">--keyFile</span> <span class="string">/data/mongodb.key</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/rs2/db:/data/db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/rs2/configdb:/data/configdb</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/mongodb.key:/data/mongodb.key</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mongodb_network</span></span><br><span class="line">    <span class="attr">entrypoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bash</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        chmod 400 /data/mongodb.key</span></span><br><span class="line"><span class="string">        chown 999:999 /data/mongodb.key</span></span><br><span class="line"><span class="string">        exec docker-entrypoint.sh $$@</span></span><br><span class="line"><span class="string"></span>    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mongodb27018</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mongodb27020:</span></span><br><span class="line">    <span class="comment"># Host name = Container name</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">mongodb27020</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mongodb27020</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo:latest</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">27020</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">27020</span><span class="string">:27017</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ:&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MONGO_INITDB_ROOT_USERNAME=root</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MONGO_INITDB_ROOT_PASSWORD=yourPassword</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">mongod</span> <span class="string">--bind_ip_all</span> <span class="string">--replSet</span> <span class="string">rs_share</span> <span class="string">--keyFile</span> <span class="string">/data/mongodb.key</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/rs3/db:/data/db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/rs3/configdb:/data/configdb</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/mongodb.key:/data/mongodb.key</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mongodb_network</span></span><br><span class="line">    <span class="attr">entrypoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bash</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        chmod 400 /data/mongodb.key    </span></span><br><span class="line"><span class="string">        chown 999:999 /data/mongodb.key   </span></span><br><span class="line"><span class="string">        exec docker-entrypoint.sh $$@</span></span><br><span class="line"><span class="string"></span>    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mongodb27019</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="comment"># 设置 mongodb_network, 默认为 bridge 模式，参考：https://zhuanlan.zhihu.com/p/212772001</span></span><br><span class="line">  <span class="attr">mongodb_network:</span></span><br></pre></td></tr></table></figure>
<h2 id="创建挂载目录">创建挂载目录</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入到 data 目录</span></span><br><span class="line">mkdir &#123;rs1,rs2,rs3&#125;</span><br><span class="line"><span class="comment"># 将 mongodb.key 复制到 rs* 目录中</span></span><br><span class="line"><span class="built_in">cp</span> mongodb.key ./rs1/ &amp;&amp; <span class="built_in">cp</span> mongodb.key ./rs2/ &amp;&amp; <span class="built_in">cp</span> mongodb.key ./rs3/</span><br></pre></td></tr></table></figure>
<h2 id="部署容器">部署容器</h2>
<p>进入到 docker-compose.yml 目录，终端中执行
<code>docker compose up -d</code> 或者 <code>docker-compose up -d</code>
来部署容器。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230416124522790.png"
alt="image-20230416124522790" />
<figcaption aria-hidden="true">image-20230416124522790</figcaption>
</figure>
<h3 id="错误处理">错误处理</h3>
<p><strong>错误 1：</strong>error during connect: in the default daemon
configuration on Windows, the docker client must be run with elevated
privileges to connect</p>
<blockquote>
<p>docker desktop 没有启动，先启动，再运行</p>
</blockquote>
<p><strong>错误 2:</strong> Location5579201: Unable to acquire security
key[s]</p>
<p>keyFile 权限错误，docker compose down
后，清理挂载的所有文件，重新运行一次。</p>
<h2 id="配置副本集">配置副本集</h2>
<h3 id="进入-mongodb">进入 mongodb</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#进入 mongodb27018 的容器内</span></span><br><span class="line">docker exec <span class="literal">-it</span> mongodb27018 bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入mongo shell</span></span><br><span class="line"><span class="comment"># MongoDB 之前使用 mongo,之后使用 mongosh</span></span><br><span class="line">mongosh <span class="literal">-u</span> root <span class="literal">-p</span> yourPassword</span><br></pre></td></tr></table></figure>
<blockquote>
<p>The <a
href="https://www.mongodb.com/docs/manual/release-notes/6.0-compatibility/#legacy-mongo-shell-removed">mongo
shell is removed from MongoDB 6.0</a>. The replacement is <a
href="https://www.mongodb.com/docs/mongodb-shell/">mongosh</a>.</p>
</blockquote>
<h3 id="初始化副本集">初始化副本集</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到 admin</span></span><br><span class="line">use admin</span><br><span class="line"><span class="comment"># 进行授权认证</span></span><br><span class="line"><span class="comment"># 返回 &#123; ok: 1 &#125; 表示成功</span></span><br><span class="line">db.auth(<span class="string">&quot;root&quot;</span>,<span class="string">&quot;yourPassword&quot;</span>)</span><br><span class="line"><span class="comment"># 定义配置文件</span></span><br><span class="line"><span class="comment"># 配置中的 host 必须是本机实际的 ip，不能是 127.0.0.1，否则局域网内无法访问</span></span><br><span class="line"><span class="comment"># 如果要通过域名访问，则必须是域名</span></span><br><span class="line">rsconf = &#123;</span><br><span class="line">  _id: <span class="string">&quot;rs_share&quot;</span>,</span><br><span class="line">  members: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">_id</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="type">host</span>: <span class="string">&quot;192.168.3.240:27018&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">_id</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="type">host</span>: <span class="string">&quot;192.168.3.240:27019&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">_id</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="type">host</span>: <span class="string">&quot;192.168.3.240:27020&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化副本集</span></span><br><span class="line">rs.initiate(rsconf)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>若是只有一个节点，则只需要执行：<code>rs.initiate()</code></p>
</blockquote>
<p>当出现如下提示时，说明成功了：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&#123; <span class="string">&quot;ok&quot;</span> : <span class="number">1</span> &#125;</span><br><span class="line">rs_auth:SECONDARY&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>单主机模式部署 <code>3副本集</code>
添加节点必须使用宿主机IP+PORT，使用容器内部IP的情况下代码层面连接到
<code>mongodb-cluster</code> 集群，获取到的集群地址信息为
<code>docker</code> 容器内部 <code>IP</code>，若业务代码没有部署在
<code>mongodb</code> 主机则无法访问</p>
</blockquote>
<h3 id="修改副本集配置">修改副本集配置</h3>
<p>若是更换了主机 IP，则需要重新修改副本集中的
host，可以采用下列方式修改：</p>
<p>先按 <a href="#进入%20mongodb">进入 mongodb</a> 登陆到
mongodb，然后使用</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">rs.status().members.find(x=&gt;x.stateStr === &#x27;PRIMARY&#x27;)</span><br></pre></td></tr></table></figure>
<p>来查找主节点。</p>
<p>若当前实例不是主节点，则退出重新登陆到主节点中</p>
<p><strong>修改配置</strong>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到 admin</span></span><br><span class="line">use admin</span><br><span class="line"><span class="comment"># 进行授权认证</span></span><br><span class="line"><span class="comment"># 返回 &#123; ok: 1 &#125; 表示成功</span></span><br><span class="line">db.auth(<span class="string">&quot;root&quot;</span>,<span class="string">&quot;yourPassword&quot;</span>)</span><br><span class="line"><span class="comment"># 获取当前的副本集配置</span></span><br><span class="line">config = rs.conf();</span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line">config.members[<span class="number">0</span>].host = <span class="string">&quot;newhost:27017&quot;</span>;</span><br><span class="line"><span class="comment"># 应用新的配置</span></span><br><span class="line">rs.reconfig(config);</span><br></pre></td></tr></table></figure>
<p>你的 MongoDB 版本是 4.2 或更高版本，可以使用
<code>rs.reconfig()</code> 方法的 <code>force</code>
参数来强制应用新的配置，即使新的配置和当前的配置不兼容：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这个操作可能会导致数据丢失,谨慎使用</span></span><br><span class="line">rs.reconfig(config, &#123; force: true &#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>rs.reconfig()</code>
方法会导致副本集的所有成员（包括主节点）重新启动</p>
</blockquote>
<h2 id="参考">参考</h2>
<p><a href="https://www.cnblogs.com/evescn/p/16203350.html">MongoDB 3
副本集群（Docker-compose部署）（单机模式）</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongodb</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>MongoDB</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB使用 Docker 配置单节点副本集</title>
    <url>/posts/2024/M96VZZ.html</url>
    <content><![CDATA[<p>为了快速搭建 MongoDB 副本集开发环境，可以使用 Docker
快速启动一个单节点副本集。</p>
<p>实现方式有两种：</p>
<ol type="1">
<li>直接使用 docker-compose 完成</li>
<li>手动配置</li>
</ol>
<span id="more"></span>
<h2 id="docker-compose-方案">docker-compose 方案</h2>
<p>docker-compose 内容如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mongodb27017:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">mongodb27017</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mongodb27017</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo:6.0</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">27018</span><span class="string">:27017</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MONGO_INITDB_ROOT_USERNAME=root</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MONGO_INITDB_ROOT_PASSWORD=yourpassword</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">mongod</span> <span class="string">--bind_ip_all</span> <span class="string">--replSet</span> <span class="string">rs_0</span> <span class="string">--keyFile</span> <span class="string">/data/mongodb.key</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/mongodb/data:/data/db</span></span><br><span class="line">      <span class="comment"># - ./data/mongodb/configdb:/data/configdb</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mongodb-net</span></span><br><span class="line">    <span class="attr">entrypoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bash</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        openssl rand -base64 128 &gt; /data/mongodb.key</span></span><br><span class="line"><span class="string">        chmod 666 /data/mongodb.key</span></span><br><span class="line"><span class="string">        chown 999:999 /data/mongodb.key</span></span><br><span class="line"><span class="string">        echo &#x27;const isInited = rs.status().ok === 1</span></span><br><span class="line"><span class="string">        if(!isInited)&#123;</span></span><br><span class="line"><span class="string">          rs.initiate(&#123;</span></span><br><span class="line"><span class="string">              _id: &quot;rs_0&quot;,</span></span><br><span class="line"><span class="string">              members: [</span></span><br><span class="line"><span class="string">                  &#123; _id: 0, host: &quot;192.168.128.240:27018&quot; &#125;</span></span><br><span class="line"><span class="string">              ]</span></span><br><span class="line"><span class="string">          &#125;)</span></span><br><span class="line"><span class="string">        &#125;&#x27; &gt; /data/initReplicaSet.js</span></span><br><span class="line"><span class="string">        # 启动MongoDB服务</span></span><br><span class="line"><span class="string">        exec docker-entrypoint.sh &quot;$$@&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">        <span class="comment"># 等待MongoDB服务启动</span></span><br><span class="line">        <span class="string">until</span> <span class="string">mongosh</span> <span class="string">-u</span> <span class="string">root</span> <span class="string">-p</span> <span class="string">whfy8888</span> <span class="string">--authenticationDatabase</span> <span class="string">admin</span> <span class="string">--eval</span> <span class="string">&quot;print(&#x27;waited for connection&#x27;)&quot;</span> <span class="string">&gt;</span> <span class="string">/dev/null</span> <span class="number">2</span><span class="string">&gt;&amp;1;</span> <span class="string">do</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;Waiting for MongoDB to start...&quot;</span></span><br><span class="line">          <span class="string">sleep</span> <span class="number">2</span></span><br><span class="line">        <span class="string">done</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 等待MongoDB完全启动</span></span><br><span class="line">        <span class="string">sleep</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 执行初始化副本集的脚本</span></span><br><span class="line">        <span class="string">mongosh</span> <span class="string">-u</span> <span class="string">root</span> <span class="string">-p</span> <span class="string">whfy8888</span> <span class="string">--authenticationDatabase</span> <span class="string">admin</span> <span class="string">/data/initReplicaSet.js</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 等待docker-entrypoint.sh脚本执行的MongoDB服务进程</span></span><br><span class="line">        <span class="string">wait</span> <span class="string">$$!</span></span><br></pre></td></tr></table></figure>
<p>使用时，直接 <code>docker compose up -d</code> 即可。</p>
<blockquote>
<p>这种方式有一个bug，当关闭连接后，再连接时，就无法连接，需要等一会儿，目前未定位到原因</p>
</blockquote>
<h2 id="手动配置">手动配置</h2>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongodb</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库中实现数据继承的设计方法</title>
    <url>/posts/2023/2608835.html</url>
    <content><![CDATA[<p>遇到这么一个场景：需要根据分类树层级，使每个分类中定义的数据（以下简称：变量）可以像继承一样传递给子分类，而每个分类又可以单独对继承的变量进行设置，有的设置是专属的，有的设置又可以继续继承。</p>
<span id="more"></span>
<h2 id="方案选型">方案选型</h2>
<p>为了通过数据库保存继承关系，开发之前研究了两种方式：</p>
<ol type="1">
<li><p>在变量的定义中保存继承关系</p>
<p>每次发生继承后，都复制一个变量副本，然后在变量的副本中，保存继承对象的
id。但这有一个很严重的问题，每当分类树结构变动时，都要去维护继承关系，这是一个繁杂易错的操作。</p></li>
<li><p>通过分类树来确定继承关系</p>
<p>变量仅属于定义它的分类，通过分类的树形结构来自动确定继承关系，然后新建一个设置表，记录分类与变量对应的设置。</p></li>
</ol>
<h2 id="实现">实现</h2>
<h3 id="数据表结构">数据表结构</h3>
<p><strong>category 表：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">_id</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">parentId</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">   	<span class="attr">name</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>variable 表：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">_id</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">categoryId</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">privateSettings</span>:&#123;</span><br><span class="line">        <span class="attr">color</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>setting 表：</strong></p>
<p>只有当变量在某个分类中展示时，设置才会生效</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">_id</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">categoryId</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">variableId</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">publicSettings</span>:&#123;</span><br><span class="line">        <span class="attr">hidden</span>:<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="查询继承的变量">查询继承的变量</h3>
<p>由于通过 category
树来确定继承关系，因此，要查询一个分类中对应的所有变量，应：</p>
<ol type="1">
<li>先找到分类对应的所有父分类，即继承链上所有的
<code>categoryId</code></li>
<li>通过 <code>categoryId</code> 来查找变量</li>
</ol>
<h3 id="设置的继承">设置的继承</h3>
<p>通过如下方式实现设置的继承：</p>
<ol type="1">
<li><p>先通过 <code>variableId</code> 找到所有的设置</p></li>
<li><p>求解每个变量的设置继承链</p>
<p>根据 category 树，将变量对应的设置组装成一个链表形式的数据，如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">categoryId</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">publicSettings</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">parent</span>:&#123;</span><br><span class="line">        <span class="attr">categoryId</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">publicSettings</span>:&#123;&#125;,</span><br><span class="line">        <span class="attr">parent</span>:&#123;...&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>在使用时，写一个方法去递归这个设置继承链，就可以获得需要的设置参数。</p>
<blockquote>
<p>当数据传递到前端后，前端可以将多个设置通过原型链连接在一起，使用时直接通过
<code>obj.name</code> 的方式读取。就不需要专门的方法去获取设置了。</p>
</blockquote>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a
href="https://blog.csdn.net/weixin_43752854/article/details/104700900">类的继承关系如何在关系型数据库体现</a></li>
<li><a href="https://vertabelo.com/blog/inheritance-in-database/">How to
Model Inheritance in a Database</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>数据库设计</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>数据库设计</tag>
      </tags>
  </entry>
  <entry>
    <title>关于mongoose返回的对象无法修改的原因以及解决方法</title>
    <url>/posts/2020/2GK4675.html</url>
    <content><![CDATA[<p>我们在使用 <code>Mongoose</code>的时候，或许大家都会发现回调返回的
<code>result</code> 无法进行修改，Google
了一下，现在把方法做一个总结，方便今后搜索。</p>
<span id="more"></span>
<h2 id="原因">原因</h2>
<p>实际上 <code>mongoose</code> 返回的数据并不是
<code>object</code>，虽然通过 <code>typeof</code> 判断类型是
<code>Object</code>，但其实 <code>mongoose</code> 自己封装的一个对象（<a
href="https://mongoosejs.com/docs/api/document.html">Mongoose
Document</a>），这个对象的原型里面挂载了很多方法，并且这个对象会对数据进行实时查询以保证其符合预定义的
<code>model</code>，而无论添加删除<code>model</code>都不会改变，所以设置无效。</p>
<blockquote>
<p>聚合查询出来的结果不需要转换</p>
</blockquote>
<h2 id="解决办法">解决办法</h2>
<h3 id="toobject">toObject()</h3>
<p>在返回的 result 对象调用 <code>toObject()</code> 或
<code>toJSON()</code> 方法，则可以对它进行修改。</p>
<blockquote>
<p>本质上使用<code>toObject</code>和<code>toJSON</code>都是可以的，其实这两个方法一般来说是没区别的，而如果要讲究区别的话，那就是如果使用<code>toJSON</code>的话，对生成的对象用<code>JSON.stringify</code>，此时用的是这个对象本身的<code>toJSON</code>方法来序列化，而不是原生对象<code>Object</code>的方法。</p>
</blockquote>
<h3 id="lean">.lean()</h3>
<p>可以通过使用 <code>lean</code> 将结果转成纯 javascript 对象。</p>
<p>启用 lean 选项的查询返回的文档是纯 javascript 对象，而不是 Mongoose
文档。它们没有 save 方法、getter/setter、virtuals 或其他 Mongoose
特性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Query().lean() // true</span><br><span class="line">new Query().lean(true)</span><br><span class="line">new Query().lean(false)</span><br><span class="line"></span><br><span class="line">const docs = await Model.find().lean();</span><br><span class="line">docs[0] instanceof mongoose.Document; // false</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a
href="https://www.jianshu.com/p/205225036610">关于mongoose返回的数据无法修改的原因以及解决方法</a></li>
<li><a
href="https://segmentfault.com/a/1190000007818969">Mongoose返回数据修改中遇到的坑</a></li>
<li>https://mongoosejs.com/docs/api/query.html#query_Query-lean</li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongoose</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>Mongoose</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>monoose返回对象无法比较ObjectId</title>
    <url>/posts/2021/35VQS80.html</url>
    <content><![CDATA[<p>在使用 <code>mongoose</code> 时遇到这样一个坑，<code>Schema</code>
定义如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// id</span></span><br><span class="line">    _id<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      type<span class="punctuation">:</span> mongoose.Types.ObjectId<span class="punctuation">,</span></span><br><span class="line">      required<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 部门名称</span></span><br><span class="line">    departmentName<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      type<span class="punctuation">:</span> String<span class="punctuation">,</span></span><br><span class="line">      trim<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      required<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 描述</span></span><br><span class="line">    description<span class="punctuation">:</span> String<span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排序</span></span><br><span class="line">    order<span class="punctuation">:</span> Number<span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上一级部门</span></span><br><span class="line">    parentId<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      type<span class="punctuation">:</span> mongoose.Types.ObjectId<span class="punctuation">,</span></span><br><span class="line">      required<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span>;</span><br></pre></td></tr></table></figure>
<p>当我使用<code>===</code>比较集合中两个 ObjectId 时，始终为
<code>false</code> 。</p>
<span id="more"></span>
<p>这是我的比较语句的主要部分：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">const departments = await this.ctx.mode(&#x27;Department&#x27;).find(<span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>)</span><br><span class="line"></span><br><span class="line">const firstDp = departments<span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line">const parentDp = departments.find(dp=&gt;dp._id===firstDp.parentId)</span><br><span class="line"></span><br><span class="line">console.log(<span class="string">&quot;result:&quot;</span><span class="punctuation">,</span>parentDp===<span class="literal"><span class="keyword">null</span></span>)</span><br><span class="line"><span class="comment">// result:true</span></span><br></pre></td></tr></table></figure>
<p>在查找第一个部门的父部门时，始终找不到（父部门是存在的）。</p>
<p>后面通过排查，才发现，原来通过 <code>find()</code> 查找出来的对象是
<code>mongoose</code> 自己的包装过的对象，上面的 <code>_id</code> 和
<code>parentId</code> 也是一个<code>ObjectId</code>对象，所以直接用
<code>===</code> 比较时，始终返回
<code>false</code>，导致不能找到结果。</p>
<p>找到问题的原因后，直接将 <code>ObjectId</code>
转成字符串比较就可以了。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">const parentDp = departments.find(dp=&gt;dp._id.toString()===firstDp.parentId.toString())</span><br><span class="line"></span><br><span class="line">console.log(<span class="string">&quot;result:&quot;</span><span class="punctuation">,</span>parentDp===<span class="literal"><span class="keyword">null</span></span>)</span><br><span class="line"><span class="comment">// result:false</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongoose</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>Mongoose</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>mongoose中嵌套内容修改后save失效</title>
    <url>/posts/2021/3M6QG1T.html</url>
    <content><![CDATA[<p>今天遇到这样一个问题，我有一个字段
<code>elments</code>，它是一个数组，数组里面是对象。当我修改数组中某个对象的某个字段后，再调用
<code>document.save()</code> 想保存修改，却发现无法保存修改后的值。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 模型名称</span></span><br><span class="line">  name<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    type<span class="punctuation">:</span> String<span class="punctuation">,</span></span><br><span class="line">    trim<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    required<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 里面元素的属性</span></span><br><span class="line">  elements<span class="punctuation">:</span> Array<span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>示例代码，基于<code>eggjs</code> 框架：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">model</span>.<span class="property">ModelFile</span>.<span class="title function_">insert</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">    <span class="attr">elements</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;circle&#x27;</span>,</span><br><span class="line">            <span class="attr">area</span>: <span class="string">&#x27;200&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;rectangle&#x27;</span>,</span><br><span class="line">            <span class="attr">area</span>: <span class="string">&#x27;300&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ol type="1">
<li>修改非嵌套字段时可以正常保存</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> doc = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">model</span>.<span class="property">ModelFile</span>.<span class="title function_">findOne</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;test&#x27;</span>&#125;)</span><br><span class="line">doc.<span class="property">name</span> = <span class="string">&#x27;test1&#x27;</span></span><br><span class="line"><span class="keyword">await</span> doc.<span class="title function_">save</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// name 修改为了 test1</span></span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>整体修改嵌套字段时，也可以正常保存</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> doc = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">model</span>.<span class="property">ModelFile</span>.<span class="title function_">findOne</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;test&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> rectangleElements = doc.<span class="property">elements</span>[<span class="number">1</span>]</span><br><span class="line">rectangleElements.<span class="property">area</span> = <span class="number">400</span></span><br><span class="line">doc.<span class="property">elements</span> = [doc.<span class="property">elements</span>[<span class="number">0</span>],rectangleElements]</span><br><span class="line"><span class="keyword">await</span> doc.<span class="title function_">save</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// elements 中的 rectangle 面积被修改为了 400</span></span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li>单独修改引用对应的值时，保存不生效</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> doc = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">model</span>.<span class="property">ModelFile</span>.<span class="title function_">findOne</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;test&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> rectangleElements = doc.<span class="property">elements</span>[<span class="number">1</span>]</span><br><span class="line">rectangleElements.<span class="property">area</span> = <span class="number">400</span></span><br><span class="line"><span class="keyword">await</span> doc.<span class="title function_">save</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// elements 中的 rectangle 面积还是 300</span></span><br></pre></td></tr></table></figure>
<p>针对第 3 种情况，由于 <code>elements</code>
里面的元素没有特定的约束，可以随意修改，为了在修改后可以调用
<code>save()</code>，需要在保存之前调用
<code>markModified()</code>。</p>
<p>改成如下形式就可以了：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> doc = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">model</span>.<span class="property">ModelFile</span>.<span class="title function_">findOne</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;test&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> rectangleElements = doc.<span class="property">elements</span>[<span class="number">1</span>]</span><br><span class="line">rectangleElements.<span class="property">area</span> = <span class="number">400</span></span><br><span class="line"></span><br><span class="line">doc.<span class="title function_">markModified</span>(<span class="string">&quot;elements&quot;</span>)</span><br><span class="line"><span class="keyword">await</span> doc.<span class="title function_">save</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// elements 中的 rectangle 面积被修改为了 400</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongoose</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>Mongoose</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>monoose返回对象无法比较ObjectId</title>
    <url>/posts/2021/35VQS80.html</url>
    <content><![CDATA[<p>在使用 <code>mongoose</code> 时遇到这样一个坑，<code>Schema</code>
定义如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// id</span></span><br><span class="line">    _id<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      type<span class="punctuation">:</span> mongoose.Types.ObjectId<span class="punctuation">,</span></span><br><span class="line">      required<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 部门名称</span></span><br><span class="line">    departmentName<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      type<span class="punctuation">:</span> String<span class="punctuation">,</span></span><br><span class="line">      trim<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      required<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 描述</span></span><br><span class="line">    description<span class="punctuation">:</span> String<span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排序</span></span><br><span class="line">    order<span class="punctuation">:</span> Number<span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上一级部门</span></span><br><span class="line">    parentId<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      type<span class="punctuation">:</span> mongoose.Types.ObjectId<span class="punctuation">,</span></span><br><span class="line">      required<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span>;</span><br></pre></td></tr></table></figure>
<p>当我使用<code>===</code>比较集合中两个 ObjectId 时，始终为
<code>false</code> 。</p>
<span id="more"></span>
<p>这是我的比较语句的主要部分：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">const departments = await this.ctx.mode(&#x27;Department&#x27;).find(<span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>)</span><br><span class="line"></span><br><span class="line">const firstDp = departments<span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line">const parentDp = departments.find(dp=&gt;dp._id===firstDp.parentId)</span><br><span class="line"></span><br><span class="line">console.log(<span class="string">&quot;result:&quot;</span><span class="punctuation">,</span>parentDp===<span class="literal"><span class="keyword">null</span></span>)</span><br><span class="line"><span class="comment">// result:true</span></span><br></pre></td></tr></table></figure>
<p>在查找第一个部门的父部门时，始终找不到（父部门是存在的）。</p>
<p>后面通过排查，才发现，原来通过 <code>find()</code> 查找出来的对象是
<code>mongoose</code> 自己的包装过的对象，上面的 <code>_id</code> 和
<code>parentId</code> 也是一个<code>ObjectId</code>对象，所以直接用
<code>===</code> 比较时，始终返回
<code>false</code>，导致不能找到结果。</p>
<p>找到问题的原因后，直接将 <code>ObjectId</code>
转成字符串比较就可以了。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">const parentDp = departments.find(dp=&gt;dp._id.toString()===firstDp.parentId.toString())</span><br><span class="line"></span><br><span class="line">console.log(<span class="string">&quot;result:&quot;</span><span class="punctuation">,</span>parentDp===<span class="literal"><span class="keyword">null</span></span>)</span><br><span class="line"><span class="comment">// result:false</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongoose</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>Mongoose</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>mongoose使用findOneAndUpdate不能更新默认值</title>
    <url>/posts/2021/3Z62NZ0.html</url>
    <content><![CDATA[<p>今天遇到这样一个问题，当我使用 <code>findOneAndUpdate</code>
来更新或新建文档时，发现如果文档是新建的，则定义的默认值居然为空。</p>
<p>经过查阅相关文档，在查询时添加 <code>setDefaultsOnInsert: true</code>
可以解决这个问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">upsert</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">new</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 在插入时设置默认值</span></span><br><span class="line">  <span class="attr">setDefaultsOnInsert</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongoose</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>Mongoose</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>monggose嵌套对象中添加ObjectId</title>
    <url>/posts/2021/10XS5HK.html</url>
    <content><![CDATA[<p>如何在 Mongoose 的定义中，定义一个包含 ObjectId 的嵌套定义呢？</p>
<span id="more"></span>
<p><strong>正确的定义方式如下：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 嵌套定义</span></span><br><span class="line"><span class="keyword">const</span> nestedSchema = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">fileTypeId</span>: mongoose.<span class="property">Types</span>.<span class="property">ObjectId</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="comment">// 代表不生成_id项，否则会在对象中生成额外的_id字段</span></span><br><span class="line">  <span class="attr">_id</span>: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserSchema</span> = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="attr">nestedData</span>: &#123;</span><br><span class="line">    <span class="comment">// 类型为</span></span><br><span class="line">    <span class="attr">type</span>: nestedSchema</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>错误的定义：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">UserSchema</span> = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="attr">extra</span>: &#123;</span><br><span class="line">    <span class="attr">fileTypeId</span>: mongoose.<span class="property">Types</span>.<span class="property">ObjectId</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这种定义如果传入的 <code>fileTypeId</code>
是一个字符串的话，不会自动转成 <code>ObjectId</code>，会使得 Mongoose
报错。</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongoose</category>
      </categories>
      <tags>
        <tag>Mongoose</tag>
      </tags>
  </entry>
  <entry>
    <title>mongoose子文档</title>
    <url>/posts/2021/1QN39SQ.html</url>
    <content><![CDATA[<p>子文档是在一个 <code>Schema</code> 中嵌入另一个
<code>Schema</code>，它的形式主要有两种：</p>
<ul>
<li><p>子文档是数组</p></li>
<li><p>子文档是对象</p>
<blockquote>
<p>注意，子文档是对象的情况只适用于 4.2.0 及以上的版本</p>
</blockquote></li>
</ul>
<span id="more"></span>
<h2 id="什么是子文档">什么是子文档？</h2>
<p>子文档和顶层的文档具有相同的特性，它们唯一的区别是子文档不是单独存储的，它与顶层文档存储在一起。</p>
<p>由于子文档的特性，虽然子文档也具有 <code>save()</code>
方法，但是调用它却不会保存修改，如果想要保存修改，需要在顶层文档调用
<code>save()</code> 方法。</p>
<p><strong>顶层文档与子文档的 <code>pre('save')</code> 和
<code>pre('validate')</code> 中间件执行顺序</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line"></span><br><span class="line">ps[父save]</span><br><span class="line">pv[父validate]</span><br><span class="line">cs[子save]</span><br><span class="line">cv[子validate]</span><br><span class="line"></span><br><span class="line">pv--&gt;cv--&gt;cs--&gt;ps</span><br></pre></td></tr></table></figure>
<h2 id="子文档的定义">子文档的定义</h2>
<p>它们的定义如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> childSchema = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;string&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parentSchema = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="comment">// Array of subdocuments</span></span><br><span class="line">  <span class="comment">// 数组子文档</span></span><br><span class="line">  <span class="attr">children</span>: [childSchema],</span><br><span class="line">  <span class="comment">// Single nested subdocuments. Caveat: single nested subdocs only work</span></span><br><span class="line">  <span class="comment">// in mongoose &gt;= 4.2.0</span></span><br><span class="line">  <span class="comment">// 对象子文档</span></span><br><span class="line">  <span class="attr">child</span>: childSchema</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="数组子文档的其它定义形式">数组子文档的其它定义形式</h3>
<p>如果创建一个对象数组，Mongoose 会自动将其转换成 Schema 定义</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> parentSchema = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">children</span>: [&#123; <span class="attr">name</span>: <span class="string">&#x27;string&#x27;</span> &#125;]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Equivalent</span></span><br><span class="line"><span class="keyword">const</span> parentSchema = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">children</span>: [<span class="keyword">new</span> <span class="title class_">Schema</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;string&#x27;</span> &#125;)]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="对象子文档的其它定义形式">对象子文档的其它定义形式</h3>
<p>如果创建的是一个嵌套对象，则不会转换成 Schema
定义，它是一个嵌套路径</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="keyword">const</span> schema = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">nested</span>: &#123;</span><br><span class="line">    <span class="attr">prop</span>: <span class="title class_">String</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> schema = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">nested</span>: &#123;</span><br><span class="line">    <span class="comment">// Do not do this! This makes `nested` a mixed path in Mongoose 5</span></span><br><span class="line">    <span class="attr">type</span>: &#123; <span class="attr">prop</span>: <span class="title class_">String</span> &#125;,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> schema = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">nested</span>: &#123;</span><br><span class="line">    <span class="comment">// This works correctly</span></span><br><span class="line">    <span class="attr">type</span>: <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123; <span class="attr">prop</span>: <span class="title class_">String</span> &#125;),</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="取消子文档中的-_id">取消子文档中的 <code>_id</code></h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// disabled _id</span></span><br><span class="line"><span class="keyword">const</span> childSchema = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123; <span class="attr">name</span>: <span class="title class_">String</span> &#125;, &#123; <span class="attr">_id</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> parentSchema = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123; <span class="attr">children</span>: [childSchema] &#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>_id</code> 设置只能用于子文档中</p>
</blockquote>
<h2 id="子文档与嵌套路径">子文档与嵌套路径</h2>
<p>两者的定义如下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Subdocument</span></span><br><span class="line"><span class="comment">// 子文档</span></span><br><span class="line"><span class="keyword">const</span> subdocumentSchema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">child</span>: <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123; <span class="attr">name</span>: <span class="title class_">String</span>, <span class="attr">age</span>: <span class="title class_">Number</span> &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Subdoc</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;Subdoc&#x27;</span>, subdocumentSchema);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nested path</span></span><br><span class="line"><span class="comment">// 嵌套路径</span></span><br><span class="line"><span class="keyword">const</span> nestedSchema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">child</span>: &#123; <span class="attr">name</span>: <span class="title class_">String</span>, <span class="attr">age</span>: <span class="title class_">Number</span> &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Nested</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;Nested&#x27;</span>, nestedSchema);</span><br></pre></td></tr></table></figure>
<p><strong>区别：</strong></p>
<p>子文档的 child 没有值时为 undefined，而嵌套路径则不是：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> doc1 = <span class="keyword">new</span> <span class="title class_">Subdoc</span>(&#123;&#125;);</span><br><span class="line">doc1.<span class="property">child</span> === <span class="literal">undefined</span>; <span class="comment">// true</span></span><br><span class="line">doc1.<span class="property">child</span>.<span class="property">name</span> = <span class="string">&#x27;test&#x27;</span>; <span class="comment">// Throws TypeError: cannot read property...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> doc2 = <span class="keyword">new</span> <span class="title class_">Nested</span>(&#123;&#125;);</span><br><span class="line">doc2.<span class="property">child</span> === <span class="literal">undefined</span>; <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(doc2.<span class="property">child</span>); <span class="comment">// Prints &#x27;MongooseDocument &#123; undefined &#125;&#x27;</span></span><br><span class="line">doc2.<span class="property">child</span>.<span class="property">name</span> = <span class="string">&#x27;test&#x27;</span>; <span class="comment">// Works</span></span><br></pre></td></tr></table></figure>
<h2 id="子文档默认值">子文档默认值</h2>
<ul>
<li>默认值为 <code>undefined</code></li>
<li>如果设置一个非空值，比如
<code>&#123;&#125;</code>，则会给子文档赋予默认值</li>
</ul>
<h2 id="子文档查询">子文档查询</h2>
<p>每一个子文档都有一个 <code>_id</code>，可以通过 <code>id()</code>
方法来查询子文档</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> doc = parent.<span class="property">children</span>.<span class="title function_">id</span>(_id);</span><br></pre></td></tr></table></figure>
<h2 id="向子文档数组中插入新值">向子文档数组中插入新值</h2>
<p>可以使用 <code>push</code>, <code>unshift</code>,
<code>addToSet</code> 等方法添加：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Parent</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;Parent&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> parent = <span class="keyword">new</span> <span class="title class_">Parent</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// create a comment</span></span><br><span class="line">parent.<span class="property">children</span>.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Liesl&#x27;</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> subdoc = parent.<span class="property">children</span>[<span class="number">0</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(subdoc) <span class="comment">// &#123; _id: &#x27;501d86090d371bab2c0341c5&#x27;, name: &#x27;Liesl&#x27; &#125;</span></span><br><span class="line">subdoc.<span class="property">isNew</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">parent.<span class="title function_">save</span>(<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="title function_">handleError</span>(err)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Success!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>也可以使用 <code>create</code> 直接创建：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newdoc = parent.<span class="property">children</span>.<span class="title function_">create</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Aaron&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="移除子文档">移除子文档</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 移除方式1</span></span><br><span class="line">parent.<span class="property">children</span>.<span class="title function_">id</span>(_id).<span class="title function_">remove</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除方式2</span></span><br><span class="line">parent.<span class="property">children</span>.<span class="title function_">pull</span>(_id)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 整体移除1</span></span><br><span class="line">parent.<span class="property">child</span>.<span class="title function_">remove</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 整体移除2</span></span><br><span class="line">parent.<span class="property">child</span> = <span class="literal">null</span></span><br></pre></td></tr></table></figure>
<h2 id="获取子文档的父级">获取子文档的父级</h2>
<p>通过 <code>parent()</code> 方法获取父级：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> schema = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">docArr</span>: [&#123; <span class="attr">name</span>: <span class="title class_">String</span> &#125;],</span><br><span class="line">  <span class="attr">singleNested</span>: <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123; <span class="attr">name</span>: <span class="title class_">String</span> &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Model</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;Test&#x27;</span>, schema);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> doc = <span class="keyword">new</span> <span class="title class_">Model</span>(&#123;</span><br><span class="line">  <span class="attr">docArr</span>: [&#123; <span class="attr">name</span>: <span class="string">&#x27;foo&#x27;</span> &#125;],</span><br><span class="line">  <span class="attr">singleNested</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;bar&#x27;</span> &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子文档是对象</span></span><br><span class="line">doc.<span class="property">singleNested</span>.<span class="title function_">parent</span>() === doc; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子文档是数组</span></span><br><span class="line">doc.<span class="property">docArr</span>[<span class="number">0</span>].<span class="title function_">parent</span>() === doc; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>如果是多级嵌套，可以使用 <code>ownerDocument()</code>
来获取根文档。</p>
<h2 id="致谢">致谢</h2>
<p>本文参考以下文章，在此致以诚挚感谢！</p>
<ol type="1">
<li><a href="https://mongoosejs.com/docs/subdocs.html">官方文档:
Subdocuments</a></li>
<li><a href="https://mongoosejs.com/docs/guide.html#options">Mongoose
v6.2.9: Schemas (mongoosejs.com)</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongoose</category>
      </categories>
      <tags>
        <tag>Mongoose</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongoose 中特殊类型的等价字符串表达形式</title>
    <url>/posts/2022/HSPJ12.html</url>
    <content><![CDATA[<p>后端开放了一个通用的聚合查询，传入聚合语句即可获取结果，但是一些特殊类型无法通过
<code>body</code> 传到后端，比如
<code>ObjectId</code>，<code>Regexp</code>
等。本文对这些特殊类型的等价表达方式进行了总结，以飨读者。</p>
<span id="more"></span>
<h2 id="objectid">ObjectId</h2>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    $toObjectId<span class="punctuation">:</span> &#x27;$jobPositionId&#x27;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="regexp">Regexp</h2>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  $regex<span class="punctuation">:</span> &#x27;filter&#x27;<span class="punctuation">,</span></span><br><span class="line">  $options<span class="punctuation">:</span> &#x27;gi&#x27;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongoose</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>Mongoose</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>EmbedIO获取request中的body数据</title>
    <url>/posts/2021/1SG7HMG.html</url>
    <content><![CDATA[<p>我使用 EmbedIO 搭建了一个 web 服务，使用
<code>WebApiController</code> 提供路由服务。在使用中，为了获取 request
中的 Body 数据，踩了一些坑，作此记录。</p>
<span id="more"></span>
<p>代码如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BaseController.cs</span></span><br><span class="line"><span class="comment">// 自定义所有 controller 的基类</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Server.Http.Controller</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">BaseController</span>: <span class="title">WebApiController</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">protected</span> IContainer IoC &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> LiteDBManager LiteDb &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取控制数据库操作类</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">OnBeforeHandler</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            IoC = HttpContext.GetIoCScope();</span><br><span class="line">            LiteDb = IoC.Get&lt;LiteDBManager&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">base</span>.OnBeforeHandler();           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// User.cs</span></span><br><span class="line"><span class="comment">// User相关的API</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Server.Http.Controller</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span> : <span class="title">BaseController</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 方式1</span></span><br><span class="line">        [<span class="meta">Route(HttpVerbs.Post, <span class="string">&quot;/user/login&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">bool</span>&gt; <span class="title">UserLogin_1</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> Body = HttpContext.GetRequestDataAsync&lt;User&gt;();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 方式2</span></span><br><span class="line">        [<span class="meta">Route(HttpVerbs.Post, <span class="string">&quot;/user/login&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">bool</span>&gt; <span class="title">UserLogin_2</span>(<span class="params">[FormData] NameValueCollection body</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 方式3</span></span><br><span class="line">        [<span class="meta">Route(HttpVerbs.Post, <span class="string">&quot;/user/login&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">bool</span>&gt; <span class="title">UserLogin_1</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 读取jsonData</span></span><br><span class="line">            <span class="keyword">var</span> Body = JObject.Parse(<span class="keyword">await</span> HttpContext.GetRequestBodyAsStringAsync());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述三种方式，原则上都是可以的，但是实际的使用中，会有一些坑要注意：</p>
<p><strong>坑1：</strong></p>
<p>不要在 <code>OnBeforeHandler</code> 方法中尝试获取 body
的值，始终为空。</p>
<p><strong>坑2：</strong></p>
<p>方式1中的 <code>User</code>
在进行类的定义时，必须是可读可写的属性，而不能是字段，如果是字段，会出现赋值为空的情况。</p>
<p><strong>坑3：</strong></p>
<p>方式2的读取方法可以读到数据，但是读到的数据只有一个字符串，而不是字典，实际中无法使用。</p>
<p>综上所述，获取 request 中的 body
数据，上述三个方式都可以，但是使用时，要注意它们的使用条件。</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>EmbedIO</category>
      </categories>
      <tags>
        <tag>EmbedIO</tag>
        <tag>MVVM</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 HttpClient 进行网络请求并获取进度信息</title>
    <url>/posts/2022/1621QC.html</url>
    <content><![CDATA[<p>.NET 下主要有三种方式可以进行网络请求相关操作，它们分别是
<code>HttpWebRequest</code>，<code>WebClient</code> 和
<code>HttpClient</code>。这三者的关系是不断递进发展的，所以一般使用
<code>HttpClient</code> 来进行网络请求。</p>
<p>本文主要讲述 <code>HttpClient</code> 的使用方法和进度获取。</p>
<span id="more"></span>
<h2 id="比较">比较</h2>
<table>
<thead>
<tr class="header">
<th>类别</th>
<th>HttpWebRequset</th>
<th>WebClient</th>
<th>HttpClient</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>命名空间</td>
<td>System.Net</td>
<td>System.Net</td>
<td>System.Net.Http</td>
</tr>
<tr class="even">
<td>继承类</td>
<td>WebRequest</td>
<td>Component</td>
<td>HttpMessageInvoker</td>
</tr>
<tr class="odd">
<td>支持url转向</td>
<td>是</td>
<td>否</td>
<td>是</td>
</tr>
<tr class="even">
<td>支持cookie和session</td>
<td>是</td>
<td>否</td>
<td>否</td>
</tr>
<tr class="odd">
<td>支持用户代理服务器</td>
<td>是</td>
<td>否</td>
<td>是</td>
</tr>
<tr class="even">
<td>使用复杂度</td>
<td>高</td>
<td>低</td>
<td>低</td>
</tr>
</tbody>
</table>
<h2 id="httpclient-使用方式">HttpClient 使用方式</h2>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用方式</span></span><br><span class="line">&#123;</span><br><span class="line">	HttpClientHandler handler = <span class="keyword">new</span> HttpClientHandler();</span><br><span class="line">    ProgressMessageHandler progressMessageHandler = <span class="keyword">new</span> ProgressMessageHandler(handler);</span><br><span class="line">    <span class="comment">// 接收进度</span></span><br><span class="line">	progressMessageHandler.HttpReceiveProgress += ProgressMessageHandler_HttpProgress;</span><br><span class="line">    <span class="comment">// 发送进度</span></span><br><span class="line">    progressMessageHandler.HttpSendProgress += ProgressMessageHandler_HttpProgress;</span><br><span class="line">	HttpClient httpClient = <span class="keyword">new</span> HttpClient(progressMessageHandler)</span><br><span class="line">	&#123;</span><br><span class="line">		Timeout = TimeSpan.FromMinutes(<span class="number">60</span>)</span><br><span class="line">	&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">using</span> (MultipartFormDataContent multipartFormData = <span class="keyword">new</span> MultipartFormDataContent())</span><br><span class="line">	&#123;</span><br><span class="line">        multipartFormData.Add(<span class="keyword">new</span> StreamContent(fileInfo.OpenRead()), <span class="string">&quot;file&quot;</span>, fileInfo.Name);</span><br><span class="line">        HttpResponseMessage resMessage = httpClient.PutAsync(uploadUrl, multipartFormData).GetAwaiter().GetResult();</span><br><span class="line">        <span class="keyword">if</span> (!resMessage.IsSuccessStatusCode)</span><br><span class="line">        &#123;</span><br><span class="line">            resultUrls.Add(resMessage.ReasonPhrase);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进度回调</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ProgressMessageHandler_HttpProgress</span>(<span class="params"><span class="built_in">object</span> sender, HttpProgressEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 在此处通过 HttpProgressEventArgs 获取进度信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>ProgressMessageHandler 位于 System.Net.Http.Formatting.dll
程序集中。一般系统没有自带该类库，要从网上自行下载。</p>
<p><a
href="https://obs.uamazing.cn:52443/public/files/dlt/System.Net.Http.Formatting.dll">✈
点击下载</a></p>
</blockquote>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a href="https://blog.51cto.com/u_15127507/3578161">WebClient,
HttpClient, HttpWebRequest的比较</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Http</category>
      </categories>
      <tags>
        <tag>.NET</tag>
        <tag>Http</tag>
        <tag>HttpClient</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongoose中的 ObjectId 什么情况下与字符串 id 等价</title>
    <url>/posts/2022/3A2KFYY.html</url>
    <content><![CDATA[<p>经验证，在使用 Mongoose 包来进行 MongoDB
查询时，在非聚合（aggregate）语句中，可以直接使用字符串型 ObjectId
进行匹配查找和赋值，比如：<code>create、find、findOne、findByIdAndDelete、$in</code>
等方法中都可以使用字符串型 ObjectId。</p>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">model.<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="attr">_id</span>: <span class="string">&#x27;5f68710c4da61820f461e0c0&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">model.<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="attr">_id</span>:&#123;<span class="attr">$in</span>:[<span class="string">&#x27;5f68710c4da61820f461e0c0&#x27;</span>]&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">model.<span class="title function_">updateMany</span>(&#123;</span><br><span class="line">  <span class="attr">_id</span>:&#123;<span class="attr">$in</span>:[<span class="string">&#x27;5f68710c4da61820f461e0c0&#x27;</span>]&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 也可以用字符串id数组赋值给 ObjectId 数组字段</span></span><br><span class="line">  <span class="attr">ids</span>: [<span class="string">&#x27;5f68710c4da61820f461e0c0&#x27;</span>] </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>上面的这种字符串 id 去匹配 ObjectId
机制，<strong>在聚合中不支持</strong>，在聚合中使用时，需要将字符串的 Id
转成 ObjectId。</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongoose</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>Mongoose</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongoose 默认值使用时必须知道的几个要点</title>
    <url>/posts/2022/3PMMZVC.html</url>
    <content><![CDATA[<p>Mongoose 的文档中对 <code>default</code>
的介绍不多，导致在使用中可能会遇到一些bug，因此做一个总结。</p>
<span id="more"></span>
<h2 id="设置-default">设置 default</h2>
<p>假设我们需要对某个字段赋予默认值，可以通过如下方式进行定义：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> schema = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">date</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Date</span>,</span><br><span class="line">    <span class="comment">// `Date.now()` returns the current unix timestamp as a number</span></span><br><span class="line">    <span class="comment">// 此处必须是 function 才能实时更新时间</span></span><br><span class="line">    <span class="attr">default</span>: <span class="title class_">Date</span>.<span class="property">now</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>default 定义有如下特点：</p>
<ul>
<li><p><strong>default 可以是值，也可以是 function</strong></p></li>
<li><p><strong>default 当是值类型时，会被 mongoose 缓存</strong></p>
<p>mongoose 在 model
初始化后，会缓存默认默认值，所以，如果默认时是一些实时的数据，比如时间，则要将
<code>default</code> 赋值为 function。</p></li>
</ul>
<h2 id="更新-default">更新 default</h2>
<p>当在 <code>update()</code> 和 <code>findOneAndUpdate()</code> 中使用
<code>upsert</code> 选项时，Mongoose
会给没有值的默认字段设置默认值。</p>
<p>如果发现没更新默认值，可以传入参数<code>setDefaultsOnInsert: true</code>
来触发。</p>
<h2 id="default-函数中的-this">default 函数中的 this</h2>
<p>default 函数中的 this
默认指向当前文档，因此可以在定义中通过自身参数来返回不同的默认值，比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> schema = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">released</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">  <span class="attr">releaseDate</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Date</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">released</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a
href="https://mongoosejs.com/docs/defaults.html#defaults">Defaults-Mongoose</a></li>
<li><a
href="https://github.com/Automattic/mongoose/issues/3675#issuecomment-423473641">default
date remains the same as the date of the process startup if
indexed</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongoose</category>
      </categories>
      <tags>
        <tag>Mongoose</tag>
      </tags>
  </entry>
  <entry>
    <title>.NET Core中配置 JWT 授认证</title>
    <url>/posts/2022/28BGV5K.html</url>
    <content><![CDATA[<p>本文主要介绍如何在 .NET Core 项目中配置基于 JWT 的 Token 验证。</p>
<span id="more"></span>
<h2 id="前言">前言</h2>
<p>.NET Core 中使用 <code>Authentication</code> 和
<code>Authorization</code>
来进行权限控制。这两个单词长的十分相似，而且还经常一起出现，很多时候容易搞混了。</p>
<p><code>Authentication</code>
是认证的意思，当用户请求到来时，判断用户是否是合法的，比如用户名密码是否正确，token
是否合法且有效等等。它是 Web 服务的第一道门。</p>
<p><code>Authorization</code>
是授权的意思，当用户通过认证后，还需要验证是否有访问某个接口的权限。授权使用
<code>Authorize</code> 在 Action(方法) 上进行标标记。</p>
<p>默认情况下，认证通过即认为有权限访问相关的接口。也可以基于角色、策略、自定义的方式来实现接口的授权。</p>
<h2 id="配置-jwt-授权">配置 JWT 授权</h2>
<blockquote>
<p>本文使用的 .NET Core 版本为 6.1</p>
</blockquote>
<h3 id="安装包">安装包</h3>
<p>使用 jwt 验证需要安装两个包：</p>
<ol type="1">
<li>System.IdentityModel.Tokens.Jwt</li>
<li>Microsoft.AspNetCore.Authentication.JwtBearer</li>
</ol>
<h3 id="添加-token-配置">添加 Token 配置</h3>
<p>在 appsettings.json 添加如下内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;TokenParam&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Secret&quot;</span><span class="punctuation">:</span> <span class="string">&quot;15927306782&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Expire&quot;</span><span class="punctuation">:</span> <span class="number">43200000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Issuer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wowToolAPI&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Audience&quot;</span><span class="punctuation">:</span> <span class="string">&quot;everybody&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<h3 id="添加-jwt-服务配置">添加 JWT 服务配置</h3>
<p>在 Program.cs 中的 <code>var app = builder.Build();</code>
前添加一个服务：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从 appsettings.json 配置中获取 Secret 值</span></span><br><span class="line"><span class="keyword">var</span> secret = builder.Configuration[<span class="string">&quot;TokenParam:Secret&quot;</span>];</span><br><span class="line"></span><br><span class="line">services.AddAuthentication(x =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 设置验证方式为 Bearer Token</span></span><br><span class="line">    x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;</span><br><span class="line">    x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;</span><br><span class="line">&#125;)</span><br><span class="line">.AddJwtBearer(x =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        x.RequireHttpsMetadata = <span class="literal">false</span>;</span><br><span class="line">        x.TokenValidationParameters = <span class="keyword">new</span> TokenValidationParameters</span><br><span class="line">        &#123;</span><br><span class="line">            ValidateIssuerSigningKey = <span class="literal">true</span>,</span><br><span class="line">            IssuerSigningKey = <span class="keyword">new</span> SymmetricSecurityKey(Encoding.UTF8.GetBytes(secret)),</span><br><span class="line">            ValidateIssuer = <span class="literal">false</span>,</span><br><span class="line">            ValidateAudience = <span class="literal">false</span></span><br><span class="line">            <span class="comment">// 是否验证令牌有效期</span></span><br><span class="line">            ValidateLifetime = <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// 每次颁发令牌，令牌有效时间</span></span><br><span class="line">            ClockSkew = TimeSpan.FromMinutes(<span class="number">1440</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="添加验证中间件">添加验证中间件</h3>
<p>在 Program.cs 中添加下列代码：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加认证中间件</span></span><br><span class="line">app.UseAuthentication();</span><br><span class="line"><span class="comment">// 添加授权中间件</span></span><br><span class="line">app.UseAuthorization();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上述两个中间件必须要同时添加，顺序也不能错</p>
</blockquote>
<h3 id="在-controller-中添加授权控制">在 Controller 中添加授权控制</h3>
<p>需要在 Controller 或者 Action 上添加 <code>[Authorize]</code>
特性，该特性表明当前 Controller 或 Action 需要先进行授权验证。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不适用特性，可以直接访问</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Get</span>()</span> &#123; <span class="keyword">return</span> <span class="string">&quot;666&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 整个控制器都需要授权才能访问</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">[<span class="meta">Authorize</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Get</span>()</span> &#123; <span class="keyword">return</span> <span class="string">&quot;666&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 只有 Get 需要授权</span></span><br><span class="line">    [<span class="meta">Authorize</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Get</span>()</span> &#123; <span class="keyword">return</span> <span class="string">&quot;666&quot;</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetB</span>()</span> &#123; <span class="keyword">return</span> <span class="string">&quot;666&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 整个控制器都需要授权，但 Get 不需要</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">[<span class="meta">Authorize</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">AllowAnonymous</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Get</span>()</span> &#123; <span class="keyword">return</span> <span class="string">&quot;666&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="一次将授权添加到所有的-controller-上">一次将授权添加到所有的
Controller 上</h3>
<p>在开发中，一般只有个别 API 不需要权限认证，如果每添加一个
Controller，都在上面标记
<code>[Authorize]</code>，使用起来挺难受的。</p>
<p>有没有办法只在一个地方设置一次，全部 Controller 都添加了呢？</p>
<p>当然，咱们可以先添加一个基类，在这个类上添加 <code>[Authorize]</code>
特性。然后其它的 Controller 只要继承这个基类就可以了。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不适用特性，可以直接访问</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyControllerBase</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 整个控制器都需要授权</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">[<span class="meta">Authorize</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EController</span> : <span class="title">MyControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 整个控制器都不需要授权</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">[<span class="meta">AllowAnonymous</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FController</span> : <span class="title">MyControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="生成-jwt-token">生成 JWT token</h2>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 创建 token</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;payload&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">CreateToken</span>(<span class="params"><span class="keyword">this</span> TokenParams tokenParam, Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; payload</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义用户信息</span></span><br><span class="line">    <span class="keyword">var</span> claims = <span class="keyword">new</span> List&lt;Claim&gt;();</span><br><span class="line">    <span class="keyword">if</span> (payload != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        claims = payload.ToList().ConvertAll(kv =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Claim(kv.Key, kv.Value);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 和 Startup 中的配置一致</span></span><br><span class="line">    SymmetricSecurityKey key = <span class="keyword">new</span>(Encoding.UTF8.GetBytes(tokenParam.Secret));</span><br><span class="line"></span><br><span class="line">    JwtSecurityToken token = <span class="keyword">new</span>(</span><br><span class="line">        issuer: tokenParam.Issuer,</span><br><span class="line">        audience: tokenParam.Audience,</span><br><span class="line">        claims: claims,</span><br><span class="line">        notBefore: DateTime.Now,</span><br><span class="line">        expires: DateTime.Now.AddMinutes(<span class="number">1440</span>),</span><br><span class="line">        signingCredentials: <span class="keyword">new</span> SigningCredentials(key, SecurityAlgorithms.HmacSha256)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> jwtToken = <span class="keyword">new</span> JwtSecurityTokenHandler().WriteToken(token);</span><br><span class="line">    <span class="keyword">return</span> jwtToken;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="从请求中获取-jwt">从请求中获取 JWT</h2>
<h3 id="从请求中获取-token-字符串">从请求中获取 token 字符串</h3>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="built_in">string</span> <span class="title">GetToken</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> tokenHeader = Request.Headers[HeaderNames.Authorization].ToString();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(tokenHeader))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">&quot;缺少token!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> pattern = <span class="string">&quot;^Bearer (.*?)$&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!Regex.IsMatch(tokenHeader, pattern))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;token格式不对!格式为:Bearer &#123;token&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span>? token = Regex.Match(tokenHeader, pattern)?.Groups[<span class="number">1</span>]?.ToString();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(token))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;token不能为空!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解析-token">解析 token</h3>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result&lt;JObject&gt; <span class="title">GetTokenPayload</span>(<span class="params"><span class="keyword">this</span> TokenParams tokenParam, <span class="built_in">string</span> token</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//校验token</span></span><br><span class="line">    <span class="keyword">var</span> validateParameter = <span class="keyword">new</span> TokenValidationParameters()</span><br><span class="line">    &#123;</span><br><span class="line">        ValidateLifetime = <span class="literal">true</span>,</span><br><span class="line">        ValidateAudience = <span class="literal">true</span>,</span><br><span class="line">        ValidateIssuer = <span class="literal">true</span>,</span><br><span class="line">        ValidateIssuerSigningKey = <span class="literal">true</span>,</span><br><span class="line">        ValidIssuer = tokenParam.Issuer,</span><br><span class="line">        ValidAudience = tokenParam.Audience,</span><br><span class="line">        IssuerSigningKey = <span class="keyword">new</span> SymmetricSecurityKey(Encoding.UTF8.GetBytes(tokenParam.Secret))</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//校验并解析token</span></span><br><span class="line">    <span class="keyword">new</span> JwtSecurityTokenHandler().ValidateToken(token, validateParameter, <span class="keyword">out</span> SecurityToken validatedToken);<span class="comment">//validatedToken:解密后的对象</span></span><br><span class="line">    <span class="keyword">var</span> jwtPayload = ((JwtSecurityToken)validatedToken).Payload.SerializeToJson(); <span class="comment">//获取payload中的数据</span></span><br><span class="line">    <span class="keyword">var</span> jobj = JObject.Parse(jwtPayload);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jobj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a href="https://www.cnblogs.com/whuanle/p/12497614.html">ASP.NET
Core 中jwt授权认证的流程原理</a></li>
<li><a
href="https://blog.csdn.net/linshunhuang1/article/details/108798219">UseAuthentication和UseAuthorization</a></li>
<li>https://zhuanlan.zhihu.com/p/176966592</li>
<li><a
href="http://www.manongjc.com/detail/29-dtuskmzuwjitnoh.html">ASP.NET
Core 6.0 添加 JWT 认证和授权</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>DotNetCore</category>
      </categories>
      <tags>
        <tag>.NET Core</tag>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>Swagger使用中的一些注意总结</title>
    <url>/posts/2022/3S2PQT2.html</url>
    <content><![CDATA[<p>本文主要记录 Swagger
在使用过程中遇到的一些问题，从而避免再次踩坑。</p>
<span id="more"></span>
<h2 id="正文">正文</h2>
<ol type="1">
<li><p>报错 <code>Failed to load API definition</code></p>
<p>可能是由于 <code>Controller</code> 定义中，有未用
<code>HttpVerb</code> 标记的公共方法。</p>
<p>可以将这些不是接口的 public 方法改成私有的。</p></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>DotNetCore</category>
      </categories>
      <tags>
        <tag>.NET Core</tag>
        <tag>Swagger</tag>
        <tag>OpenAPI</tag>
      </tags>
  </entry>
  <entry>
    <title>.NET Core 中使用配置文件</title>
    <url>/posts/2023/D4VJ6Q.html</url>
    <content><![CDATA[<p>ASP.NET Core
中的应用程序可以使用一个或多个配置。本文主要介绍常用的配置类型，方便在项目中快速应用。将会介绍：</p>
<ol type="1">
<li><p>环境设置文件，<code>appsettings.&#123;Environment&#125;.json</code></p>
<p>例如，<code>appsettings.Production.json</code> 和
<code>appsettings.Development.json</code>。</p></li>
<li><p>设置文件，例如 <code>appsettings.json</code></p></li>
</ol>
<span id="more"></span>
<h2 id="配置示例">配置示例</h2>
<p>以 <strong>appsettings.json</strong> 配置为例，定义如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Position&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Editor&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Joe Smith&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;MyKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;My appsettings.json Value&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Logging&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;LogLevel&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Information&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Microsoft&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Warning&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Microsoft.Hosting.Lifetime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Information&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;AllowedHosts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="加载顺序">加载顺序</h2>
<p>默认的 <a
href="https://learn.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.configuration.json.jsonconfigurationprovider">JsonConfigurationProvider</a>
会按以下顺序加载配置：</p>
<ol type="1">
<li><p><code>appsettings.json</code></p></li>
<li><p><code>appsettings.&#123;Environment&#125;.json</code></p>
<p>例如，<code>appsettings.Production.json</code> 和
<code>appsettings.Development.json</code> 文件。 文件的环境版本是根据 <a
href="https://learn.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.hosting.ihostingenvironment.environmentname">IHostingEnvironment.EnvironmentName</a>
加载的。 有关详细信息，请参阅<a
href="https://learn.microsoft.com/zh-cn/aspnet/core/fundamentals/environments?view=aspnetcore-6.0">在
ASP.NET Core 中使用多个环境</a>。</p></li>
</ol>
<p>后加载的 <code>appsettings.&#123;Environment&#125;.json</code> 的值会覆盖掉
<code>appsettings.json</code> 中相同的键。</p>
<h2 id="数据访问">数据访问</h2>
<p>要访问配置，使用 <code>IConfiguration</code>
的接口获取数据，Configuration 在 IOC
容器中注册了单例实例，只需要在使用的类中用构造函数的方式注入即可。如：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestModel</span> : <span class="title">PageModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// requires using Microsoft.Extensions.Configuration;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IConfiguration Configuration;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">// 构造函数注入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestModel</span>(<span class="params">IConfiguration configuration</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Configuration = configuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">// 使用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ContentResult <span class="title">OnGet</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> myKeyValue = Configuration[<span class="string">&quot;MyKey&quot;</span>];</span><br><span class="line">        <span class="keyword">var</span> title = Configuration[<span class="string">&quot;Position:Title&quot;</span>];</span><br><span class="line">        <span class="keyword">var</span> name = Configuration[<span class="string">&quot;Position:Name&quot;</span>];</span><br><span class="line">        <span class="keyword">var</span> defaultLogLevel = Configuration[<span class="string">&quot;Logging:LogLevel:Default&quot;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Content(<span class="string">$&quot;MyKey value: <span class="subst">&#123;myKeyValue&#125;</span> \n&quot;</span> +</span><br><span class="line">                       <span class="string">$&quot;Title: <span class="subst">&#123;title&#125;</span> \n&quot;</span> +</span><br><span class="line">                       <span class="string">$&quot;Name: <span class="subst">&#123;name&#125;</span> \n&quot;</span> +</span><br><span class="line">                       <span class="string">$&quot;Default Log Level: <span class="subst">&#123;defaultLogLevel&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>通过路径获取数据</strong></p>
<p>想发通过路径的方式来获取数据，不同层级的路径名之间使用 <code>:</code>
进行分隔，例如：<code>Position:Name</code>。</p>
<h2 id="数据绑定">数据绑定</h2>
<h3 id="定义">定义</h3>
<p>可以定义类来将 json 配置映射成强类型，这样方便使用。</p>
<p>例如有如下配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;Position&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Editor&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Joe Smith&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>可以创建一个 <code>PositionOptions</code> 类：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PositionOptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> Position = <span class="string">&quot;Position&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Title &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = String.Empty;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = String.Empty;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="条件">条件</h3>
<p>选项类要求：</p>
<ul>
<li>必须是包含公共无参数构造函数的非抽象类。</li>
<li>类型的所有公共读写属性都已绑定。</li>
<li>字段不是绑定的。 在上面的代码中，<code>Position</code> 未绑定。
由于使用了 <code>Position</code>
字段，因此在将类绑定到配置提供程序时，不需要在应用中对字符串
<code>"Position"</code> 进行硬编码。</li>
</ul>
<h3 id="使用时绑定">使用时绑定</h3>
<p>下面的示例代码将：</p>
<ol type="1">
<li><p>调用 <a
href="https://learn.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.configuration.configurationbinder.bind">ConfigurationBinder.Bind</a>
将类绑定到 <code>Position</code> 部分。</p></li>
<li><p>显示 <code>Position</code> 配置数据。</p></li>
</ol>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test22Model</span> : <span class="title">PageModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IConfiguration Configuration;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test22Model</span>(<span class="params">IConfiguration configuration</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Configuration = configuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">// 获取后通过 Bind 进行绑定</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ContentResult <span class="title">OnGet</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> positionOptions = <span class="keyword">new</span> PositionOptions();</span><br><span class="line">        Configuration.GetSection(PositionOptions.Position).Bind(positionOptions);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Content(<span class="string">$&quot;Title: <span class="subst">&#123;positionOptions.Title&#125;</span> \n&quot;</span> +</span><br><span class="line">                       <span class="string">$&quot;Name: <span class="subst">&#123;positionOptions.Name&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 通过 Get&lt;T&gt; 泛型自动绑定</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ContentResult <span class="title">OnGet2</span>()</span></span><br><span class="line">    &#123;            </span><br><span class="line">        positionOptions = Configuration.GetSection(PositionOptions.Position)</span><br><span class="line">                                                     .Get&lt;PositionOptions&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Content(<span class="string">$&quot;Title: <span class="subst">&#123;positionOptions.Title&#125;</span> \n&quot;</span> +</span><br><span class="line">                       <span class="string">$&quot;Name: <span class="subst">&#123;positionOptions.Name&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ioc-绑定">IOC 绑定</h3>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class="line">builder.Services.AddRazorPages();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提前注入 ioc 服务</span></span><br><span class="line">builder.Services.Configure&lt;PositionOptions&gt;(    builder.Configuration.GetSection(PositionOptions.Position));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = builder.Build();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以将配置与实体的绑定写到一个扩展方法中，从而简化 Program.cs
中的代码</p>
</blockquote>
<h3 id="使用">使用</h3>
<p>通过 <code>IOptions&lt;T&gt;</code> 来通过 IOC
自动获取注册的实例。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test2Model</span> : <span class="title">PageModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> PositionOptions _options;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test2Model</span>(<span class="params">IOptions&lt;PositionOptions&gt; options</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _options = options.Value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ContentResult <span class="title">OnGet</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Content(<span class="string">$&quot;Title: <span class="subst">&#123;_options.Title&#125;</span> \n&quot;</span> +</span><br><span class="line">                       <span class="string">$&quot;Name: <span class="subst">&#123;_options.Name&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p><a
href="https://learn.microsoft.com/zh-cn/aspnet/core/fundamentals/configuration/?view=aspnetcore-6.0">ASP.NET
Core 中的配置</a></p>
<p><a
href="https://learn.microsoft.com/zh-cn/aspnet/core/fundamentals/configuration/options?view=aspnetcore-6.0">ASP.NET
Core 中的选项模式</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>DotNetCore</category>
      </categories>
      <tags>
        <tag>.NET Core</tag>
      </tags>
  </entry>
  <entry>
    <title>.NETCore 批量注册 Service 到 IOC</title>
    <url>/posts/2023/23HY8MD.html</url>
    <content><![CDATA[<p>Service 主要面向数据库，为数据库提供一个统一的 CURD
接口。在日常的使用中，通常把 Service 层注册为 <code>Scoped</code>
类型，随着上下文变动。</p>
<p>在实际开发中，会有非常多的 Service，可以使用如下方法将这些 Service
进行批量注册：</p>
<span id="more"></span>
<h2 id="定义服务基类">定义服务基类</h2>
<p>首先，需要定义一个空接口 <code>IService</code>，所有的 Service
都继承该接口，这样就可以找到当前程序集中所有实现了 <code>IService</code>
接口的类进行批量注册。</p>
<h2 id="批量注册">批量注册</h2>
<p>直接上代码：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 扩展方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IServiceCollection <span class="title">MapServices</span>(<span class="params"><span class="keyword">this</span> IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 批量注入 Services 单例</span></span><br><span class="line">    <span class="keyword">var</span> serviceBaseType = <span class="keyword">typeof</span>(IService);          </span><br><span class="line">    <span class="keyword">var</span> serviceTypeList = Assembly.GetCallingAssembly()</span><br><span class="line">        .GetTypes()</span><br><span class="line">        .Where(x =&gt; !x.IsAbstract &amp;&amp; serviceBaseType.IsAssignableFrom(x))</span><br><span class="line">        .ToList();</span><br><span class="line">    serviceTypeList.ForEach(type =&gt; services.AddTransient(type));</span><br><span class="line">    <span class="keyword">return</span> services;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">builder.services.MapServices();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>DotNetCore</category>
      </categories>
      <tags>
        <tag>.NET Core</tag>
      </tags>
  </entry>
  <entry>
    <title>.NETCore 中配置 Swagger</title>
    <url>/posts/2023/1EDD6ES.html</url>
    <content><![CDATA[<p><img data-src="https://learn.microsoft.com/en-us/aspnet/core/tutorials/web-api-help-pages-using-swagger/_static/v6-swagger-info.png?view=aspnetcore-7.0" alt="swagger" style="max-width:min(100%,300px)" /></p>
<p>官方文档写得非常详细，本文只列出一些常用配置，方便拷贝进行快速配置使用。</p>
<span id="more"></span>
<h2 id="定义">定义</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">builder.services.AddSwaggerGen(swaggerOptions =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 配置文档信息</span></span><br><span class="line">    swaggerOptions.SwaggerDoc(<span class="string">&quot;v1&quot;</span>, <span class="keyword">new</span> OpenApiInfo()</span><br><span class="line">    &#123;</span><br><span class="line">        Title = <span class="string">&quot;WowToolAPI&quot;</span>,</span><br><span class="line">        Contact = <span class="keyword">new</span> OpenApiContact()</span><br><span class="line">        &#123;</span><br><span class="line">            Name = <span class="string">&quot;galens&quot;</span>,</span><br><span class="line">            Url = <span class="keyword">new</span> Uri(<span class="string">&quot;https://galens.uamazing.cn&quot;</span>),</span><br><span class="line">            Email = <span class="string">&quot;gmx_galens@163.com&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the comments path for the Swagger JSON and UI.</span></span><br><span class="line">    <span class="comment">// 需要打开生成API文档功能</span></span><br><span class="line">    <span class="keyword">var</span> xmlFile = <span class="string">$&quot;<span class="subst">&#123;Assembly.GetExecutingAssembly().GetName().Name&#125;</span>.xml&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);</span><br><span class="line">    swaggerOptions.IncludeXmlComments(xmlPath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Bearer 的scheme定义</span></span><br><span class="line">    <span class="keyword">var</span> securityScheme = <span class="keyword">new</span> OpenApiSecurityScheme()</span><br><span class="line">    &#123;</span><br><span class="line">        Description = <span class="string">&quot;JWT Authorization header using the Bearer scheme. Example: \&quot;Authorization: Bearer &#123;token&#125;\&quot;&quot;</span>,</span><br><span class="line">        Name = <span class="string">&quot;Authorization&quot;</span>,</span><br><span class="line">        <span class="comment">//参数添加在头部</span></span><br><span class="line">        In = ParameterLocation.Header,</span><br><span class="line">        <span class="comment">//使用Authorize头部</span></span><br><span class="line">        Type = SecuritySchemeType.Http,</span><br><span class="line">        <span class="comment">//内容为以 bearer开头</span></span><br><span class="line">        Scheme = <span class="string">&quot;bearer&quot;</span>,</span><br><span class="line">        BearerFormat = <span class="string">&quot;JWT&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把所有方法配置为增加bearer头部信息</span></span><br><span class="line">    <span class="keyword">var</span> securityRequirement = <span class="keyword">new</span> OpenApiSecurityRequirement</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> OpenApiSecurityScheme</span><br><span class="line">            &#123;</span><br><span class="line">               Reference = <span class="keyword">new</span> OpenApiReference</span><br><span class="line">               &#123;</span><br><span class="line">                   Type = ReferenceType.SecurityScheme,</span><br><span class="line">                   Id = <span class="string">&quot;bearerAuth&quot;</span></span><br><span class="line">               &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            Array.Empty&lt;<span class="built_in">string</span>&gt;()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册到swagger中</span></span><br><span class="line">    swaggerOptions.AddSecurityDefinition(<span class="string">&quot;bearerAuth&quot;</span>, securityScheme);</span><br><span class="line">    swaggerOptions.AddSecurityRequirement(securityRequirement);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="在开发环境中启用">在开发环境中启用</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (app.Environment.IsDevelopment())</span><br><span class="line">&#123;</span><br><span class="line">    app.UseSwagger();</span><br><span class="line">    app.UseSwaggerUI();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="打开生成-api-文档">打开生成 API 文档</h2>
<p>在属性-&gt;生成-&gt;输出，勾选文档文件。生成包含 API 文档的 XML
说明文件。</p>
<h2 id="美化界面">美化界面</h2>
<p>可以使用 <a
href="https://github.com/luoyunchong/IGeekFan.AspNetCore.Knife4jUI">IGeekFan.AspNetCore.Knife4jUI</a>
进行美化，由于平时使用 Apifox 进行调试，Swagger
用得比较少，此处不详细展开介绍。</p>
<p><img data-src="https://github.com/luoyunchong/IGeekFan.AspNetCore.Knife4jUI/raw/master/docs/home.jpg" /></p>
<h2 id="参考">参考</h2>
<p><a href="https://aka.ms/aspnetcore/swashbuckle">Learn more about
configuring Swagger/OpenAPI</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>DotNetCore</category>
      </categories>
      <tags>
        <tag>.NETCore</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>.NETCore设置跨域</title>
    <url>/posts/2023/NY7H5J.html</url>
    <content><![CDATA[<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class="line"></span><br><span class="line">builder.Services.AddCors(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.AddDefaultPolicy(</span><br><span class="line">        policy =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            policy.WithOrigins(<span class="string">&quot;http://example.com&quot;</span>,                           <span class="string">&quot;http://www.contoso.com&quot;</span>)</span><br><span class="line">              .AllowAnyMethod()</span><br><span class="line">            	.AllowAnyHeader();</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">builder.Services.AddControllers();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = builder.Build();</span><br><span class="line"></span><br><span class="line">app.UseHttpsRedirection();</span><br><span class="line">app.UseStaticFiles();</span><br><span class="line">app.UseRouting();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在静态文件后调用</span></span><br><span class="line">app.UseCors();</span><br><span class="line"></span><br><span class="line">app.UseAuthorization();</span><br><span class="line"></span><br><span class="line">app.MapControllers();</span><br><span class="line"></span><br><span class="line">app.Run();</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p><strong>参考：</strong></p>
<p><a
href="https://learn.microsoft.com/zh-cn/aspnet/core/security/cors?view=aspnetcore-6.0">在
ASP.NET Core 中启用跨源请求 (CORS) | Microsoft Learn</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>DotNetCore</category>
      </categories>
      <tags>
        <tag>.NET Core</tag>
      </tags>
  </entry>
  <entry>
    <title>.NetCore 路由配置指南</title>
    <url>/posts/2022/249XC4P.html</url>
    <content><![CDATA[<p>ASP.NET Core 控制器使用路由中间件来匹配传入请求的 URL
并将它们映射到操作。本文以使用者的角度，对路由的使用进行概括说明，方便知识回顾与使用。</p>
<h2 id="前言">前言</h2>
<p>ASP.NET Core 控制器使用路由中间件来匹配传入请求的 URL
并将它们映射到操作。它支持传统路由，也支持属性路由。如果感觉到陌生，不要着急，继续向下看，下面会一一道来。</p>
<h2 id="传统路由">传统路由</h2>
<p>传统路由通常在 MVC 框架中使用。</p>
<h3 id="program.cs-配置">Program.cs 配置</h3>
<p>它在 <code>program.cs</code> 中定义，如下：</p>
<p><strong>完整方法：</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">app.MapControllerRoute(</span><br><span class="line">  <span class="comment">// 路由名称  </span></span><br><span class="line">  name: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">  <span class="comment">// 模板为：controllerName/actionName/&#123;id?&#125;</span></span><br><span class="line">  <span class="comment">// = 号用于设置默认值</span></span><br><span class="line">  pattern: <span class="string">&quot;&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;&quot;</span>);</span><br></pre></td></tr></table></figure>
<p><strong>简化使用：</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">app.MapDefaultControllerRoute();</span><br></pre></td></tr></table></figure>
<p><strong>说明：</strong></p>
<p>上面的完整路由定义中：</p>
<ul>
<li><p>第一个路径段 <code>&#123;controller=Home&#125;</code>
映射到控制器名称。</p>
<p>如 <code>UserController</code> 中的控制器名为
<code>User</code>。</p></li>
<li><p>第二段 <code>&#123;action=Index&#125;</code> 映射到操作名称。</p>
<p><code>action</code> 就是 Controller 类中的方法名。</p></li>
<li><p>第三段 <code>&#123;id?&#125;</code> 用于可选 <code>id</code>。
<code>&#123;id?&#125;</code> 中的 <code>?</code> 使其成为可选。 <code>id</code>
用于映射到模型实体。</p></li>
</ul>
<h3 id="controller-定义">Controller 定义</h3>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HomeController</span> : <span class="title">Controller</span></span><br><span class="line">&#123;</span><br><span class="line">  	<span class="comment">// 默认所有的 http 谓词 get、post 等请求都会调用该接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>()</span> &#123;&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 可以通过特性来约束 http 谓词的调用</span></span><br><span class="line">    <span class="comment">// HttpPost 标记后，只有 post 才能调用这个方法</span></span><br><span class="line">    [<span class="meta">HttpPost</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Create</span>()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多个传统路由">多个传统路由</h3>
<p>可以多次调用 <code>MapControllerRoute</code>
来设置多个传统路由，如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">app.MapControllerRoute(name: <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">                pattern: <span class="string">&quot;blog/&#123;*article&#125;&quot;</span>,</span><br><span class="line">                defaults: <span class="keyword">new</span> &#123; controller = <span class="string">&quot;Blog&quot;</span>, action = <span class="string">&quot;Article&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">app.MapControllerRoute(name: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">               pattern: <span class="string">&quot;&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>上述代码中的 blog 路由是专用的传统路由。 之所以称为专用传统路由是因为
controller 和 action 不会以参数形式出现在路由模板 "blog/{*article}"
中，它们只能具有默认值 { controller = "Blog", action = "Article"
}。因此，此路由将会始终映射到操作
<code>BlogController.Article</code>。</p>
<h3 id="传统路由顺序">传统路由顺序</h3>
<ol type="1">
<li><p>按定义顺序匹配</p></li>
<li><p>具体的路由在可变路由之前匹配</p>
<p>比如 <code>users/demo</code> 会在 <code>users/&#123;userId&#125;</code>
之前进行匹配</p></li>
</ol>
<h2 id="特性attribute路由">特性（Attribute）路由</h2>
<p>Attribute 本应翻译成属性，但为了与 .NET
中的属性字段区分，本文称之为特性。</p>
<p>特性路由通常在 REST API 中使用。</p>
<h3 id="program.cs-配置-1">Program.cs 配置</h3>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class="line">builder.Services.AddControllers();</span><br><span class="line"><span class="keyword">var</span> app = builder.Build();</span><br><span class="line">app.UseHttpsRedirection();</span><br><span class="line">app.UseAuthorization();</span><br><span class="line"></span><br><span class="line">app.MapControllers();</span><br><span class="line"></span><br><span class="line">app.Run();</span><br></pre></td></tr></table></figure>
<p>属性路由通过调用 <code>MapControllers</code>
来映射属性路由控制器。</p>
<h3 id="controller-定义-1">Controller 定义</h3>
<p>下面的示例中，<code>HomeController</code> 匹配一组类似于默认传统路由
<code>&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;</code> 匹配的 URL。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HomeController</span> : <span class="title">Controller</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Route(<span class="string">&quot;&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">Route(<span class="string">&quot;Home&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">Route(<span class="string">&quot;Home/Index&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">Route(<span class="string">&quot;Home/Index/&#123;id?&#125;&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>(<span class="params"><span class="built_in">int</span>? id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ControllerContext.MyDisplayRouteInfo(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Route(<span class="string">&quot;Home/About&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">Route(<span class="string">&quot;Home/About/&#123;id?&#125;&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">About</span>(<span class="params"><span class="built_in">int</span>? id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ControllerContext.MyDisplayRouteInfo(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="保留关键字">保留关键字</h3>
<ul>
<li><code>action</code></li>
<li><code>area</code></li>
<li><code>controller</code></li>
<li><code>handler</code></li>
<li><code>page</code></li>
</ul>
<p>这些关键词是保留的路由参数名，在定义路由时，不能使用这些关键词。</p>
<h3 id="http-谓词模板">HTTP 谓词模板</h3>
<ul>
<li>[<a
href="https://learn.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.httpgetattribute">HttpGet]</a></li>
<li>[<a
href="https://learn.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.httppostattribute">HttpPost]</a></li>
<li>[<a
href="https://learn.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.httpputattribute">HttpPut]</a></li>
<li>[<a
href="https://learn.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.httpdeleteattribute">HttpDelete]</a></li>
<li>[<a
href="https://learn.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.httpheadattribute">HttpHead]</a></li>
<li>[<a
href="https://learn.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.httppatchattribute">HttpPatch]</a></li>
</ul>
<h3 id="路由模板">路由模板</h3>
<p>路由模板用于定义路由匹配的模板，它分为</p>
<ul>
<li><a
href="https://learn.microsoft.com/zh-cn/aspnet/core/mvc/controllers/routing?view=aspnetcore-6.0#verb6">HTTP
谓词模板</a></li>
<li><a
href="https://learn.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.routeattribute">[Route]
特性模板</a></li>
</ul>
<h3 id="谓词模板示例">谓词模板示例</h3>
<p>假设如下控制器：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Route(<span class="string">&quot;api/[controller]&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test2Controller</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">HttpGet</span>]   <span class="comment">// GET /api/test2</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">ListProducts</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ControllerContext.MyDisplayRouteInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">HttpGet(<span class="string">&quot;&#123;id&#125;&quot;</span>)</span>]   <span class="comment">// GET /api/test2/xyz</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetProduct</span>(<span class="params"><span class="built_in">string</span> id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">return</span> ControllerContext.MyDisplayRouteInfo(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">HttpGet(<span class="string">&quot;int/&#123;id:int&#125;&quot;</span>)</span>] <span class="comment">// GET /api/test2/int/3</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetIntProduct</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ControllerContext.MyDisplayRouteInfo(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">HttpGet(<span class="string">&quot;int2/&#123;id&#125;&quot;</span>)</span>]  <span class="comment">// GET /api/test2/int2/3</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetInt2Product</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ControllerContext.MyDisplayRouteInfo(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述代码中：</p>
<ul>
<li><p>每个操作都包含 <code>[HttpGet]</code> 属性，该属性仅将匹配限制为
HTTP GET 请求。</p></li>
<li><p><code>GetProduct</code> 操作包含 <code>"&#123;id&#125;"</code> 模板，因此
<code>id</code> 被附加到控制器上的 <code>"api/[controller]"</code>
模板中。 方法模板为 <code>"api/[controller]/"&#123;id&#125;""</code>。
因此，此操作仅匹配
<code>/api/test2/xyz</code>、<code>/api/test2/123</code>、<code>/api/test2/&#123;any string&#125;</code>
等形式的 GET 请求。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">HttpGet(<span class="string">&quot;&#123;id&#125;&quot;</span>)</span>]   <span class="comment">// GET /api/test2/xyz</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetProduct</span>(<span class="params"><span class="built_in">string</span> id</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">return</span> ControllerContext.MyDisplayRouteInfo(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>GetIntProduct</code> 操作包含 <code>"int/&#123;id:int&#125;")</code>
模板。 模板的 <code>:int</code> 部分将 <code>id</code>
路由值限制为可以转换为整数的字符串。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">HttpGet(<span class="string">&quot;int/&#123;id:int&#125;&quot;</span>)</span>] <span class="comment">// GET /api/test2/int/3</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetIntProduct</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> ControllerContext.MyDisplayRouteInfo(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于 <code>/api/test2/int/abc</code> 的 GET
请求，将会无法匹配到路由，并返回 <code>404  Not Found</code>
错误</p></li>
<li><p><code>GetInt2Product</code> 操作在模板中包含
<code>&#123;id&#125;</code>，但不将 <code>id</code> 限制为可以转换为整数的值。
对于 <code>/api/test2/int2/abc</code> 的 GET 请求，处理如下：</p>
<ol type="1">
<li><p>与此路由匹配。</p></li>
<li><p>模型绑定无法将 <code>abc</code> 转换为整数。 该方法的
<code>id</code> 参数是整数。</p></li>
<li><p>返回 <a
href="https://developer.mozilla.org/docs/Web/HTTP/Status/400">400 Bad
Request</a>，因为模型绑定未能将 <code>abc</code> 转换为整数。</p></li>
</ol>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">HttpGet(<span class="string">&quot;int2/&#123;id&#125;&quot;</span>)</span>]  <span class="comment">// GET /api/test2/int2/3</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetInt2Product</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> ControllerContext.MyDisplayRouteInfo(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>生成 REST API 时，很少需要在 <code>操作方法</code> 上使用
<code>[Route(...)]</code> ，因为该操作接受所有 HTTP 方法。
建议使用更具体的 HTTP 谓词属性来明确 API 所支持的操作。 API 的 REST
客户端应知道哪些路径和 HTTP 谓词映射到特定的逻辑操作。</p>
<p>REST API 应使用属性路由将应用的功能建模为一组资源，其中操作由 HTTP
谓词表示。 也就是说，对同一逻辑资源执行的许多操作（例如，GET 和
POST）都使用相同 URL。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyProductsController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">HttpGet(<span class="string">&quot;/products3&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">ListProducts</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ControllerContext.MyDisplayRouteInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">HttpPost(<span class="string">&quot;/products3&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">CreateProduct</span>(<span class="params">MyProduct myProduct</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ControllerContext.MyDisplayRouteInfo(myProduct.Name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码中的 URL 路径为 <code>/products3</code>：</p>
<ul>
<li>当 <a
href="https://learn.microsoft.com/zh-cn/aspnet/core/mvc/controllers/routing?view=aspnetcore-6.0#verb6">HTTP
谓词</a> 为 <code>GET</code> 时，调用
<code>MyProductsController.ListProducts</code>。</li>
<li>当 <a
href="https://learn.microsoft.com/zh-cn/aspnet/core/mvc/controllers/routing?view=aspnetcore-6.0#verb6">HTTP
谓词</a> 为 <code>POST</code> 时，调用
<code>MyProductsController.CreateProduct</code> 。</li>
</ul>
<h3 id="特性路由组合">特性路由组合</h3>
<p>在<strong>控制器</strong>上定义的所有路由模板均作为操作上路由模板的前缀。在控制器上放置的<strong>路由特性</strong>会使控制器中的所有操作都使用该<strong>特性路由</strong>。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line">[<span class="meta">Route(<span class="string">&quot;products&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductsApiController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">HttpGet</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">ListProducts</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ControllerContext.MyDisplayRouteInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">HttpGet(<span class="string">&quot;&#123;id&#125;&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetProduct</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ControllerContext.MyDisplayRouteInfo(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的示例中：</p>
<ul>
<li>URL 路径 <code>/products</code> 可以匹配
<code>ProductsApi.ListProducts</code></li>
<li>URL 路径 <code>/products/5</code> 可以匹配
<code>ProductsApi.GetProduct(int)</code>。</li>
</ul>
<p>这两项操作仅匹配 HTTP <code>GET</code>，因为它们标记了
<code>[HttpGet]</code>。</p>
<p>操作上以 <code>/</code> 或 <code>~/</code>
开头的路由模板不与控制器的路由模板合并。</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Attribute</th>
<th style="text-align: left;">与 <code>[Route("Home")]</code> 结合</th>
<th style="text-align: left;">定义路由模板</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>[Route("")]</code></td>
<td style="text-align: left;">是</td>
<td style="text-align: left;"><code>"Home"</code></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>[Route("Index")]</code></td>
<td style="text-align: left;">是</td>
<td style="text-align: left;"><code>"Home/Index"</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>[Route("/")]</code></td>
<td style="text-align: left;"><strong>否</strong></td>
<td style="text-align: left;"><code>""</code></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>[Route("About")]</code></td>
<td style="text-align: left;">是</td>
<td style="text-align: left;"><code>"Home/About"</code></td>
</tr>
</tbody>
</table>
<h3 id="特性路由继承">特性路由继承</h3>
<p>在父类控制器上定义的路由特性会继承给子类，可以在父类中定义一个通用的路由特性，减少在子类的控制器上重复定义。</p>
<p>例如：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line">[<span class="meta">Route(<span class="string">&quot;[controller]/[action]&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> abstrct <span class="keyword">class</span> <span class="title">CustomBaseController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处可不进行路由特性定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductsApiController</span> : <span class="title">CustomBaseController</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">HttpGet</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="标记替换">标记替换</h3>
<p>特性路由支持标记替换，将标记用方括号（<code>[</code>、<code>]</code>）括起来即可。
标记 <code>[action]</code>、<code>[area]</code> 和
<code>[controller]</code>
会替换成定义了路由的操作中的操作名称、区域名称和控制器名称。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Products0：控制器名称</span></span><br><span class="line">[<span class="meta">Route(<span class="string">&quot;[controller]/[action]&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Products0Controller</span> : <span class="title">Controller</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// List：操作名称</span></span><br><span class="line">    [<span class="meta">HttpGet</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">List</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ControllerContext.MyDisplayRouteInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    [<span class="meta">HttpGet(<span class="string">&quot;&#123;id&#125;&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Edit</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ControllerContext.MyDisplayRouteInfo(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a
href="https://learn.microsoft.com/zh-cn/aspnet/core/mvc/controllers/areas?view=aspnetcore-6.0">Areas</a>是一项
MVC 功能，用于将相关功能作为一个单独的组组织到一个组中，单击<a
href="https://learn.microsoft.com/zh-cn/aspnet/core/mvc/controllers/areas?view=aspnetcore-6.0">链接</a>可跳转阅读更加详细的内容</p>
</blockquote>
<h3 id="标记样式转换">标记样式转换</h3>
<p><code>[controller]</code>，<code>[action]</code>
等会默认使用定义的名称作用 URL，而在实际开发中，我们可能需要将
PascalCase 命名转换成 hyphenCase 命名，如将 <code>FindAll</code> 变成
<code>find-all</code>。</p>
<p>可以通过实现 <a
href="https://learn.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.routing.ioutboundparametertransformer">IOutboundParameterTransformer</a>
接口来自定义。</p>
<p><strong>接口实现：</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SlugifyParameterTransformer</span> : <span class="title">IOutboundParameterTransformer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span>? TransformOutbound(<span class="built_in">object</span>? <span class="keyword">value</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">value</span> == <span class="literal">null</span>) &#123; <span class="keyword">return</span> <span class="literal">null</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Regex.Replace(<span class="keyword">value</span>.ToString()!,</span><br><span class="line">                             <span class="string">&quot;([a-z])([A-Z])&quot;</span>,</span><br><span class="line">                             <span class="string">&quot;$1-$2&quot;</span>,</span><br><span class="line">                             RegexOptions.CultureInvariant,</span><br><span class="line">                             TimeSpan.FromMilliseconds(<span class="number">100</span>)).ToLowerInvariant();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用：</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">builder.Services.AddControllersWithViews(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.Conventions.Add(<span class="keyword">new</span> RouteTokenTransformerConvention(</span><br><span class="line">                                 <span class="keyword">new</span> SlugifyParameterTransformer()));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><a
href="https://learn.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.applicationmodels.routetokentransformerconvention">RouteTokenTransformerConvention</a>
是应用程序的模型约定，可以：</p>
<ol type="1">
<li><p>将参数转换程序应用到程序中的所有特性路由中。</p></li>
<li><p>在替换特性路由标记值时对其进行自定义</p></li>
</ol>
<h3 id="多个路由特性">多个路由特性</h3>
<p>同一个控制器或者路由上，可以同时添加多个路由特性标记。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Route(<span class="string">&quot;Store&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">Route(<span class="string">&quot;[controller]&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Products6Controller</span> : <span class="title">Controller</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">HttpPost(<span class="string">&quot;Buy&quot;</span>)</span>]       <span class="comment">// Matches &#x27;Products6/Buy&#x27; and &#x27;Store/Buy&#x27;</span></span><br><span class="line">    [<span class="meta">HttpPost(<span class="string">&quot;Checkout&quot;</span>)</span>]  <span class="comment">// Matches &#x27;Products6/Checkout&#x27; and &#x27;Store/Checkout&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Buy</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ControllerContext.MyDisplayRouteInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一般不要使用多个路由特性，会让 URL 看起来不易于理解，且容易冲突。</p>
<h3 id="可选参数默认值和约束">可选参数、默认值和约束</h3>
<p>特性路由支持使用与传统路由相同的内联语法，来指定可选参数、默认值和约束。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Products14Controller</span> : <span class="title">Controller</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">HttpPost(<span class="string">&quot;&#123;controller=ProductsDefault&#125;/&#123;id:int:string&#125;/&#123;name?&#125;&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">ShowProduct</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ControllerContext.MyDisplayRouteInfo(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用说明：</strong></p>
<ol type="1">
<li><code>=</code> 赋予默认值</li>
<li><code>:</code> 进行约束，可以同时使用多个约束</li>
<li><code>?</code> 表示可选参数</li>
</ol>
<p><strong>内置路由约束：</strong></p>
<table>
<colgroup>
<col style="width: 11%" />
<col style="width: 26%" />
<col style="width: 23%" />
<col style="width: 37%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">约束</th>
<th style="text-align: left;">示例</th>
<th style="text-align: left;">匹配项示例</th>
<th style="text-align: left;">说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>int</code></td>
<td style="text-align: left;"><code>&#123;id:int&#125;</code></td>
<td style="text-align: left;"><code>123456789</code>,
<code>-123456789</code></td>
<td style="text-align: left;">匹配任何整数</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>bool</code></td>
<td style="text-align: left;"><code>&#123;active:bool&#125;</code></td>
<td style="text-align: left;"><code>true</code>, <code>FALSE</code></td>
<td style="text-align: left;">匹配 <code>true</code> 或
<code>false</code>。 不区分大小写</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>datetime</code></td>
<td style="text-align: left;"><code>&#123;dob:datetime&#125;</code></td>
<td style="text-align: left;"><code>2016-12-31</code>,
<code>2016-12-31 7:32pm</code></td>
<td style="text-align: left;">在固定区域性中匹配有效的
<code>DateTime</code> 值。 请参阅前面的警告。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>decimal</code></td>
<td style="text-align: left;"><code>&#123;price:decimal&#125;</code></td>
<td style="text-align: left;"><code>49.99</code>,
<code>-1,000.01</code></td>
<td style="text-align: left;">在固定区域性中匹配有效的
<code>decimal</code> 值。 请参阅前面的警告。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>double</code></td>
<td style="text-align: left;"><code>&#123;weight:double&#125;</code></td>
<td style="text-align: left;"><code>1.234</code>,
<code>-1,001.01e8</code></td>
<td style="text-align: left;">在固定区域性中匹配有效的
<code>double</code> 值。 请参阅前面的警告。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>float</code></td>
<td style="text-align: left;"><code>&#123;weight:float&#125;</code></td>
<td style="text-align: left;"><code>1.234</code>,
<code>-1,001.01e8</code></td>
<td style="text-align: left;">在固定区域性中匹配有效的
<code>float</code> 值。 请参阅前面的警告。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>guid</code></td>
<td style="text-align: left;"><code>&#123;id:guid&#125;</code></td>
<td
style="text-align: left;"><code>CD2C1638-1638-72D5-1638-DEADBEEF1638</code></td>
<td style="text-align: left;">匹配有效的 <code>Guid</code> 值</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>long</code></td>
<td style="text-align: left;"><code>&#123;ticks:long&#125;</code></td>
<td style="text-align: left;"><code>123456789</code>,
<code>-123456789</code></td>
<td style="text-align: left;">匹配有效的 <code>long</code> 值</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>minlength(value)</code></td>
<td style="text-align: left;"><code>&#123;username:minlength(4)&#125;</code></td>
<td style="text-align: left;"><code>Rick</code></td>
<td style="text-align: left;">字符串必须至少为 4 个字符</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>maxlength(value)</code></td>
<td style="text-align: left;"><code>&#123;filename:maxlength(8)&#125;</code></td>
<td style="text-align: left;"><code>MyFile</code></td>
<td style="text-align: left;">字符串不得超过 8 个字符</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>length(length)</code></td>
<td style="text-align: left;"><code>&#123;filename:length(12)&#125;</code></td>
<td style="text-align: left;"><code>somefile.txt</code></td>
<td style="text-align: left;">字符串必须正好为 12 个字符</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>length(min,max)</code></td>
<td style="text-align: left;"><code>&#123;filename:length(8,16)&#125;</code></td>
<td style="text-align: left;"><code>somefile.txt</code></td>
<td style="text-align: left;">字符串必须至少为 8 个字符，且不得超过 16
个字符</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>min(value)</code></td>
<td style="text-align: left;"><code>&#123;age:min(18)&#125;</code></td>
<td style="text-align: left;"><code>19</code></td>
<td style="text-align: left;">整数值必须至少为 18</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>max(value)</code></td>
<td style="text-align: left;"><code>&#123;age:max(120)&#125;</code></td>
<td style="text-align: left;"><code>91</code></td>
<td style="text-align: left;">整数值不得超过 120</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>range(min,max)</code></td>
<td style="text-align: left;"><code>&#123;age:range(18,120)&#125;</code></td>
<td style="text-align: left;"><code>91</code></td>
<td style="text-align: left;">整数值必须至少为 18，且不得超过 120</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>alpha</code></td>
<td style="text-align: left;"><code>&#123;name:alpha&#125;</code></td>
<td style="text-align: left;"><code>Rick</code></td>
<td
style="text-align: left;">字符串必须由一个或多个字母字符组成，<code>a</code>-<code>z</code>，并区分大小写。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>regex(expression)</code></td>
<td
style="text-align: left;"><code>&#123;ssn:regex(^\\d&#123;&#123;3&#125;&#125;-\\d&#123;&#123;2&#125;&#125;-\\d&#123;&#123;4&#125;&#125;$)&#125;</code></td>
<td style="text-align: left;"><code>123-45-6789</code></td>
<td style="text-align: left;">字符串必须与正则表达式匹配。
请参阅有关定义正则表达式的提示。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>required</code></td>
<td style="text-align: left;"><code>&#123;name:required&#125;</code></td>
<td style="text-align: left;"><code>Rick</code></td>
<td style="text-align: left;">用于强制在 URL 生成过程中存在非参数值</td>
</tr>
</tbody>
</table>
<h3 id="自定义特性路由">自定义特性路由</h3>
<p>所有路由属性都实现 <code>IRouteTemplateProvider</code>。 ASP.NET Core
运行时：</p>
<ol type="1">
<li>应用启动时，在控制器类和操作方法上查找属性。</li>
<li>使用实现 <code>IRouteTemplateProvider</code>
的属性来构建初始路由集。</li>
</ol>
<p>每个 <code>IRouteTemplateProvider</code>
都允许定义一个包含自定义路由模板、顺序和名称的路由：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyApiControllerAttribute</span> : <span class="title">Attribute</span>, <span class="title">IRouteTemplateProvider</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Template =&gt; <span class="string">&quot;api/[controller]&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span>? Order =&gt; <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="built_in">string</span>.Empty;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">MyApiController</span>]</span><br><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyTestApiController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// GET /api/MyTestApi</span></span><br><span class="line">    [<span class="meta">HttpGet</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Get</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ControllerContext.MyDisplayRouteInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述 <code>Get</code> 方法返回
<code>Order = 2, Template = api/MyTestApi</code>。</p>
<h2 id="路由返回值">路由返回值</h2>
<p>ASP.NET Core 使用以下类型作为 Web API 控制器的操作返回类型：</p>
<ul>
<li><a
href="https://learn.microsoft.com/zh-cn/aspnet/core/web-api/action-return-types?view=aspnetcore-7.0#specific-type">特定类型</a></li>
<li><a
href="https://learn.microsoft.com/zh-cn/aspnet/core/web-api/action-return-types?view=aspnetcore-7.0#iactionresult-type">IActionResult</a></li>
<li><a
href="https://learn.microsoft.com/zh-cn/aspnet/core/web-api/action-return-types?view=aspnetcore-7.0#actionresultt-type">ActionResult</a></li>
<li><a
href="https://learn.microsoft.com/zh-cn/aspnet/core/web-api/action-return-types?view=aspnetcore-7.0#httpresults-type">HttpResults</a></li>
</ul>
<blockquote>
<p>请点击 <a
href="https://learn.microsoft.com/zh-cn/aspnet/core/web-api/action-return-types?view=aspnetcore-7.0">ASP.NET
Core Web API 中控制器操作的返回类型</a> 进行详细阅读</p>
</blockquote>
<h2 id="传统路由与特性路由对比">传统路由与特性路由对比</h2>
<table>
<colgroup>
<col style="width: 7%" />
<col style="width: 51%" />
<col style="width: 40%" />
</colgroup>
<thead>
<tr class="header">
<th>类型</th>
<th>传统路由</th>
<th>特性路由</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>定义方式</td>
<td>在 <code>Program.cs</code> 中调用 <code>MapControllerRoute</code>
建立 URL 映射</td>
<td>在每个 <code>Controller</code> 中通过特性来定义 URL 映射</td>
</tr>
<tr class="even">
<td>操作性</td>
<td>更简洁</td>
<td>要对每个 action 进行定义</td>
</tr>
</tbody>
</table>
<h2 id="路由快速配置">路由快速配置</h2>
<p>当理解了路由相关知识后，需要可以快速应用到实际项目中，本节记录一些快速配置代码，方便进行初始化。</p>
<h3 id="映射路由">映射路由</h3>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 在 Run 之前调用 MapControllers 进行映射</span></span><br><span class="line">app.MapControllers();</span><br><span class="line">app.Run();</span><br></pre></td></tr></table></figure>
<h3 id="设置-hyphencase-路由">设置 hyphenCase 路由</h3>
<p>增加 <code>SlugifyParameterTransformer</code> 类</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SlugifyParameterTransformer</span> : <span class="title">IOutboundParameterTransformer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span>? TransformOutbound(<span class="built_in">object</span>? <span class="keyword">value</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">value</span> == <span class="literal">null</span>) &#123; <span class="keyword">return</span> <span class="literal">null</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Regex.Replace(<span class="keyword">value</span>.ToString()!,</span><br><span class="line">                             <span class="string">&quot;([a-z])([A-Z])&quot;</span>,</span><br><span class="line">                             <span class="string">&quot;$1-$2&quot;</span>,</span><br><span class="line">                             RegexOptions.CultureInvariant,</span><br><span class="line">                             TimeSpan.FromMilliseconds(<span class="number">100</span>)).ToLowerInvariant();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Program.cs</code> 中配置</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">builder.Services.AddControllersWithViews(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.Conventions.Add(<span class="keyword">new</span> RouteTokenTransformerConvention(</span><br><span class="line">                                 <span class="keyword">new</span> SlugifyParameterTransformer()));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="新建路由基类">新建路由基类</h3>
<p>所有子类都继承自这个基类</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Route(<span class="string">&quot;api/v1/[controller]&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomControllerBase</span>: <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p><a
href="https://learn.microsoft.com/zh-cn/aspnet/core/mvc/controllers/routing?view=aspnetcore-6.0#attribute-routing-for-rest-apis">在
ASP.NET Core 中路由到控制器操作 | Microsoft Learn</a></p>
<p><a
href="https://learn.microsoft.com/zh-cn/aspnet/core/fundamentals/routing?view=aspnetcore-6.0#route-template-reference">ASP.NET
Core 中的路由 | Microsoft Learn</a></p>
<p><a
href="https://learn.microsoft.com/zh-cn/aspnet/core/web-api/action-return-types?view=aspnetcore-7.0">ASP.NET
Core Web API 中控制器操作的返回类型</a></p>
<p><a
href="https://learn.microsoft.com/zh-cn/aspnet/core/mvc/models/model-binding?view=aspnetcore-8.0">ASP.NET
Core 中的模型绑定 | Microsoft Learn</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>DotNetCore</category>
      </categories>
      <tags>
        <tag>.NET Core</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Linq 后导致修改列表对象字段无效</title>
    <url>/posts/2024/395GBDB.html</url>
    <content><![CDATA[<p>最近使用 Linq 写了这样一段代码：</p>
<p>先用 <code>Select</code> 生成
<code>IEnumerable&lt;T&gt;</code>，然后通过 <code>First()</code>将对象从
<code>IEnumerable&lt;T&gt;</code>
中查找出来，接着修改该对象的字段值，最后将
<code>IEnumerable&lt;T&gt;</code> 转换成 <code>List</code> 返回。</p>
<p>我惊奇地发现，刚刚对第一个对象的修改，居然没有生效，这个 bug
让人促不及防。</p>
<span id="more"></span>
<h2 id="伪代码复现">伪代码复现</h2>
<p><strong>伪代码如下</strong>：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Person 类</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">&quot;defaultName&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;create a new person: &quot;</span>);           </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowSelf</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;My name is <span class="subst">&#123;Name&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用代码</strong>：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 Select 生成 IEnumerable&lt;Person&gt;</span></span><br><span class="line">IEnumerable&lt;Person&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;()&#123;</span><br><span class="line">    <span class="string">&quot;ZhangSan&quot;</span>,<span class="string">&quot;LiSi&quot;</span>,<span class="string">&quot;WangWu&quot;</span></span><br><span class="line">    &#125;.Select(x =&gt; <span class="keyword">new</span> Person(x));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> firstPerson = list.First();</span><br><span class="line">Console.WriteLine();</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;I am the first person, my name was changed from <span class="subst">&#123;firstPerson.Name&#125;</span> to ZhangSanPro&quot;</span>);</span><br><span class="line">firstPerson.Name = <span class="string">&quot;ZhangSanPro&quot;</span>;</span><br><span class="line">firstPerson.ShowSelf();</span><br><span class="line"></span><br><span class="line">Console.WriteLine();</span><br><span class="line">Console.WriteLine(<span class="string">&quot;persons in list:&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> person <span class="keyword">in</span> list)</span><br><span class="line">&#123;</span><br><span class="line">    person.ShowSelf();</span><br><span class="line">&#125;</span><br><span class="line">Console.ReadKey();</span><br></pre></td></tr></table></figure>
<p><strong>结果</strong>：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">create a new person:</span><br><span class="line"></span><br><span class="line">I am the first person, my name was changed from ZhangSan to ZhangSanPro</span><br><span class="line">My name is ZhangSanPro</span><br><span class="line"></span><br><span class="line">persons in list:</span><br><span class="line">create a new person:</span><br><span class="line">create a new person:</span><br><span class="line">create a new person:</span><br><span class="line">My name is ZhangSan</span><br><span class="line">My name is LiSi</span><br><span class="line">My name is WangWu</span><br></pre></td></tr></table></figure>
<p>从输出可以看到，对第一个对象的 <code>Name</code>
修改是生效，但是为什么后面转换成 <code>List</code>
后，它的值却没改变呢，按道理修改引用对象的字段，也会影响到
<code>List</code> 中的对象的。</p>
<h2 id="原因分析">原因分析</h2>
<p>在上述代码中，<code>Select</code> 方法返回的是一个
<code>IEnumerable&lt;Person&gt;</code>，这是一个延迟执行的查询，意味着查询的结果（也就是
<code>Person</code>
对象的集合）直到第一次遍历它时才会被计算。因此，当修改
<code>firstPerson</code> 的 <code>Name</code> 属性后，再次遍历
<code>list</code> 时，<code>Select</code> 查询会再次执行，从而创建新的
<code>Person</code> 对象，这就是为什么看到的 <code>Name</code>
属性没有被修改。</p>
<p>因为了为保证修改的对象与遍历的对象是一致的，可以将其转换成
<code>List</code>，再执行后续操作</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">IEnumerable&lt;Person&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;()&#123;</span><br><span class="line">    <span class="string">&quot;ZhangSan&quot;</span>,<span class="string">&quot;LiSi&quot;</span>,<span class="string">&quot;WangWu&quot;</span></span><br><span class="line">    &#125;.Select(x =&gt; <span class="keyword">new</span> Person(x)).ToList();</span><br></pre></td></tr></table></figure>
<p><code>.ToList()</code> 会在调用时将所有的 Person
马上实例化，这样在修改 <code>firstPerson</code> 的 <code>Name</code>
属性后，list 中的第一个元素的 <code>Name</code> 才会相应的修改。</p>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<p><a
href="https://learn.microsoft.com/zh-cn/dotnet/standard/linq/deferred-execution-lazy-evaluation#deferred-execution">延迟执行和延迟计算
- LINQ to XML - .NET | Microsoft Learn</a></p>
<p><a
href="https://learn.microsoft.com/zh-cn/dotnet/standard/linq/chain-queries-example">链式查询示例
(C#) - LINQ to XML - .NET | Microsoft Learn</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Linq</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Linq</tag>
      </tags>
  </entry>
  <entry>
    <title>EF Core 实现多对多关系的几种方式</title>
    <url>/posts/2023/3NAXE1Y.html</url>
    <content><![CDATA[<p>当一个实体类型的任意数量的实体与相同或另一个实体类型的任意数量的实体相关联时，将使用多对多关系。</p>
<p>实现多对多主要有两种方式：</p>
<ol type="1">
<li>使用“关联”表来联接两个实体，这个是官方支持的做法</li>
<li>若只关心单向的一对多关系，可以将数据转换成 json 保存</li>
</ol>
<span id="more"></span>
<h2 id="通过关联表实现多对多">通过关联表实现多对多</h2>
<h2 id="通过-json-实现多对多">通过 Json 实现多对多</h2>
<h2 id="参考">参考</h2>
<p><a
href="https://learn.microsoft.com/zh-cn/ef/core/modeling/relationships/many-to-many">多对多关系
- EF Core | Microsoft Learn</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>DotNetCore</category>
      </categories>
      <tags>
        <tag>EF Core</tag>
        <tag>DotNET Core</tag>
      </tags>
  </entry>
  <entry>
    <title>.NET 中使用 Minio 遇到的一些坑</title>
    <url>/posts/2022/22T138.html</url>
    <content><![CDATA[<p>本文总结了在 .NetCore 中使用 Minio 的过程中遇到的一些问题。</p>
<span id="more"></span>
<h2 id="连接客户端时报错">连接客户端时报错</h2>
<p>在连接客户端时，报错：<code>Minio.Exceptions.InvalidEndpointException: MinIO API responded with message=No path allowed in endpoint.</code></p>
<p>连接代码为：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">MinioClient minioClient = <span class="keyword">new</span> MinioClient(<span class="string">&quot;https://XXXX:9000&quot;</span>,accessKey:<span class="string">&quot;Q3AM3UQ867SPQQA43P2F&quot;</span>,secretKey:<span class="string">&quot;zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG&quot;</span>).WithSSL();</span><br></pre></td></tr></table></figure>
<p><strong>解决方法：</strong></p>
<p>把 url 的前缀 <code>https://</code> 去掉即可。</p>
<h2 id="签名验证失败">签名验证失败</h2>
<p>在使用 <code>minioClient</code>时，报错：
<code>MinIO API responded with message=The request signature we calculated does not match the signature you provided. Check your key and signing method.</code></p>
<p><strong>解决办法：</strong></p>
<p>出现这种问题的原因是 minio 在校验 signature 是否有效的时候，必须从
http header 里面获取 host，而我们这里没有对 header
作必要的处理。如果源请求未携带这个头，则 minio 处无法获取请求头中的
host。</p>
<p>可以在 nginx 中添加如下配置解决：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /</span><br><span class="line">&#123;</span><br><span class="line">     proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">     proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">     proxy_set_header Host $http_host;</span><br><span class="line"></span><br><span class="line">     proxy_connect_timeout 300;</span><br><span class="line">     # Default is HTTP/1, keepalive is only enabled in HTTP/1.1</span><br><span class="line">     proxy_http_version 1.1;</span><br><span class="line">     proxy_set_header Connection &quot;&quot;;</span><br><span class="line">     proxy_pass http://localhost:9000;</span><br><span class="line">     chunked_transfer_encoding off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考：</p>
<ol type="1">
<li><p>http://www.dreamwu.com/post-2068.html</p></li>
<li><p>https://docs.min.io/docs/setup-nginx-proxy-with-minio.html</p></li>
<li><p>https://segmentfault.com/a/1190000019422246</p></li>
</ol>
</blockquote>
<h2 id="访问bucket被拒绝">访问bucket被拒绝</h2>
<p>当调用 <code>BucketExistsAsync("public")</code>
时，报错：<code>MinIO API responded with message=Access denied on the resource: public/.</code></p>
<p><strong>解决办法：</strong></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Minio</category>
      </categories>
      <tags>
        <tag>.NET</tag>
        <tag>Minio</tag>
      </tags>
  </entry>
  <entry>
    <title>C#中json的增删改查</title>
    <url>/posts/2021/32SP0MA.html</url>
    <content><![CDATA[<p>json 是 C#
中比较自由的数据存储格式，它的自由体现在可以不用声明很多类来规范数据格式就可以灵活地存取
json 对象。现将常用的增删查改操作方式整理出来，以便开发，以飨读者。</p>
<span id="more"></span>
<h2 id="json对象类图">Json对象类图</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">System.Object</span><br><span class="line">└── Newtonsoft.Json.Linq.JToken</span><br><span class="line">    ├── Newtonsoft.Json.Linq.JValue</span><br><span class="line">    ├── Newtonsoft.Json.Linq.JRaw</span><br><span class="line">    └── Newtonsoft.Json.Linq.JContainer</span><br><span class="line">        ├── Newtonsoft.Json.Linq.JObject</span><br><span class="line">        ├── Newtonsoft.Json.Linq.JArray</span><br><span class="line">        ├── Newtonsoft.Json.Linq.JConstructor</span><br><span class="line">        └── Newtonsoft.Json.Linq.JProperty</span><br></pre></td></tr></table></figure>
<h2 id="转换">转换</h2>
<ol type="1">
<li><p>从文本转 Json Object</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> json = <span class="string">@&quot;&#123;</span></span><br><span class="line"><span class="string">  CPU: &#x27;Intel&#x27;,</span></span><br><span class="line"><span class="string">  Drives: [</span></span><br><span class="line"><span class="string">    &#x27;DVD read/writer&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;500 gigabyte hard drive&#x27;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">JObject o = JObject.Parse(json);</span><br></pre></td></tr></table></figure></li>
<li><p>从文本转 Json Array</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> json = <span class="string">@&quot;[</span></span><br><span class="line"><span class="string">  &#x27;Small&#x27;,</span></span><br><span class="line"><span class="string">  &#x27;Medium&#x27;,</span></span><br><span class="line"><span class="string">  &#x27;Large&#x27;</span></span><br><span class="line"><span class="string">]&quot;</span>;</span><br><span class="line"></span><br><span class="line">JArray a = JArray.Parse(json);</span><br></pre></td></tr></table></figure></li>
<li><p>从文件转 Json Object</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (StreamReader reader = File.OpenText(<span class="string">@&quot;c:\person.json&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    JObject o = (JObject)JToken.ReadFrom(<span class="keyword">new</span> JsonTextReader(reader));</span><br><span class="line">    <span class="comment">// do stuff</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="创建">创建</h2>
<ol type="1">
<li><p>手动创建</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">JArray array = <span class="keyword">new</span> JArray();</span><br><span class="line">JValue text = <span class="keyword">new</span> JValue(<span class="string">&quot;Manual text&quot;</span>);</span><br><span class="line">JValue date = <span class="keyword">new</span> JValue(<span class="keyword">new</span> DateTime(<span class="number">2000</span>, <span class="number">5</span>, <span class="number">23</span>));</span><br><span class="line"></span><br><span class="line">array.Add(text);</span><br><span class="line">array.Add(date);</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> json = array.ToString();</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &quot;Manual text&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;2000-05-23T00:00:00&quot;</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure></li>
<li><p>通过 Linq 创建</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">List&lt;Post&gt; posts = GetPosts();</span><br><span class="line"></span><br><span class="line">JObject rss =</span><br><span class="line">    <span class="keyword">new</span> JObject(</span><br><span class="line">        <span class="keyword">new</span> JProperty(<span class="string">&quot;channel&quot;</span>,</span><br><span class="line">            <span class="keyword">new</span> JObject(</span><br><span class="line">                <span class="keyword">new</span> JProperty(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;James Newton-King&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> JProperty(<span class="string">&quot;link&quot;</span>, <span class="string">&quot;http://james.newtonking.com&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> JProperty(<span class="string">&quot;description&quot;</span>, <span class="string">&quot;James Newton-King&#x27;s blog.&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> JProperty(<span class="string">&quot;item&quot;</span>,</span><br><span class="line">                    <span class="keyword">new</span> JArray(</span><br><span class="line">                        <span class="keyword">from</span> p <span class="keyword">in</span> posts</span><br><span class="line">                        <span class="keyword">orderby</span> p.<span class="function">Title</span></span><br><span class="line"><span class="function">                        <span class="keyword">select</span> <span class="keyword">new</span> <span class="title">JObject</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="keyword">new</span> JProperty(<span class="string">&quot;title&quot;</span>, p.Title</span>),</span></span><br><span class="line"><span class="function">                            <span class="keyword">new</span> <span class="title">JProperty</span>(<span class="params"><span class="string">&quot;description&quot;</span>, p.Description</span>),</span></span><br><span class="line"><span class="function">                            <span class="keyword">new</span> <span class="title">JProperty</span>(<span class="params"><span class="string">&quot;link&quot;</span>, p.Link</span>),</span></span><br><span class="line"><span class="function">                            <span class="keyword">new</span> <span class="title">JProperty</span>(<span class="params"><span class="string">&quot;category&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                                <span class="keyword">new</span> JArray(</span></span></span><br><span class="line"><span class="params"><span class="function">                                    <span class="keyword">from</span> c <span class="keyword">in</span> p.Categories</span></span></span><br><span class="line"><span class="params"><span class="function">                                    <span class="keyword">select</span> <span class="keyword">new</span> JValue(c</span>)))))))))</span>;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(rss.ToString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//  &quot;channel&quot;: &#123;</span></span><br><span class="line"><span class="comment">//    &quot;title&quot;: &quot;James Newton-King&quot;,</span></span><br><span class="line"><span class="comment">//    &quot;link&quot;: &quot;http://james.newtonking.com&quot;,</span></span><br><span class="line"><span class="comment">//    &quot;description&quot;: &quot;James Newton-King\&#x27;s blog.&quot;,</span></span><br><span class="line"><span class="comment">//    &quot;item&quot;: [</span></span><br><span class="line"><span class="comment">//      &#123;</span></span><br><span class="line"><span class="comment">//        &quot;title&quot;: &quot;Json.NET 1.3 + New license + Now on CodePlex&quot;,</span></span><br><span class="line"><span class="comment">//        &quot;description&quot;: &quot;Announcing the release of Json.NET 1.3, the MIT license and being available on CodePlex&quot;,</span></span><br><span class="line"><span class="comment">//        &quot;link&quot;: &quot;http://james.newtonking.com/projects/json-net.aspx&quot;,</span></span><br><span class="line"><span class="comment">//        &quot;category&quot;: [</span></span><br><span class="line"><span class="comment">//          &quot;Json.NET&quot;,</span></span><br><span class="line"><span class="comment">//          &quot;CodePlex&quot;</span></span><br><span class="line"><span class="comment">//        ]</span></span><br><span class="line"><span class="comment">//      &#125;,</span></span><br><span class="line"><span class="comment">//      &#123;</span></span><br><span class="line"><span class="comment">//        &quot;title&quot;: &quot;LINQ to JSON beta&quot;,</span></span><br><span class="line"><span class="comment">//        &quot;description&quot;: &quot;Announcing LINQ to JSON&quot;,</span></span><br><span class="line"><span class="comment">//        &quot;link&quot;: &quot;http://james.newtonking.com/projects/json-net.aspx&quot;,</span></span><br><span class="line"><span class="comment">//        &quot;category&quot;: [</span></span><br><span class="line"><span class="comment">//          &quot;Json.NET&quot;,</span></span><br><span class="line"><span class="comment">//          &quot;LINQ&quot;</span></span><br><span class="line"><span class="comment">//        ]</span></span><br><span class="line"><span class="comment">//      &#125;</span></span><br><span class="line"><span class="comment">//    ]</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>通过匿名对象创建</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">JObject o = JObject.FromObject(<span class="keyword">new</span></span><br><span class="line">&#123;</span><br><span class="line">    channel = <span class="keyword">new</span></span><br><span class="line">    &#123;</span><br><span class="line">        title = <span class="string">&quot;James Newton-King&quot;</span>,</span><br><span class="line">        link = <span class="string">&quot;http://james.newtonking.com&quot;</span>,</span><br><span class="line">        description = <span class="string">&quot;James Newton-King&#x27;s blog.&quot;</span>,</span><br><span class="line">        item =</span><br><span class="line">            <span class="keyword">from</span> p <span class="keyword">in</span> posts</span><br><span class="line">            <span class="keyword">orderby</span> p.Title</span><br><span class="line">            <span class="keyword">select</span> <span class="keyword">new</span></span><br><span class="line">            &#123;</span><br><span class="line">                title = p.Title,</span><br><span class="line">                description = p.Description,</span><br><span class="line">                link = p.Link,</span><br><span class="line">                category = p.Categories</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="修改">修改</h2>
<ol type="1">
<li><p>赋值修改</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">JObject jobj = <span class="keyword">new</span> JObject();</span><br><span class="line">jobj[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;value&quot;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="查询">查询</h2>
<h3 id="基本查询">基本查询</h3>
<ol type="1">
<li><p>通过名称或者索引访问</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> json = <span class="string">@&quot;&#123;</span></span><br><span class="line"><span class="string">  &#x27;channel&#x27;: &#123;</span></span><br><span class="line"><span class="string">    &#x27;title&#x27;: &#x27;James Newton-King&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;link&#x27;: &#x27;http://james.newtonking.com&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;description&#x27;: &#x27;James Newton-King\&#x27;s blog.&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;item&#x27;: [</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        &#x27;title&#x27;: &#x27;Json.NET 1.3 + New license + Now on CodePlex&#x27;,</span></span><br><span class="line"><span class="string">        &#x27;description&#x27;: &#x27;Announcing the release of Json.NET 1.3, the MIT license and the source on CodePlex&#x27;,</span></span><br><span class="line"><span class="string">        &#x27;link&#x27;: &#x27;http://james.newtonking.com/projects/json-net.aspx&#x27;,</span></span><br><span class="line"><span class="string">        &#x27;categories&#x27;: [</span></span><br><span class="line"><span class="string">          &#x27;Json.NET&#x27;,</span></span><br><span class="line"><span class="string">          &#x27;CodePlex&#x27;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        &#x27;title&#x27;: &#x27;LINQ to JSON beta&#x27;,</span></span><br><span class="line"><span class="string">        &#x27;description&#x27;: &#x27;Announcing LINQ to JSON&#x27;,</span></span><br><span class="line"><span class="string">        &#x27;link&#x27;: &#x27;http://james.newtonking.com/projects/json-net.aspx&#x27;,</span></span><br><span class="line"><span class="string">        &#x27;categories&#x27;: [</span></span><br><span class="line"><span class="string">          &#x27;Json.NET&#x27;,</span></span><br><span class="line"><span class="string">          &#x27;LINQ&#x27;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">JObject rss = JObject.Parse(json);</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> rssTitle = (<span class="built_in">string</span>)rss[<span class="string">&quot;channel&quot;</span>][<span class="string">&quot;title&quot;</span>];</span><br><span class="line"><span class="comment">// James Newton-King</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> itemTitle = (<span class="built_in">string</span>)rss[<span class="string">&quot;channel&quot;</span>][<span class="string">&quot;item&quot;</span>][<span class="number">0</span>][<span class="string">&quot;title&quot;</span>];</span><br><span class="line"><span class="comment">// Json.NET 1.3 + New license + Now on CodePlex</span></span><br><span class="line"></span><br><span class="line">JArray categories = (JArray)rss[<span class="string">&quot;channel&quot;</span>][<span class="string">&quot;item&quot;</span>][<span class="number">0</span>][<span class="string">&quot;categories&quot;</span>];</span><br><span class="line"><span class="comment">// [&quot;Json.NET&quot;, &quot;CodePlex&quot;]</span></span><br><span class="line"></span><br><span class="line">IList&lt;<span class="built_in">string</span>&gt; categoriesText = categories.Select(c =&gt; (<span class="built_in">string</span>)c).ToList();</span><br><span class="line"><span class="comment">// Json.NET</span></span><br><span class="line"><span class="comment">// CodePlex</span></span><br></pre></td></tr></table></figure></li>
<li><p>通过 Linq 查询</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> postTitles =</span><br><span class="line">    <span class="keyword">from</span> p <span class="keyword">in</span> rss[<span class="string">&quot;channel&quot;</span>][<span class="string">&quot;item&quot;</span>]</span><br><span class="line">    <span class="keyword">select</span> (<span class="built_in">string</span>)p[<span class="string">&quot;title&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> postTitles)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//LINQ to JSON beta</span></span><br><span class="line"><span class="comment">//Json.NET 1.3 + New license + Now on CodePlex</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> categories =</span><br><span class="line">    <span class="keyword">from</span> c <span class="keyword">in</span> rss[<span class="string">&quot;channel&quot;</span>][<span class="string">&quot;item&quot;</span>].SelectMany(i =&gt; i[<span class="string">&quot;categories&quot;</span>]).Values&lt;<span class="built_in">string</span>&gt;()</span><br><span class="line">    <span class="keyword">group</span> c <span class="keyword">by</span> c</span><br><span class="line">    <span class="keyword">into</span> g</span><br><span class="line">    <span class="keyword">orderby</span> g.Count() <span class="keyword">descending</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">new</span> &#123; Category = g.Key, Count = g.Count() &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> c <span class="keyword">in</span> categories)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(c.Category + <span class="string">&quot; - Count: &quot;</span> + c.Count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Json.NET - Count: 2</span></span><br><span class="line"><span class="comment">//LINQ - Count: 1</span></span><br><span class="line"><span class="comment">//CodePlex - Count: 1</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="特殊查询">特殊查询</h3>
<ol type="1">
<li><p>查询 JObject 中所有字段的名称</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">JProperty jp = inputObj.Properties();</span><br></pre></td></tr></table></figure></li>
<li><p>如何在多级查询中避免不存在而报错？</p>
<p>假设有如下<strong>数据结构：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;details&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;threeds2.fingerprint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;paymentData&quot;</span><span class="punctuation">:</span> <span class="string">&quot;456&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>查询方式：</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">jobj.SelectToken(<span class="string">&quot;details.[&#x27;threeds2.fingerprint&#x27;]&quot;</span>)).ValueOrDefault(<span class="built_in">string</span>.Empty)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>SelectToken方法支持我们输入深度Key的访问路径来获取数据，父子级使用"."连接；如果遇到key含有特殊符号点的，使用中括号加单引号包裹。而且这种写法不会抛出异常，如果路径错误或不存在返回值为null。</p>
</blockquote>
<p><strong>ValueOrDefault 扩展：</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">ValueOrDefault</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">this</span> IEnumerable&lt;JToken&gt; jt, T default_</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (jt == <span class="literal">null</span>) <span class="keyword">return</span> default_;</span><br><span class="line"></span><br><span class="line">  T <span class="keyword">value</span> = jt.Value&lt;T&gt;();</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">value</span> == <span class="literal">null</span>) <span class="keyword">return</span> default_;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>NewtonJson</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>CSharp中的JsonPath语法</title>
    <url>/posts/2021/0CYX0R.html</url>
    <content><![CDATA[<p>字符串匹配查询，== 号 加 ‘ ’ 号</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>NewtonJson</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>json</tag>
        <tag>JsonPath</tag>
      </tags>
  </entry>
  <entry>
    <title>PropertyGrid 中实现动态的下拉选项</title>
    <url>/posts/2020/3GJFFVV.html</url>
    <content><![CDATA[<p>在使用 PropertyGrid 控件中，有时候我们在属性的上面添加类型转换特性
(TypeConverterAttribute) 来自定义下拉选项。</p>
<p>这个时候，我们可能会有这样的要求，一个属性的改变会导致另一个属性的候选项发生改变，也就是说，我们需要为特定属性设置动态的下拉选项。</p>
<span id="more"></span>
<p>此处以 StringConverter 为例。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RebarDiameterConverter</span>:<span class="title">StringConverter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;<span class="built_in">string</span>&gt; _diameters = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;() &#123; <span class="string">&quot;φ8&quot;</span>,<span class="string">&quot;φ10&quot;</span>,<span class="string">&quot;φ12&quot;</span>, <span class="string">&quot;φ14&quot;</span>, <span class="string">&quot;φ16&quot;</span>, <span class="string">&quot;φ18&quot;</span>, &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//true enable,false disable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">GetStandardValuesSupported</span>(<span class="params">ITypeDescriptorContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> StandardValuesCollection <span class="title">GetStandardValues</span>(<span class="params">ITypeDescriptorContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(context!=<span class="literal">null</span> &amp;&amp; context.Instance <span class="keyword">is</span> ISwRebarProperty rebar)</span><br><span class="line">        &#123;</span><br><span class="line">            _diameters = swOpenRoadsSDK.ParseSpecificationXml.Instance.GetSpecifications(rebar.FeatureName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StandardValuesCollection(_diameters.ToArray()); <span class="comment">//编辑下拉框中的items</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//true: disable text editting.    false: enable text editting;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">GetStandardValuesExclusive</span>(<span class="params">ITypeDescriptorContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 GetStandardValues 方法中，会传递下来一个 context, 而
context.Instance
就是调用该转换器的实例，所以，将它转换成相应的对象，然后利用对象里面的值来动态生成下拉选项。</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>WPF</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>.NET</tag>
      </tags>
  </entry>
  <entry>
    <title>PropertyGrid 中只显示部分属性</title>
    <url>/posts/2020/35EQCZA.html</url>
    <content><![CDATA[<p>最近用到了PropertyGrid，原来从来没用到过，拿在手里，一头雾水，经过一段时间研究后，大概理解了Property的使用方法，下面仔细剖析一下。</p>
<p>PropertyGrid控件就是Visual
Studio开发工具里面的属性浏览器，我们在VS里面可以通过属性浏览器查看，修改控件的属性，并主要通过使用反射来检索项目的属性。</p>
<span id="more"></span>
<h2 id="普通显示">普通显示</h2>
<p>在PropertyGrid中显示属性很容易，我们可以直接给propertyGrid1.SelectedObject
属性赋值，SelectObject属性可以获取或设置当前选定的对象，数据类型为object,这就意味着我们可以直接将一个对象赋给它。针对一个对象，它会将对象中的所有公共属性显示在PropertyGrid上。</p>
<p>如果要同时显示多个对象，可以将一个对象数组赋值给
propertyGrid1.SelectedObjects。它会自动计算多个对象的公开属性并显示，当各个对象中属性值相同时，会显示相同的值，如果不同时，则会不显示确定的值。</p>
<h2 id="更改显示方式">更改显示方式</h2>
<p>当只用上面的赋值方式，那么显示出来的数据名称会直接是属性的名称，如果想要进行汉化，需要对每个属性添加相应的特性（Attribute）来进行配置。</p>
<p>特性是用于为类型、字段、方法和属性等编程元素添加批注的声明标记，在运行时可以使用反射对其进行检索。下面列出了在
PropertyGrid 中用到的特性：</p>
<ul>
<li><p>DescriptionAttribute</p>
<p>设置显示在属性下方说明帮助窗格中的属性文本。这是一种为活动属性（即具有焦点的属性）提供帮助文本的有效方法。</p></li>
<li><p>CategoryAttribute</p>
<p>设置属性在网格中所属的类别。当您需要将属性按类别名称分组时，此特性非常有用。如果没有为属性指定类别，该属性将被分配给
"杂项" 类别。可以将此特性应用于所有属性。</p></li>
<li><p>BrowsableAttribute</p>
<p>表示是否在网格中显示属性。此特性可用于在网格中隐藏属性。默认情况下，公共属性始终显示在网格中。</p></li>
<li><p>ReadOnlyAttribute</p>
<p>表示属性是否为只读。此特性可用于禁止在网格中编辑属性。默认情况下，带有
get 和 set 访问函数的公共属性在网格中是可以编辑的，如果只有 get
访问器的公共属性也是只读的。</p></li>
<li><p>DefaultValueAttribute</p>
<p>表示属性的默认值。如果希望为属性提供默认值，然后确定该属性值是否与默认值相同，则可使用此特性。可以将此特性应用于所有属性。</p></li>
<li><p>DefaultPropertyAttribute</p>
<p>表示类的默认属性。在网格中选择某个类时，将首先突出显示该类的默认属性。</p></li>
</ul>
<blockquote>
<p>如果想要在属性表中添加颜色选择和字体选择那是很容易一件事，可以在要展示的类中添加Color类型属性，和Font类型属性，绑定后，就可以进行颜色选择和字体选择了</p>
</blockquote>
<h2 id="自定义显示">自定义显示</h2>
<p>我们可以看出这种上面这种显示属性方法并不够灵活，我们不能方便的及时增加或者删除属性。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//属性表管理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PropertyManageCls</span> : <span class="title">CollectionBase</span>, <span class="title">ICustomTypeDescriptor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">Property <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> flag=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">value</span> != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">base</span>.List.Count&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                IList &lt;Property&gt; mList=<span class="keyword">new</span> List&lt;Property&gt;();</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">base</span>.List.Count; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Property p = <span class="keyword">base</span>.List[i] <span class="keyword">as</span> Property;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">value</span>.Name == p.Name)</span><br><span class="line">                    &#123;</span><br><span class="line">                        flag = i;</span><br><span class="line">                    &#125;</span><br><span class="line">                    mList.Add(p);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (flag == <span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    mList.Add(<span class="keyword">value</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">base</span>.List.Clear();</span><br><span class="line">                <span class="keyword">foreach</span> (Property p <span class="keyword">in</span> mList)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">base</span>.List.Add(p);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">base</span>.List.Add(<span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">Property <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">value</span>!=<span class="literal">null</span>&amp;&amp;<span class="keyword">base</span>.List.Count&gt;<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">base</span>.List.Remove(<span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Property <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (Property)<span class="keyword">base</span>.List[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">base</span>.List[index] = (Property)<span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> ICustomTypeDescriptor 成员</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AttributeCollection <span class="title">GetAttributes</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> TypeDescriptor.GetAttributes(<span class="keyword">this</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetClassName</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> TypeDescriptor.GetClassName(<span class="keyword">this</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetComponentName</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> TypeDescriptor.GetComponentName(<span class="keyword">this</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TypeConverter <span class="title">GetConverter</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> TypeDescriptor.GetConverter(<span class="keyword">this</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> EventDescriptor <span class="title">GetDefaultEvent</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> TypeDescriptor.GetDefaultEvent(<span class="keyword">this</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PropertyDescriptor <span class="title">GetDefaultProperty</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> TypeDescriptor.GetDefaultProperty(<span class="keyword">this</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">GetEditor</span>(<span class="params">Type editorBaseType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> TypeDescriptor.GetEditor(<span class="keyword">this</span>, editorBaseType, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> EventDescriptorCollection <span class="title">GetEvents</span>(<span class="params">Attribute[] attributes</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> TypeDescriptor.GetEvents(<span class="keyword">this</span>, attributes, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> EventDescriptorCollection <span class="title">GetEvents</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> TypeDescriptor.GetEvents(<span class="keyword">this</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PropertyDescriptorCollection <span class="title">GetProperties</span>(<span class="params">Attribute[] attributes</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        PropertyDescriptor[] newProps = <span class="keyword">new</span> PropertyDescriptor[<span class="keyword">this</span>.Count];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Property prop = (Property)<span class="keyword">this</span>[i];</span><br><span class="line">            newProps[i] = <span class="keyword">new</span> CustomPropertyDescriptor(<span class="keyword">ref</span> prop, attributes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PropertyDescriptorCollection(newProps);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PropertyDescriptorCollection <span class="title">GetProperties</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> TypeDescriptor.GetProperties(<span class="keyword">this</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">GetPropertyOwner</span>(<span class="params">PropertyDescriptor pd</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//属性类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Property</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _name=<span class="built_in">string</span>.Empty;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">object</span> _value=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> _readonly=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> _visible=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _category=<span class="built_in">string</span>.Empty;</span><br><span class="line">    TypeConverter _converter=<span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">object</span> _editor = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _displayname = <span class="built_in">string</span>.Empty;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Property</span>(<span class="params"><span class="built_in">string</span> sName, <span class="built_in">object</span> sValue</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>._name = sName;</span><br><span class="line">        <span class="keyword">this</span>._value = sValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Property</span>(<span class="params"><span class="built_in">string</span> sName, <span class="built_in">object</span> sValue, <span class="built_in">bool</span> sReadonly, <span class="built_in">bool</span> sVisible</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>._name = sName;</span><br><span class="line">        <span class="keyword">this</span>._value = sValue;</span><br><span class="line">        <span class="keyword">this</span>._readonly = sReadonly;</span><br><span class="line">        <span class="keyword">this</span>._visible = sVisible;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name  <span class="comment">//获得属性名</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            _name=<span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> DisplayName   <span class="comment">//属性显示名称</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _displayname;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            _displayname = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TypeConverter Converter  <span class="comment">//类型转换器，我们在制作下拉列表时需要用到</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _converter;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            _converter = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Category  <span class="comment">//属性所属类别</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _category;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            _category = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> Value  <span class="comment">//属性值</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            _value=<span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> ReadOnly  <span class="comment">//是否为只读属性</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _readonly;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            _readonly = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> Visible  <span class="comment">//是否可见</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _visible;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            _visible = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">object</span> Editor   <span class="comment">//属性编辑器</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> </span><br><span class="line">        &#123; </span><br><span class="line">            <span class="keyword">return</span> _editor; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> </span><br><span class="line">        &#123; </span><br><span class="line">            _editor = <span class="keyword">value</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomPropertyDescriptor</span> : <span class="title">PropertyDescriptor</span></span><br><span class="line">&#123;</span><br><span class="line">    Property m_Property;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomPropertyDescriptor</span>(<span class="params"><span class="keyword">ref</span> Property myProperty, Attribute[] attrs</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">myProperty.Name, attrs</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_Property = myProperty;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> PropertyDescriptor 重写方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">CanResetValue</span>(<span class="params"><span class="built_in">object</span> component</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> Type ComponentType</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">object</span> <span class="title">GetValue</span>(<span class="params"><span class="built_in">object</span> component</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> m_Property.Value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> Description</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> m_Property.Name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> Category</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> m_Property.Category;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> DisplayName</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> m_Property.DisplayName!=<span class="string">&quot;&quot;</span>?m_Property.DisplayName:m_Property.Name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> IsReadOnly</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> m_Property.ReadOnly;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ResetValue</span>(<span class="params"><span class="built_in">object</span> component</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Have to implement</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">ShouldSerializeValue</span>(<span class="params"><span class="built_in">object</span> component</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetValue</span>(<span class="params"><span class="built_in">object</span> component, <span class="built_in">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_Property.Value = <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> TypeConverter Converter</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> m_Property.Converter;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> Type PropertyType</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> m_Property.Value.GetType(); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">object</span> <span class="title">GetEditor</span>(<span class="params">Type editorBaseType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> m_Property.Editor==<span class="literal">null</span>? <span class="keyword">base</span>.GetEditor(editorBaseType):m_Property.Editor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面我们来看看该如何使用，我们仍然在Form_load中添加代码如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">PropertyManageCls pmc = <span class="keyword">new</span> PropertyManageCls();</span><br><span class="line">Property pp = <span class="keyword">new</span> Property(<span class="string">&quot;ID&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">pp.Category = <span class="string">&quot;基本信息&quot;</span>;</span><br><span class="line">pp.DisplayName = <span class="string">&quot;我的ID&quot;</span>;</span><br><span class="line">pmc.Add(pp);</span><br><span class="line">propertyGrid1.SelectObject=pmc;</span><br></pre></td></tr></table></figure>
<p>显示结果：</p>
<p><img data-src="https://i.loli.net/2020/07/21/hnxj6gibBDWHytu.png" /></p>
<h2 id="实现下拉框">实现下拉框</h2>
<p>要实现下拉框，需要使用类型转换器，继承与TypeConverter或者StringConverter，然后重写方法，代码如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下拉框类型转换器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DropDownListConverter</span> : <span class="title">StringConverter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">object</span>[] m_Objects;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DropDownListConverter</span>(<span class="params"><span class="built_in">object</span>[] objects</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_Objects = objects;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">GetStandardValuesSupported</span>(<span class="params">ITypeDescriptorContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">GetStandardValuesExclusive</span>(<span class="params">ITypeDescriptorContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//true下拉框不可编辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span></span><br><span class="line">    System.ComponentModel.TypeConverter.<span class="function">StandardValuesCollection <span class="title">GetStandardValues</span>(<span class="params">ITypeDescriptorContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//我们可以直接在内部定义一个数组，但并不建议这样做，这样对于下拉框的灵活性有很大影响</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StandardValuesCollection(m_Objects);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 此处一般是根据 context 中传递下来的 Instance，从中获取下拉的条件，动态生成下拉选项        </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们实现了下拉框类型转换器，但该如何使用呢？</p>
<ul>
<li><p>方法一：在属性上方添加标记
[TypeConverter(typeof(DropDownListConverter))]</p></li>
<li><p>方法二：我们可以在外部定义数组，使用方便，使用方法代码如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form_load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">            PropertyManageCls pmc = <span class="keyword">new</span> PropertyManageCls();</span><br><span class="line">            <span class="built_in">string</span> []s=<span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span> &#125;;</span><br><span class="line">            Property pp = <span class="keyword">new</span> Property(txtname.Text,txtvalue.Text, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">            pp.Category = <span class="string">&quot;基本信息&quot;</span>;</span><br><span class="line">            pp.DisplayName = <span class="string">&quot;我的ID&quot;</span>;</span><br><span class="line">            pp.Converter = <span class="keyword">new</span> DropDownListConverter(s);<span class="comment">//Property的Converter属性就可以设置类型转换</span></span><br><span class="line">            pmc.Add(pp);</span><br><span class="line">            propertyGrid1.SelectObject = pmc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>效果图如下：</p>
<figure>
<img data-src="https://i.loli.net/2020/07/21/ipstk1OyB7FGbd9.png"
alt="20200721234055.png" />
<figcaption aria-hidden="true">20200721234055.png</figcaption>
</figure>
<h2 id="属性编辑器">属性编辑器</h2>
<p>使用属性编辑器实现路径选择，属性编辑器需要继承与UITypeEditor。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件路径选择                                                                                                                     public class PropertyGridFileItem : UITypeEditor</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> UITypeEditorEditStyle <span class="title">GetEditStyle</span>(<span class="params">System.ComponentModel.ITypeDescriptorContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> UITypeEditorEditStyle.Modal;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">object</span> <span class="title">EditValue</span>(<span class="params">System.ComponentModel.ITypeDescriptorContext context, System.IServiceProvider provider, <span class="built_in">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        IWindowsFormsEditorService edSvc =</span><br><span class="line">            (IWindowsFormsEditorService)provider.GetService(<span class="keyword">typeof</span>(IWindowsFormsEditorService));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (edSvc != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 可以打开任何特定的对话框</span></span><br><span class="line"></span><br><span class="line">            OpenFileDialog dialog = <span class="keyword">new</span> OpenFileDialog();</span><br><span class="line"></span><br><span class="line">            dialog.AddExtension = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (dialog.ShowDialog().Equals(DialogResult.OK))</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> dialog.FileName;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用方法：</p>
<ul>
<li><p>在属性上方添加标记[EditorAttribute(typeof(PropertyGridFileItem),
typeof(System.Drawing.Design.UITypeEditor))]</p></li>
<li><p>使用代码</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form_load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    PropertyManageCls pmc = <span class="keyword">new</span> PropertyManageCls();</span><br><span class="line">    Property pp = <span class="keyword">new</span> Property(txtname.Text,txtvalue.Text, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    pp.Category = <span class="string">&quot;基本信息&quot;</span>;</span><br><span class="line">    pp.DisplayName = <span class="string">&quot;我的ID&quot;</span>;</span><br><span class="line">    pp.Editor= <span class="keyword">new</span> PropertyGridFileItem();<span class="comment">//Property的Editor属性就可以设置属性编辑</span></span><br><span class="line">    pmc.Add(pp);</span><br><span class="line">    propertyGrid1.SelectObject = pmc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>效果图如下：</p>
<p><img data-src="https://i.loli.net/2020/07/21/NgqsPfShQpMvyTa.png" /></p>
<h2 id="自定义要显示的属性">自定义要显示的属性</h2>
<p>PropertyGrid
默认显示所有的公开属性，包括父类的公开属性。在使用的过程中，我们可能会有如下需求：</p>
<ul>
<li>只想显示子类的某些属性，而父类因为某些原因不能将它的属性标记为
[Browsable(false)]</li>
<li>想通过自定义的 Attribute 来控制属性的显示</li>
</ul>
<p>这个时候，我们就需要对显示的属性进行筛选。我们通过实现
ICustomTypeDescriptor，然后重写方法
<code>public PropertyDescriptorCollection GetProperties(Attribute[] attributes)</code>
来实现。</p>
<p>实现部分代码如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NamedGroup</span> :<span class="title">ICustomTypeDescriptor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> ICustomTypeDescriptor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AttributeCollection <span class="title">GetAttributes</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> TypeDescriptor.GetAttributes(<span class="keyword">this</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetClassName</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> TypeDescriptor.GetClassName(<span class="keyword">this</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetComponentName</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> TypeDescriptor.GetComponentName(<span class="keyword">this</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TypeConverter <span class="title">GetConverter</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> TypeDescriptor.GetConverter(<span class="keyword">this</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EventDescriptor <span class="title">GetDefaultEvent</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> TypeDescriptor.GetDefaultEvent(<span class="keyword">this</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PropertyDescriptor <span class="title">GetDefaultProperty</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> TypeDescriptor.GetDefaultProperty(<span class="keyword">this</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">GetEditor</span>(<span class="params">Type editorBaseType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> TypeDescriptor.GetEditor(<span class="keyword">this</span>, editorBaseType, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EventDescriptorCollection <span class="title">GetEvents</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> TypeDescriptor.GetEvents(<span class="keyword">this</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EventDescriptorCollection <span class="title">GetEvents</span>(<span class="params">Attribute[] attributes</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> TypeDescriptor.GetEvents(<span class="keyword">this</span>, attributes, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">GetPropertyOwner</span>(<span class="params">PropertyDescriptor pd</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改此属性，进行展示</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PropertyDescriptorCollection <span class="title">GetProperties</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> TypeDescriptor.GetProperties(<span class="keyword">this</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PropertyDescriptorCollection <span class="title">GetProperties</span>(<span class="params">Attribute[] attributes</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 特别注意，此处的 true 代表不使用当前类的 GetProperties 方法来获取属性，默认为 false,这会导致无限循环，从而导致栈溢出</span></span><br><span class="line">        PropertyDescriptorCollection pdc = TypeDescriptor.GetProperties(<span class="keyword">this</span>, attributes, <span class="literal">true</span>);</span><br><span class="line">        PropertyDescriptor[] properties = pdc.Cast&lt;PropertyDescriptor&gt;().Where(item =&gt; item.Attributes.Cast&lt;Attribute&gt;().Any(itemA =&gt; itemA <span class="keyword">is</span> BrowsableAttribute ba &amp;&amp; ba.Browsable)).ToArray();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PropertyDescriptorCollection(properties);</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="致谢">致谢</h2>
<p>[1]. 本文来源：<a
href="https://blog.csdn.net/lxping1012/article/details/7073944">C#自定义PropertyGrid属性</a></p>
<h2 id="更多参考资料">更多参考资料</h2>
<p>[1]. <a
href="http://blog.csdn.net/luyifeiniu/article/details/5426960#创建%20PropertyGrid%20控件">PropertyGrid控件心得</a></p>
<p>[2]. <a
href="http://www.codeproject.com/KB/tabs/customizingcollectiondata.aspx">Customized
display of collection data in a PropertyGrid</a></p>
<p>[3]. <a
href="http://msdn.microsoft.com/en-us/library/8cexyz1e">TypeConverter的层次结构</a></p>
<p>[4]. <a
href="http://topic.csdn.net/u/20100827/11/5524219a-4457-4921-b8f2-b4c63bc6b016.html">关于PropertyGrid中属性的值动态从数据库取出</a></p>
<p>[5]. <a
href="http://blog.csdn.net/akron/article/details/2750566">动态可订制属性的
PropertyGrid</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>WPF</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>.NET</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF中修改TextBox的行高及实现RichTextBox绑定</title>
    <url>/posts/2020/1PP7XJ3.html</url>
    <content><![CDATA[<p>在 WPF 中，有时需要利用 TexTBox
来多行展示数据，但是，它默认的行高太丑，需要我们自己定义。</p>
<span id="more"></span>
<p>设置如下属性即可：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">&lt;TextBox TextBlock.LineHeight=<span class="string">&quot;10&quot;</span> TextBlock.LineStackingStrategy=<span class="string">&quot;BlockLineHeight&quot;</span> /&gt; </span><br></pre></td></tr></table></figure>
<p>当然，也有可能会用 RichTextBox，这就不会有这个问题，但是 WPF
的富文本不能进行 Text 绑定，所以在 MVVM 中，用起来很难受。</p>
<p>幸好，有一个扩展可以解决这个问题，它叫 <a
href="https://github.com/xceedsoftware/wpftoolkit/wiki/RichTextBox">wpftoolkit</a></p>
<p>用法如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">toolkit:RichTextBox</span> <span class="attr">x:Name</span>=<span class="string">&quot;_richTextBox&quot;</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span> <span class="attr">Margin</span>=<span class="string">&quot;10&quot;</span> <span class="attr">BorderBrush</span>=<span class="string">&quot;Gray&quot;</span> <span class="attr">Padding</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">                                          <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding Notes&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">                                          <span class="attr">ScrollViewer.VerticalScrollBarVisibility</span>=<span class="string">&quot;Auto&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>WPF</category>
      </categories>
      <tags>
        <tag>WPF</tag>
        <tag>TextBox</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF中修改TextBox的行高及实现RichTextBox绑定</title>
    <url>/posts/2020/1PP7XJ3.html</url>
    <content><![CDATA[<p>在 WPF 中，有时需要利用 TexTBox
来多行展示数据，但是，它默认的行高太丑，需要我们自己定义。</p>
<span id="more"></span>
<p>设置如下属性即可：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">&lt;TextBox TextBlock.LineHeight=<span class="string">&quot;10&quot;</span> TextBlock.LineStackingStrategy=<span class="string">&quot;BlockLineHeight&quot;</span> /&gt; </span><br></pre></td></tr></table></figure>
<p>当然，也有可能会用 RichTextBox，这就不会有这个问题，但是 WPF
的富文本不能进行 Text 绑定，所以在 MVVM 中，用起来很难受。</p>
<p>幸好，有一个扩展可以解决这个问题，它叫 <a
href="https://github.com/xceedsoftware/wpftoolkit/wiki/RichTextBox">wpftoolkit</a></p>
<p>用法如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">toolkit:RichTextBox</span> <span class="attr">x:Name</span>=<span class="string">&quot;_richTextBox&quot;</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span> <span class="attr">Margin</span>=<span class="string">&quot;10&quot;</span> <span class="attr">BorderBrush</span>=<span class="string">&quot;Gray&quot;</span> <span class="attr">Padding</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">                                          <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding Notes&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">                                          <span class="attr">ScrollViewer.VerticalScrollBarVisibility</span>=<span class="string">&quot;Auto&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>WPF</category>
      </categories>
      <tags>
        <tag>WPF</tag>
        <tag>TextBox</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF MVVM Stylet使用文档（中文）04-ViewModel First</title>
    <url>/posts/2020/CCGDMG.html</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<p>ViewModel-first 方式对于 Stylet
的体系结构非常重要，但是如果您以传统的 View-first
方式学习MVVM，就会发现它并不直观。</p>
<span id="more"></span>
<p>希望这篇文章能把一切都讲清楚。</p>
<h2 id="view-first-方式-the-view-first-appoach">View-first 方式 (The
View-First Appoach)</h2>
<p>让我们从定义 View-First 的方式开始，我这么说是什么意思呢?</p>
<p>MVVM 声明 ViewModel 应该不知道 View 的任何信息，但是该 View 应该知道
ViewModel。联 系 View 和 ViewModel 最简单的方法就是让 View
在它的代码背后构造它的 ViewModel——就像这样:</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>C#</th>
<th>VB.NET</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>public partial class MyView : Window <br>{<br> public MyView()<br>
{<br> InitializeComponent();<br> this.DataContext = new
MyViewModel();<br> } <br>}</td>
<td>Partial Public Class MyView : Inherits Window<br><br> Public Sub
New()<br> InitializeComponent()<br> Me.DataContext = new
MyViewModel()<br><br> End Class</td>
</tr>
</tbody>
</table>
<p>这是很好。View 可以创建和拥有其他 View，这意味着可以将 View
组合成层次结构。一切都很好。</p>
<p>当你组合了几个视图，比如这样，一个 Shell
包含一个顶部栏和一个框架，里面的任何页面都可以显示:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- This is a window which contains a top bar and another page --&gt;</span><br><span class="line">&lt;Window x:Class=&quot;MyNamespace.ShellView&quot; ....&gt;</span><br><span class="line">   &lt;StackPanel&gt;</span><br><span class="line">      &lt;my:TopBarView/&gt;</span><br><span class="line">      &lt;Frame x:Name=&quot;navigationFrame&quot;/&gt;</span><br><span class="line">   &lt;/StackPanel&gt;</span><br><span class="line">&lt;/Window&gt;</span><br></pre></td></tr></table></figure>
<p>TopBarView 有它自己的 ViewModel 。</p>
<p>现在假设 TopBarView
有一个字段，其中包含您想要更新的一些数据，例如当前页面的标题。现在，ShellViewModel
知道这一点(毕竟它决定了当前页面是什么)，但是 TopBarViewModel
不知道(它怎么知道?它什么都不知道)。这样做是为了暴露 TopBarView
的依赖属性，并将其绑定到 ShellViewModel 中，就像这样:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Window x:Class=&quot;MyNamespace.ShellView&quot; .... x:Name=&quot;rootObject&quot;&gt;</span><br><span class="line">   &lt;StackPanel&gt;</span><br><span class="line">      &lt;my:TopBarView CurrentPageTitle=&quot;&#123;Binding CurrentPageTitle, ElementName=rootObject&#125;&quot;/&gt;</span><br><span class="line">      &lt;Frame x:Name=&quot;navigationFrame&quot;/&gt;</span><br><span class="line">   &lt;/StackPanel&gt;</span><br><span class="line">&lt;/Window&gt;</span><br></pre></td></tr></table></figure>
<p>但那太恶心了。现在您已经得到了一个绑定到 ShellViewMode l 的视图。</p>
<p>另一个主要的关注点是显示窗口和对话框。</p>
<p>在传统的 MVVM 中，这是一个痛点。第一种选择是实例化并从 ViewModel
中显示视图(使用 Show() 或 ShowDialog() ) ，这使得
ViewModel，或者至少是它的一部分，变得不可测试。</p>
<p>更好的选择是在你当前视图的后台代码中显示新视图的时候才实例化，并从那里显示它。这意味着您需要建立一种方式来通知当前视图，让其显示实例化的视图，同时，还需要建立一种方式来获取对话框的结果并返回到
ViewModel。</p>
<p>实际上，为上面的框架设置内容需要实例化一个视图并放进视图中。这也面临同样的困境——要么视图模型实例化它(使其不可测试)，要么视图实例化它(导致通信困难)。</p>
<p>不管怎样，这种方法都有一些缺点。</p>
<h2 id="viewmodel-first-方式-the-viewmodel-first-approach"><a
href="">ViewModel-First 方式( The ViewModel-First Approach)</a></h2>
<p>ViewModel-first 方式的思想是：ViewModel 不应该知道其 View
的任何信息，同时 View 也不负责构造
ViewModel。相反，第三个服务负责为给定的 ViewModel 定位正确的
View，并正确地设置它的DataContext。</p>
<p>默认实现使用命名约定对给定的 ViewModel 定位正确的 View，将
“ViewModel” 替换为其名称中的 “View”。在 <a href="">ViewManager</a>
中有更详细的解释。</p>
<p>这允许其他 viewmodel 创建 viewmodel。它允许 viewmodel 了解和拥有其他
viewmodel。这允许您正确地组合您的视图模型。</p>
<p>这个技巧还有另外一个部分，可以用例子来解释:</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>C#</th>
<th>VB.NET</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>public class ShellViewModel<br> {<br> public TopBarViewModel TopBar
{ get; private set; }<br> // Stuff to instantiate and assign
TopBarViewModel }</td>
<td>Public Class ShellViewModel<br><br> Public Property TopBar as
TopBarViewModel<br> ' Stuff to instantiate and assign
TopBarViewModel<br><br> End Class</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">x:Class</span>=<span class="string">&quot;MyNamespace.ShellView&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:s</span>=<span class="string">&quot;https://github.com/canton7/Stylet&quot;</span> <span class="attr">.....</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ContentControl</span> <span class="attr">s:View.Model</span>=<span class="string">&quot;&#123;Binding TopBar&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>View.Model 关联的属性将获取它绑定到的 ViewModel(在本例中是
TopBarViewModel 的一个实例)，并定位正确的 View
(TopBarView)。它将实例化一个实例，并将其设置为 ContentControl
的内容。</p>
<p>这样的结果是 TopBarView 可以从它的 TopBarViewModel
中获得当前页面的名称，而 TopBarViewModel 可以通过 ShellViewModel
得知这一点。问题解决了!</p>
<p>ContentControl 的技巧也适用于导航:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Window x:Class=&quot;MyNamespace.ShellView&quot;</span><br><span class="line">        xmlns:s=&quot;https://github.com/canton7/Stylet&quot; .....&gt;</span><br><span class="line">   &lt;StackPanel&gt;</span><br><span class="line">      &lt;ContentControl s:View.Model=&quot;&#123;Binding TopBar&#125;&quot;/&gt;</span><br><span class="line">      &lt;ContentControl s:View.Model=&quot;&#123;Binding CurrentPage&#125;&quot;/&gt;</span><br><span class="line">   &lt;/StackPanel&gt;</span><br><span class="line">&lt;/Window&gt;</span><br></pre></td></tr></table></figure>
<p>通过实例化该页面的 ViewModel 的新实例，并将其分配给属性 CurrentPage,
ShellViewModel 将导航到一个新的页面。请注意，ShellViewModel
不再需要知道关于视图的任何信息。它不必实例化一个视图。这是一个非常重要、有用和强大的点。</p>
<p>对话框和窗口的处理方式与 <a href="">WindowManager</a>
非常相似。它接受一个给定的ViewModel实例，并将其视图显示为一个对话框或窗口。</p>
<h2 id="删除后台代码delete-the-code-behind">删除后台代码！（Delete the
Code-Behind! ）</h2>
<p>有了这种方法，您实际上不需要在代码背后做任何事情。您当然可以这样做，但是很少有
<a href="">响应</a>(用于处理事件)、转换器、附加属性和(最重要的)附加行为
不能解决的问题。</p>
<p>Stylet 允许您完全删除代码(它将为您调用
InitializeComponent)，强烈建议您这样做。删除后台代码!</p>
<blockquote>
<p>注意:如果您使用的是VB。有时，如果您删除了后面的代码，则 XAML
名称空间将停止工作。如果是这种情况，只需用匹配的文件名重新创建，给它正确的名称空间和类名，然后将其余部分留空。例如，MyView.xaml.vb:</p>
<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Namespace</span> Views</span><br><span class="line">    <span class="keyword">Public</span> <span class="keyword">Class</span> MyView</span><br><span class="line"></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">Class</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Namespace</span></span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Stylet 框架</category>
      </categories>
      <tags>
        <tag>MVVM</tag>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF MVVM Stylet使用文档（中文）02-Quick Start</title>
    <url>/posts/2020/2APET5T.html</url>
    <content><![CDATA[<p>想要尽快让 stylet 运行起来吗?就是这里!</p>
<span id="more"></span>
<blockquote>
<p>注意:如果您正在寻找示例应用程序，请下载源代码并查看Samples
文件夹。</p>
</blockquote>
<p>下面的介绍将建立一个最小的框架项目。</p>
<h2 id="自动设置automatic-option"><a href="">自动设置(AutoMatic
Option)</a></h2>
<h3 id="net-framework">.NET Framework</h3>
<blockquote>
<p>注意:如果您的项目 NuGet 包使用的是 PackageReference，或者您使用的是
VS2013 或更早的版本，这将不起作用。请改用下面的“手动选项”部分。</p>
</blockquote>
<p>如果您是 Stylet 新手(并且正在运行 VS2015
或更高版本)，这是最简单的入门方法。</p>
<ol type="1">
<li><p>打开 Visual Studio，并创建一个新的 WPF 应用程序项目。</p></li>
<li><p>打开 NuGet
(右键单击你的项目-&gt;管理NuGet包)，并搜索并安装<code>Stylet.start</code>包。</p></li>
</ol>
<p>这将为您提供一个工作框架项目。</p>
<p>安装完成后，卸载style . start。</p>
<p>编码快乐!</p>
<h3 id="net-core">.NET Core</h3>
<p>对于 .NET Core 项目，最快的入门方法是使用 <code>dotnet new</code>和
Stylet 的模板。</p>
<p>打开一个命令窗口，并定位到你想安装新项目的位置</p>
<ol type="1">
<li><p>使用下面命令安装 Stylet 模板:</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dotnet new -i Stylet.Templates</span><br></pre></td></tr></table></figure></p></li>
<li><p>使用下面的命令新建一个工程</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dotnet new stylet -o MyStyletProject</span><br></pre></td></tr></table></figure></p></li>
<li><p>适当更改 MyStyletProject</p></li>
</ol>
<h2 id="手动设置"><a href="">手动设置</a></h2>
<p>如果你不想用 Stylet.Start
包并希望创建自己的框架项目，请按照下面的的步骤：</p>
<ol type="1">
<li><p>打开 Visual Studio，并创建一个新的WPF应用程序项目。</p></li>
<li><p>打开 NuGet(右键单击你的项目-&gt;管理NuGet包)，并安装
Stylet包。</p></li>
<li><p>首先，删除 MainWindow.xaml 和 MainWindow.xaml.cs /
vb。你不需要他们。</p></li>
<li><p>接下来，您需要一个根 View 和一个 ViewModel。根 View 必须是一个
<code>Window</code> 或者 继承于 <code>Window</code>
，除了这个，没有其它任何限制，View 如下：</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Window x:Class=&quot;Stylet.Samples.Hello.RootView&quot;</span><br><span class="line">        xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span><br><span class="line">        xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span><br><span class="line">        Height=&quot;300&quot; Width=&quot;300&quot;&gt;</span><br><span class="line">    &lt;TextBlock&gt;Hello, World&lt;/TextBlock&gt;</span><br><span class="line">&lt;/Window&gt;</span><br></pre></td></tr></table></figure></p></li>
</ol>
<blockquote>
<p>ViewModel 可以是任何一个旧类(现在—您可能希望它是一个 Screen 或
Conductor)。</p>
<table>
<colgroup>
<col style="width: 44%" />
<col style="width: 55%" />
</colgroup>
<thead>
<tr class="header">
<th>C#</th>
<th>VB.NET</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>public class RootViewModel <br>{ <br>}</td>
<td>Public Class RootViewModel <br><br>End Class &gt;</td>
</tr>
</tbody>
</table>
</blockquote>
<ol start="5" type="1">
<li><p>接下来，您需要一个引导程序。现在，您不需要任何特殊的东西——只需要一些东西来标识根
ViewModel。然后，您将能够在这里配置 IoC容器
以及其他应用程序级的内容，如下：</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>C#</th>
<th>VB.NET</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>public class Bootstrapper : Bootstrapper<RootViewModel> <br>{<br>
}</td>
<td>Public Class Bootstrapper Inherits Bootstrapper(Of RootViewModel)
<br><br>End Cl</td>
</tr>
</tbody>
</table></li>
<li><p>最后，需要将其作为资源引用到您的 App.xaml 中。您需要删除 StartUri
属性，并为 Stylet 和您自己的应用程序添加 xmlns 条目。最后，您需要将
Stylet 的 ApplicationLoader 添加到资源中，并识别您在上面创建的引导程序
(Bootstrapper)。</p>
<p>像下面这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Application</span> <span class="attr">x:Class</span>=<span class="string">&quot;Stylet.Samples.Hello.App&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:s</span>=<span class="string">&quot;https://github.com/canton7/Stylet&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:Stylet.Samples.Hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Application.Resources</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">s:ApplicationLoader</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">s:ApplicationLoader.Bootstrapper</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">local:Bootstrapper</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">s:ApplicationLoader.Bootstrapper</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">s:ApplicationLoader</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Application.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Application</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>就是这样!运行它，你会得到一个带有 Hello World 的窗体。</p>
<h2 id="程序加载器the-applicationloader"><a href="">程序加载器(The
ApplicationLoader)</a></h2>
<p>值得注意的是，上面的<code>&lt;s:ApplicationLoader&gt;</code>是
ResourceDictionary 子类。这允许它加载 Stylet 的嵌入资源(参见 Screen 和
Conductors )。你可以选择不加载 Stylet 的资源，像这样:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:ApplicationLoader</span> <span class="attr">LoadStyletResources</span>=<span class="string">&quot;False&quot;</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">s:ApplicationLoader</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果你想添加自己的 Resource/ResourceDictionaries
到应用程序，最简单的方法是这样的:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Application.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:ApplicationLoader</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">s:ApplicationLoader.Bootstrapper</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">local:Bootstrapper</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">s:ApplicationLoader.Bootstrapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Style</span> <span class="attr">x:Key</span>=<span class="string">&quot;MyResourceKey&quot;</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">s:ApplicationLoader.MergedDictionaries</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ResourceDictionary</span> <span class="attr">Source</span>=<span class="string">&quot;MyResourceDictionary.xaml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">s:ApplicationLoader.MergedDictionaries</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">s:ApplicationLoader</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Application.Resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果这让你感到不舒服，你也可以这样做:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Application.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ResourceDictionary</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ResourceDictionary.MergedDictionaries</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">s:ApplicationLoader</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">s:ApplicationLoader.Bootstrapper</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">local:Bootstrapper</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">s:ApplicationLoader.Bootstrapper</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">s:ApplicationLoader</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ResourceDictionary</span> <span class="attr">Source</span>=<span class="string">&quot;MyResourceDictionary.xaml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ResourceDictionary.MergedDictionaries</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Style</span> <span class="attr">x:Key</span>=<span class="string">&quot;MyResourceKey&quot;</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ResourceDictionary</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Application.Resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Stylet 框架</category>
      </categories>
      <tags>
        <tag>MVVM</tag>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF MVVM Stylet使用文档（中文）03-Bootstrapper</title>
    <url>/posts/2020/268PCBJ.html</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<p>引导程序负责启动应用程序。它配置 IoC 容器，创建根 ViewModel
的新实例，并使用 WindowManager 显示它。</p>
<span id="more"></span>
<p>它还提供了其他各种功能，如下所述。</p>
<p>引导程序有两种形式:</p>
<ol type="1">
<li><code>BootstrapperBase&lt;TRootViewModel&gt;</code>，这种需要您自己配置
IoC 容器;</li>
<li><code>Bootstrapper &lt;TRootViewModel&gt;</code>，使用 Stylet 的内置
IoC 容器 StyletIoC。</li>
</ol>
<p>示例 Bootstrapper，使用 StyletIoC:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Bootstrapper</span> : <span class="title">Bootstrapper</span>&lt;<span class="title">MyRootViewModel</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnStart</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// This is called just after the application is started, but before the IoC container is set up.</span></span><br><span class="line">      <span class="comment">// Set up things like logging, etc</span></span><br><span class="line">      <span class="comment">//程序启动之后，IoC窗口配置之前调用</span></span><br><span class="line">      <span class="comment">//进行一些设置，比如日志</span></span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ConfigureIoC</span>(<span class="params">IStyletIoCBuilder builder</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// Bind your own types. Concrete types are automatically self-bound.</span></span><br><span class="line">      builder.Bind&lt;IMyInterface&gt;().To&lt;MyType&gt;();</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Configure</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// This is called after Stylet has created the IoC container, so this.Container exists, but before the Root ViewModel is launched.</span></span><br><span class="line">      <span class="comment">// Configure your services, etc, in here</span></span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnLaunch</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// This is called just after the root ViewModel has been launched</span></span><br><span class="line">      <span class="comment">// Something like a version check that displays a dialog might be launched from here</span></span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnExit</span>(<span class="params">ExitEventArgs e</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// Called on Application.Exit</span></span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnUnhandledException</span>(<span class="params">DispatcherUnhandledExceptionEventArgs e</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// Called on Application.DispatcherUnhandledException</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用自定义的-ioc-容器using-a-custom-ioc-container"><a
href="">使用自定义的 IoC 容器(Using a Custom IoC Container)</a></h2>
<p>使用带有 Stylet 的另一个 IoC 容器很容易。我在 <a
href="https://github.com/canton7/Stylet/tree/master/Bootstrappers">Bootstrappers
project</a> 中包含了许多流行的 IoC
容器的bootstrappers。这些都是经过单元测试而非实战测试的:
您可以随意定制它们。</p>
<p>注意，Stylet nuget package/dll
不包括这些，因为它会添加不必要的依赖。同样，我也不会发布特定的 IoC
容器的包，因为这是一种浪费。</p>
<p>将您想要的引导程序从上面的链接复制到您的项目中。然后子类化它，就像您通常子类化<code>Bootstrapper&lt;TRootViewModel&gt;</code>，上面有文档说明。然后将子类添加到
App.xaml.cs 中。正如 <a href="">Quick Start</a> 中说明的那样。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Bootstrapper</span> : <span class="title">AutofacBootstrapper</span>&lt;<span class="title">ShellViewModel</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Application</span> <span class="attr">x:Class</span>=<span class="string">&quot;Stylet.Samples.Hello.App&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:s</span>=<span class="string">&quot;https://github.com/canton7/Stylet&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:Stylet.Samples.Hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Application.Resources</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">s:ApplicationLoader</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">s:ApplicationLoader.Bootstrapper</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">local:Bootstrapper</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">s:ApplicationLoader.Bootstrapper</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">s:ApplicationLoader</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Application.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Application</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果您想为另一个 IoC
容器编写自己的引导程序，这也很容易。看看上面的描述，看看需要做什么。</p>
<h2
id="向-app.xmal-添加资源字典adding-resource-dictionaries-to-appxmal"><a
href="">向 App.xmal 添加资源字典(Adding Resource Dictionaries to
App,xmal)</a></h2>
<p><code>s:ApplicationLoader</code> 本身就是一个
ResourceDictionary。如果你需要将自己的资源字典添加到 App.xaml
中，你需要将<code>s:ApplicationLoader</code> 嵌入到你的
ResourceDictionary 中作为一个合并字典，就像这样:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">&lt;Application.Resources&gt;</span><br><span class="line">    &lt;ResourceDictionary&gt;</span><br><span class="line">        &lt;ResourceDictionary.MergedDictionaries&gt;</span><br><span class="line">            &lt;s:ApplicationLoader&gt;</span><br><span class="line">                &lt;s:ApplicationLoader.Bootstrapper&gt;</span><br><span class="line">                    &lt;local:Bootstrapper/&gt;</span><br><span class="line">                &lt;/s:ApplicationLoader.Bootstrapper&gt;</span><br><span class="line">            &lt;/s:ApplicationLoader&gt;</span><br><span class="line"></span><br><span class="line">            &lt;ResourceDictionary Source=<span class="string">&quot;YourDictionary.xaml&quot;</span>/&gt;</span><br><span class="line">        &lt;/ResourceDictionary.MergedDictionaries&gt;</span><br><span class="line">    &lt;/ResourceDictionary&gt;</span><br><span class="line">&lt;/Application.Resources&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Stylet 框架</category>
      </categories>
      <tags>
        <tag>MVVM</tag>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF MVVM Stylet使用文档（中文）01-Introduction</title>
    <url>/posts/2020/MDKVCV.html</url>
    <content><![CDATA[<p>在 Github 上发现一个开源轻巧的 MVVM
框架，发现网上缺少相应的中文文档，便进行了翻译总结，英文水平有限，MVVM也才初学，若有错误，还请斧正。</p>
<span id="more"></span>
<h2 id="概述">概述</h2>
<p>Stylet 是一个小巧，但强大的 MVVM 框架，它的灵感来自于 <a
href="https://caliburnmicro.com/">Caliburn.Micro</a>。<em>它通过进一步减少复杂性和各种事件</em>，让不熟悉任何
MVVM 框架的人(同事)更快地使用 MVVM 框架。</p>
<p>它还提供了在 Caliburn.Micro
里没有的功能。包括独有的【IoC容器】，更简单的【 ViewModel验证】和兼容
mvvm 的消息框架。</p>
<p>少量的代码（LOC : Line Of Code）和非常全面的测试组件使得 Sytlet
对于那些使用、验证或确认 SOUP
导致高开销的项目是一个很有吸引力的选择。Stylet 的模块化 toolkit-inspired
架构意味着它很容易让你自由使用，使用你喜欢的部分,或替掉你不喜欢的部分。</p>
<p>下面是一个简洁的特点列表。也可以点击链接了解更多信息。</p>
<h2 id="视图模型优先a-viewmodel-first-apporach"><a
href="https://github.com/canton7/Stylet/wiki/ViewModel-First">视图模型优先（A
ViewModel-First apporach）</a></h2>
<p>典型的 MVVM
结构：视图（View）知道如何实例化它的视图模型（ViewModel），而 ViewModel
通常不直接通信，这种结构被称之为
视图优先（View-First）。然而，反转这个模式——使用者自己实例化
ViewModels，然后框架自动将 View 附加到实例化的 ViewModel
上——这种方式有很多优点，它允许你以一种非常熟悉的方式组合ViewModels。这种
ViewModel-First 方式是 Stylet 唯一支持的。</p>
<h2 id="响应action"><a href="">响应（Action）</a></h2>
<p>WPF 使用的 ICommand 接口非常强大，但是在 MVVM
体系结构中使用时显得有些笨拙。ViewModel
对一些过程的响应似乎是不对的，比如按钮的单击操作应该表示为属性，而不是方法。一个简单的语句<code>&lt;Button Command="&#123;s:Action DoSomething&#125;"/&gt;</code>使得在每次单击按钮时调用
ViewModel 上的 DoSomething() 。</p>
<p>另外，如果您有一个名为 CanDoSomething 的 bool
属性，它将被观察并用于判断按钮应该启用还是禁用。这被称为防护属性。</p>
<p>响应还可以与事件一起工作，允许您执行以下操作：<code>&lt;Button MouseEnter="&#123;s:Action DoSomethingElse&#125;"/&gt;</code></p>
<h2 id="screen-类和-conductors"><a href="noctiflorous.gitee.io">Screen
类和 Conductors</a></h2>
<p>Screen 类提供了很多功能，使得它成为 ViewModel
的一个很有吸引力的基类：属性改变通知，验证，当它 显示/隐藏/关闭
时被通知的功能，当它关闭时，是否能够被控制的功能。</p>
<h2 id="事件聚合器the-event-aggregator"><a href="">事件聚合器（The Event
Aggregator）</a></h2>
<p>Stylet 的事件聚合器与 Caliburn
非常相似。允许订阅者在不知情或不保留对方的情况下接收发布的消息。这对于
viewmodel 之间的消息传递特别有用，当然它还有许多其他用途。</p>
<h2 id="窗体管理器the-windowmanager"><a href="">窗体管理器（The
WindowManager）</a></h2>
<p>使用 ViewModel-first 方式，通过引用要显示的 ViewModel
来显示窗口和对话框，视图会自动附加。WindowManager可以轻松地完成这一任务。</p>
<p>它还提供了一个mvvm兼容的消息框实现，因此您不必自己动手。</p>
<h2 id="验证validation"><a href="">验证（Validation）</a></h2>
<p>传统的 MVVM
中的验证有一个痛点：它需要在每个需要验证的视图模型中使用大量的样板文件，关于如何做好这一点的资料却很少。</p>
<p>Stylet 提供了一个框架来获取您最喜欢的验证库（例如<a
href="https://fluentvalidation.codeplex.com/">FluentValidation</a>），并处理运行的验证和向视图报告结果。</p>
<p><a href="">Stylet 控制反转（StyletIoC）</a></p>
<p>Stylet
自带了自己的轻量级和极快(但仍然很强大)的IoC容器，当然如果您愿意，可以很容易地使用另一个IoC。</p>
<h2 id="mit-许可mit-license"><a href="">MIT 许可（MIT license）</a></h2>
<p>Stylet 是在 MIT 许可下发布的，它允许您修改
Stylet，并将其包含在商业项目中，而不需要声明(惟一的限制是必须包含许可的副本)。如果你需要的话，我可以根据具体情况重新授权。</p>
<h2 id="名词解释">名词解释</h2>
<ol type="1">
<li>IoC: Inversion of Control,控制反转</li>
<li>LoC: Line of Code，代码行</li>
<li>DI: Dependency Injection，依赖注入</li>
<li>MIT license: <a
href="https://baike.baidu.com/item/MIT%E8%AE%B8%E5%8F%AF%E8%AF%81/6671281?fr=aladdin">软件授权条款之一，详见百度</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Stylet 框架</category>
      </categories>
      <tags>
        <tag>MVVM</tag>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF MVVM Stylet使用文档（中文）05-Actions</title>
    <url>/posts/2020/3C0QABE.html</url>
    <content><![CDATA[<p>你有一个按钮，你想点击它并在 ViewModel 上执行一个方法? Actiions
完全可以解决这种问题。</p>
<span id="more"></span>
<h2 id="响应和方法actions-and-methods">响应和方法（Actions and
Methods）</h2>
<p>在“传统的” WPF 中，你需要在 ViewModel 上创建一个属性来实现 ICommand
接口，并将按钮的命令属性绑定到它。这工作得相当好 (ViewModel 对 View
一无所知，也不需要代码隐藏)，但它有点混乱——您确实需要在ViewModel
上调用一个方法，而不是在某个属性上执行一个方法。</p>
<p>Stylet 通过引入响应（Action） 解决了这个问题。看看这个:</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>C#</th>
<th>VB.NET</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>class ViewModel <br />{ <br /> public void DoSomething() <br /> {
<br /> Debug.WriteLine("DoSomething called"); <br /> } <br />}</td>
<td>Class ViewModel<br /> Public Sub DoSomething()<br />
Console.WriteLine("DoSomething called")<br />End Sub End Class</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">UserControl</span> <span class="attr">x:Class</span>=<span class="string">&quot;MyNamespace.View&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:s</span>=<span class="string">&quot;https://github.com/canton7/Stylet&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Command</span>=<span class="string">&quot;&#123;s:Action DoSomething&#125;&quot;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">UserControl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>您可能已经猜到了，单击按钮的时候，会调用 ViewModel 上的 DoSomething
方法。</p>
<p>就这么简单。</p>
<p>如果您的方法接受单个参数，可以传递按钮的 CommandParameter
属性的值。例如:</p>
<table>
<tr>
<td>
C#
</td>
<td>
VB.NET
</td>
<tr>
<td valign="top">
<pre lang="csharp">
class ViewModel
{
   public void DoSomething(string argument)
   {
      Debug.WriteLine(String.Format(&quot;Argument is {0}&quot;, argument));
   }
}</pre>
</td>
<td valign="top">
<pre lang="vb.net">
Class ViewModel
&nbsp;
  Public Sub DoSomething(argument As String)
&nbsp;
  Debug.WriteLine(String.Format(&quot;Argument is {0}&quot;, argument)
&nbsp;
  End Sub
End Class</pre>
</td>
</tr>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">UserControl</span> <span class="attr">x:Class</span>=<span class="string">&quot;MyNamespace.View&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:s</span>=<span class="string">&quot;https://github.com/canton7/Stylet&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Command</span>=<span class="string">&quot;&#123;s:Action DoSomething&#125;&quot;</span> <span class="attr">CommandParameter</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">UserControl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：Actions 对所有的 ICommand 属性都起作用 (比如 <a
href="http://msdn.microsoft.com/en-us/library/system.windows.input.keybinding%28v=vs.110%29.aspx">KeyBinding</a>)</p>
</blockquote>
<h2 id="保护属性guard-properties">保护属性（Guard Properties）</h2>
<p>您还可以使用 <em>Guard Properties</em>
来控制是否启用按钮。给定方法的保护属性是一个布尔属性，其名称为
“Can&lt;方法名&gt;”，因此如果您的方法名为
“DoSomething”，则相应的保护属性为 “CanDoSomething”。</p>
<p>Stylet 将检查保护属性是否存在，如果存在，如果返回 false
禁用按钮，如果返回 true 则启用按钮。它还将监视该属性的 PropertyChanged
通知，因此您可以控制按钮是否启用。</p>
<p>例如:</p>
<table>
<tr>
<td>
C#
</td>
<td>
VB.NET
</td>
<tr>
<td valign="top">
<pre lang="csharp">
class ViewModel
{
   public bool CanDoSomething
   {
      get { return this.someOtherConditionIsSatisfied(); }
   }
   public void DoSomething()
   {
      Debug.WriteLine(&quot;DoSomething called&quot;);
   }</pre>
</td>
<td valign="top">
<pre lang="vb.net">
Class ViewModel
&nbsp;
  Public ReadOnly Property CanDoSomething As Boolean
        Get
            Return Me.someOtherConditionIsSatisfied()
        End Get
    End Property
&nbsp;
    Public Sub DoSomething()
        Debug.WriteLine(&quot;DoSomething called&quot;)
    End Sub
End Class</pre>
</td>
</tr>
</table>
<h2 id="事件events">事件（Events）</h2>
<p>但是如果您想在事件发生时调用 ViewModel 方法呢? Actions
也包括这些。语法是完全相同的，但是没有保护属性的概念。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">UserControl</span> <span class="attr">x:Class</span>=<span class="string">&quot;MyNamespace.View&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:s</span>=<span class="string">&quot;https://github.com/canton7/Stylet&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Click</span>=<span class="string">&quot;&#123;s:Action DoSomething&#125;&quot;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">UserControl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>被调用的方法必须有 0个 或者 1个 或者 2个 参数。可能的情况如下：</p>
<table>
<tr>
<td>
C#
</td>
<td>
VB.NET
</td>
<tr>
<td valign="top">
<pre lang="csharp">
public void HasNoArguments() { }
&nbsp;
// This can accept EventArgs, or a subclass of EventArgs
public void HasOneSingleArgument(EventArgs e) { }
&nbsp;
// Again, a subclass of EventArgs is OK
public void HasTwoArguments(object sender, EventArgs e) { }</pre>
</td>
<td valign="top">
<pre lang="vb.net">
Public Sub HasNoArguments()
End Sub
&nbsp;
&#39; This can accept EventArgs, or a subclass of EventArgs
Public Sub HasOneSingleArgument(ByVal e As EventArgs)
End Sub
&nbsp;
&#39;Again, a subclass of EventArgs is OK
Public Sub HasTwoArguments(ByVal sender As Object, ByVal e As EventArgs)
End Sub</pre>
</td>
</tr>
</table>
<h2 id="响应目标the-view.actiontarget">响应目标（The
View.ActionTarget）</h2>
<p>到目前为止，我一直在说一个善意的谎言。我一直在说 Actions 是在
ViewModel 上调用的，但这并不完全正确。让我们更详细一点。</p>
<p>Stylet 定义了一个可继承的附加属性
View.ActionTarget。当一个视图被绑定到它的视图模型，View
中根元素上的ActionTarget 绑定到
ViewModel，然后由视图中的每个元素继承。当您调用一个 响应
时，它将在View.ActionTarget中被调用。</p>
<p>这意味着，在默认情况下，不管当前的 DataContext 是什么，都会在
ViewModel 上调用操作，这可能就是您想要的。</p>
<p>这是非常重要的一点，值得强调。DataContext
可能会在整个可视树中的多个位置发生变化。但是, View.ActionTarget
将保持不变(除非您手动更改它)。这意味着 Actions 总是由您的 ViewModel
来处理，而不是由绑定到的对象来处理，这几乎总是您想要的。</p>
<p>当然，您可以更改单个元素的 View.ActionTarget，例如:</p>
<table>
<tr>
<td>
C#
</td>
<td>
VB.NET
</td>
<tr>
<td valign="top">
<pre lang="csharp">
class InnerViewModel
{
   public void DoSomething() { }
}
class ViewModel
{
   public InnerViewModel InnerViewModel { get; private set; }
   public ViewModel()
   {
      this.InnerViewModel = new InnerViewModel();
   }
}</pre>
</td>
<td valign="top">
<pre lang="vb.net">
Class InnerViewModel
&nbsp;
    Public Sub DoSomething()
    End Sub
&nbsp;
End Class
&nbsp;
Class ViewModel
&nbsp;
    Public Property InnerVM As InnerViewModel
&nbsp;
    Public Sub New()
        Me.InnerVM = New InnerViewModel()
    End Sub
&nbsp;
End Class</pre>
</td>
</tr>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">UserControl</span> <span class="attr">x:Class</span>=<span class="string">&quot;MyNamespace.View&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:s</span>=<span class="string">&quot;https://github.com/canton7/Stylet&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">Button</span> <span class="attr">s:View.ActionTarget</span>=<span class="string">&quot;&#123;Binding InnerViewModel&#125;&quot;</span> <span class="attr">Command</span>=<span class="string">&quot;&#123;s:Action DoSomething&#125;&quot;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">UserControl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这里, 单击按钮时将调用 InnerViewModel.DoSomething。还有，因为
View.ActionTarget 是继承的，按钮的任何子元素也会将它们的
View.ActionTarget 设置为 InnewViewModel。</p>
<h2 id="响应和样式actions-and-styles">响应和样式（Actions and
Styles）</h2>
<p>从样式设置器执行的 Actions 将不起作用。WPF
中需要的类都是内部的，这意味着没有办法修复这个问题。不幸的是，在这种(罕见的)情况下，您需要使用老式的命令。</p>
<h2
id="快捷方式快捷菜单和弹出菜单gotchas---contextmenu-and-popup">快捷方式——快捷菜单和弹出菜单（Gotchas
- ContextMenu and Popup）</h2>
<p>当然，View.ActionTarget
是一个附加属性，它被配置为由设置它的任何元素的子元素继承，就像任何附加的属性一样，甚至是
DataContext，有一些边界是不能被继承的，比如:</p>
<ul>
<li><p>使用快捷菜单</p></li>
<li><p>使用弹出窗口</p></li>
<li><p>使用框架</p></li>
</ul>
<p>在这些情况下，Stylet 将尽其所能找到一个合适的 ActionTarget
(例如，它可能会找到与当前 XAML 文件中的根元素相关联的 ActionTarget
)，但这可能不是您所期望的(例如，它可能会忽略你的页面中间的
<code>s:View.ActionTarget = "&#123;Binding…&#125;</code>
行)，或者它可能(在罕见的情况下)根本找不到一个ActionTarget。</p>
<p>在这种情况下，请设置<code>s:View.ActionTarget</code>
一个合适的值。您可能很难从 ContextMenu 的内部获得对ContextMenu
之外任何内容的引用: 我建议使用<a
href="http://www.thomaslevesque.com/2011/03/21/wp-%20how-%20binding%20-to-data-when-the-datacontext-is-not-inherited/">BindingProxy</a>技术。</p>
<h2 id="其它行为additional-behaviour">其它行为（Additional
Behaviour）</h2>
<p>有两种情况会阻止操作正常工作:</p>
<ul>
<li>如果 View.ActionTarget 为空</li>
<li>或者如果指定的方法在 View.ActionTarget 根本不存在。</li>
</ul>
<p>这些情况下的默认行为如下:</p>
<table>
<colgroup>
<col style="width: 10%" />
<col style="width: 31%" />
<col style="width: 58%" />
</colgroup>
<thead>
<tr class="header">
<th></th>
<th>View.ActionTarget == null</th>
<th>No method on View.ActionTarget</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Commands</td>
<td>Disable the control</td>
<td>Throw an exception when the control is clicked</td>
</tr>
<tr class="even">
<td>Events</td>
<td>Enable the control</td>
<td>Throw an exception when the event is raised</td>
</tr>
</tbody>
</table>
<p>这样做的理由是如果 View.ActionTarget
为空，你必须自己设置它，所以你可能知道你在做什么。但是，如果指定的方法在
View.ActionTarget 中不存在，这可能是个错误，你应该知道。</p>
<p>当然，这种行为是可配置的。</p>
<p>当在 View.ActionTarget 为null时，要控制它的行为，可以在
<code>Action</code> 标记扩展上设置 <code>NullTarget</code>
属性，使它的值为 <code>Enable</code>、<code>Disable</code> 或
<code>Throw</code>都可以。(请注意，当Action
在事件中使用时，“Disable”是无效的时候，因为我们没有权力禁用任何东西)。</p>
<p>例如:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">Command</span>=<span class="string">&quot;&#123;s:Action MyMethod, NullTarget=Enable&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">Click</span>=<span class="string">&quot;&#123;s:Action MyMethod, NullTarget=Throw&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>更熟悉的方式，你也可以设置 <code>ActionNotFound</code>
的值为上面三个值之一</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">Command</span>=<span class="string">&quot;&#123;s:Action MyMethod, ActionNotFound=Disable&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">Click</span>=<span class="string">&quot;&#123;s:Action MyMethod, ActionNotFound=Enable&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Stylet 框架</category>
      </categories>
      <tags>
        <tag>MVVM</tag>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF MVVM Stylet使用文档（中文） 07- MessageBox</title>
    <url>/posts/2020/1005Z29.html</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<p>我们都知道，WPF有自己的消息框实现——“System.Windows.MessageBox”。这很好，除了你不能从你的
ViewModel中调用它(好吧，你<em>可以</em>，但它使你的 ViewModel
不可测试)。网上常见的解决办法是“实现你自己的消息框”。</p>
<p>好吧，Stylet 自带了自己的 MessageBox 克隆，它的外观和行为几乎与 WPF
的一样(包括外观、按钮、图标、自动调整大小、声音、对齐等)。</p>
<span id="more"></span>
<h2 id="使用方法usage">使用方法（Usage）</h2>
<p>从 IWindowManager 调用 ShowMessageBox 即可，像这样：</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>C#</th>
<th>VB.NET</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>public MyViewModel<br>{<br> private readonly IWindowManager
windowManager;<br><br> public MyViewModel(IWindowManager
windowManager)<br> {<br> this.windowManager = windowManager;<br>
}<br><br> public void ShowMessagebox()<br> {<br> var result =
this.windowManager.ShowMessageBox("Hello");<br> }</td>
<td>Public Class MyViewModel<br><br> Private ReadOnly windowManager As
IWindowManager<br> <br> Public Sub New(ByVal windowManager As
IWindowManager)<br> Me.windowManager = windowManager<br> End Sub<br>
<br> Public Sub ShowMessagebox()<br> Dim result =
Me.windowManager.ShowMessageBox("Hello")<br> End Sub<br><br>End
Class</td>
</tr>
</tbody>
</table>
<p>MessageBox接受与WPF消息框相同的所有选项，还有增加了一些其它选项。</p>
<h2 id="定制消息框customising-the-messagebox">定制消息框（Customising
the MessageBox)</h2>
<p>Stylet 的 MessageBox 实现为一个
ViewModel，<code>MessageBoxViewModel</code>，以及它相应的视图
<code>MessageBoxView</code>。ViewModel 实现了一个接口
<code>IMessageBoxViewModel</code>，而 <code>ShowMessageBox()</code>
方法使用这个接口来检索 ViewModel 的实例。</p>
<p>因此，您可以通过编写一个实现 <code>IMessageBoxViewModel</code> 的
ViewModel，并将其注册到 IoC 容器中，从而提供自己的
<code>MessageBoxViewModel</code> 和 <code>MessageBoxView</code>
的自定义实现。然后 <code>ShowMessageBox()</code>将使用它。</p>
<p>如果你只是想调整现有的 <code>MessageBoxViewModel</code>
的行为，你可以有以下选择:</p>
<h3 id="定制按钮文本custom-button-text">定制按钮文本（Custom Button
Text）</h3>
<p>通过修改
MessageBoxViewModel.ButtonLabels，您可以在每个应用程序的基础上编辑任何按钮的按钮文本。它是一个字典，保存每个按钮要显示的文本。如果你只是想编辑文本的一个特定的消息框，<code>ShowMessageBox</code>
将接受一个字典，你可以这样做：</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>C#</th>
<th>VB.NET</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MessageBoxViewModel.ButtonLabels[MessageBoxResult.No] = "No,
thanks";<br/> <br/>this.windowManager.ShowMessageBox("Do you want
breakfast?", <br/> buttons: MessageBoxButton.YesNo, <br/> buttonLabels:
new Dictionary&lt;MessageBoxResult, string&gt;()<br/> {<br/> {
MessageBoxResult.Yes, "Yes please!" },<br/> });<br/> <br/>// Will
display a MessageBox with the buttons "Yes please!" and "No,
thanks"</td>
<td>MessageBoxViewModel.ButtonLabels(MessageBoxResult.No) = "No,
thanks"<br/>Me.windowManager.ShowMessageBox("Do you want
breakfast?",<br/> buttons:=MessageBoxButton.YesNo,<br/>
buttonLabels:=New Dictionary(Of MessageBoxResult, String)() _<br/> From
<code>&#123;&#123;MessageBoxResult.Yes, "Yes please!"&#125;&#125;</code>)<br/> <br/>' Will display a MessageBox
with the buttons "Yes Please!" and "No, thanks"</td>
</tr>
</tbody>
</table>
<h3 id="定制按钮显示枚举值custom-button-set">定制按钮显示枚举值（Custom
Button Set）</h3>
<p><code>MessageBoxViewModel.ButtonToResults</code> 字典为每个
<code>MessageBoxButton</code> 指定显示哪些按钮的枚举值。想要同时显示
“OK“，“Yes” 和 “No” 按钮吗? 修改这个字典就可以了。</p>
<h3 id="定制图标custom-icons">定制图标（Custom Icons）</h3>
<p><code>MessageBoxViewModel.IconMapping</code> 字典指定不同的
<code>MessageBoxImage</code>
的值显示对应的图标。这个字典必须包含<code>MessageBoxImage</code>
所有可能的 Key 值 (注意不同的 Key 值在这里允许有相同的 Value
值)，一个值也可以是null，在这种情况下不会显示任何图标。</p>
<h3 id="定制音效custom-sounds">定制音效（Custom Sounds）</h3>
<p><code>MessageBoxViewModel.SoundMapping</code> 是一个字典，它为每个
<code>MessageBoxImage</code> 指定应该播放哪个声音。与
<code>IconMapping</code> 一样，<code>MessageBoxImage</code>
的每个值都必须有一个键值对，null也是一个有效值(在这种情况下不播放声音)。</p>
<h3
id="定制文本流向和文本对齐方式custom-flowdirection-and-textalignment">定制文本流向和文本对齐方式（Custom
FlowDirection and TextAlignment）</h3>
<p><code>IWindowManager.ShowMessageBox()</code> 的参数允许您指定
<code>FlowDirection</code> 和 <code>TextAlignment</code> 。</p>
<p>如果不指定这些参数，则使用默认的
<code>MessageBoxViewModel.FlowDirection</code> 和
<code>MessageBoxViewModel.TextAlignment</code> 使用。</p>
<p>如果愿意，您也可以更改这些默认值。</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Stylet 框架</category>
      </categories>
      <tags>
        <tag>WPF,MVVM</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF MVVM Stylet使用文档（中文）06-The WindowManager</title>
    <url>/posts/2020/2RDEGH9.html</url>
    <content><![CDATA[<p>在传统的 "视图优先"
的方式中，如果您想要显示一个新窗口或对话框，您需要创建一个视图的新实例，然后调用
<code>. show()</code> 或 <code>.showdialog()</code>。</p>
<span id="more"></span>
<p>在 ViewModel-first
方式中，您不能直接与视图交互，所以您不能这样做。WindowManager
解决了这个问题——调用
<code>IWindowManager.ShowWindow(someViewModel)</code> 将获取那个
ViewModel，找到它的视图，实例化它，将它绑定到那个ViewModel，并显示它。</p>
<table>
<tr>
<td>
C#
</td>
<td>
VB.NET
</td>
<tr>
<td valign="top">
<pre lang="csharp">
class SomeViewModel
{
   private IWindowManager windowManager;
   public SomeViewModel(IWindowManager windowManager)
   {
      this.windowManager = windowManager;
   }
&nbsp;
   public void ShowAWindow()
   {
      var viewModel = new OtherViewModel();
      this.windowManager.ShowWindow(viewModel);
   }
&nbsp;
   public void ShowADialog()
   {
      var viewModel = new OtherViewModel();
      bool? result = this.windowManager.ShowDialog(viewModel);
      // result holds the return value of Window.ShowDialog()
      if (result.GetValueOrDefault(true))
      {
         // DialogResult was set to true
      }
   }
}</pre>
</td>
<td valign="top">
<pre lang="vb.net">
Class SomeViewModel
&nbsp;
    Private windowManager As IWindowManager
&nbsp;
    Public Sub New(ByVal windowManager As IWindowManager)
        Me.windowManager = windowManager
    End Sub
&nbsp;
    Public Sub ShowAWindow()
        Dim viewModel = New OtherViewModel()
        Me.windowManager.ShowWindow(viewModel)
    End Sub
&nbsp;
    Public Sub ShowADialog()
        Dim viewModel = New OtherViewModel()
        Dim result As Boolean? = Me.windowManager.ShowDialog(viewModel)
        &#39; Result holds the return value of Window.ShowDialog()
        If result.GetValueOrDefault(True) Then
        &#39; DialogResult was set to true
        End If
    End Sub
End Class</pre>
</td>
</tr>
</table>
<p>很简单! 此外，IWindowManager 的引入(而不是直接在 ViewModel
上调用方法)使测试变得更加容易。</p>
<p>要从视图模型中关闭窗口或对话框，请使用
<code>Screen.RequestClose</code>, 像这样:</p>
<table>
<tr>
<td>
C#
</td>
<td>
VB.NET
</td>
<tr>
<td valign="top">
<pre lang="csharp">
class ViewModelDisplayedAsWindow
{
   // Called by pressing the &#39;close&#39; button
   public void Close()
   {
      this.RequestClose();
   }
}
&nbsp;
class ViewModelDisplayedAsDialog
{
   // Called by pressing the &#39;OK&#39; button
   public void CloseWithSuccess()
   {
      this.RequestClose(true);
   }
}</pre>
</td>
<td valign="top">
<pre lang="vb.net">
Class ViewModelDisplayedAsWindow
&nbsp;
    &#39; Called by pressing the  &#39;close&#39; button
    Public Sub Close()
        Me.RequestClose()
    End Sub
&nbsp;
  End Class
&nbsp;
Class ViewModelDisplayedAsDialog
&nbsp;
    &#39; Called by pressing the &#39;OK&#39; button
    Public Sub CloseWithSuccess()
        Me.RequestClose(True)
    End Sub
End Class</pre>
</td>
</tr>
</table>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Stylet 框架</category>
      </categories>
      <tags>
        <tag>MVVM</tag>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF MVVM Stylet使用文档（中文）08-The EventAggregator</title>
    <url>/posts/2020/155MT1J.html</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<p>事件聚合器——EventAggregator——是一个分散的、弱绑定的、基于发布/订阅的事件管理器。</p>
<span id="more"></span>
<h2
id="发布者和订阅者publishers-and-subscribers">发布者和订阅者（Publishers
and Subscribers）</h2>
<h3 id="订阅者subscribers">订阅者（Subscribers）</h3>
<p>对特定事件感兴趣的订阅者可以将自己的兴趣告诉
IEventAggregator，并且每当发布者将特定事件发布到IEventAggregator
时，都会收到通知。</p>
<p>事件是类——可以用它们做任何你想做的事情。例如:</p>
<table>
<tr>
<td>
C#
</td>
<td>
VB.NET
</td>
<tr>
<td valign="top">
<pre lang="csharp">
class MyEvent { 
&nbsp;
  // Do something 
&nbsp;
}</pre>
</td>
<td valign="top">
<pre lang="vb.net">
Class MyEvent
&nbsp;
  &#39; Do Something
&nbsp;
End Class</pre>
</td>
</tr>
</table>
<p>订阅者必须实现 <code>IHandle&lt;T&gt;</code>，其中 <code>T</code>
是他们感兴趣的事件类型 (当然，他们可以实现多个
<code>IHandle&lt;T&gt;</code> 's for多个 <code>T</code>
's)。然后他们必须获得 IEventAggregator 的实例，并订阅自己，例如:</p>
<table>
<tr>
<td>
C#
</td>
<td>
VB.NET
</td>
<tr>
<td valign="top">
<pre lang="csharp">
class Subscriber : IHandle&lt;MyEvent&gt;, IHandle&lt;MyOtherEvent&gt;
{
   public Subscriber(IEventAggregator eventAggregator)
   {
      eventAggregator.Subscribe(this);
   }
&nbsp;
   public void Handle(MyEvent message)
   {
      // ...
   }
&nbsp;
   public void Handle(MyOtherEvent message)
   {
      // ...
   }
}</pre>
</td>
<td valign="top">
<pre lang="vb.net">
Class Subscriber : Implements IHandle(Of MyEvent)
&nbsp;
  Public Sub New(ByRef eventAggregator as IEventAggregator)
  eventAggregator.Subscribe(Me)
  End Sub
&nbsp;
  Public Sub Handle(message as MyEvent) Implements IHandle(Of MyEvent).Handle
  &#39; ...
  End Sub
&nbsp;
  Public Sub Handle(message as MyOtherEvent) Implements IHandle(Of MyOtherEvent).Handle
  &#39; ...
  End Sub
&nbsp;
End Class</pre>
</td>
</tr>
</table>
<p>VB.NET 用户，通过引用传递 eventAggregator 的 <code>Sub New()</code>
在跨命名空间时可能会失败，而且必须定义每个新订阅者，这可能会令人恼火。因此，在全局模块中定义eventAggregator，然后直接订阅它，而不是将其引用传递给调用的每个新
ViewModel，可能更容易。</p>
<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Module</span> <span class="keyword">Global</span></span><br><span class="line">  <span class="keyword">Public</span> eventAggregator <span class="keyword">as</span> IEventAggregator</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Module</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Class</span> Subscriber : <span class="keyword">Implements</span> IHandle(<span class="keyword">Of</span> MyEvent)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">Public</span> <span class="keyword">Sub</span> <span class="built_in">New</span>()</span><br><span class="line">  <span class="keyword">Global</span>.eventAggregator.Subscribe(<span class="keyword">Me</span>)</span><br><span class="line">  <span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&#x27;Public Sub Handle...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Class</span></span><br></pre></td></tr></table></figure>
<p>确保将 <em>module</em>
的名称空间保留为空，以便可以在整个程序中使用它。</p>
<h3 id="发布者publishers">发布者（Publishers）</h3>
<p>发布者也必须获得 IEventAggregator
的实例，但他们不需要订阅自己—只需在每次发布想要发布的事件时调用
<code>IEventAggregator.Publish</code> ，例如:</p>
<table>
<tr>
<td>
C#
</td>
<td>
VB.NET
</td>
<tr>
<td valign="top">
<pre lang="csharp">
class Publisher
{
   private IEventAggregator eventAggregator;
   public Publisher(IEventAggregator eventAggregator)
   {
      this.eventAggregator = eventAggregator;
   }
&nbsp;
   public void PublishEvent()
   {
      this.eventAggregator.Publish(new MyEvent());
   }
}</pre>
</td>
<td valign="top">
<pre lang="vb.net">
Class Publisher 
&nbsp;
  Dim eventAggregator as IEventAggregator
&nbsp;
  Public Sub New(ByRef eventAggregator as IEventAggregator)
    Me.eventAggregator = eventAggregator
  End Sub
&nbsp;
  Public Sub PublishEvent()
  Me.eventAggregator.Publish(New MyEvent())
  End Sub
&nbsp;
End Class</pre>
</td>
</tr>
</table>
<p>再次,VB.NET用户，如果您已经设置了全局模块，那么您不需要将
eventAggregator 传递给发布者。你可以直接发布到全局事件聚合器:</p>
<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Class</span> Publisher</span><br><span class="line"></span><br><span class="line">  <span class="keyword">Public</span> <span class="keyword">Sub</span> PublishEvent()</span><br><span class="line">  <span class="keyword">Global</span>.eventAggregator.Publish(<span class="built_in">New</span> MyEvent())</span><br><span class="line">  <span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Class</span></span><br></pre></td></tr></table></figure>
<h2
id="取消订阅和弱绑定unsubscribing-adn-weak-binding">取消订阅和弱绑定（UnSubscribing
adn weak binding）</h2>
<p>因为 IEventAggregator 是弱绑定的，订阅者不需要取消订阅—
IEventAggregator
不会保留它们。但是，如果订阅者想要取消订阅，也可以取消订阅。如下：</p>
<table>
<tr>
<td>
C#
</td>
<td>
VB.NET
</td>
<tr>
<td valign="top">
<pre lang="csharp">
IEventAggregator.Unsubscribe(this);</pre>
</td>
<td valign="top">
<pre lang="vb.net">
IEventAggregator.UnSubscribe(Me)</pre>
</td>
</tr>
</table>
<h2
id="同步和异步发布publishing-synchronously-and-asynchronously">同步和异步发布（Publishing
synchronously and asynchronously）</h2>
<p>默认的 <code>IEventAggregator.Publish</code>
方法是同步发布事件。您还可以调用 <code>PublishOnUIThread</code>
来异步地调度UI 线程，或者调用
<code>PublishWithDispatcher</code>，并传递您希望充当 dispatcher
的任何操作(如果在IEventAggregator上编写自己的方法，这将非常有用)。</p>
<h2 id="频道channels">频道（Channels）</h2>
<p>订阅者可以侦听特定的频道，发布者可以将事件发布到特定的频道。如果将事件发布到特定的频道，则只有已订阅该频道的订阅者才能接收该事件。如果在几个不同的上下文中使用相同的消息类型，那么这将非常有用。</p>
<p>频道是字符串，因此允许一个频道的订阅者和该频道的发布者之间的松散耦合。</p>
<p>默认情况下，<code>Subscribe()</code> 将订阅方订阅到默认频道
<code>EventAggregator.DefaultChannel</code>。类似地，
<code>Publish()</code> (及其所有变体)
将把事件发布到相同的默认频道。然而，你也可以指定自己的频道。</p>
<h3 id="订阅到频道subscribing-to-channels">订阅到频道（Subscribing to
channels）</h3>
<p>若要订阅特定频道，请将其作为参数传递给 <code>subscribe”</code>:
<code>eventAggregator.Subscribe(this,“ChannelA”)</code>。你也可以订阅多个频道:
<code>eventAggregator.Subscribe(this,“ChannelA”,“ChannelB”)</code>。</p>
<p>在这两种情况下，你都不会订阅到
<code>EventAggregator.DefaultChannel</code>
-只订阅到指定的频道。你也只会收到被推送至“ChannelA”或“ChannelB”的事件。</p>
<h3 id="发布到频道publishing-to-channels">发布到频道（Publishing to
channels）</h3>
<p>若要发布到特定通道，请将其作为参数传递给<code>publish</code>:
<code>eventAggregator.Publish(message，“ChannelA”)</code> 或
<code>eventAggregator.PublishOnUIThread(message，“ChannelA”，“ChannelB”)</code>，等等。与上面的订阅一样，事件将发布到所有指定的通道，而不再是默认通道。</p>
<h3
id="从频道取消订阅unsubscribing-from-channels">从频道取消订阅（Unsubscribing
from channels）</h3>
<p>要取消频道订阅，请将其传递给 <code>Unsubscribe</code>:
<code>eventAggregator.Unsubscribe(this, "ChannelA")</code>。您将继续订阅您以前订阅的且没有取消订阅的任何其他频道。</p>
<p>调用 <code>eventAggregator.Unsubscribe(this)</code> 将从<em>所有</em>
频道取消订阅。</p>
<h2 id="使用自己的-ioc-容器using-your-own-ioc-container">使用自己的 IoC
容器（Using your own IoC container）</h2>
<p>如果你在 StyletIoC 中使用默认的
<code>Bootstrapper&lt;TRootViewModel&gt;</code>，你不需要担心这个——EventAggregator
在默认情况下是正确设置的。</p>
<p>如果你使用另一个 IoC 容器,那么,你需要确保 EventAggregator 注册为
IEventAggregator 的独立服务， EventAggregator
只能有一个实例,每次请求的时候，都必须返回这个实例。</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Stylet 框架</category>
      </categories>
      <tags>
        <tag>MVVM</tag>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF MVVM Stylet使用文档（中文）10-Execute：Dispatching to the UI thread</title>
    <url>/posts/2020/3R00ZSM.html</url>
    <content><![CDATA[<h2 id="简介summary">简介（Summary）</h2>
<p><code>Execute</code>
是一个小的静态帮助类，它使得在UI线程上运行委托变得更容易。它包装了
<code>Application.Current.Dispatcher</code>，并提供使其更容易和更简洁使用的方法。</p>
<p>它还提供了一个属性的帮助类：<code>Execute.InDesignMode</code>。当且仅当
Visual Studio 或 Expression Blend
设计器处于活动状态，并且代码为了设计时显示提供虚拟数据时。</p>
<p>下表给出了它提供的方法的总结，后面给出了更深入的解释：</p>
<table>
<colgroup>
<col style="width: 41%" />
<col style="width: 27%" />
<col style="width: 30%" />
</colgroup>
<thead>
<tr class="header">
<th>Method</th>
<th style="text-align: center;">Inline if possible</th>
<th style="text-align: center;">Waits for Completion</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Execute.OnUIThread</td>
<td style="text-align: center;">✔</td>
<td style="text-align: center;">✘</td>
</tr>
<tr class="even">
<td>Execute.OnUIThreadSync</td>
<td style="text-align: center;">✔</td>
<td style="text-align: center;">✔ (Blocks)</td>
</tr>
<tr class="odd">
<td>Execute.OnUIThreadAsync</td>
<td style="text-align: center;">✔</td>
<td style="text-align: center;">✔ (Task)</td>
</tr>
<tr class="even">
<td>Execute.PostToUIThread</td>
<td style="text-align: center;">✘</td>
<td style="text-align: center;">✘</td>
</tr>
<tr class="odd">
<td>Execute.PostToUIThreadAsync</td>
<td style="text-align: center;">✘</td>
<td style="text-align: center;">✔ (Task)</td>
</tr>
</tbody>
</table>
<p><strong>Inline if possible</strong>:
该方法将检查当前线程是否为UI线程。如果是，则委托将同步运行。如果不是，那么它将以某种形式被分派到UI线程。</p>
<p><strong>Waits for completion:</strong>
要么阻塞直到委托完成执行，要么返回一个任务，该任务在委托完成执行时完成。</p>
<span id="more"></span>
<h2 id="详细details">详细（Details）</h2>
<h3 id="execute.onuithread">Execute.OnUIThread</h3>
<p>检查当前线程是否为 UI
线程。如果是，则委托将同步运行。如果不是，委托将被分派到UI线程，并在将来的某个时候运行。在这种情况下，<code>Execute.OnUIThread</code>
将不会等待委托完成。</p>
<p>这反映了传统的模式:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InvokeIfRequired</span>(<span class="params">Action action</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (Application.Current.Dispatcher.CheckAccess())</span><br><span class="line">        action();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        Application.Current.Dispatcher.BeginInvoke(action);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="execute.onuithreadsync">Execute.OnUIThreadSync</h3>
<p>检查当前线程是否为 UI
线程。如果是，那么它将同步运行委托。如果不是，那么它将分派委托在UI线程上运行，并且阻塞，直到它完成执行。</p>
<p>因此，它与 <code>Execute.OnUIThread</code>
非常相似。除了它会在委托完成执行后才返回。</p>
<h3 id="execute.onuithreadasync">Execute.OnUIThreadAsync</h3>
<p>检查当前线程是否为 UI
线程。如果是，那么它将同步运行委托，并返回一个已完成的任务。如果不是，那么它将分派委托在将来的某个时候在
UI 线程上运行，并返回一个任务，该任务将在委托完成执行后完成。</p>
<p>因此，它实际上是 <code>Execute.OnUIThreadSync</code> 的异步版本。</p>
<h3 id="execute.posttouithread">Execute.PostToUIThread</h3>
<p>无论当前线程是否为 UI 线程，都将在将来的某个时候在 UI
线程上发布要运行的委托。</p>
<h3 id="execute.posttouithreadasync">Execute.PostToUIThreadAsync</h3>
<p>无论当前线程是否为 UI 线程，都将在将来的某个时候在 UI
线程上发布要运行的委托，并返回一个任务，该任务将在委托执行完成时完成。</p>
<p><strong>BEWARE</strong> 你绝对不能做
<code>Execute.PostToUIThreadAsync(() =&gt; something(foo)).Wait()</code>
这样的事情。如果从UI线程执行此操作，将导致死锁。这种方法对
<code>Execute.PostXXX</code>
没有意义，请使用<code>Execute.OnUIThreadSync</code> or
<code>Execute.OnUIThreadAsync</code> 来代替。</p>
<h3 id="高级单元测试advanced-unit-testing">高级：单元测试（Advanced:
Unit Testing）</h3>
<h3 id="分配器the-dispatcher">分配器（The Dispatcher）</h3>
<p><code>Execute</code> 实际上有一个来自
<code>Application.Current.Dispatcher</code> 的抽象级别。</p>
<p><code>Execute.Dispatcher</code> 是类型 <code>IDispatcher</code>
的静态属性，被 <code>Execute</code> 用于分派委托。</p>
<p>该属性永远不能为空，默认为 <code>IDispatcher</code>
的实现，它同步执行所有操作。然后在 <code>BootstrapperBase</code>
中覆盖它，成为 <code>Application.Current.Dispatcher</code>
的包装器。</p>
<p>这种行为意味着使用 <code>Execute</code>
方法的方法可以进行单元测试，或者在设计时使用。</p>
<p>在单元测试中，所有的 <code>Execute</code>
方法将同步运行它们的委托(因为调度程序不可用)。</p>
<p>如果需要，你也可以设置 <code>Execute.Dispatcher</code>,
为您的单元测试提供一个自定义的 <code>IDispatcher</code> 实现。</p>
<h3 id="设计模式design-mode">设计模式（Design Mode）</h3>
<p><code>Execute.InDesignMode</code>
也是可设置的，这将覆盖<em>“实际”</em>值。</p>
<p>预计您几乎永远都不需要这样做，但有时为了单元测试奇怪的小边缘情况(在Stylet中有一些这样的情况)，这种情况它是不可用的。</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Stylet 框架</category>
      </categories>
      <tags>
        <tag>MVVM</tag>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF MVVM Stylet使用文档（中文）11-Screens and Conductors</title>
    <url>/posts/2020/1H4GT7T.html</url>
    <content><![CDATA[<p>Screen 和 Conductor
是一个简单的主题，但它需要一些思维跳跃，并且要求您在它们变得有意义之前覆盖它们的所有部分。相信我，值得你花时间阅读这篇文章——它们非常强大，值得你花时间投资。</p>
<span id="more"></span>
<h2 id="viewmodel-生命周期viewmodel-lifecycles">ViewModel
生命周期（ViewModel Lifecycles）</h2>
<p>一个好的起点是查看 ViewModel 的生命周期。</p>
<p>想象一个选项卡式界面——类似 Visual Studio，它有(非常简单地)一个 shell
(包含菜单、工具栏等)和一个包含编辑器选项卡的选项卡控件。在 Stylet
中，每个编辑器标签都由它自己的视图模型支持。</p>
<p>现在，其中一个 Viewmodel
将通过实例化开始它的生命周期。接下来，它将被显示。之后，根据当前处于活动状态的选项卡，可能会显示或隐藏它，最后关闭它。就在它关闭之前，它有机会阻止关闭来提示您保存文件。</p>
<p>简而言之，这就是ViewModel的生命周期：它被创建，然后被激活(显示给用户)。在此之后，它可以被停用(仍然是活动的，但没有显示)，并再次激活任意次数，直到最后被关闭(在被询问是否准备关闭之后)。</p>
<h2 id="idisposable">IDisposable</h2>
<p>值得注意的是，如果 ViewModel 实现了
<code>IDisposable</code>，那么它将在父类关闭后被处理(除非父类的
<code>DisposeChildren</code>属性为 false)。</p>
<h2 id="conductors-介绍introduceing-conductors">Conductors
介绍（Introduceing Conductors）</h2>
<p>现在，ViewModel
并不能神奇地知道它何时被显示、隐藏或关闭。它必须被告知。这就是 Conductor
的角色。</p>
<p>简单地说，一个 Conductor 就是一个 ViewModel，它拥有另一个
ViewModel，并且知道如何管理它的生命周期。</p>
<p>在我们的 Visual Studio 示例中，Conducotr 是拥有 TabControl 的
ViewModel，并显示一个 TabControl 的 ViewModel——代码编辑界面，因此
Conductor 可能是 Shell
ViewModel。每当用户选择一个新的编辑器选项卡时，Conductor
将停用旧选项卡，并激活新选项卡。当用户关闭一个选项卡时，指挥将告诉该选项卡它已经关闭，然后决定下一个要显示的选项卡，并激活它。</p>
<p>就是这样，真的。ViewModel 有一个生命周期，它是由拥有 ViewModel 的
Conductor 实现的。</p>
<p>到目前为止，这是相当抽象的-让我们进入细节。</p>
<h2 id="iscreen-and-screen">IScreen and Screen</h2>
<p>正如我们在上面所看到的，一个 ViewModel 的生命周期是由一个在 ViewModel
上调用方法的 Conductor
来管理的。那些方法是在一组独立的接口中定义的——如果你实现了接口，并且那个
ViewModel 被管理为一个
Conductor，那个方法就会被调用。如果需要，您可以选择想要的接口。</p>
<p>有一个名为 <code>IScreen</code>
的总接口，它包含了所有这些功能，还有一个名为 <code>Screen</code>
的默认实现。这表现得非常好，您可能永远都不需要实现自己的
<code>IScreen</code>—但是如果您愿意，您可以这样做。</p>
<ul>
<li><p><code>IScreenState</code>: 用于激活，停用，并关闭视图模型。有
<code>Activate</code>、<code>Deactivate</code> 和
<code>Close</code>方法，以及跟踪Screen 状态变化的事件和属性。</p></li>
<li><p><code>IGuardClose</code>: 用来询问 ViewModel 是否可以关闭。有一个
<code>CanCloseAsync</code> 方法。</p></li>
<li><p><code>IViewAware</code>:
有时视图模型需要知道它的视图(当它被附加时，它是什么，等等)。这个接口允许通过一个
<code>View</code> 属性和一个 <code>AttachView</code>
方法来实现。</p></li>
<li><p><code>IHaveDisplayName</code>: 有一个 <code>DisplayName</code>
属性。这个名称用作窗口和使用 <code>WindowManager</code>
显示的对话框的标题，对于选项卡控件之类的东西也很有用。</p></li>
<li><p><code>IChild</code>: 对于 ViewModel 来说，知道管理它的是什么
Conductor 是有利的(例如，请求关闭它)。如果ViewModel 实现了
<code>IChild</code>，它将被告知这一点。</p></li>
</ul>
<p>请注意，无法保证调用 Activate、Deactivate 和 Close 的顺序——一个
ViewModel 可以连续激活两次，然后在不停用的情况下关闭。由 ViewModel
来注意这些事情，并做出相应的反应。Stylet's <code>Screen</code>
做这个。</p>
<p><code>Screen</code> 有一些虚方法，如果你需要，你可以重写它们：</p>
<ul>
<li><p><code>OnInitialActivate</code>: 在第一次激活 Screen
时调用，以后再也不会调用。可以设置不想在构造函数中设置的内容。</p></li>
<li><p><code>OnActivate</code>: 当 Screen 激活时调用。仅在 Screen
尚未激活时调用。</p></li>
<li><p><code>OnDeactivate</code>: 当 Screen 被停用时调用。仅在 Screen
尚未停用时调用。</p></li>
<li><p><code>OnClose</code>: 当 Screen 关闭时调用。只会被调用一次。仅在
Screen 停用时调用。</p></li>
<li><p><code>OnViewLoaded</code>: 当视图的
<code>Loaded</code>事件被触发时调用。</p></li>
<li><p><code>CanCloseAsync</code>: 当 Conductor 想知道 Screen
是否可以关闭时，就会调用这个函数。默认情况下，retuns
<code>Task.FromResult(this.CanClose)</code>，但是您可以在这里添加自己的异步逻辑。</p></li>
<li><p><code>CanClose</code>: 默认情况下由 <code>CanCloseAsync</code>
调用。这只是为了方便。如果您想决定是否可以同步关闭，请覆盖
<code>CanClose</code>。如果你想异步决定，覆盖
<code>CanCloseAsync</code>。</p></li>
<li><p><code>RequestClose(bool? dialogResult = null)</code>:
当您想从您拥有的 Conductor
请求一个关闭时，您可以调用它。如果你想显示关闭结果到对话框中，可以使用
DialogResult。</p></li>
</ul>
<p>Screen 源自 PropertyChangedBase ，因此很容易引发 PropertyChanged
通知。</p>
<p>您可能会发现所有的 Viewmodel 都是 Screen
的子类。这并不是说它们必须如此—您可以创建自己的
<code>IScreen</code>实现，或者从上面选择您想要实现的接口—但是确实
<code>Screen</code> 非常方便和强大。</p>
<h2 id="conductors-细节conductors-in-detail">Conductors 细节（Conductors
in Detail）</h2>
<p>Conductor 有各种各样的形式，每一种都有自己的使用案例。一个 Conductor
可以拥有一个单一的视图模型(比如一次显示一个页面的导航)，或者多个视图模型。那些具有多个
Viewmodel 的视图一次可能只有一个(想想上面 Visual Studio 例子中的
TabControl )，或者全部(想想带有许多独立元素的网格)激活。Conductor
还可以添加一些行为，比如记录显示的是哪一个视图模型(对于导航很有用)。</p>
<p>与 <code>Screen</code> 类一样，Stylet 定义了许多 Conductor
感兴趣的接口和实现(取决于所需的 Conductor
行为的种类)，当然您也可以实现自己的接口。</p>
<p>主要接口是 <code>IConductor&lt;T&gt;</code>，它表示一个
Conductor，你将与它进行交互。它有以下方法</p>
<ul>
<li><p><code>ActivateItem(T item)</code>:
获取给定的项并激活它。是否使先前的项失效是由 Conductor 决定的。</p></li>
<li><p><code>DeactivateItem(T item)</code>:
获取给定的项，然后停用它。是否激活另一个项目是由 Conductor
决定的。</p></li>
<li><p><code>CloseItem(T item)</code>: 获取给定的项并关闭它。Conductor
指定是否由另外的项激活并替换该关闭的项。</p></li>
</ul>
<p>拥有单个活动项的 Conductor (不管它们可能有多少个非活动项) 还实现了
<code>IHaveActiveItem&lt;T&gt;</code>，它都有唯一属性<code>ActiveItem</code>。</p>
<p>如果项目实现了 <code>IChild</code>，那么所有的内置 Conductor
都将把项的 <code>Parent</code> 属性设置为自身。所有的内置 Conductor
都额外实现了
<code>IChildDelegate</code>，它允许子进程请求关闭它(通过调用
<code>CloseItem</code>)。在默认的 <code>Screen</code> 实现中，调用
<code>Screen.RequestClose</code> 将导致 Screen 在它的 "父" 上调用
<code>CloseItem</code> (提供它的父实现
<code>IChildDelegate</code>)，这反过来导致它的
“父”(如果它存在)关闭它。</p>
<h2 id="内置-conductorbuilt-in-conductors">内置 Conductor（Built-In
Conductors）</h2>
<p>Stylet 带有一些内置的 Conductor，它们以多种直观的方式执行。</p>
<p>所有这些 Conductor 都来自 <code>Screen</code>，允许 Conductor
轻松地拥有其他 Conductor。这意味着你可以以任何你想要的方式组合你的
Conductor 和 Screen。</p>
<h3 id="conductort"><code>Conductor&lt;T&gt;</code></h3>
<p>这个非常简单的 Conductor 只有一个 ViewModel (类型为
<code>T</code>)，它被公开为
<code>ActiveItem</code>。<code>ActivateItem</code> 方法用一个新的
ViewModel 实例替换当前的
<code>ActiveItem</code>，并激活新项且关闭旧项。每当
<code>Condcutor&lt;T&gt;</code>被激活时，它就会激活它的
<code>ActiveItem</code>; 同样地，当它被停止活动或关闭时，它也会让
<code>ActiveItem</code> 停止活动和关闭。</p>
<p>当被问及是否可以关闭(当调用 <code>CanCloseAsync</code>时)，它会返回
<code>ActiveItem</code> 返回的任何结果，如果没有
<code>ActiveItem</code>，则返回true。</p>
<p>也可以直接设置 <code>ActiveItem</code>，其效果与调用
<code>ActivateItem</code> 相同。</p>
<p>Conductor 的视图模型看起来是这样的——一个 ContentControl 绑定到
Conductor 的 <code>ActiveItem</code> 上:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">x:Class</span>=<span class="string">&quot;MyNamespace.ConductorViewModel&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:s</span>=<span class="string">&quot;https://github.com/canton7/Stylet&quot;</span> <span class="attr">....</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ContentControl</span> <span class="attr">s:View.Model</span>=<span class="string">&quot;&#123;Binding ActiveItem&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3
id="conductort.collection.oneactive"><code>Conductor&lt;T&gt;.Collection.OneActive</code></h3>
<p>这个 Conductor
拥有许多项，但一次只能激活一个。通过这种方式，它模拟了一个选项卡控件的行为——许多选项卡可以同时存在，但一次只能显示一个。</p>
<p>它拥有一个名为 <code>Items</code> 的 <code>T</code> 集合，其中一个是
<code>ActiveItem</code>。调用 <code>ActivateItem</code>将添加 项到
<code>Items</code> 集合，并将激活它且将其设置为<code>ActiveItem</code>;
如果先前设置了 <code>ActiveItem</code>，则其旧值将被停用，并保留在
<code>Items</code> 集合中。</p>
<p>在一个项上调用 <code>DeactivateItem</code> 或 <code>CloseItem</code>
将分别导致该项被停用和关闭。因为它不再是活动的，它不能保持为
<code>ActiveItem</code>——相反，另一个项被选择为
<code>ActiveItem</code>时，它将被激活。默认情况下，新的
<code>ActiveItem</code> 是存在于 <code>Items</code>
集合中的，位于被停用/关闭的项之前。</p>
<p>如果需要，可以直接操作 <code>Items</code> 集合。也可以直接设置
<code>ActiveItem</code>，其效果与调用
<code>ActivateItem</code>并添加该项相同。</p>
<p>使用这个 Conductor 的，带有 TabControl
的视图模型可能是这样的(查看下面的简短版本):</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TabControl</span> <span class="attr">ItemsSource</span>=<span class="string">&quot;&#123;Binding Items&#125;&quot;</span> <span class="attr">SelectedItem</span>=<span class="string">&quot;&#123;Binding ActiveItem&#125;&quot;</span> <span class="attr">DisplayMemberPath</span>=<span class="string">&quot;DisplayName&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">TabControl.ContentTemplate</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">DataTemplate</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">ContentControl</span> <span class="attr">s:View.Model</span>=<span class="string">&quot;&#123;Binding&#125;&quot;</span> <span class="attr">VerticalContentAlignment</span>=<span class="string">&quot;Stretch&quot;</span> <span class="attr">HorizontalContentAlignment</span>=<span class="string">&quot;Stretch&quot;</span> <span class="attr">IsTabStop</span>=<span class="string">&quot;False&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">DataTemplate</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">TabControl.ContentTemplate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">TabControl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是，这有点拗口，所以 Stylet
为您提供了一个样式，它可以完成相同的工作。这意味着你可以这样做:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TabControl</span> <span class="attr">Style</span>=<span class="string">&quot;&#123;StaticResource StyletConductorTabControl&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3
id="conductort.collection.allactive"><code>Conductor&lt;T&gt;.Collection.AllActive</code></h3>
<p>这个 Conductor 与
<code>Conductor&lt;T&gt;.Collection.OneActive</code>非常相似，除了它没有
<code>ActiveItem</code>。相反，它只有一个 <code>Item</code>
集合。当一个项被激活时(使用 <code>ActivateItem</code>
)，它被添加到这个集合中，当它被关闭时，它被从这个集合中删除。</p>
<p>调用 <code>DeactivateItem</code> 将在不从 <code>Items</code>
集合中移除的情况下就地停用该项目。</p>
<p>还可以直接操作 <code>Items</code>
集合。任何添加的项将被激活，任何移除的项将被关闭。</p>
<p>一个典型的用例可能是使用一个
ItemsControl，其中所有的项都是同时可见的。以这种方式使用 ItemsControl
的ViewModel 可能看起来是这样的(同样，查看下面的简短版本):</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ItemsControl</span> <span class="attr">ItemsSource</span>=<span class="string">&quot;&#123;Binding Items&#125;&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ItemsControl.ItemTemplate</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">DataTemplate</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">ContentControl</span> <span class="attr">s:View.Model</span>=<span class="string">&quot;&#123;Binding&#125;&quot;</span> <span class="attr">VerticalContentAlignment</span>=<span class="string">&quot;Stretch&quot;</span> <span class="attr">HorizontalContentAlignment</span>=<span class="string">&quot;Stretch&quot;</span> <span class="attr">IsTabStop</span>=<span class="string">&quot;False&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">DataTemplate</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ItemsControl.ItemTemplate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ItemsControl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>由于这很冗长，Stylet 提供了一个样式来设置这些属性:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ItemsControl</span> <span class="attr">Style</span>=<span class="string">&quot;&#123;StaticResource StyletConductorItemsControl&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3
id="conductort.stacknavigation"><code>Conductor&lt;T&gt;.StackNavigation</code></h3>
<p>这个 Conductor 是 <code>Conductor &lt;T&gt;</code>和
<code>Conductor&lt;T&gt;.Collection.OneActive</code>
的混合体。它提供了一些额外的功能:基于堆栈的导航。</p>
<p>它有一个单独的
<code>ActiveItem</code>，但也保留了一个(私有的)过去活动项目的历史记录。当您激活一个新项目时，先前的
<code>ActiveItem</code> 将被停用，并推入历史堆栈。调用
<code>GoBack()</code> 将关闭当前
<code>ActiveItem</code>，并重新激活这个历史堆栈中的顶部项目，并将其设置为新的
<code>ActiveItem</code>。</p>
<p>如果您在当前的 <code>ActiveItem</code> 上调用
<code>CloseItem</code>，则会产生相同的效果。如果您在历史堆栈中存在的任何项目上调用
<code>CloseItem</code>，该项目将被关闭并从历史堆栈中删除。调用
<code>Clear()</code> 将关闭并从历史堆栈中删除所有项。</p>
<h3 id="windowconductor"><code>WindowConductor</code></h3>
<p>这个有点奇怪，因为它是内部的，你不需要直接与它交互，但我把它包含在这里是为了引起兴趣。当你使用
<code>WindowManager</code>
显示一个对话框或窗口时(这包括当你第一次启动你的应用程序时 Stylet
显示的窗口)，一个新的 <code>WindowConductor</code>
管理它的生命周期。当你的窗口或对话框最小化时，它就会失效。只要最大化，它就会被激活。如果您的
ViewModel 请求关闭它(参见上面的 <code>RequestClose</code>)，则
<code>WindowConductor</code>
将处理此操作。类似地，如果用户自己关闭窗口，<code>WindowConductor</code>将询问
ViewModel 是否准备关闭。</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Stylet 框架</category>
      </categories>
      <tags>
        <tag>MVVM</tag>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF MVVM Stylet使用文档（中文）12-BindableCollection</title>
    <url>/posts/2020/1YXZ99D.html</url>
    <content><![CDATA[<h2 id="概述overview">概述（Overview）</h2>
<p><code>BindableCollection&lt;T&gt;</code> 是 <a
href="http://msdn.microsoft.com/en-us/library/ms668604%28v=vs.110%29.aspx"><code>ObservableCollection&lt;T&gt;</code></a>
的一个子类。如果你在你的 ViewModel
中有一个集合，并且想要将它用作你视图中的某个控件的
<code>ItemsSource</code>
等等，那么你就可以使用这个类（当一个项目被添加到/从集合中移除时，视图会得到通知）。</p>
<span id="more"></span>
<p>而且，它增加了一些有用的额外功能:</p>
<ul>
<li><p>新增<code>AddRange</code>、<code>RemoveRange</code>和<code>Refresh</code>方法</p></li>
<li><p>是线程安全的</p></li>
</ul>
<h2 id="新方法">新方法</h2>
<p><code>ObservableCollection&lt;T&gt;</code>缺少两个非常有用的方法:
<code>AddRange</code> 和 <code>RemoveRange</code> 。</p>
<p>它们的作用与您的预期相差无几，允许您立即添加/移除范围内的元素，而无需手动遍历每个元素，并在每个元素添加时调用
<code>collection.Add (element)</code>(这使得触发大量的元素添加事件)。<code>AddRange</code>
和 <code>RemoveRange</code> 只会在每个范围增加/删除时引发一组事件。</p>
<p><code>刷新</code>方法很方便。</p>
<p>它不会以任何方式修改集合，但会触发 <code>PropertyChanged</code> 和
<code>CollectionChanged</code> 事件，向任何 UI
元素表明集合已被修改，它们应该重新加载数据。</p>
<p>这不是经常需要的，但当它真的有需要的时候。</p>
<h2 id="线程安全thead-safety">线程安全（Thead Safety）</h2>
<p>线程安全是通过将所有操作 (添加、删除、清除、重置等) 分派给 UI
线程来实现的。分派使用<code>Execute.OnUIThreadSync</code>，意思是:</p>
<ul>
<li><p>这些操作是同步的:被调用的方法在操作完成之前不会返回。</p></li>
<li><p>它们是自由的，如果你已经在 UI
线程，操作将在这种情况下同步进行。</p></li>
<li><p>所有 <code>PropertyChanged</code> 和
<code>CollectionChanged</code> 事件总是在 UI 线程上引发。</p></li>
</ul>
<p>这最后一点意味着与 <code>PropertyChagedBase</code> 有
<code>PropertyChangedDispatcher</code>
不同，<code>BindableCollection &lt; T &gt;</code> 上是没有
<code>PropertyChangedDispatcher</code> 属性的——事件总是在 UI
线程上,因为操作的属性与总是在 UI 线程上执行，所以，也没有
<code>CollectionChangedDispatcher</code> 概念。</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Stylet 框架</category>
      </categories>
      <tags>
        <tag>MVVM</tag>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF MVVM Stylet使用文档（中文）13-Validation Use ValidatingModelBase</title>
    <url>/posts/2020/1HXBM8H.html</url>
    <content><![CDATA[<h2 id="简介introduction">简介（Introduction）</h2>
<p>想象这个场景……用户正在填写您精心编写的表单，他们在应该输入电子邮件地址的地方输入了自己的名字。您需要检测这个问题，并以清晰的方式显示问题。</p>
<span id="more"></span>
<p>输入验证是一个很大的领域，有很多方法可以实现它。最简单和最吸引人的是在你的属性的
setter 中抛出一个异常，像这样:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> _name;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="keyword">this</span>._name; &#125;</span><br><span class="line">   <span class="keyword">set</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">if</span> (someConditionIsFalse)</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> ValidationException(<span class="string">&quot;Message&quot;</span>);</span><br><span class="line">      <span class="keyword">this</span>._name = <span class="keyword">value</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>当绑定设置此属性时，它会通知是否抛出异常，并相应地更新控件的验证状态。</p>
<p>然而，这最终会变成一个<strong>彻底的坏主意</strong>。这意味着您的属性只有在设置时才能被验证(例如，当用户单击
“Submit”
时，您不能遍历并验证整个表单)，这会导致大量重复逻辑的属性设置器。好可怕。</p>
<p>c#还定义了两个接口，WPF知道这两个接口: <a
href="http://msdn.microsoft.com/en-gb/library/system.componentmodel.idataerrorinfo.aspx">IDataErrorInfo</a>和
<a
href="http://msdn.microsoft.com/en-us/library/vstudio/system.componentmodel.inotifydataerrorinfo">INotifyDataErrorInfo</a>。这两种方法都为ViewModel
提供了一种方法，通过事件和 PropertyChanged
通知来告诉视图，输入中一个或多个属性有一个或多个验证错误。其中，INotifyDataErrorInfo
更新、更容易使用，并且允许异步验证。</p>
<p>但是，使用 INotifyDataErrorInfo 仍然有点不直观:
它允许您广播一个或多个属性有错误的问题，但是没有为您提供运行验证的简单方法，并且要求您记录哪些错误与哪些属性相关联。</p>
<p>ValidatingModelBase
的目标是解决这些问题，并提供一种直观、简单的方法来运行和报告验证。</p>
<h2 id="validatingmodelbase">ValidatingModelBase</h2>
<p>ValidatingModelBase 派生自<code>PropertyChangedBase</code>，并由
Screen 继承。它建立在 PropertyChangeBase
的功能上，当属性发生变化时，它可以通知并报告验证。</p>
<h3 id="imodelvalidator">IModelValidator</h3>
<p>有许多方法可以运行验证，有许多好的库可以帮助您。Stylet
并不打算提供另一个验证库，因此 Stylet 允许您提供自己的验证库，以便
ValidatingModelBase 使用。</p>
<p>这体现在 ValidatingModelBase 的 <code>validator</code>
属性中，它是一个 <code>IModelValidator</code>。这样做的目的是编写自己的
<code>IModelValidator</code>
实现，它封装了首选的验证库(稍后我将介绍一些如何实现的示例)，以便ValidatingModelBase
可以使用它。</p>
<p>这个接口有两个重要的方法:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Task&lt;IEnumerable&lt;<span class="built_in">string</span>&gt;&gt; ValidatePropertyAsync(<span class="built_in">string</span> propertyName);</span><br><span class="line">Task&lt;Dictionary&lt;<span class="built_in">string</span>, IEnumerable&lt;<span class="built_in">string</span>&gt;&gt;&gt; ValidateAllPropertiesAsync();</span><br></pre></td></tr></table></figure>
<p>当需要通过名称验证单个属性时，ValidatingModelBase
将调用第一个方法，并返回一个验证错误的数组。第二个是 ValidatingModelBase
在您要求它执行完整验证时调用的，并返回一个'<code>property name =&gt; array of validation errors</code>。</p>
<p>这些方法是异步的，这允许您利用 INotifyDataErrorInfo
的异步验证功能，并可以在某些外部服务上运行验证。但是，这个接口的大多数实现都只返回一个完成的任务。</p>
<p>还有第三个方法:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Initialize</span>(<span class="params"><span class="built_in">object</span> subject</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>当 ValidatingModelBase
第一次设置它的验证时，它会调用这个函数，并传递它自己的一个实例。这使得
<code>IModelValidator</code> 的实现可以专门用于验证 ValidatingModelBase
的特定实例。当我们将东西绑定到 StyletIoC中时，这更有意义。</p>
<p>还有这个接口的一个通用版本
<code>IModelValidator&lt;T&gt;</code>，它只是扩展了
<code>IModelValidator</code>，没有添加任何额外的内容。当 IoC
容器进入画面时，这也是很有用的—稍后会详细介绍。</p>
<h3 id="运行验证running-validations">运行验证（Running
Validations）</h3>
<p>首先，您必须记住将 <code>IModelValidator</code> 实现传递给
<code>ValidatingModelBase</code>。你可以通过设置 <code>validator</code>
属性，或者调用一个合适的构造函数来实现:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyViewModel</span> : <span class="title">ValidatingModelBase</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">MyViewModel</span>(<span class="params">IModelValidator validator</span>) : <span class="title">base</span>(<span class="params">validator</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>默认情况下，每当一个属性发生变化时，ValidatingModelBase
都会运行该属性的验证(前提是您调用 <code>SetAndNotify</code>。使用
<code>NotifyOfPropertyChange</code> 或使用
<code>PropertyChanged.Fody</code> 来触发 PropertyChangedBase
中定义的机制来引发PropertyChanged通知）。然后，它将使用
<code>INotifyDataErrorInfo</code>
接口中定义的机制报告该属性的验证状态的任何更改。它还将更改
<code>HasErrors</code>属性的值。</p>
<p>如果您想要禁用这种自动验证行为，请将 <code>AutoValidate</code>
属性设置为 <code>false</code> 。</p>
<p>如果需要，可以通过调用 <code>ValidateProperty("PropertyName")</code>,
或 <code>ValidateProperty(() =&gt; this.PropertyName)</code>
来手动运行单个属性的验证。如果您的验证是异步的，那么还有异步的版本—稍后将详细介绍。如果你想验证一个属性，无论何时设置，你可以这样做:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> _name</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="keyword">this</span>._name; &#125;</span><br><span class="line">   <span class="keyword">set</span></span><br><span class="line">   &#123;</span><br><span class="line">      SetAndNotify(<span class="keyword">ref</span> <span class="keyword">this</span>._name, <span class="keyword">value</span>);</span><br><span class="line">      ValidateProperty();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外，可以通过调用 <code>Validate()</code> 对所有属性运行验证。</p>
<p>如果您希望在验证状态发生变化(任何属性的验证错误发生变化)时运行一些自定义代码，请覆盖
<code>OnValidationStateChanged()</code>。</p>
<h2 id="理解和使用-imodelvalidator">理解和使用 IModelValidator</h2>
<p>在接下来的几节中，我将带您通过使用一个非常有用的 <a
href="http://fluentvalid.codeplex.com/">FluentValidation</a>
库实现验证的示例。</p>
<p>FluentValidation 是通过创建一个新类来工作的，它实现了
<code>IValidator&lt;T&gt;</code> (通常通过扩展
<code>AbstractValidator&lt;T&gt;</code> 来实现，它可以验证特定类型的模型
<code>T</code>)。您需要创建一个新的实例，并使用它来运行验证。例如，如果你有一个
<code>UserViewModel</code>，你将定义一个
<code>UserViewModelValidator</code>，它扩展了
<code>AbstractValidator&lt;UserViewModel&gt;</code>，因此实现了
<code>IValidator&lt;UserViewModel&gt;</code>，就像这样:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserViewModel</span> : <span class="title">Screen</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">string</span> _name;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="keyword">this</span>._name; &#125;</span><br><span class="line">      <span class="keyword">set</span> &#123; SetAndNotify(<span class="keyword">ref</span> <span class="keyword">this</span>._name, <span class="keyword">value</span>); &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserViewModelValidator</span> : <span class="title">AbstractValidator</span>&lt;<span class="title">UserViewModel</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">UserViewModelValidator</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">      RuleFor(x =&gt; x.Name).NotEmpty();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果我们直接使用 <code>UserViewModelValidator</code> (没有
ValidatingModelBase 的帮助)，我们会做以下事情:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserViewModel</span>(<span class="params">UserViewModelValidator validator</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">this</span>.Validator = validator;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">this</span>.Validator.Validate(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
<p>但是，使用 ValidatingModelBase
的意义在于它将自动运行和自动报告验证。如前所述，我们需要以ValidatingModelBase
知道如何与之交互的方式包装我们的
<code>UserViewModelValidator</code>。</p>
<p>做到这一点的最简单的方法是编写一个适配器，它可以接受
<code>IValidator&lt;T&gt;</code>
的任何实现(即您编写的任何自定义验证器)，并以 ValidatingModelBase
能够理解的方式公开它。如果它消失了，我可以再次运行它:</p>
<ul>
<li><p>ValidatingModelBase.Validator 是一个 IModelValidator</p></li>
<li><p>UserViewModelValidator是一个 IValidator<UserViewModel></p></li>
<li><p>我们将编写一个适配器，FluentValidationAdapter<T>，这是一个
IModelValidator</p></li>
<li><p>FluentValidationAdapter<T> 将接受一个
IValidator<T>，并封装它，以便可以通过 IModelValidator 访问它</p></li>
<li><p>因此，FluentValidationAdapter<UserViewModel> 将接受一个
UserViewModelValidator，并将其公开为IModelValidator;</p></li>
</ul>
<p>明白了吗?这可能听起来工作量很大，但是我们可以让 IoC
容器完成大部分繁重的工作，我们很快就会看到这一点。</p>
<p>现在，在实践中会是什么样子呢?首先，还记得我说过
<code>IModelValidator&lt;T&gt;</code> 被定义为一个只实现
<code>IModelValidator</code>
的接口吗?我现在还不会告诉你为什么，但是请记住它们基本上是同义词。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Define the adapter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FluentValidationAdapter</span>&lt;<span class="title">T</span>&gt; : <span class="title">IModelValidator</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">FluentValidationAdapter</span>(<span class="params">IValidator&lt;T&gt; validator</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// Store the validator</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Implement all IModelValidator methods, using the stored validator</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This implements IValidator&lt;UserViewModel&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserViewModelValidator</span> : <span class="title">AbtractValidator</span>&lt;<span class="title">UserViewModel</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">UserViewModelValidator</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// Set up validation rules</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserViewModel</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">UserViewModel</span>(<span class="params">IModelValidator&lt;UserViewModel&gt; validator</span>) : <span class="title">base</span>(<span class="params">validator</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看这里！如果我们要手动实例化一个新的
<code>UserViewModel</code>，我们会这样做:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> validator = <span class="keyword">new</span> UserViewModelValidator();</span><br><span class="line"><span class="keyword">var</span> validatorAdapter = <span class="keyword">new</span> FluentValidationAdapter&lt;UserViewModel&gt;(validator);</span><br><span class="line"><span class="keyword">var</span> viewModel = <span class="keyword">new</span> UserViewModel(validatorAdapter);</span><br></pre></td></tr></table></figure>
<p>但是，我们可以配置 IoC 容器来完成这一任务。这里假设您使用的是
StyletIoC，尽管其他容器也可以进行类似的配置。</p>
<p>在你的 bootstrapper 中 重写
<code>ConfigureIoC</code>，首先，每当你要求一个
<code>IModelValidator&lt;T&gt;</code> 时，告诉 StyletIoC 返回一个
<code>FluentValidationAdapter&lt;T&gt;</code> ，这样做:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">builder.Bind(<span class="keyword">typeof</span>(IModelValidator&lt;&gt;)).To(<span class="keyword">typeof</span>(FluentValidationAdapter&lt;&gt;));</span><br></pre></td></tr></table></figure>
<p>因此，无论何时 StyletIoC 都创建了一个新的
<code>UserViewModel</code>，它都会意识到它需要一个
<code>IModelValidator&lt;UserViewModel&gt;</code>。它知道已经被告知如何创建一个<code>IModelValidator&lt;T&gt;</code>——通过实例化一个新的
<code>FluentValidationAdapter&lt;T&gt;</code>。因此，它将尝试创建一个新的
<code>FluentValidationAdapter&lt;UserViewModel&gt;</code>，但是发现创建它需要一个新的
<code>IValidator&lt;UserViewModel&gt;</code>,这会因为找不到而失败。</p>
<p>因此，我们需要告诉 StyletIoC 如何创建一个新的
<code>IValidator&lt;UserViewModel&gt;</code>。我们<em>可以</em>
用这种比较长的方式，像这样：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The long way</span></span><br><span class="line">builder.Bind&lt;IValidator&lt;UserViewModel&gt;&gt;().To&lt;UserViewModelValidator&gt;();</span><br></pre></td></tr></table></figure>
<p>但是，如果有很多验证器，就需要很多行配置。最好告诉S tyletIoC
发现所有的
<code>IValidator&lt;T&gt;</code>实现，并绑定它们本身，通过这样做:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The short way</span></span><br><span class="line">builder.Bind(<span class="keyword">typeof</span>(IValidator&lt;&gt;)).ToAllImplementations();</span><br></pre></td></tr></table></figure>
<p>漂亮! 当 StyletIoC 试图创建一个新的
<code>FluentValidationAdapter&lt;UserViewModel&gt;</code>
时，它将看到它需要一个
<code>IValidator&lt;UserViewModel&gt;</code>，并将实例化一个新的<code>UserViewModelValidator</code>。</p>
<p>现在您可以看到为什么我们在这里使用
<code>IModelValidator&lt;T&gt;</code> 而不是
<code>IModelValidator</code>。如果 <code>UserViewModel</code>
需要一个<code>IModelValidator</code>，StyletIoC
就不能计算出它应该创建一个
<code>FluentValidationAdapter&lt;UserViewModel&gt;</code>，而不是一个
<code>FluentValidationAdapter&lt;LogInViewModel&gt;</code>。通过向
<code>IModelValidator</code> 添加类型信息，我们为 IoC
容器提供了足够的信息。</p>
<h2
id="使用预制的-imodelvalidatorusing-a-pre-made-imodelvalidator">使用预制的
IModelValidator（Using a pre-made IModelValidator）</h2>
<p>我写了以下 IModelValidator 实现，欢迎大家使用:</p>
<ol type="1">
<li>FluentValidationAdapter</li>
</ol>
<p>如果你写了一个，你很乐意分享它，请让我知道，我会添加它。</p>
<h2
id="实现同步验证适配器implementing-imodelvalidator-synchronously">实现同步验证适配器（Implementing
IModelValidator (Synchronously)）</h2>
<p>编写一个 <code>IModelValidator</code>
实现在概念上很简单，但是有一些问题。与前面一样，本节将假设我们正在为FluentValidation
库实现一个适配器，尽管您可以应用在这里学到的知识来为几乎所有的库编写一个适配器。</p>
<p>现在，我们假设所有的验证都是同步的。对于返回 Task
的方法，我们只返回一个已完成的 Task。一件容易的事。</p>
<p>首先，我们将实现
<code>IModelValidator&lt;T&gt;</code>，原因在前一节中讨论过。它还需要接受一个
<code>IValidator&lt;T&gt;</code> 作为构造函数参数，就像这样:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FluentValidationAdapter</span> : <span class="title">IModelValidator</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">readonly</span> IValidator&lt;T&gt; validator;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">FluentValidationAdapter</span>(<span class="params">IValidator&lt;T&gt; validator</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">this</span>.validator = validator;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>记住 <code>ValidatingModelBase</code> 需要一个
<code>IModelValidator</code>，它专门用于验证特定的 ViewModel
实例，因为它增加了更多的灵活性。这意味着
<code>ValidationModelBase</code> 可以调用
<code>ValidateAllPropertiesAsync()</code>，正确的 ViewModel
实例将被验证。然而，这里我们有一个鸡生蛋还是蛋生鸡的情况—为了使适配器专门化，ViewModel
必须存在。但是，只有在适配器被验证之后才能实例化 ViewModel，因为
ViewModel需 要适配器作为构造函数参数。</p>
<p>解决方案是 <code>Initialize(object subject)</code>方法。它被
<code>ValidatingModelBase</code>
调用，当它传递一个新的适配器时，它将把自己作为参数传递。然后适配器将存储这个实例，并在运行验证时使用它。是这样的:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FluentValidationAdapter</span> : <span class="title">IModelValidator</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">readonly</span> IValidator&lt;T&gt; validator;</span><br><span class="line">   <span class="keyword">private</span> T subject;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">FluentValidationAdapter</span>(<span class="params">IValidator&lt;T&gt; validator</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">this</span>.validator = validator;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Initialize</span>(<span class="params"><span class="built_in">object</span> subject</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">this</span>.subject = (T)subject;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在,实现
<code>ValidatePropertyAsync</code>。这应该验证单个属性，并返回验证错误列表，如果没有验证错误，则返回
null/emptyarray。使用 FluentValidation 执行同步验证，它可能是这样的:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Task&lt;IEnumerable&lt;<span class="built_in">string</span>&gt;&gt; ValidatePropertyAsync(<span class="built_in">string</span> propertyName)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">var</span> errors = <span class="keyword">this</span>.validator.Validate(<span class="keyword">this</span>.subject, propertyName).Errors.Select(x =&gt; x.ErrorMessage);</span><br><span class="line">   <span class="keyword">return</span> Task.FromResult(errors);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类似地，<code>ValidateAllPropertiesAsync</code>
方法验证所有属性，并返回<code>&#123; propertyName =&gt; array of validation errors &#125;</code>的字典。如果属性没有任何验证错误，您可以从字典中完全删除它，或者将其值设置为
null/emptyarray。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Task&lt;Dictionary&lt;<span class="built_in">string</span>, IEnumerable&lt;<span class="built_in">string</span>&gt;&gt;&gt; ValidateAllPropertiesAsync()</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">var</span> errors = <span class="keyword">this</span>.validator.Validate(<span class="keyword">this</span>.subject).Errors.GroupBy(x =&gt; x.PropertyName).ToDictionary(x =&gt; x.Key, x =&gt; x.Select(failure =&gt; failure.ErrorMessage));</span><br><span class="line">   <span class="keyword">return</span> Task.FromResult(errors);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>把这些都放在一起，您就有了适配器!</p>
<h2
id="实现异步验证适配器implementing-imodelvalidator-asynchronously">实现异步验证适配器（Implementing
IModelValidator (Asynchronously)）</h2>
<p>实现异步验证(对于支持异步验证的库来说比较复杂)。</p>
<p>首先，请记住 <code>ValidatingModelBase</code>
有一组同步方法(<code>Validate</code>、<code>ValidateProperty</code>)和异步方法(<code>ValidateAsync</code>、<code>ValidatePropertyAsync</code>)。在底层，同步版本调用异步版本，但是阻塞线程，直到异步操作完成
(使用 <code>Task.Wait()</code>)。</p>
<p>现在，如果你经常使用任务，这应该会敲响警钟。你看，当你
<code>await DoSomethingAsync(); DoSomethingElse();</code> 时，你会说
“捕获当前线程 [*] ”。当 <code>DoSomethingAsync()</code>
异步操作完成后，我想让你发布一条消息到那个捕获的线程，告诉它运行
<code>DoSomethingElse()</code>。但是，如果该线程正在等待异步操作完成，那么它将永远不会接收到该消息，操作将永远不会完成，并且会出现死锁。</p>
<p>[*]不完全正确——它捕获当前的
<code>SynchronizationContext</code>。但是在UI线程上，这是相同的。</p>
<p>换句话说，这意味着下面的代码，从 UI 线程运行，将死锁:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">DoSomethingAsync</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">await</span> Task.Delay(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... </span></span><br><span class="line">DoSomethingAsync().Wait();</span><br><span class="line">DoSomethingElse();</span><br></pre></td></tr></table></figure>
<p>当 <code>Task . Delay(100)</code> 任务完成时，它会向 UI
线程返回一条消息，说 “好的，运行
<code>DoSomethingElse()</code>”。但是，UI 线程被 <code>Wait()</code>
卡住了，永远不会处理消息，你就陷入了僵局。</p>
<p>为什么和这相关? 好。如果你写一个
<code>IModelValidator&lt;T&gt;</code> 的方法，它看起来像这样:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IEnumerable&lt;<span class="built_in">string</span>&gt;&gt; ValidatePropertyAsync(<span class="built_in">string</span> propertyName)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">var</span> result = <span class="keyword">await</span> <span class="keyword">this</span>.Validator.ValidateAsync(<span class="keyword">this</span>.subject, propertyName);</span><br><span class="line">   <span class="keyword">return</span> result.Errors.Select(x =&gt; x.ErrorMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后调用 <code>ValidateProperty</code>，
<strong>你会死锁</strong>。</p>
<p>窍门是告诉 <code>await</code>不要捕获当前线程，使用
<code>ConfigureAwait(false)</code>，即</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IEnumerable&lt;<span class="built_in">string</span>&gt;&gt; ValidatePropertyAsync(<span class="built_in">string</span> propertyName)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">var</span> result = <span class="keyword">await</span> <span class="keyword">this</span>.Validator.ValidateAsync(<span class="keyword">this</span>.subject, propertyName).ConfigureAwait(<span class="literal">false</span>);</span><br><span class="line">   <span class="keyword">return</span> result.Errors.Select(x =&gt; x.ErrorMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在，返回 <code>result.Errors…</code>
行将运行在另一个线程(而不是发布到 UI 线程)，没有死锁发生。</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Stylet 框架</category>
      </categories>
      <tags>
        <tag>MVVM</tag>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF MVVM Stylet使用文档（中文）09-PropertyChangedBase</title>
    <url>/posts/2020/DGFHG1.html</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<p>PropertyChangedBase 是实现 INotifyPropertyChanged
类型的基类，它提供了触发 PropertyChanged 通知的方法。</p>
<span id="more"></span>
<h2 id="触发通知raising-notifications">触发通知（Raising
Notifications）</h2>
<p>有许多方法可以触发 PropertyChanged 通知，具体取决于您想要做什么。</p>
<p>最常见的情况是，每次将值分配给一个属性时，它都会引发一个通知。PropertyChangedBase
提供了一个很好的实用程序方法来帮助:
SetAndNotify，它的参数需为要分配值的字段的引用和分配给该字段的值。如果字段的值不等于原来的值，则会赋值，并引发
PropertyChanged 通知。如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">MyClass</span> : <span class="title">PropertyChangedBase</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">string</span> _name;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="keyword">this</span>._name; &#125;</span><br><span class="line">      <span class="keyword">set</span> &#123; SetAndNotify(<span class="keyword">ref</span> <span class="keyword">this</span>._name, <span class="keyword">value</span>); &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>如果您想为当前属性以外的属性发出 PropertyChanged
通知，也有几种方法可以实现(取决于您是使用c# 6还是更低)。</p>
<p>首选的 C# 6方法是使用
<code>nameof()</code>，因为它开销特别小，并且提供了编译时安全性。</p>
<p>如果您使用的是 C# 5或更低的版本，您可以使用表达式:
这比较慢，但是也提供了编译时的安全性。</p>
<p>如果你真的想要，你也可以使用原始字符串。</p>
<p>见下文:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">MyClass</span> : <span class="title">PropertyChangedBase</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RaiseNameChangedExpression</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// Preferred if you&#x27;re using C# 6, as it provides compile-time safety</span></span><br><span class="line">      <span class="keyword">this</span>.NotifyOfPropertyChange(<span class="keyword">nameof</span>(<span class="keyword">this</span>.Name));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Preferred for C# 5 and below, as it provides compile-time safety</span></span><br><span class="line">      <span class="keyword">this</span>.NotifyOfPropertyChange(() =&gt; <span class="keyword">this</span>.Name);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Not preferred, but is very occasionally necessary</span></span><br><span class="line">      <span class="keyword">this</span>.NotifyOfPropertyChange(<span class="string">&quot;Name&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="调试事件dispatching-events">调试事件（Dispatching Events）</h2>
<p>默认情况下，PropertyChanged 事件在当前线程上引发
(WPF负责将它们分派到UI线程)。但是，如果您确实想改变这一点，您可以!
PropertyChangedBase 有一个名为 PropertyChangedDispatcher
的属性，它有一个 <code>Action&lt;Action&gt;</code>
并且默认执行。DefaultPropertyChangedDispatcher(您可以分配它)(它的值为
<code>a =&gt; a()</code>)。</p>
<p>如果希望将其更改为在UI线程上执行，可以执行以下操作。</p>
<p>改变 PropertyChangedBase 的所有实例:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Bootstrapper</span> : <span class="title">Bootstrapper</span>&lt;<span class="title">MyRootViewModel</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Configure</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">base</span>.Configure();</span><br><span class="line">      Execute.DefaultPropertyChangedDispatcher = Execute.OnUIThread;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>改变 PropertyChangedBase 的一个实例:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">MyClass</span> : <span class="title">PropertyChangedBase</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">MyClass</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">this</span>.PropertyChangedDispatcher = Execute.OnUIThread;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用-propertychanged.fody-use-with-propertychanged.fody">使用
PropertyChanged.Fody (Use with PropertyChanged.Fody)</h2>
<p><a
href="https://github.com/Fody/PropertyChanged">PropertyChanged.Fody</a>
是一个非常棒的包，它在编译时注入代码，为您的属性自动触发 PropertyChanged
通知，允许您编写非常简洁的代码。它还会找出你的属性之间的依赖关系，并提出适当的通知，例如:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">MyClass</span> : <span class="title">PropertyChangedBase</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> FirstName &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> LastName &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> FullName &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> String.Format(<span class="string">&quot;&#123;0&#125; &#123;1&#125;&quot;</span>, <span class="keyword">this</span>.FirstName, <span class="keyword">this</span>.LastName); &#125; &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SomeMethod</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// PropertyChanged notifications are automatically raised for both FirstName and FullName</span></span><br><span class="line">      <span class="keyword">this</span>.FirstName = <span class="string">&quot;Fred&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>PropertyChangedBase 还负责与 <code>Fody.PropertyChanged</code>
集成。<code>Fody.PropertyChanged</code> 发出的通知使用
<code>PropertyChangedDispatcher</code> 触发。</p>
<p>因此，在任何<code>Screen</code>、<code>ValidatingModelBase</code>或者
<code>PropertyChangedBase</code>
的子类中，你不需要做任何特殊的事情来使用
<code>Fody.PropertyChanged</code> 。</p>
<h2 id="名词解释">名词解释</h2>
<ol type="1">
<li>属性依赖：一个属性需要依靠其它属性的值才能得出结果。</li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Stylet 框架</category>
      </categories>
      <tags>
        <tag>MVVM</tag>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF MVVM Stylet使用文档（中文）15-The ViewManager</title>
    <url>/posts/2020/39AEVSS.html</url>
    <content><![CDATA[<p>ViewManager 是 Stylet 的核心组件之一，负责获取
ViewModel，并为其定位正确的视图。然后实例化该视图，并将其绑定到
ViewModel。</p>
<p>本文将告诉您这个过程是如何工作的，以及如何修改它。</p>
<span id="more"></span>
<h2 id="定位视图locating-a-view">定位视图（Locating a View）</h2>
<p>默认的视图定位策略非常简单: 将在 ViewModel的类型和名称空间中将字符串
“ViewModel” 替换为字符串
“View”，然后搜索所有已配置的程序集，寻找具有该名称的类型。</p>
<p>就是这样。</p>
<p>“已配置程序集” 是指 ViewManager 的 viewassembly
属性中的所有程序集。如果您希望搜索更多的程序集，请将它们添加到此列表中(参见下面的示例)。</p>
<p>这个过程由 <code>ViewManager.LocateViewForModel</code>
控制。所以如果你想修改它，继续子类化
<code>ViewManager</code>——参见本文底部的章节。</p>
<h2 id="创建视图creating-a-view">创建视图（Creating a View）</h2>
<p>一旦确定了视图类型，就通过调用提供给 ViewManager
的工厂方法来实例化它。在默认情况下，引导程序将其设置为调用 IoC
容器。然后调用
<code>InitializeComponent</code>，这意味着如果需要，您可以删除您的后台代码。</p>
<p>这是由<code>ViewManager.CreateViewForModel</code>
处理的。你也可以覆盖它。</p>
<h2
id="将视图绑定到它的视图模型binding-the-view-to-its-viewmodel">将视图绑定到它的视图模型（Binding
the View to its ViewModel）</h2>
<p>绑定视图模型及其对应的视图非常简单:</p>
<ul>
<li><p>视图的 DataContext 被设置为 ViewModel。</p></li>
<li><p>视图的 ActionTarget 被设置为 ViewModel(参见
[[Actions]])。</p></li>
<li><p>如果 ViewModel 实现了 <code>ViewAware</code>，则调用它的
<code>AttachView</code> 方法，并传递视图(参见 [[Screens and
conductor]])。</p></li>
</ul>
<h2 id="处理-view.model-的更改dealing-with-view.model-changes">处理
<code>View.Model</code> 的更改（Dealing with <code>View.Model</code>
Changes）</h2>
<p>ViewManager 还负责响应 <code>ContentControl</code> 中
<code>View.Model</code> 附加属性的更改——参见 [[ViewModel First]]。</p>
<p>它将获取附加属性的新值(应该绑定到 ViewModel 实例)，并使用
<code>CreateViewForModel</code> 和 <code>BindViewToModel</code>
创建一个新的配置视图实例，然后将其设置为 <code>ContentControl</code>
的内容。</p>
<h2
id="配置视图管理器configuring-the-viewmanager">配置视图管理器（Configuring
the ViewManager）</h2>
<p>ViewManager 是可配置的。要配置它，在你的 <code>Configure</code>
方法中获取它的一个实例:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Configure</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> viewManager = <span class="keyword">this</span>.Container.Get&lt;ViewManager&gt;();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一旦你有了它，有几个事情你可以配置:</p>
<ul>
<li><p><code>ViewSuffix</code>: 视图类名的后缀。默认为 “View”。</p></li>
<li><p><code>ViewModelSuffix</code>: 视图类名的后缀。默认为
“ViewModel”。</p></li>
<li><p><code>Viewassembly</code>:
要扫描哪些程序集的视图。默认包含引导程序的程序集。</p></li>
<li><p><code>namespacetransformation</code>: 这是一个
<code>from -&gt; to</code>
替换的字典，允许你的视图和视图模型存在于不同的名称空间中。如果你的视图位于<code>Foo.Frontend.Views</code>
中。视图模型位于 <code>Foo.FrontendLogic.ViewModels</code>
中。你可以添加一个条目（键值对）到这个关键字为 "Foo.Frontend“ 和值为
“Foo.FrontendLogic”字典。注意，您必须包含所有的根名称空间:
您不能在这里使用 从 “Frontend” 到 “FrontendLogic” 的转换。</p></li>
</ul>
<h2 id="创建自己的-viewmanagercreating-your-own-viewmanager">创建自己的
ViewManager（Creating your own ViewManager）</h2>
<p>当 Stylet 需要 ViewManager 时，它从 IoC 容器中检索一个
<code>IViewManager</code> 实例。这意味着您可以创建一个您想要的
IViewManager 实现，并将其注册到 IoC 容器中，Stylet 将获取并使用它。</p>
<p>一个非常简单的例子:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CustomViewManager.cs</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomViewManager</span> : <span class="title">ViewManager</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">CustomViewManager</span>(<span class="params">ViewManagerConfig config</span>)</span></span><br><span class="line"><span class="function">      : <span class="title">base</span>(<span class="params">config</span>)</span></span><br><span class="line">   &#123; &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> UIElement <span class="title">CreateAndSetupViewForModel</span>(<span class="params"><span class="built_in">object</span> model</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// This dummy application only has one view, and it&#x27;s this one :)</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SingletonView();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bootstrapper.cs</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Bootstrapper</span> : <span class="title">Bootstrapper</span>&lt;<span class="title">MyRootViewModel</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ConfigureIoC</span>(<span class="params">IStyletIoCBuilder builder</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      builder.Bind&lt;IViewManager&gt;().To&lt;CustomViewManager&gt;();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是它!</p>
<p>更完整的示例可以在 <a
href="https://github.com/canton7/Stylet/tree/master/Samples/Stylet.Samples.OverridingViewManager"><code>Stylet.Samples.OverridingViewManager</code>
sample</a>。</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Stylet 框架</category>
      </categories>
      <tags>
        <tag>MVVM</tag>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF MVVM Stylet使用文档（中文）16-Listening to INotifyPropertyChanged</title>
    <url>/posts/2020/1SHECQH.html</url>
    <content><![CDATA[<p>可能容易实现
INotifyPropertyChanged，但通常是有点痛苦，想象一个对象需要<code>propertychange</code>
通知：你需要注册一个事件处理程序,检查属性名是否是你所期望的,完成后又需要注销事件处理程序。</p>
<p>这是一个很常见的问题，Stylet提供了一些方法来简化工作。</p>
<span id="more"></span>
<h2 id="inotifypropertychanged.bind">INotifyPropertyChanged.Bind</h2>
<p>这是订阅 PropertyChanged
事件的最简单方法，它使用对订阅服务器的强引用(与普通事件一样)来实现这一点。这意味着如果你打算在订阅的东西还存在的时候发布，你必须记得取消订阅。</p>
<p>用法很简单。假设有一个对象的形式:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Can be any implementation of INotifyPropertyChanged - I&#x27;m using PropertyChangedBase as it makes the example shorter</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Model</span> : <span class="title">PropertyChangedBase</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">string</span> _stringProperty;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> StringProperty</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="keyword">this</span>._stringProperty; &#125;</span><br><span class="line">      <span class="keyword">set</span> &#123; SetAndNotify(<span class="keyword">ref</span> <span class="keyword">this</span>._stringProperty, <span class="keyword">value</span>); &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>您希望每次 <code>StringProperty</code>
属性更改时都得到通知。你这样做:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> model = <span class="keyword">new</span> Model();</span><br><span class="line"><span class="comment">// ... </span></span><br><span class="line">model.Bind(x =&gt; x.StringProperty, (sender, eventArgs) =&gt; Debug.WriteLine(String.Format(<span class="string">&quot;New value for property &#123;0&#125; on &#123;1&#125; is &#123;2&#125;&quot;</span>, eventArgs.PropertyName, sender, eventArgs.NewValue)));</span><br></pre></td></tr></table></figure>
<p><code>x =&gt; x.StringProperty</code>
是指定你想观察那个属性，这种方式是类型安全的。<code>x</code>
可以任意命名，当你打出 <code>x=&gt;x.</code>
时，智能感知会提示你一个属性列表。</p>
<p><code>(propertyName, newValue) =&gt; Debug.WriteLine(String.Format("New value is &#123;0&#125;", newValue))</code>在每次属性改变时被调用。</p>
<p><code>Bind</code> 方法实际上返回一个 <code>IEventBinding</code>
的实现，它只有一个
<code>Unbind</code>方法。要删除绑定，请调用该方法。例如:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> model = <span class="keyword">new</span> Model();</span><br><span class="line"><span class="comment">// ... </span></span><br><span class="line"><span class="keyword">var</span> binding = model.Bind(x =&gt; x.StringProperty, (sender, eventArgs) =&gt; Debug.WriteLine(String.Format(<span class="string">&quot;New value for property &#123;0&#125; on &#123;1&#125; is &#123;2&#125;&quot;</span>, eventArgs.PropertyName, sender, eventArgs.NewValue)));</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">binding.Unbind();</span><br></pre></td></tr></table></figure>
<h2
id="inotifypropertychanged.bindweak">INotifyPropertyChanged.BindWeak</h2>
<p>通常，当您订阅一个事件时，接收事件通知的对象至少与发布事件的对象存活的时间一样长，因为发布事件的对象最终会引用接收事件通知的对象。</p>
<p>这通常是不受欢迎的。例如，如果您有一个
ViewModel，它想要监视它所依赖的某些服务上的 PropertyChanged事件。</p>
<p>Stylet 在 INotifyPropertyChanged 上提供了一个名为
<code>BindWeak</code> 的扩展方法，它与 <code>Bind</code>
非常相似，只是它创建了一个弱绑定。语法与 <code>Bind</code>
相同，所以这里我就不重复了。</p>
<blockquote>
<p>请注意，以弱方式绑定每个委托是不可能的。捕获局部变量的委托通常会失败。下面将对此进行更详细的讨论。</p>
</blockquote>
<h2
id="技术弱事件订阅technical-weak-event-subscriptions">技术:弱事件订阅（Technical:
Weak Event Subscriptions）</h2>
<p>我将忽略委托的一些细节，但在基本术语中，当您订阅一个事件时，您创建一个新的委托实例，并将其传递给拥有该事件的对象。委托(基本上)由两部分组成:
要调用的方法(<code>method</code>)属性和要调用该方法的实例(<code>Target</code>属性)。</p>
<p>如果你创建一个委托，它指向你的类的一个实例方法，一切都很好，很简单:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">MyClass</span>(<span class="params">Model model</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      model.PropertyChanged += <span class="keyword">new</span> PropertyChangedEventHandler(<span class="keyword">this</span>.PropertyChangedHandler);</span><br><span class="line">      <span class="comment">// or, more concisely</span></span><br><span class="line">      model.PropertyChanged += <span class="keyword">this</span>.PropertyChangedHandler;</span><br><span class="line">   &#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PropertyChangedHandler</span>(<span class="params"><span class="built_in">object</span> sender, PropertyChangedEventArgs e</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这种情况下，一个新的委托被创建，它的 <code>Target</code> 被设置为
<code>MyClass</code> 实例，它的 <code>method</code> 被设置为
<code>MethodInfo</code>，代表你的 <code>PropertyChangedHandler</code>
方法。</p>
<p><code>model</code> 实例然后成为该委托的所有者。这意味着
<code>model</code> 实例拥有一个拥有 <code>MyClass</code>
实例的委托，这意味着 <code>MyClass</code> 实例不能被释放，直到
<code>model</code> 实例被释放。</p>
<p>当匿名委托/ lambdas开始发挥作用时，事情开始变得有点复杂，例如:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">MyClass</span>(<span class="params">Model model</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      model.PropertyChanged += <span class="built_in">delegate</span> &#123; Debug.WriteLine(<span class="string">&quot;Hi&quot;</span>); &#125;;</span><br><span class="line">      <span class="comment">// Or, using lambas (preferred)</span></span><br><span class="line">      model.PropertyChanged += (o, e) =&gt; Debug.WriteLine(<span class="string">&quot;Hi&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这里，c#
编译器必须在你的类上创建一个新的，特殊的方法，它看起来像这样:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">MyClass</span>(<span class="params">Model model</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      model.PropertyChanged += <span class="keyword">new</span> PropertyChangedEventHandler(<span class="keyword">this</span>.&lt;.ctor&gt;b__0);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   [<span class="meta">CompilerGenerated</span>]</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> &lt;.ctor&gt;b__0(<span class="built_in">object</span> sender, PropertyChangedEventArgs e)</span><br><span class="line">   &#123;</span><br><span class="line">      Debug.WriteLine(<span class="string">&quot;Hi&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意上面那个特殊方法名的使用——其中包含字符( “&lt;” 和
“&gt;”)，这些字符在 c# 中无效，但在 CLR 中有效)。</p>
<p>如果我们有一个捕获局部变量的匿名委托/lambda，这将变得更加复杂。在这里，c#
编译器需要生成一个全新的嵌入式类，它保留了对该变量的引用。例如:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">MyClass</span>(<span class="params">Model model</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">string</span> test = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">      model.PropertyChanged += (o, e) =&gt; Debug.WriteLine(test);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译成看起来有点像:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">MyClass</span>(<span class="params">Model model</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      MyClass.&lt;&gt;c__DisplayClass1 c__DisplayClass1 = <span class="keyword">new</span> MyClass.&lt;&gt;c__DisplayClass1();</span><br><span class="line">      c__DisplayClass1.test = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">      model.PropertyChanged += <span class="keyword">new</span> PropertyChangedEventHandler(c__DisplayClass1.&lt;.ctor&gt;b__0);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   [<span class="meta">CompilerGenerated</span>]</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">sealed</span> <span class="keyword">class</span> &lt;&gt;<span class="title">c__DisplayClass1</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="built_in">string</span> test;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> &lt;.ctor&gt;b__0(<span class="built_in">object</span> sender, PropertyChangedEventArgs e)</span><br><span class="line">      &#123;</span><br><span class="line">         Debug.WriteLine(<span class="keyword">this</span>.test);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>这里，创建的 PropertyChangedEventHandler 委托将
<code>&lt;&gt;c__DisplayClass</code> 的实例作为它的 <code>Target</code>
属性的值。</p>
<p>这意味着，当<code>MyClass</code>
的构造函数返回时，<code>&lt;&gt;c__DisplayClass</code>
实例引用的<em>唯一</em>东西就是委托。<code>&lt;&gt;c__DisplayClass</code>
实例的生命周期现在完全独立于 <code>MyClass</code> 实例。</p>
<p>实现弱事件的方法是让委托的 “target” 属性以某种方式成为
“WeakReference”
——通常是让它指向一个中间类，而这个中间类又有一个指向“真正”目标的
“WeakReference”。这意味着委托不会保留目标。</p>
<p>如果这个目标是一个编译器生成的内部类，那么除了我们创建的
<code>WeakReference</code>
之外，没有其他任何东西会保存对它的引用。这意味着这个内部类将被直接收集，因此委托将永远不会被调用。</p>
<p>因此，如果委托给它有一个<code>target</code>，且有
<code>CompilerGenerated</code> 属性，<code>BindWeak</code>
将抛出一个异常。</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Stylet 框架</category>
      </categories>
      <tags>
        <tag>MVVM</tag>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF MVVM Stylet使用文档（中文）18-Logging</title>
    <url>/posts/2020/4NQDGJ.html</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<p>有时候，查看 Stylet
在幕后做了什么是很有用的，特别是当它没有做一些你期望它做的事情，或者做一些意想不到的事情的时候。</p>
<p>值得庆幸的是，Stylet
可以很容易地配置来生成日志输出，因此您可以了解它在做什么。</p>
<span id="more"></span>
<h2 id="快速启动">快速启动</h2>
<p>要快速启用日志记录，请在Bootstrapper的配置方法中放入以下内容:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnStart</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">   Stylet.Logging.LogManager.Enabled = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这将把日志消息打印到 Visual Studio
的输出窗口。在内部，默认的日志记录器使用
<code>Trace.WriteLine</code>。</p>
<h2 id="定制日志">定制日志</h2>
<p>当然，您可以向 Stylet 提供自己的日志记录器，Stylet
将使用它来打印日志消息。</p>
<p>首先，定义一个实现 <code>Stylet.Logging.ILogger</code> 接口的类:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyLogger</span> : <span class="title">Stylet.Logging.ILogger</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">MyLogger</span>(<span class="params"><span class="built_in">string</span> loggerName</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// TODO</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Info</span>(<span class="params"><span class="built_in">string</span> format, <span class="keyword">params</span> <span class="built_in">object</span>[] args</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// TODO</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Warn</span>(<span class="params"><span class="built_in">string</span> format, <span class="keyword">params</span> <span class="built_in">object</span>[] args</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// TODO</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Error</span>(<span class="params">Exception exception, <span class="built_in">string</span> message = <span class="literal">null</span></span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// TODO</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后，配置 LogManager
来使用它。与之前一样，在你的Bootstrapper的配置方法:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnStart</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">   Stylet.Logging.LogManager.LoggerFactory = name =&gt; <span class="keyword">new</span> MyLogger(name);</span><br><span class="line">   Stylet.Logging.LogManager.Enabled = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2
id="在应用程序中进行日志记录logging-within-your-application">在应用程序中进行日志记录（Logging
within your Application）</h2>
<p>我建议不要用 Stylet.Logging
在其他地方进行日志记录。它是非常轻量级的，几乎没有任何特性——编写它的唯一原因是为了让
Stylet 不依赖于日志框架来支持一个几乎永远不会被使用的特性。</p>
<p><a href="http://nlog-project.org/">NLog</a> 和 <a
href="http://logging.apache.org/log4net/">log4net</a>
是两个主要的c#日志记录框架。如果您不想将您的应用程序与任何特定的日志记录框架耦合，那么可以考虑
<a
href="https://github.com/net-commons/common-logging">Common.Logging</a>，它提供了一个与框架无关的接口，在这个接口后面可以连接
NLog、log4net或其他框架。</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Stylet 框架</category>
      </categories>
      <tags>
        <tag>MVVM</tag>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF MVVM Stylet使用文档（中文）17-Design Mode Support</title>
    <url>/posts/2020/1VM70C3.html</url>
    <content><![CDATA[<h2 id="简介introduction">简介（Introduction）</h2>
<p>“设计模式”或“设计时”指的是项目加载到 Visual Studio XAML 设计器或
Expression Blend 中时，显示的是 XAML
的呈现版本。大多数情况下，设计人员不会尝试评和估任何绑定，也不会为它们提供任何智能感知。然而，通过一些配置，您可以获得可爱的智能感知，并在视图中显示来自
ViewModel 的一些虚拟值。</p>
<p>Stylet
对设计模式有一些基本的支持。本文记录了它，并提供了如何使用它以及如何利用现有的
XAML 特性来增强设计时体验的说明。</p>
<span id="more"></span>
<p>这里显示的所有示例都可以在 <a
href="https://github.com/canton7/Stylet/tree/master/Samples/Stylet.Samples.DesignMode">DesignMode
sample project</a>中的 "ready to run" 里面找到。</p>
<h2
id="只有智能感知没有绑定intellisense-only-no-bindings">只有智能感知，没有绑定（IntelliSense
only, no bindings）</h2>
<p>这是最基本的技巧，你只需要做很少的额外工作。您将获得绑定的智能感知(至少在
Visual Studio 2013 及以上版本中)，但是您不会在视图中看到来自 ViewModel
的任何虚拟数据。</p>
<p>首先，需要在视图的根目录中声明以下内容。如果你在 Visual Studio 2013
中创建了一个 UserControl，这些将会被默认添加。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot; </span><br><span class="line">xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot; </span><br><span class="line">mc:Ignorable=&quot;d&quot; </span><br></pre></td></tr></table></figure>
<p>你还需要为你的视图模型添加一个命名空间:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:vms=&quot;clr-namespace:DesignMode.ViewModels&quot;</span><br></pre></td></tr></table></figure>
<p>一旦你有了这个，你需要一个额外的神奇的一行，它告诉 XAML
设计器，这个视图的 <code>DataContext</code> 是你的
<code>SampleViewModel</code>，绑定智能感知应该使用这个属性:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">d:DataContext=&quot;&#123;d:DesignInstance vms:SampleViewModel&#125;&quot;</span><br></pre></td></tr></table></figure>
<p>把它们放在一起，你会得到这样的结果:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">UserControl</span> <span class="attr">x:Class</span>=<span class="string">&quot;DesignMode.Views.SampleView&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:mc</span>=<span class="string">&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:d</span>=<span class="string">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">mc:Ignorable</span>=<span class="string">&quot;d&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:vms</span>=<span class="string">&quot;clr-namespace:DesignMode.ViewModels&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">d:DataContext</span>=<span class="string">&quot;&#123;d:DesignInstance vms:SampleViewModel&#125;&quot;</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">UserControl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2
id="智能感知和虚拟数据让设计器实例化视图模型intellisense-and-dummy-data-letting-the-designer-instantiate-the-viewmodel">智能感知和虚拟数据，让设计器实例化视图模型（Intellisense
and Dummy Data, letting the Designer instantiate the ViewModel）</h2>
<p>除了让 XAML 设计人员为我们实例化 ViewModel
之外，这种技术与前面的技术非常相似。设计器将使用这个ViewModel
实例来获取绑定的虚拟数据。</p>
<p>为了让设计器能够做到这一点，ViewModel
必须有一个无参数的构造函数。这既是祝福也是诅咒。好的方面是，它为您提供了一个将一些虚拟数据注入
ViewModel 属性以供设计人员使用的好地方。不好的一面是你的 ViewModel
现在包含了只会被设计师使用的代码…</p>
<blockquote>
<p><strong>注意：</strong>在设计时没有访问 IoC
容器的权限(任何请求访问的人将被带到后台…处理)。因此，如果您的ViewModel
有任何依赖项，它们在设计时将不可用。通常这不是问题:
只有属性被访问(没有方法被调用)，所以您不应该做任何需要访问某个依赖项的事情。只要把它记在心里。</p>
</blockquote>
<p>以这种方式编写的支持设计模式的示例视图模型如下所示:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SampleViewModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CurrentUserName &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SampleViewModel</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.CurrentUserName = <span class="string">&quot;Dummy Username&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SampleViewModel</span>(<span class="params">IUserService userService</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">        <span class="keyword">this</span>.CurrentUserName = <span class="keyword">this</span>.userService.CurrentUser.UserName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：</strong>StyletIoC
总是会选择具有最多可解析参数的构造函数，它也会调用接受
<code>IUserService</code>
的重载。另一方面，设计器总是调用无参数的构造函数。</p>
</blockquote>
<p>如果 ViewModel 通常只有一个无参数的构造函数，那么可以使用
<code>Execute.InDesignMode</code> 或者
<code>Execute: Dispatching to the UI thread</code>，如下:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SampleViewModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> SomeText &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SampleViewModel</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Execute.InDesignMode)</span><br><span class="line">            <span class="keyword">this</span>.SomeText = <span class="string">&quot;Dummy Text&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">this</span>.SomeText = <span class="string">&quot;Actual Text&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不管怎样，一旦你有了一个 ViewModel
的无参数构造函数，设计师可以使用，你可以告诉设计师实例化它使用:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">d:DataContext=&quot;&#123;d:DesignInstance vms:SampleViewModel, IsDesignTimeCreatable=True&#125;&quot;</span><br></pre></td></tr></table></figure>
<p>或者，如下完整版本：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">UserControl</span> <span class="attr">x:Class</span>=<span class="string">&quot;DesignMode.Views.SampleView&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:mc</span>=<span class="string">&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:d</span>=<span class="string">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">mc:Ignorable</span>=<span class="string">&quot;d&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:vms</span>=<span class="string">&quot;clr-namespace:DesignMode.ViewModels&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">d:DataContext</span>=<span class="string">&quot;&#123;d:DesignInstance vms:SampleViewModel, IsDesignTimeCreatable=True&#125;&quot;</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">UserControl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2
id="智能感知我虚拟数据使用视图模型定位器-intellisense-and-dummy-data-using-a-viewmodellocator">智能感知我虚拟数据，使用视图模型定位器
（Intellisense and Dummy Data, using a ViewModelLocator）</h2>
<p>前面的方法有一个很大的缺点: 它要求 ViewModel
知道设计模式，并且包含只在设计时调用的代码。这被一些人认为是一种巨大的代码味道。</p>
<p>另一种方法是使用
ViewModelLocator——一个只在设计时使用的类，它可以实例化和配置您的
viewmodel。这意味着任何设计时都可以进入
ViewModelLocator，并且不进入各个视图。</p>
<p>如果这听起来很复杂，请原谅我。这一切在一分钟内就会变得明晰。</p>
<p>首先，让我们构建一个 SampleViewModel：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SampleViewModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CurrentUserName &#123; <span class="keyword">get</span>;<span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SampleViewModel</span>(<span class="params">IUserService userService</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">        <span class="keyword">this</span>.CurrentUserName = <span class="keyword">this</span>.userService.CurrentUser.UserName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>拉下来，我们需要一个
ViewModelLocator，这是一个简单的类，每个视图模型包含一个属性，我们可能想在设计时访问:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ViewModelLocator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> SampleViewModel SampleViewModel</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> vm = <span class="keyword">new</span> SampleViewModel();</span><br><span class="line">            vm.CurrentUserName = <span class="string">&quot;Dummy Username&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> vm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意到 ViewModel 是如何仅在需要时实例化的吗? 这是因为
ViewModelLocator
本身将在运行时实例化，但是它的属性将只在设计时访问。</p>
<p>接下来，让我们把它添加到我们的应用程序的资源中，这样它就可以用于我们的视图:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Application</span> <span class="attr">x:Class</span>=<span class="string">&quot;DesignMode.App&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:s</span>=<span class="string">&quot;https://github.com/canton7/Stylet&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:DesignMode&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Application.Resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">s:ApplicationLoader</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">s:ApplicationLoader.Bootstrapper</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">local:Bootstrapper</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">s:ApplicationLoader.Bootstrapper</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">local:ViewModelLocator</span> <span class="attr">x:Key</span>=<span class="string">&quot;ViewModelLocator&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">s:ApplicationLoader</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Application.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Application</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后在视图中使用：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">UserControl</span> <span class="attr">x:Class</span>=<span class="string">&quot;DesignMode.Views.SampleView&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:mc</span>=<span class="string">&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:d</span>=<span class="string">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">mc:Ignorable</span>=<span class="string">&quot;d&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:vms</span>=<span class="string">&quot;clr-namespace:DesignMode.ViewModels&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">d:DataContext</span>=<span class="string">&quot;&#123;Binding Source=&#123;StaticResource ViewModelLocator&#125;, Path=SampleViewModel&#125;&quot;</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">UserControl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2
id="在设计时启用不启用按钮enablingdisabling-buttons-at-design-time">在设计时启用/不启用按钮（Enabling/Disabling
Buttons at Design Time）</h2>
<p>在上面的所有例子中，我们只绑定了视图的 <code>DataContext</code>
：我们没有对它的 “View. actiontarget |Actions#the-viewactiontarget”
做任何事情。这意味着按钮的可启用性不会反映保护属性的值(如果它存在的话)——它总是被启用的。</p>
<p><strong>注意：</strong>默认情况下，Stylet
会绑定视图。当它实例化视图时，<code>ActionTarget</code>
指向相应的视图模型。然而，在设计时，Stylet 并不负责实例化视图，因此
<code>View.ActionTarget</code> 不绑定。</p>
<p>如果你想让按钮的 enabledless 反映它的保护属性，你需要添加:
<code>s:View.ActionTarget="&#123;Binding&#125;"</code>到你的视图，例如:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">UserControl</span> <span class="attr">x:Class</span>=<span class="string">&quot;DesignMode.Views.SampleView&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:mc</span>=<span class="string">&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:d</span>=<span class="string">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:s</span>=<span class="string">&quot;https://github.com/canton7/Stylet&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">mc:Ignorable</span>=<span class="string">&quot;d&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:vms</span>=<span class="string">&quot;clr-namespace:DesignMode.ViewModels&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">d:DataContext</span>=<span class="string">&quot;&#123;d:DesignInstance vms:SampleViewModel, IsDesignTimeCreatable=True&#125;&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">s:View.ActionTarget</span>=<span class="string">&quot;&#123;Binding&#125;&quot;</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">UserControl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2
id="使用替代视图模型using-substitute-viewmodels">使用替代视图模型（Using
Substitute ViewModels）</h2>
<p>另一个解决"视图模型知道设计时，但它其它不应该知道"这个问题的办法是你的视图实现一个接口(真正的接口,或在头部假装实现一个)，然后，构造
design-time-only
视图并实现相同的接口，同时包含虚拟数据。然后在设计时以相同的方式绑定它:
<code>d:DataContext="&#123;d:DesignInstance vms:DummyViewModel, IsDesignTimeCreatable=True&#125;"</code>。但是，对于大多数开发人员来说，这样的开销太大了。</p>
<p>WPF也有一个设计时数据的概念，<a
href="http://blogs.msdn.com/b/wpfsldesigner/archive/2010/06/30/sample-data-wpf%20-and-silverlight-designer.aspx">参见例子</a>。</p>
<h2
id="为什么-stylet-不能自动找到我的-viewmodel-why-cant-stylet-find-my-viewmodel-automatically">为什么
Stylet 不能自动找到我的 ViewModel ?（Why can't Stylet find my ViewModel
automatically?）</h2>
<p>由于 Stylet 能够获取一个
ViewModel，并查找和实例化它的视图，您可能会想问为什么它不能以另一种方式做到这一点:
也就是说，在设计时，为给定的视图自动找到正确的
ViewModel，并用正确的依赖项实例化它。这是一个非常糟糕的想法，原因有很多:</p>
<ol type="1">
<li><p>我们需要添加一种将 View 名称转换为 ViewModel 名称的方法，这增加了
<code>ViewManager</code> 的复杂性(特别是对于任何提供自己的
<code>ViewManager</code> 的人来说)。</p></li>
<li><p>我们需要在设计时实例化一个适当的
<code>IViewManager</code>实现。由于用户可以提供自己的实现，这意味着打开整个
IoC
容器。因为这依赖于正确地设置了引导程序的程序集属性，所以我们需要打开整个引导程序。这可能会产生令人讨厌的副作用(请考虑启动执行网络提交、文件系统访问等的服务)。</p></li>
<li><p>我们需要提供一个具有所有依赖关系的
ViewModel。这意味着实例化服务，这可能会产生令人讨厌的副作用。</p></li>
<li><p>ViewModel
可能不会包含合适的虚拟数据，所以我们没有获得太多。</p></li>
<li><p>由于我们太过聪明而导致某些服务以错误的方式启动，因此出现设计器错误(或者更糟，出现网络/文件系统副作用)，调试起来很痛苦，我们不应该把这种情况强加于人。</p></li>
</ol>
<h2 id="sview.model-and-embedded-views">s:View.Model and Embedded
Views</h2>
<p>如果你有一个内嵌视图(例如
<code>&lt;ContentControl s:View.Model="&#123;Binding SomeChildViewModel&#125;"/&gt;</code>)在您的视图中，然后
Stylet 将在 View for ViewModelType.SomeChildViewModel
行简单地显示一条消息。而不是试图找到正确的视图。这与我们没有自动定位
ViewModels 的原因非常相似: 这意味着打开 IoC 容器(我们需要找到用户的
<code>IViewManager</code>
实现)，这意味着运行引导程序，这让我们可以做真正危险的事情。最好避免。</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Stylet 框架</category>
      </categories>
      <tags>
        <tag>MVVM</tag>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>DotNET 读写 XML 文件入门必读</title>
    <url>/posts/2023/345REE4.html</url>
    <content><![CDATA[<p>作为入门必读，本文将介绍 XML
的读取方式选择，然后总结初学者可能会遇到的坑。</p>
<span id="more"></span>
<h2 id="方式比选">方式比选</h2>
<p>在 C# 中，有多种方式可以读取 XML 数据，以下是一些常见的方法：</p>
<ol type="1">
<li><p><strong>使用 <code>XmlDocument</code> 类</strong>：这是 .NET
Framework 中最早的 XML 处理类，它提供了丰富的方法和属性来读取和操作 XML
文档。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">XmlDocument doc = <span class="keyword">new</span> XmlDocument();</span><br><span class="line">doc.Load(<span class="string">&quot;file.xml&quot;</span>);</span><br><span class="line">XmlNode node = doc.DocumentElement.SelectSingleNode(<span class="string">&quot;/book/title&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p><strong>使用 <code>XDocument</code> 和 <code>XElement</code>
类</strong>：这些类是 .NET Framework 的 LINQ to XML
技术的一部分，它们提供了更现代和强大的方式来处理 XML。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">XDocument doc = XDocument.Load(<span class="string">&quot;file.xml&quot;</span>);</span><br><span class="line">XElement node = doc.Root.Element(<span class="string">&quot;title&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p><strong>使用 <code>XmlReader</code>
类</strong>：这是一个基于流的读取器，它提供了一种高效的方式来读取大型
XML 文件，因为它一次只读取文档的一小部分。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (XmlReader reader = XmlReader.Create(<span class="string">&quot;file.xml&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">while</span> (reader.Read())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 处理每个节点...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>使用 <code>XmlSerializer</code> 类</strong>：这个类可以将
XML 数据反序列化为 .NET 对象，或将 .NET 对象序列化为
XML。这是处理复杂数据结构的理想选择。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">XmlSerializer serializer = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(MyClass));</span><br><span class="line">MyClass obj = (MyClass)serializer.Deserialize(<span class="keyword">new</span> StreamReader(<span class="string">&quot;file.xml&quot;</span>));</span><br></pre></td></tr></table></figure></li>
</ol>
<p>以上每种方法都有其优点和适用场景，在日常开发中若无特殊要求，建议选择更加现代化的
<strong><a
href="https://learn.microsoft.com/zh-cn/dotnet/standard/linq/linq-xml-overview">LINQ
to XML</a></strong> 方式来读取 XML。</p>
<h2 id="注意事项">注意事项</h2>
<h3 id="注意-xmlns命名空间">注意 xmlns(命名空间)</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">KeyinTree</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.bentley.com/schemas/1.0/MicroStation/AddIn/KeyinTree.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">RootKeyinTable</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Keyword</span> <span class="attr">CommandWord</span>=<span class="string">&quot;app&quot;</span> <span class="attr">SubtableRef</span>=<span class="string">&quot;app&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">RootKeyinTable</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">SubKeyinTables</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SubKeyinTable</span> <span class="attr">ID</span>=<span class="string">&quot;default&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SubKeyinTable</span> <span class="attr">ID</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Keyword</span> <span class="attr">CommandWord</span>=<span class="string">&quot;test&quot;</span> <span class="attr">SubtableRef</span>=<span class="string">&quot;test&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">SubKeyinTable</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SubKeyinTable</span> <span class="attr">ID</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Keyword</span> <span class="attr">CommandWord</span>=<span class="string">&quot;keyin&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">SubKeyinTable</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">SubKeyinTables</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">KeyinHandlers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">KeyinHandler</span> <span class="attr">Keyin</span>=<span class="string">&quot;app test keyin&quot;</span> <span class="attr">Function</span>=<span class="string">&quot;Namespace.App.Functions.Func&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">KeyinHandlers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">KeyinTree</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在 XML
中，节点的名称由两部分组成：<code>&#123;命名空间&#125;+逻辑名称</code>。</p>
<p>上面的 XML 中，根节点 <code>KeyinTree</code> 是逻辑名称，它的 Name 是
<code>&#123;http://www.bentley.com/schemas/1.0/MicroStation/AddIn/KeyinTree.xsd&#125;KeyinTree</code>。因此：</p>
<ol type="1">
<li><p>不同命名空间的节点不能相互包含</p></li>
<li><p>在查询时，要注意区分是全称还是逻辑名称</p></li>
<li><p>使用 LINQ to XML
时，若只希望按标签来筛选，则应该去匹配它的逻辑名称</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> document = XDocument.Load(path);</span><br><span class="line"><span class="keyword">var</span> keyinTree = document.Elements().FirstOrDefault(x=&gt;x.Name.LocalName==<span class="string">&quot;KeyinTree&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="其它">其它</h2>
<p>可以添加以下扩展方法来读取 XML，简化对命名空间的处理</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">XDocumentExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 使用带有命名空间的名称查询后代</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;element&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;localName&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;XElement&gt; <span class="title">DescendantsWithNSP</span>(<span class="params"><span class="keyword">this</span> XElement element, <span class="built_in">string</span> localName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> fullName = <span class="string">&quot;&#123;&quot;</span> + element.Name.NamespaceName + <span class="string">&quot;&#125;&quot;</span> + localName;</span><br><span class="line">        <span class="keyword">return</span> element.Descendants(fullName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 转换成带有命名空间的 XName</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;localName&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;template&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> XName <span class="title">ToXNameWithNSP</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">string</span> localName, XElement template</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> template.Name.Namespace + localName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<p><a
href="https://learn.microsoft.com/zh-cn/dotnet/standard/linq/linq-xml-overview">LINQ
to XML 概述 - .NET | Microsoft Learn</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>XML</category>
      </categories>
      <tags>
        <tag>DotNET</tag>
        <tag>XML</tag>
      </tags>
  </entry>
  <entry>
    <title>WebClient, HttpClient, HttpWebRequest ,RestSharp之间的区别与抉择</title>
    <url>/posts/2022/34CSWY8.html</url>
    <content><![CDATA[<p>NETCore提供了三种不同类型用于生产的REST API：
<code>HttpWebRequest;WebClient;HttpClient</code>，开源社区创建了另一个名为
<code>RestSharp</code>的库。</p>
<p>如此多的http库，该怎样选择呢？</p>
<span id="more"></span>
<h2 id="httpwebrequest">HttpWebRequest</h2>
<p>这是.NET创建者最初开发用于使用HTTP请求的标准类。使用<code>HttpWebRequest可以让开发者控制</code>请求/响应流程的各个方面，如
timeouts, cookies, headers,
protocols。另一个好处是<code>HttpWebRequest</code>类不会阻塞UI线程。例如，当您从响应很慢的API服务器下载大文件时，您的应用程序的UI不会停止响应。</p>
<p>然而，强大的个性化操作带来了极大的复杂性。为了简单起见，<code>GET</code>您需要至少五行代码;</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">HttpWebRequest http = (HttpWebRequest)WebRequest.Create(<span class="string">&quot;http://example.com&quot;</span>);</span><br><span class="line">WebResponse response = http.GetResponse();</span><br><span class="line">Stream stream = response.GetResponseStream();</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> streamtemn = File.Create(<span class="string">&quot;路径&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    stream.CopyTo(streamtemn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果对http协议不是了如指掌，使用<strong>HttpWebRequest</strong>会增加你的开发成本，除非你需要非常细节的处理和底层的控制，另外HttpWebRequest库已经过时，不适合业务中直接使用，他更适用于框架内部操作。</p>
<h2 id="webclient">WebClient</h2>
<p><code>WebClient</code>是一种更高级别的抽象，是<code>HttpWebRequest</code>为了简化最常见任务而创建的，使用过程中你会发现他缺少基本的
<code>header</code>，<code>timesout</code> 的设置，不过这些可以通过继承
httpwebrequest
来实现。使用<code>WebClient</code>可能比<code>HttpWebRequest</code>直接使用更慢（大约几毫秒）。但这种“低效率”带来了巨大的好处：它需要更少的代码和隐藏了细节处理，更容易使用，并且在使用它时你不太可能犯错误。同样的请求示例现在很简单只需要两行而且内部周到的处理完了细节：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (WebClient webClient = <span class="keyword">new</span> WebClient())</span><br><span class="line">&#123;</span><br><span class="line">    webClient.DownloadFile(<span class="string">&quot;http://example.com&quot;</span>, <span class="string">&quot;路径&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="httpclient">HttpClient</h2>
<p><code>HttpClient</code>提供强大的功能，提供了异步支持，可以轻松配合async
await 实现异步请求，具体使用可参考：<a
href="https://www.cnblogs.com/xiaoliangge/p/9476568.html">NetCore
2.1中的HttpClientFactory最佳实践</a></p>
<h2 id="restsharp">RestSharp</h2>
<p>restsharp是开源社区贡献，具有HttpWebRequest的细节控制和<code>WebClient的使用简单的优点从而让他功能强大的同时又简化了操作(从他定义的接口可以看出真是一个优秀的http库啊😊)</code></p>
<h2 id="结论">结论</h2>
<ul>
<li><code>HttpWebRequest</code>
已经不推荐直接使用了，这已经作为底层机制，不适合业务代码使用</li>
<li><code>WebClient</code>
不想为http细节处理而头疼的coder而生，由于内部已经处理了通用设置，某些情况可能导致性能不是很理想</li>
<li><code>RestSharp</code> 兼具强大功能和友好api很适合业务中使用</li>
<li><code>HttpClient</code> 更加适用于异步编程模型中</li>
</ul>
<h2 id="参考">参考</h2>
<p>https://stackoverflow.com/questions/22791376/is-httpwebrequest-or-webclient-faster/22792326#22792326</p>
<p>https://stackoverflow.com/questions/20530152/deciding-between-httpclient-and-webclient</p>
<p>https://social.msdn.microsoft.com/Forums/vstudio/en-US/2ce80a71-1ced-4bcd-adb4-88eef6e6a42d/httpclient-vs-httpwebrequest?forum=wcf</p>
<p>https://stackify.com/restsharp/?utm_referrer=https%3A%2F%2Fwww.google.com%2F</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Webview2 中无法打开文件选择对话框</title>
    <url>/posts/2022/1RWN42Y.html</url>
    <content><![CDATA[<p>webview2 可以是一个 .NET
环境下运行网页的一个组件，用它可以将网页封装成桌面端程序。封装后，可能会出现无法打开文件选择框的情况，可按如下方法解决。</p>
<span id="more"></span>
<h2 id="解决方法">解决方法</h2>
<ol type="1">
<li>删除目录运行目录下的 <code>ProgramName.exe.WebView2</code>
文件夹</li>
<li>用普通账户打开(不要用管理员账户运行程序)</li>
</ol>
<h2 id="参考">参考</h2>
<p><a
href="https://github.com/MicrosoftEdge/WebView2Feedback/issues/734">WebView2
WPF application can't open file dialog when it run as
administrator</a></p>
<p><a
href="https://github.com/MicrosoftEdge/WebView2Feedback/issues/728">Cannot
open files dialog</a></p>
<p><a
href="https://github.com/MicrosoftEdge/WebView2Feedback/issues/802#issuecomment-1282930267">File
Open/Save Dialog doesn't show running w/ elevated privileges</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Webview2</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>webview2</tag>
      </tags>
  </entry>
  <entry>
    <title>webview2 打开网页时一片空白</title>
    <url>/posts/2023/1Q13G3F.html</url>
    <content><![CDATA[<p>在 WPF 中使用 <code>webview2</code>
组件来展示网页，若打开之后，界面显示空白，目前读者遇到的可能的原因有：</p>
<ol type="1">
<li>webview2 环境缺失或版本不对</li>
<li>可能安装了某个软件，其注入 dll 到 webview2 失败</li>
</ol>
<p>可以通过以下步骤来详细排查：</p>
<span id="more"></span>
<h2 id="排查-webview2-问题">排查 webview2 问题</h2>
<p>如果 webview2 版本太低或者与使用的 webview2 SDK
不匹配时，也会出现页面空白问题，可以通过或修复 <a
href="https://developer.microsoft.com/zh-cn/microsoft-edge/webview2/">webview2</a>
来排除 webview2 环境影响。</p>
<h2 id="通过代码进行异常排查">通过代码进行异常排查</h2>
<p>首先监听 webview2 事件（不用看逻辑，直接复制使用）：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">webView.CoreWebView2.ProcessFailed += WebView_ProcessFailed;</span><br></pre></td></tr></table></figure>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// WebView_ProcessFailed</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WebView_ProcessFailed</span>(<span class="params"><span class="built_in">object</span> sender, CoreWebView2ProcessFailedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ReinitIfSelectedByUser</span>(<span class="params"><span class="built_in">string</span> caption, <span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Dispatcher.InvokeAsync(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> selection = MessageBox.Show(message, caption, MessageBoxButton.YesNo);</span><br><span class="line">            <span class="keyword">if</span> (selection == MessageBoxResult.Yes)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// The control cannot be re-initialized so we setup a new instance to replace it.</span></span><br><span class="line">                <span class="comment">// Note the previous instance of the control is disposed of and removed from the</span></span><br><span class="line">                <span class="comment">// visual tree before attaching the new one.</span></span><br><span class="line">                <span class="keyword">if</span> (_isControlInVisualTree)</span><br><span class="line">                &#123;</span><br><span class="line">                    RemoveControlFromVisualTree(webView);</span><br><span class="line">                &#125;</span><br><span class="line">                webView.Dispose();</span><br><span class="line">                webView = GetReplacementControl(<span class="literal">false</span>);</span><br><span class="line">                AttachControlToVisualTree(webView);</span><br><span class="line">                <span class="comment">// Set background transparent</span></span><br><span class="line">                webView.DefaultBackgroundColor = System.Drawing.Color.Transparent;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ReloadIfSelectedByUser</span>(<span class="params"><span class="built_in">string</span> caption, <span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Dispatcher.InvokeAsync(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> selection = MessageBox.Show(message, caption, MessageBoxButton.YesNo);</span><br><span class="line">            <span class="keyword">if</span> (selection == MessageBoxResult.Yes)</span><br><span class="line">            &#123;</span><br><span class="line">                webView.Reload();</span><br><span class="line">                <span class="comment">// Set background transparent</span></span><br><span class="line">                webView.DefaultBackgroundColor = System.Drawing.Color.Transparent;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">IsAppContentUri</span>(<span class="params">Uri source</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Sample virtual host name for the app&#x27;s content.</span></span><br><span class="line">        <span class="comment">// See CoreWebView2.SetVirtualHostNameToFolderMapping: https://learn.microsoft.com/dotnet/api/microsoft.web.webview2.core.corewebview2.setvirtualhostnametofoldermapping</span></span><br><span class="line">        <span class="keyword">return</span> source.Host == <span class="string">&quot;appassets.example&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (e.ProcessFailedKind == CoreWebView2ProcessFailedKind.FrameRenderProcessExited)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// A frame-only renderer has exited unexpectedly. Check if reload is needed.</span></span><br><span class="line">        <span class="comment">// In this sample we only reload if the app&#x27;s content has been impacted.</span></span><br><span class="line">        <span class="keyword">foreach</span> (CoreWebView2FrameInfo frameInfo <span class="keyword">in</span> e.FrameInfosForFailedProcess)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (IsAppContentUri(<span class="keyword">new</span> System.Uri(frameInfo.Source)))</span><br><span class="line">            &#123;</span><br><span class="line">                System.Threading.SynchronizationContext.Current.Post((_) =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    ReloadIfSelectedByUser(<span class="string">&quot;App content frame unresponsive&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;Browser render process for app frame exited unexpectedly. Reload page?&quot;</span>);</span><br><span class="line">                &#125;, <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Show the process failure details. Apps can collect info for their logging purposes.</span></span><br><span class="line">    <span class="keyword">this</span>.Dispatcher.InvokeAsync(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        StringBuilder messageBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        messageBuilder.AppendLine(<span class="string">$&quot;Process kind: <span class="subst">&#123;e.ProcessFailedKind&#125;</span>&quot;</span>);</span><br><span class="line">        messageBuilder.AppendLine(<span class="string">$&quot;Reason: <span class="subst">&#123;e.Reason&#125;</span>&quot;</span>);</span><br><span class="line">        messageBuilder.AppendLine(<span class="string">$&quot;Exit code: <span class="subst">&#123;e.ExitCode&#125;</span>&quot;</span>);</span><br><span class="line">        messageBuilder.AppendLine(<span class="string">$&quot;Process description: <span class="subst">&#123;e.ProcessDescription&#125;</span>&quot;</span>);</span><br><span class="line">        MessageBox.Show(messageBuilder.ToString(), <span class="string">&quot;Child process failed&quot;</span>, MessageBoxButton.OK);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (e.ProcessFailedKind == CoreWebView2ProcessFailedKind.BrowserProcessExited)</span><br><span class="line">    &#123;</span><br><span class="line">        ReinitIfSelectedByUser(<span class="string">&quot;Browser process exited&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Browser process exited unexpectedly. Recreate webview?&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (e.ProcessFailedKind == CoreWebView2ProcessFailedKind.RenderProcessUnresponsive)</span><br><span class="line">    &#123;</span><br><span class="line">        ReinitIfSelectedByUser(<span class="string">&quot;Web page unresponsive&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Browser render process has stopped responding. Recreate webview?&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (e.ProcessFailedKind == CoreWebView2ProcessFailedKind.RenderProcessExited)</span><br><span class="line">    &#123;</span><br><span class="line">        ReloadIfSelectedByUser(<span class="string">&quot;Web page unresponsive&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Browser render process exited unexpectedly. Reload page?&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>获取到异常信息后，可以根据异常信息去排查问题。</p>
<h2 id="通过-webview2-运行日志排查问题">通过 webview2
运行日志排查问题</h2>
<p>添加环境变量：<code>WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS = --enable-logging --v=1 --log-file=c:\temp\webview2.log</code>
来捕获 webview2 运行详细日志</p>
<p>通过该详细日志来分析 webview2 报错。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加环境变量</span></span><br><span class="line">[<span class="type">Environment</span>]::SetEnvironmentVariable(<span class="string">&#x27;WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS&#x27;</span>, <span class="string">&#x27;--enable-logging --v=1 --log-file=c:\temp\webview2.log&#x27;</span> , <span class="string">&#x27;User&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空环境变量</span></span><br><span class="line">[<span class="type">Environment</span>]::SetEnvironmentVariable(<span class="string">&#x27;WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS&#x27;</span>, <span class="string">&#x27;--enable-logging --v=1 --log-file=c:\temp\webview2.log&#x27;</span> , <span class="string">&#x27;User&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="已知报错及处理方案">已知报错及处理方案</h2>
<h3
id="错误webview2_child-process-failed-exitcode-1073740760">错误：WebView2_Child
process failed ExitCode:-1073740760</h3>
<p>可以按以下 2 种方式来解决：</p>
<ol type="1">
<li><p>方法 1：卸载影响的软件</p>
<p>通过事件查看器定位是哪个第三方 dll 注入失败，如果找到对应 dll
属于哪个程序，可以对该程序进行修复或者卸载</p>
<p>在 windows 搜索栏中搜索
<code>eventvwr(又叫事件查看器)</code>，打开后找到
【应用程序和服务日志】/【Microsoft】/【Windows】/【CodeIntegrity】/【Operational】，找到错误项进行查看。</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="params">#</span> 例如出现如下错误，说明是 Ldxghijt64.dll 注入失败导致的</span><br><span class="line"></span><br><span class="line">Code Integrity determined that a process (<span class="keyword">\Device</span><span class="keyword">\HarddiskVolume</span>5<span class="keyword">\Program</span> Files (x86)<span class="keyword">\Microsoft</span><span class="keyword">\EdgeWebView</span><span class="keyword">\Application</span><span class="keyword">\1</span>14.0.1823.67<span class="keyword">\msedgewebview</span>2.exe) attempted to load <span class="keyword">\Device</span><span class="keyword">\HarddiskVolume</span>5<span class="keyword">\Windows</span><span class="keyword">\System</span>32<span class="keyword">\Ldxghijt</span>64.dll that did not meet the Microsoft signing level requirements.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>特别说明：</p>
<p>Ldxghijt64.dll 是厦门天税绿盾软件的 dll。</p>
<p>可以在任务管理器中通过搜索 Ld 开头的进程来定位目标位置。</p>
</blockquote></li>
<li><p>方法 2：禁用 dll 注入</p>
<p>可以通过添加环境变量
<code>WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS =--disable-features=RendererCodeIntegrity</code>
来取消第三方 dll 注入</p>
<p>在 powershell(非管理员) 中运行以下命令行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">Environment</span>]::SetEnvironmentVariable(<span class="string">&#x27;WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS&#x27;</span>, <span class="string">&#x27;--disable-features=RendererCodeIntegrity&#x27;</span> , <span class="string">&#x27;User&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>若上述操作不生效，可以通过修改注册表的方式来禁用第三方 dll 注入：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Edge\WebView2&quot;</span> /v RendererCodeIntegrityEnabled /t REG_DWORD /d <span class="number">0</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3
id="错误system.runtime.nteropservices.comexception-0x8007139f">错误：System.Runtime.nteropServices.COMException
(0x8007139F)</h3>
<p>完整的错误如下：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">WebView2 creation failed with exception =</span><br><span class="line">System.Runtime.nteropServices.COMException (0x8007139F): 组或资源的状</span><br><span class="line">态不是执行请求操作的正确状态。(异常来自 HRESULT:Ox8007139F)</span><br><span class="line">在</span><br><span class="line">System.Runtime.lnteropServices.Marshal.ThrowExceptionForHRInternal(Int3</span><br><span class="line">2 errorCode, IntPtr errorlnfo)</span><br><span class="line">在</span><br><span class="line">Microsoft.Web.WebView2.Core.CoreWebView2Environment.&lt;CreateCoreW</span><br><span class="line">ebView2ControllerAsync&gt;d<span class="built_in">_</span>135.MoveNext0</span><br><span class="line">---引发异常的上一位置中堆栈跟踪的末尾 ---</span><br><span class="line">在 System.Runtime.ExceptionServices.ExceptionDispatchlnfo.Throw()</span><br><span class="line">在</span><br><span class="line">System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebu</span><br><span class="line">ggerNotification(Task task)</span><br><span class="line">在</span><br><span class="line">Microsoft.Web.WebView2.Wpf.WebView2.&lt;&gt;c<span class="built_in">_</span>DisplayClass34<span class="built_in">_</span>0.&lt;&lt;Ensur</span><br><span class="line">eCoreWebView2Async&gt;g<span class="built_in">_</span>Init|0&gt;d.MoveNext()</span><br></pre></td></tr></table></figure>
<p>这种情况，一般是 webview2 COM 接口导致的错误，可以通过重装<a
href="https://developer.microsoft.com/zh-cn/microsoft-edge/webview2/">WebView2
- Microsoft Edge Developer</a> 来解决。</p>
<p>如果重装不能完全解决这个问题的话，可以查看 webview2
运行的日志来分析错误。</p>
<p>目前，作者遇到过的问题有：</p>
<ol type="1">
<li><p>DPI（分辨率）的问题</p>
<p>可以在程序上右键【属性/兼容性/更改高 DPI 设置】，选中界面上的 DPI
选项，如下图所示：</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230728123007643.png"
alt="image-20230728123007643" />
<figcaption aria-hidden="true">image-20230728123007643</figcaption>
</figure></li>
</ol>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a
href="https://github.com/MicrosoftEdge/WebView2Feedback/issues/2761#issuecomment-1240969009">WebView2_Child
process failed ExitCode:-1073740760</a></li>
<li><a
href="https://github.com/MicrosoftEdge/WebView2Feedback/issues/3191">Why
webview2 is displayed as a white screen, but other computers can use the
same application</a></li>
<li>https://github.com/MicrosoftEdge/WebView2Feedback/issues/349#issuecomment-1250870240</li>
<li>https://support.templafy.com/hc/en-us/articles/10510746266525-How-to-repair-Webview2-Runtime</li>
<li><a href="https://www.zhihu.com/question/569337543">ldxghijt64.dll
是个什么东西？ - 知乎 (zhihu.com)</a></li>
<li><a
href="https://github.com/MicrosoftEdge/WebView2Feedback/issues/3008#issuecomment-1335747853">https://github.com/MicrosoftEdge/WebView2Feedback/issues/3008#issuecomment-1335747853</a></li>
<li><a
href="https://www.digitalcitizen.life/remove-edit-clear-environment-variables/">How
to edit, clear, and delete environment variables in Windows - Digital
Citizen</a></li>
<li><a
href="https://github.com/MicrosoftEdge/WebView2Feedback/issues/3008">COMException
0x8007139F in Microsoft.Web.WebView2.WinForms.WebView2.d__13.MoveNext
·问题 #3008 ·MicrosoftEdge/WebView2Feedback (github.com)</a></li>
<li><a
href="https://github.com/MicrosoftEdge/WebView2Feedback/issues/2051#issuecomment-1461337741">did
not meet the Microsoft signing level requirements</a></li>
<li><a
href="https://blog.csdn.net/qq_36270361/article/details/111109622">解决Renderer
Code Integrity造成Chrome浏览器崩溃</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Webview2</category>
      </categories>
      <tags>
        <tag>NexT</tag>
        <tag>Webview2</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>.NET Core 单元测试从零基础到项目应用</title>
    <url>/posts/2022/3D1SMMC.html</url>
    <content><![CDATA[<p>本文讲述了如何在 .NET Core
的项目中从零开始搭建单元测试，然后达到项目应用的程度。通过本文，你可以
get 以下知识：</p>
<ul>
<li>.NET 中现有单元测试框架有哪些</li>
<li>为什么选择 MSTest 框架</li>
<li>如何创建一个单元测试</li>
<li>怎么运行单元测试</li>
</ul>
<h2 id="框架选型">框架选型</h2>
<p>我们在使用一种技术时，往往需要对现有技术调研，通过比较最终确定使用哪个。.NET
官方推荐的单元测试有 3 种：xUnit、NUnit、MSTest。</p>
<p>除了标注测试类和方法的特性用的不一样之外，它们是非常相似的。而 MSTest
与 VisualStudio 集成度更高，所以本人建议使用 MSTest。</p>
<p>StackOverflow 看到一条我很赞同的看法：</p>
<blockquote>
<p>其实不用顾虑那么多，随便选择吧，MSTest 对 VS
的集成是最好的，而且也很容易上手，如果哪一天碰到它所无法解决的事情，切换到其他框架也非常简单，仅仅只是Nuget下个包，换下特性而已。</p>
</blockquote>
<h2 id="添加单元测试">添加单元测试</h2>
<p>在 VS 中，选中方法名，右键 -&gt; 创建单元测试，点击确定。</p>
<p>通过上述步骤，VS
会自动创建一个单元测试项目，在该项目里面自动生成单元测试内容。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标记测试类</span></span><br><span class="line">[<span class="meta">TestClass()</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MinioAdapterTests</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 标记测试方法</span></span><br><span class="line">    [<span class="meta">TestMethod()</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BucketExistsAsyncTest</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 在此处编写单元测试代码</span></span><br><span class="line">        Assert.Fail();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="编写测试案例">编写测试案例</h2>
<h3 id="依赖注入怎么测试">依赖注入怎么测试</h3>
<p>ASP.NET Core 支持依赖关系注入 (DI)
软件设计模式，并且默认注入了很多服务，具体可以参考 <a
href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-3.0#framework-provided-services">官方文档</a>,
相信只要使用过依赖注入框架的同学，都会对此有不同深入的理解，在此无需赘言。</p>
<p>然而，在引入 IOC 框架之后，对于之前常规的对于类的依赖（new
Class）变成通过构造函数对于接口的依赖（ASP.NET CORE
默认注入方式），这本身更加符合依赖倒置原则，但是对于单元测试来说确会带来另一个问题：</p>
<p>由于层层依赖，导致在某个类的方法进行测试的时候，需要构造一大堆该类依赖的接口的实现，非常麻烦。</p>
<p>这个时候，我们脑子里会下意识想一个问题：<strong>为什么常用的 .Net
单元测试框架不支持依赖注入？</strong></p>
<p>于是笔者带着这个问题在查阅了一些关于在单元测试中支持依赖注入的讨论<a
href="https://github.com/xunit/xunit/issues/687">Github
Issue</a>,以及其他的相关文档，突然明白一个之前一直忽视但实际却非常重要的问题：</p>
<blockquote>
<p>在对于一个方法的单元测试中，我们应该关注的是这个方法内部的逻辑测试，而这个方法内部对于外部的依赖，则不在这个单元测试关注的范围内</p>
</blockquote>
<p>换言之，单元测试永远都只关注需要测试的方法内部的逻辑实现，至于外部依赖方法的测试，则应该放在另一个专门针对这个方法的单元测试用例中。</p>
<p>弄清楚这个问题，我们才能更加理解另一个单元测试不可缺少的框架——<strong>Mock框架</strong>。在我们写的测试中，应该忽略外部依赖具体的实现，而是通过模拟该接口方法来显示的指定返回值，从而降低该返回值对于当前单元测试结果的影响，而
Mock 框架（例如最常用的Moq），刚好可以满足我们对于接口的模拟需求。</p>
<blockquote>
<p>相信有同学跟我有同样的疑惑，并且当我尝试在 ASP.NET Core
单元测试中的一切外部依赖通过 Mock
的方式进行编写的时候，遇到了一些问题，下文会将这些问题一一道来，希望对有同样疑惑的同学有所帮助。</p>
</blockquote>
<h3 id="mock-框架选择">Mock 框架选择</h3>
<p>在 .NET 中有几种 mock 框架可供选择，比如
NMock、PhinoMocks、FakeItEasy和Moq。尽管Moq相对较新，但是它非常易用。不需要像传统的
Record/Replay。并且使用 Moq 在 VS
中可以得到智能提示。学习成本也不高。</p>
<p>所以选择 <a href="https://github.com/moq/moq4">Moq</a> 作为 Mock
数据框架。Moq 有一个自动 Mock 库 <a
href="https://github.com/moq/Moq.AutoMocker">Moq.AutoMock</a>，建议安装该库。</p>
<h3 id="moq-基本使用">Moq 基本使用</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mock = <span class="keyword">new</span> Mock&lt;ILoveThisLibrary&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// WOW! No record/replay weirdness?! :)</span></span><br><span class="line"><span class="comment">// 给 DownloadExists 传递一个参数，并使其返回 true</span></span><br><span class="line">mock.Setup(library =&gt; library.DownloadExists(<span class="string">&quot;2.0.0.0&quot;</span>))</span><br><span class="line">      .Returns(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use the Object property on the mock to get a reference to the object</span></span><br><span class="line"><span class="comment">// implementing ILoveThisLibrary, and then exercise it by calling</span></span><br><span class="line"><span class="comment">// methods on it</span></span><br><span class="line">ILoveThisLibrary lovable = mock.Object;</span><br><span class="line"><span class="built_in">bool</span> download = lovable.DownloadExists(<span class="string">&quot;2.0.0.0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Verify that the given method was indeed called with the expected value at most once</span></span><br><span class="line">mock.Verify(library =&gt; library.DownloadExists(<span class="string">&quot;2.0.0.0&quot;</span>), Times.AtMostOnce());</span><br></pre></td></tr></table></figure>
<p>上面的方式可以简化成：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">ILoveThisLibrary lovable = Mock.Of&lt;ILoveThisLibrary&gt;(l =&gt;</span><br><span class="line">    l.DownloadExists(<span class="string">&quot;2.0.0.0&quot;</span>) == <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exercise the instance returned by Mock.Of by calling methods on it...</span></span><br><span class="line"><span class="built_in">bool</span> download = lovable.DownloadExists(<span class="string">&quot;2.0.0.0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Simply assert the returned state:</span></span><br><span class="line">Assert.True(download);</span><br><span class="line">  </span><br><span class="line"><span class="comment">// If you really want to go beyond state testing and want to </span></span><br><span class="line"><span class="comment">// verify the mock interaction instead...</span></span><br><span class="line">Mock.Get(lovable).Verify(library =&gt; library.DownloadExists(<span class="string">&quot;2.0.0.0&quot;</span>));</span><br></pre></td></tr></table></figure>
<p>简而言之，Mock 数据的使用步骤可总结如下：</p>
<ol type="1">
<li>新建一个 Mock 实例 <code>mock</code></li>
<li>通过 <code>mock</code> 设置方法的返回值</li>
<li>通过 <code>mock.Object</code> 获取 Mock
的对象来传递给目标方法使用</li>
</ol>
<h3 id="moq.automock-使用">Moq.AutoMock 使用</h3>
<h4 id="基本使用方法">基本使用方法</h4>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mocker = <span class="keyword">new</span> AutoMocker();</span><br><span class="line"><span class="keyword">var</span> car = mocker.CreateInstance&lt;Car&gt;();</span><br><span class="line"></span><br><span class="line">car.DriveTrain.ShouldNotBeNull();</span><br><span class="line">car.DriveTrain.ShouldImplement&lt;IDriveTrain&gt;();</span><br><span class="line">Mock&lt;IDriveTrain&gt; mock = Mock.Get(car.DriveTrain);</span><br></pre></td></tr></table></figure>
<h4 id="注入现有实例">注入现有实例</h4>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mocker = <span class="keyword">new</span> AutoMocker();</span><br><span class="line"></span><br><span class="line">mocker.Use&lt;IDriveTrain&gt;(<span class="keyword">new</span> DriveTrain());</span><br><span class="line"><span class="comment">// OR, setup a Mock</span></span><br><span class="line">mocker.Use&lt;IDriveTrain&gt;(x =&gt; x.Shaft.Length == <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car = mocker.CreateInstance&lt;Car&gt;();</span><br></pre></td></tr></table></figure>
<h2 id="结语">结语</h2>
<h3 id="cicd-流程中应该包含单元测试">CI/CD 流程中应该包含单元测试</h3>
<p>例如在编写 Repository
层进行单元测试时，经常有同学会编写依赖于数据库数据的单元测试，这样并不利于随时随地的进行单元测试检查。</p>
<p>如果将该流程放在 CI/CD
中，在代码的发布过程中通过单元测试可以检查代码逻辑的正确性，同时依赖于数据库的单元测试将不会通过（通常情况下，生产环境和开发环境隔离），变相迫使开发小伙伴通过
mock 方式模拟数据库返回结果。</p>
<p>这个原则同样适用于不能依赖三方API编写单元测试。</p>
<blockquote>
<p>CI/CD 是一种通过在应用开发阶段引入<a
href="https://www.redhat.com/zh/topics/automation/whats-it-automation">自动化</a>来频繁向客户交付应用的方法。CI/CD
的核心概念是持续集成、<a
href="https://www.redhat.com/zh/topics/devops/what-is-continuous-delivery">持续交付</a>和持续部署。作为一个面向开发和运营团队的解决方案，CI/CD
主要针对在集成新代码时所引发的问题（亦称："<a
href="https://www.solutionsiq.com/agile-glossary/integration-hell/">集成地狱</a>"）。</p>
<p><a
href="https://www.redhat.com/zh/topics/devops/what-is-ci-cd">点击查看更多内容</a></p>
</blockquote>
<h3 id="单元测试覆盖率">单元测试覆盖率</h3>
<p>通常很多开发 Leader
都会要求开发团队编写单元测试，但是很少检查单元测试的质量，即单元测试最重要的指标——单元测试代码覆盖率，如果不注重覆盖率的提升，那么很有可能会导致开发成员为了单元测试而写单元测试，预期就会与实际情况相差甚远。</p>
<p>保证单元测试代码覆盖率，将会大大降低代码变更带来的 Bug
率，从而节省整体开发成本。</p>
<h3 id="新人问题为何要写单元测试">新人问题：为何要写单元测试？</h3>
<p>对于初次开始编写单元测试的开发人员，脑中经常会对此表示怀疑：我为什么要去验证一堆我自己写的正确的逻辑？</p>
<p>实际这个问题包含了区分一个一般开发人员和优秀开发人员很重要的一个条件：他是否会反向思考当前逻辑的正确性。有了这种思维，看待问题才会从多个角度入手分析，对问题的本质掌握更加全面。</p>
<p>不要怀疑，坚持写单元测试，因为这本身也是对反向思维的一种锻炼，以笔者的经验，只有当编写过一段时间之后，才会真正认识单元测试的魅力，并且开始非常习惯的在写一段逻辑之后，顺手写了对于它的单元测试。</p>
<p>即使笔者也算很早就开始写单元测试了，但直到写这篇文章，仍然不断在加深对单元测试的认识。</p>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a
href="https://www.cnblogs.com/RobotZero/p/6732728.html">C#常用单元测试框架比较：XUnit,
NUnit, 和 Visual Studio(MSTest)</a></li>
<li><a
href="https://docs.microsoft.com/en-us/dotnet/core/testing/">Testing in
.NET</a></li>
<li><a href="https://www.cnblogs.com/xboo/p/11811838.html">Asp.Net Core
单元测试正确姿势</a></li>
<li><a
href="https://www.cnblogs.com/jara/p/7152843.html">C#单元测试：使用Moq框架Mock对象</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>单元测试</category>
      </categories>
      <tags>
        <tag>.NET Core</tag>
        <tag>单元测试</tag>
      </tags>
  </entry>
  <entry>
    <title>C# 读取嵌入的文件</title>
    <url>/posts/2021/2P07T4K.html</url>
    <content><![CDATA[<p>如何在 C# 中读取嵌入的文件资源？</p>
<span id="more"></span>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读取程序中嵌入的文件</span></span><br><span class="line">Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(<span class="string">&quot;命名空间.文件夹名（多层级用.分隔）.文件名（带后缀）&quot;</span>);</span><br><span class="line">StreamReader sr = <span class="keyword">new</span> StreamReader(stream, Encoding.UTF8); <span class="comment">// 编码格式用utf8，防止中文乱码</span></span><br><span class="line"><span class="keyword">var</span> systemShortcutsConfig = sr.ReadToEnd();</span><br><span class="line">sr.Close();</span><br><span class="line">stream.Close();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>实用代码</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>实用代码</tag>
      </tags>
  </entry>
  <entry>
    <title>数组下标无限循环算法</title>
    <url>/posts/2021/1MAH7MY.html</url>
    <content><![CDATA[<p>在进行数组访问时，为了防止数组溢出，可以在在使用中对下标进行处理。处理代码如下：</p>
<span id="more"></span>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用于for循环中，最大值溢出时返回到开始</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">CycleInt</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">int</span> index, <span class="built_in">int</span> count</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> indexTemp = index % count;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span>) <span class="keyword">return</span> count + indexTemp;</span><br><span class="line">    <span class="keyword">return</span> indexTemp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>实用代码</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>实用代码</tag>
      </tags>
  </entry>
  <entry>
    <title>C# 通过 ()=&gt;obj.Property 的形式获取实例和属性名</title>
    <url>/posts/2022/1A0Q13P.html</url>
    <content><![CDATA[<p>在利用反射编程的时候，我们有时候往往需要通过对象的属性来获取属性名和其对象，例
<code>()=&gt;obj.Property</code>。这样做的好处是：属性名称不再是字符串，而是直接从属性名获取，方便后期维护。</p>
<span id="more"></span>
<h2 id="正文">正文</h2>
<p>实现代码如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">Tuple</span>&lt;<span class="title">object</span>, <span class="title">MemberInfo</span>&gt; <span class="title">GetFieldInfoAndInstance</span>&lt;<span class="title">T</span>&gt;(<span class="params">Expression&lt;Func&lt;T&gt;&gt; lambdaExpression</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 获取 memberInfo</span></span><br><span class="line">    MemberExpression memberExpression = (!(lambdaExpression.Body <span class="keyword">is</span> UnaryExpression expression)) ? ((MemberExpression)lambdaExpression.Body) : ((MemberExpression)expression.Operand);</span><br><span class="line">    MemberInfo memberInfo = memberExpression.Member;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取实例</span></span><br><span class="line">    MemberExpression instanceMemberInfoExp = memberExpression.Expression <span class="keyword">as</span> MemberExpression;</span><br><span class="line">    FieldInfo instanceFieldInfo = instanceMemberInfoExp.Member <span class="keyword">as</span> FieldInfo;</span><br><span class="line">    <span class="keyword">var</span> classInstanceExp = instanceMemberInfoExp.Expression <span class="keyword">as</span> ConstantExpression;</span><br><span class="line">    <span class="keyword">var</span> instance = instanceFieldInfo.GetValue(classInstanceExp.Value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Tuple&lt;<span class="built_in">object</span>, MemberInfo&gt;(instance, memberInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用代码</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// student 是一个学生定义，此处不展示代码</span></span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">// result 第一个值为 student 对象</span></span><br><span class="line"><span class="comment">// result 第二个值为 student 中 Name 相关信息，通过它就可以获取 Name 的名称</span></span><br><span class="line">Tuple&lt;<span class="built_in">object</span>, FieldInfo&gt; result = TestExpression.GetFieldInfoAndInstance(() =&gt; student.Name);</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a
href="https://stackoverflow.com/questions/5092387/how-can-i-get-object-instance-from-foo-title-expression">How
can I get object instance from ()=&gt;foo.Title expression</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>实用代码</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>实用代码</tag>
      </tags>
  </entry>
  <entry>
    <title>C# 中检测 Webview2 是否安装</title>
    <url>/posts/2023/210TYTX.html</url>
    <content><![CDATA[<p>在 C# 中主要有两种方式来检测 Webview2 是否已经安装：</p>
<ol type="1">
<li><p>通过
<code>CoreWebView2Environment.GetAvailableBrowserVersionString()</code>
返回值来判断</p></li>
<li><p>通过注册表值来判断</p>
<blockquote>
<p>这种方式不是很稳定，有时候用户的注册会缺失</p>
</blockquote></li>
</ol>
<span id="more"></span>
<h2
id="getavailablebrowserversionstring-方法">GetAvailableBrowserVersionString()
方法</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">WebView2Install</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InstallInfo <span class="title">GetInfo</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> version = GetWebView2Version();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InstallInfo(version);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetWebView2Version</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> CoreWebView2Environment.GetAvailableBrowserVersionString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception) &#123; <span class="keyword">return</span> <span class="string">&quot;&quot;</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InstallInfo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InstallInfo</span>(<span class="params"><span class="built_in">string</span> version</span>)</span> =&gt; (Version) = (version);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Version &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> InstallType InstallType =&gt; Version <span class="keyword">switch</span></span><br><span class="line">    &#123;</span><br><span class="line">            <span class="keyword">var</span> version <span class="keyword">when</span> version.Contains(<span class="string">&quot;dev&quot;</span>) =&gt; InstallType.EdgeChromiumDev,</span><br><span class="line">            <span class="keyword">var</span> version <span class="keyword">when</span> version.Contains(<span class="string">&quot;beta&quot;</span>) =&gt; InstallType.EdgeChromiumBeta,</span><br><span class="line">            <span class="keyword">var</span> version <span class="keyword">when</span> version.Contains(<span class="string">&quot;canary&quot;</span>) =&gt; InstallType.EdgeChromiumCanary,</span><br><span class="line">            <span class="keyword">var</span> version <span class="keyword">when</span> !<span class="built_in">string</span>.IsNullOrEmpty(version) =&gt; InstallType.WebView2,</span><br><span class="line">            _ =&gt; InstallType.NotInstalled</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> InstallType</span><br><span class="line">&#123;</span><br><span class="line">    WebView2, EdgeChromiumBeta, EdgeChromiumCanary, EdgeChromiumDev, NotInstalled</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="注册表法">注册表法</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">HasWebView2InstalledByReg</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">var</span> key = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(<span class="string">@&quot;SOFTWARE\WOW6432Node\Microsoft\EdgeUpdate\Clients\&#123;F3017226-FE2A-4295-8BDF-00C3A9A7E4C5&#125;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> versionStr = key.GetValue(<span class="string">&quot;pv&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(versionStr == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">string</span>.IsNullOrEmpty(versionStr.ToString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p><a
href="https://stackoverflow.com/questions/64740327/detect-if-webview2-is-installed-on-clients-machine-vb-net">.net
- Detect if WebView2 is installed on clients machine (VB.NET) - Stack
Overflow</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Webview2</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>webview2</tag>
      </tags>
  </entry>
  <entry>
    <title>C# 获取枚举上的 Description 特性值</title>
    <url>/posts/2022/9RVNQC.html</url>
    <content><![CDATA[<p>有些时候，我们会利用枚举来进行数据映射，通过会在枚举上添加
<code>Description</code> 特性来标记映射的值。</p>
<p>本文介绍如何获取枚举上的描述。</p>
<span id="more"></span>
<p>枚举定义：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> BookType</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Descrption(<span class="string">&quot;语文&quot;</span>)</span>]</span><br><span class="line">    Chinese,</span><br><span class="line">    </span><br><span class="line">    [<span class="meta">Descrption(<span class="string">&quot;数学&quot;</span>)</span>]</span><br><span class="line">    Math</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过枚举获取描述：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取枚举的描述值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;enum&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetDescription</span>(<span class="params"><span class="keyword">this</span> Enum @<span class="built_in">enum</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> <span class="keyword">value</span> = @enum.ToString();</span><br><span class="line">    FieldInfo field = @enum.GetType().GetField(<span class="keyword">value</span>);</span><br><span class="line">    <span class="comment">// 获取描述特性，禁止继承的特性</span></span><br><span class="line">    <span class="built_in">object</span>[] objs = field.GetCustomAttributes(<span class="keyword">typeof</span>(DescriptionAttribute), <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当描述特性没有时，直接返回名称</span></span><br><span class="line">    <span class="keyword">if</span> (objs.Length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line"></span><br><span class="line">    DescriptionAttribute descriptionAttribute = (DescriptionAttribute)objs[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> descriptionAttribute.Description;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过描述获取枚举：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 通过描述获取枚举值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;description&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;exception cref=&quot;DllNotFoundException&quot;&gt;</span><span class="doctag">&lt;/exception&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">GetEnumByDescription</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">this</span> <span class="built_in">string</span> description</span>) <span class="keyword">where</span> T : Enum</span></span><br><span class="line">&#123;</span><br><span class="line">    FieldInfo[] fields = <span class="keyword">typeof</span>(T).GetFields();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span>(<span class="keyword">var</span> field <span class="keyword">in</span> fields)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">object</span>[] objs = field.GetCustomAttributes(<span class="keyword">typeof</span>(DescriptionAttribute), <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span>(objs.Length&gt;<span class="number">0</span> &amp;&amp; objs[<span class="number">0</span>] <span class="keyword">is</span> DescriptionAttribute da &amp;&amp; da.Description == description)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (T)field.GetValue(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> DllNotFoundException(<span class="string">$&quot;not found <span class="subst">&#123;description&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>实用代码</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>实用代码</tag>
      </tags>
  </entry>
  <entry>
    <title>非常完善的 Log4net使用说明</title>
    <url>/posts/2020/3T2VKQ2.html</url>
    <content><![CDATA[<h2 id="概述">概述</h2>
<p>log4net 是 .Net 下一个非常优秀的开源日志记录组件。log4net
记录日志的功能非常强大。它可以将日志分不同的等级，以不同的格式，输出到不同的媒介。本文主要是介绍如何在
Visual Studio 中使用 log4net
快速创建系统日志，如何扩展以输出自定义字段。</p>
<span id="more"></span>
<h2 id="一个简单的使用实例">一个简单的使用实例</h2>
<ol type="1">
<li><p>添加 log4net 包</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入到 .csproj 目录</span></span><br><span class="line"><span class="comment"># 执行下列命令安装 logt4net</span></span><br><span class="line">dotnet add package log4net</span><br></pre></td></tr></table></figure></li>
<li><p>创建 log4net 配置文件</p>
<p>在项目根目录（<code>.csproj</code> 所在目录）创建
<code>log4net.config</code>
配置文件，并修改文件属性为：得到到输出目录：始终复制。</p>
<p>配置文件内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">log4net</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--可填值 DE<span class="doctag">BUG:</span>调试 INFO:信息 WARN:警告 ERROR:错误 FATAL:致命--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;rollingFile&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;Mxt&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;trace&quot;</span> <span class="attr">type</span>=<span class="string">&quot;log4net.Appender.TraceAppender,log4net&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">&quot;log4net.Layout.PatternLayout,log4net&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;T %d&#123;ABSOLUTE&#125; %-5p %c&#123;1&#125;:%L - %m%n&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;console&quot;</span> <span class="attr">type</span>=<span class="string">&quot;log4net.Appender.ConsoleAppender, log4net&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">&quot;log4net.Layout.PatternLayout,log4net&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d&#123;ABSOLUTE&#125; %-5p %c&#123;1&#125;:%L - %m%n&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;rollingFile&quot;</span> <span class="attr">type</span>=<span class="string">&quot;log4net.Appender.RollingFileAppender,log4net&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;File&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Logs/log-file&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;AppendToFile&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;RollingStyle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Date&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;DatePattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.yyyy.MM.dd.<span class="symbol">&amp;quot;</span>log<span class="symbol">&amp;quot;</span>&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;StaticLogFileName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter</span> <span class="attr">type</span>=<span class="string">&quot;log4net.Filter.LevelRangeFilter&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;LevelMin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;DEBUG&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;LevelMax&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARN&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">&quot;log4net.Layout.PatternLayout,log4net&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d %-5p [%t] %c - %m%n&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">log4net</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>告诉 log4net 加载配置</p>
<p>在项目中的 <code>AssemblyInfo.cs</code> 文件末尾，追加如下配置：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">[assembly: log4net.Config.XmlConfigurator(ConfigFile = &quot;log4net.config&quot;,Watch = true)]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上述配置相当于在代码中调用：XmlConfigurator.Configure(fileInfo)</p>
</blockquote>
<p>更多配置参考：<a
href="https://logging.apache.org/log4net/release/manual/configuration.html">Apache
log4net – Apache log4net Manual: Configuration - Apache
log4net</a></p></li>
<li><p>使用</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        log.Info(<span class="string">&quot;Hello logging world!&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Hit enter&quot;</span>);</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就将信息同时输出到控制台和写入到文件名为 “Logs-file.txt”
的文件中，也可以定义为绝对路径，配置如：<code>&lt;param name="File" value="C:/log-file.txt" /&gt;</code>
就写入C盘根目录下log-file.txt文件中。</p></li>
</ol>
<h2 id="log4net的主要组成部分">Log4net的主要组成部分</h2>
<h3 id="appenders">Appenders</h3>
<p>Appenders 用来定义日志的输出方式，即日志要写到那种介质上去。较常用的
Log4net
已经实现好了，直接在配置文件中调用即可，可参见上面配置文件例子；当然也可以自己写一个，需要从
<code>log4net.Appender.AppenderSkeleton</code> 类继承。它还可以通过配置
Filters 和 Layout 来实现日志的过滤和输出格式。</p>
<p>已经实现的输出方式有：</p>
<ul>
<li><p>AdoNetAppender 将日志记录到数据库中。可以采用 SQL
和存储过程两种方式。</p></li>
<li><p>AnsiColorTerminalAppender 将日志高亮输出到 ANSI 终端。</p></li>
<li><p>AspNetTraceAppender 能用 asp.net中Trace
的方式查看记录的日志。</p></li>
<li><p>BufferingForwardingAppender 在输出到子 Appenders
之前先缓存日志事件。</p></li>
<li><p>ConsoleAppender 将日志输出到应用程序控制台。</p></li>
<li><p>EventLogAppender 将日志写到 Windows Event Log。</p></li>
<li><p>FileAppender 将日志输出到文件。</p></li>
<li><p>ForwardingAppender 发送日志事件到子 Appenders。</p></li>
<li><p>LocalSyslogAppender 将日志写到 local syslog service (仅用于 UNIX
环境下)。</p></li>
<li><p>MemoryAppender 将日志存到内存缓冲区。</p></li>
<li><p>NetSendAppender 将日志输出到 Windows Messenger service.
这些日志信息将在用户终端的对话框中显示。</p></li>
<li><p>OutputDebugStringAppender 将日志输出到 Debuger，如果程序没有
Debuger，就输出到系统 Debuger。如果系统 Debuger
也不可用，将忽略消息。</p></li>
<li><p>RemoteSyslogAppender 通过 UDP 网络协议将日志写到 Remote syslog
service。</p></li>
<li><p>RemotingAppender 通过 .NET Remoting
将日志写到远程接收端。</p></li>
<li><p>RollingFileAppender 将日志以回滚文件的形式写到文件中。</p></li>
<li><p>SmtpAppender 将日志写到邮件中。</p></li>
<li><p>SmtpPickupDirAppender 将消息以文件的方式放入一个目录中，像 IIS
SMTP agent 这样的 SMTP 代理就可以阅读或发送它们。</p></li>
<li><p>TelnetAppender 客户端通过 Telnet 来接受日志事件。</p></li>
<li><p>TraceAppender 将日志写到 .NET trace 系统。</p></li>
<li><p>UdpAppender 将日志以无连接 UDP 数据报的形式送到远程宿主或用
UdpClient 的形式广播。</p></li>
</ul>
<h3 id="filters">Filters</h3>
<p>使用过滤器可以过滤掉 Appender 输出的内容。过滤器通常有以下几种：</p>
<ul>
<li><p>DenyAllFilter 阻止所有的日志事件被记录</p></li>
<li><p>LevelMatchFilter 只有指定等级的日志事件才被记录</p></li>
<li><p>LevelRangeFilter 日志等级在指定范围内的事件才被记录</p></li>
<li><p>LoggerMatchFilter 与Logger名称匹配，才记录</p></li>
<li><p>PropertyFilter 消息匹配指定的属性值时才被记录</p></li>
<li><p>StringMathFilter 消息匹配指定的字符串才被记录</p></li>
</ul>
<h3 id="layouts">Layouts</h3>
<p>Layout 用于控制 Appender 的输出格式，可以是线性的也可以是 XML。</p>
<p>一个 Appender 只能有一个Layout。</p>
<p>最常用的 Layout 应该是经典格式的 PatternLayout，其次是
SimpleLayout，RawTimeStampLayout 和 ExceptionLayout。然后还有
IRawLayout，XMLLayout 等几个，使用较少。Layout
可以自己实现，需要从log4net.Layout.LayoutSkeleton
类继承，来输出一些特殊需要的格式，在后面扩展时就重新实现了一个
Layout。</p>
<ul>
<li><p>SimpleLayout 简单输出格式，只输出日志级别与消息内容。</p></li>
<li><p>RawTimeStampLayout
用来格式化时间，在向数据库输出时会用到。</p></li>
</ul>
<p>样式如 “yyyy-MM-dd HH:mm:ss“</p>
<ul>
<li><p>ExceptionLayout 需要给 Logger 的方法传入 Exception
对象作为参数才起作用，否则就什么也不输出。输出的时候会包含 Message 和
Trace。</p></li>
<li><p>PatterLayout 使用最多的一个
Layout，能输出的信息很多，使用方式可参见上面例子中的配置文件。PatterLayout
的格式化字符串见文后附注8.1。</p></li>
</ul>
<h3 id="loggers">Loggers</h3>
<p>Logger 是直接和应用程序交互的组件。Logger
只是产生日志，然后由它引用的 Appender 记录到指定的媒介，并由 Layout
控制输出格式。</p>
<p>Logger 提供了多种方式来记录一个日志消息，也可以有多个 Logger
同时存在。每个实例化的 Logger 对象对被log4net 作为命名实体（Named
Entity）来维护。log4net 使用继承体系，也就是说假如存在两个
Logger，名字分别为 a.b.c 和 a.b。那么 a.b 就是 a.b.c 的祖先。每个 Logger
都继承了它祖先的属性。所有的 Logger 都从 Root 继承，Root 本身也是一个
Logger。</p>
<p>日志的等级，它们由高到底分别为：</p>
<p>OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; ALL</p>
<p>高于等级设定值方法（如何设置参见“配置文件详解”）都能写入日志， Off
所有的写入方法都不写到日志里，ALL则相反。例如当我们设成 Info
时，logger.Debug 就会被忽略而不写入文件，但是 FATAL,ERROR,WARN,INFO
会被写入，因为他们等级高于 INFO。</p>
<p>在具体写日志时，一般可以这样理解日志等级：</p>
<ul>
<li><p>FATAL（致命错误）：记录系统中出现的能使用系统完全失去功能，服务停止，系统崩溃等使系统无法继续运行下去的错误。例如，数据库无法连接，系统出现死循环。</p></li>
<li><p>ERROR（一般错误）：记录系统中出现的导致系统不稳定，部分功能出现混乱或部分功能失效一类的错误。例如，数据字段为空，数据操作不可完成，操作出现异常等。</p></li>
<li><p>WARN（警告）：记录系统中不影响系统继续运行，但不符合系统运行正常条件，有可能引起系统错误的信息。例如，记录内容为空，数据内容不正确等。</p></li>
<li><p>INFO（一般信息）：记录系统运行中应该让用户知道的基本信息。例如，服务开始运行，功能已经开户等。</p></li>
<li><p>DEBUG
（调试信息）：记录系统用于调试的一切信息，内容或者是一些关键数据内容的输出。</p></li>
</ul>
<p>Logger 实现的 ILog接口，ILog 定义了 5
个方法（Debug,Inof,Warn,Error,Fatal）分别对不同的日志等级记录日志。这 5
个方法还有 5 个重载。以 Debug 为例说明一下，其它的和它差不多。</p>
<p>ILog中对Debug方法的定义如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Debug</span>(<span class="params"><span class="built_in">object</span> message</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Debug</span>(<span class="params"><span class="built_in">object</span> message, Exception ex</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>还有一个布尔属性：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bool</span> IsDebugEnabled &#123; <span class="keyword">get</span>; &#125;</span><br></pre></td></tr></table></figure>
<p>如果使用 Debug(object message, Exception ex)，则无论 Layout
中是否定义了 %exception，默认配置下日志都会输出 Exception。包括
Exception 的 Message 和 Trace。如果使用 Debug(object
message)，则日志是不会输出 Exception。</p>
<p>最后还要说一个 LogManager 类，它用来管理所有的 Logger。它的 GetLogger
静态方法，可以获得配置文件中相应的 Logger：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">log4net.ILog log = log4net.LogManager.GetLogger(<span class="string">&quot;logger-name&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="object-renders">Object Renders</h3>
<p>它将告诉 logger 如何把一个对象转化为一个字符串记录到日志里。（ILog
中定义的接口接收的参数是 Object，而不是 String。）</p>
<p>例如你想把 Orange 对象记录到日志中，但此时 logger 只会调用 Orange
默认的 ToString 方法而已。所以要定义一个 OrangeRender 类实现
log4net.ObjectRender.IObjectRender
接口，然后注册它（我们在本文中的扩展不使用这种方法，而是直接实现一个自定义的
Layout）。这时 logger 就会知道如何把 Orange 记录到日志中了。</p>
<h3 id="repository">Repository</h3>
<p>Repository 主要用于日志对象组织结构的维护。</p>
<h2 id="配置文件详解">配置文件详解</h2>
<h3 id="配置文件构成">配置文件构成</h3>
<p>主要有两大部分，一是申明一个名为 “log4net“
的自定义配置节，如下所示：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">&lt;configSections&gt;</span><br><span class="line">&lt;section name=<span class="string">&quot;log4net&quot;</span></span><br><span class="line">    type=<span class="string">&quot;log4net.Config.Log4NetConfigurationSectionHandler, log4net&quot;</span> /&gt;</span><br><span class="line">&lt;/configSections&gt;</span><br></pre></td></tr></table></figure>
<p>二是 <code>&lt;log4net&gt;</code>
节的具体配置，这是下面要重点说明的。</p>
<h4 id="log4net"><code>&lt;log4net&gt;</code></h4>
<p>所有的配置都要在 <code>&lt;log4net&gt;</code> 元素里定义。</p>
<p>支持的属性：</p>
<table>
<colgroup>
<col style="width: 11%" />
<col style="width: 88%" />
</colgroup>
<thead>
<tr class="header">
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>debug</td>
<td>可选，取值是true或false，默认是false。设置为true，开启log4net的内部调试。</td>
</tr>
<tr class="even">
<td>update</td>
<td>可选，取值是Merge(合并)或Overwrite(覆盖)，默认值是Merge。设置为Overwrite，在提交配置的时候会重置已经配置过的库。</td>
</tr>
<tr class="odd">
<td>threshold</td>
<td>可选，取值是repository（库）中注册的level，默认值是ALL。</td>
</tr>
</tbody>
</table>
<p>支持的子元素：</p>
<table>
<thead>
<tr class="header">
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>appender</td>
<td>0或多个</td>
</tr>
<tr class="even">
<td>logger</td>
<td>0或多个</td>
</tr>
<tr class="odd">
<td>renderer</td>
<td>0或多个</td>
</tr>
<tr class="even">
<td>root</td>
<td>最多一个</td>
</tr>
<tr class="odd">
<td>param</td>
<td>0或多个</td>
</tr>
</tbody>
</table>
<h4 id="root"><code>&lt;root&gt;</code></h4>
<p>实际上就是一个根 logger，所有其它 logger
都默认继承它，如果配置文件里没有显式定义，则框架使用根日志中定义的属性。root
元素没有属性。</p>
<p>支持的子元素：</p>
<table>
<thead>
<tr class="header">
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>appender-ref</td>
<td>0个或多个，要引用的appender的名字。</td>
</tr>
<tr class="even">
<td>level</td>
<td>最多一个。 只有在这个级别或之上的事件才会被记录。</td>
</tr>
<tr class="odd">
<td>param</td>
<td>0个或多个， 设置一些参数。</td>
</tr>
</tbody>
</table>
<h4 id="logger"><code>&lt;logger&gt;</code></h4>
<p>支持的属性：</p>
<table>
<colgroup>
<col style="width: 15%" />
<col style="width: 84%" />
</colgroup>
<thead>
<tr class="header">
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>name</td>
<td>必须的，logger的名称</td>
</tr>
<tr class="even">
<td>additivity</td>
<td>可选，取值是true或false，默认值是true。设置为false时将阻止父logger中的appender。</td>
</tr>
</tbody>
</table>
<p>支持的子元素：</p>
<table>
<thead>
<tr class="header">
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>appender-ref</td>
<td>0个或多个，要引用的appender的名字。</td>
</tr>
<tr class="even">
<td>level</td>
<td>最多一个。 只有在这个级别或之上的事件才会被记录。</td>
</tr>
<tr class="odd">
<td>param</td>
<td>0个或多个， 设置一些参数。</td>
</tr>
</tbody>
</table>
<h4 id="appender"><code>&lt;appender&gt;</code></h4>
<p>定义日志的输出方式，只能作为 log4net
的子元素。name属性必须唯一，type属性必须指定。</p>
<p>支持的属性：</p>
<table>
<thead>
<tr class="header">
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>name</td>
<td>必须的，Appender对象的名称</td>
</tr>
<tr class="even">
<td>type</td>
<td>必须的，Appender对象的输出类型</td>
</tr>
</tbody>
</table>
<p>支持的子元素：</p>
<table>
<colgroup>
<col style="width: 19%" />
<col style="width: 80%" />
</colgroup>
<thead>
<tr class="header">
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>appender-ref</td>
<td>0个或多个，允许此appender引用其他appender，并不是所以appender类型都支持。</td>
</tr>
<tr class="even">
<td>filter</td>
<td>0个或多个，定义此app使用的过滤器。</td>
</tr>
<tr class="odd">
<td>layout</td>
<td>最多一个。定义appender使用的输出格式。</td>
</tr>
<tr class="even">
<td>param</td>
<td>0个或多个， 设置Appender类中对应的属性的值。</td>
</tr>
</tbody>
</table>
<p>实际上 <code>&lt;appender&gt;</code>
所能包含的子元素远不止上面4个。</p>
<h4 id="layout"><code>&lt;layout&gt;</code></h4>
<p>布局，只能作为 <code>&lt;appender&gt;</code> 的子元素。</p>
<p>支持的属性：</p>
<table>
<thead>
<tr class="header">
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>type</td>
<td>必须的，Layout的类型</td>
</tr>
</tbody>
</table>
<p>支持的子元素：</p>
<table>
<thead>
<tr class="header">
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>param</td>
<td>0个或多个， 设置一些参数。</td>
</tr>
</tbody>
</table>
<h4 id="filter"><code>&lt;filter&gt;</code></h4>
<p>过滤器，只能作为 <code>&lt;appender&gt;</code> 的子元素。</p>
<p>支持的属性：</p>
<table>
<thead>
<tr class="header">
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>type</td>
<td>必须的，Filter的类型</td>
</tr>
</tbody>
</table>
<p>支持的子元素：</p>
<table>
<thead>
<tr class="header">
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>param</td>
<td>0个或多个， 设置一些参数。</td>
</tr>
</tbody>
</table>
<h4 id="param"><code>&lt;param&gt;</code></h4>
<p><code>&lt;param&gt;</code> 元素可以是任何元素的子元素。</p>
<p>支持的属性：</p>
<table>
<colgroup>
<col style="width: 6%" />
<col style="width: 93%" />
</colgroup>
<thead>
<tr class="header">
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>name</td>
<td>必须的，取值是父对象的参数名。</td>
</tr>
<tr class="even">
<td>value</td>
<td>可选的，value和type中，必须有一个属性被指定。value是一个能被转化为参数值的字符串。</td>
</tr>
<tr class="odd">
<td>type</td>
<td>可选的，value和type中，必须有一个属性被指定。type是一个类型名，如果type不是在log4net程序集中定义的，就需要使用全名。</td>
</tr>
</tbody>
</table>
<p>支持的子元素：</p>
<table>
<thead>
<tr class="header">
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>param</td>
<td>0个或多个， 设置一些参数。</td>
</tr>
</tbody>
</table>
<h3 id="appender-配置"><code>&lt;appender&gt;</code> 配置</h3>
<p><code>&lt;appender&gt;</code>
在配置文件中至少有一个，也可以有多个，有些 <code>&lt;appender&gt;</code>
类型还可以引用其他 <code>&lt;appender&gt;</code>
类型，具体参数可参见上表。</p>
<p>下面只对写入回滚文件与输出到数据库（这里使用 SQL
数据库）配置体会说一下，其他配置可参考官方网站：<a
href="http://logging.apache.org/log4net/release/config-examples.html">http://logging.apache.org/log4net/release/config-examples.html</a></p>
<h4 id="写入回滚文件">写入回滚文件</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;ReflectionLayout&quot;</span> <span class="attr">type</span>=<span class="string">&quot;log4net.Appender.RollingFileAppender,log4net&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--日志文件路径，“/”与“/”作用相同，到达的目录相同，文件夹不存在则新建 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--按文件大小方式输出时在这里指定文件名，并且当天的日志在下一天时在文件名后自动追加当天日期形成新文件。--&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!—按照日期形式输出时，直接连接元素 DatePattern 的 value 形成文件路径。此处使用这种方式 --&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--param的名称,可以直接查对应的appender类的属性名即可,这里要查的就是RollingFileAppender类的属性 --&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;File&quot;</span> <span class="attr">value</span>=<span class="string">&quot;D:/Log/&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--是否追加到文件--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;AppendToFile&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--记录日志写入文件时，不锁定文本文件，防止多线程时不能写Log,官方说线程非安全--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">lockingModel</span> <span class="attr">type</span>=<span class="string">&quot;log4net.Appender.FileAppender+MinimalLock&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--使用Unicode编码--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Encoding</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--最多产生的日志文件数，超过则只保留最新的n个。设定值value=&quot;－1&quot;为不限文件数--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;MaxSizeRollBackups&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--是否只写到一个文件中--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;StaticLogFileName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--按照何种方式产生多个日志文件(日期[Date],文件大小[Size],混合[Composite])--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;RollingStyle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Composite&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--按日期产生文件夹和文件名［在日期方式与混合方式下使用］--&gt;</span></span><br><span class="line">       &lt;!—此处按日期产生文件夹，文件名固定。注意&quot; 的位置--&gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;DatePattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yyyy-MM-dd/&quot;</span><span class="attr">ReflectionLayout.log</span>&quot;&quot;  /&gt;</span></span><br><span class="line"></span><br><span class="line">        &lt;!—这是按日期产生文件夹，并在文件名前也加上日期--&gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;DatePattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yyyyMMdd/yyyyMMdd&quot;</span><span class="attr">-TimerServer.log</span>&quot;&quot;  /&gt;</span></span><br><span class="line"></span><br><span class="line">        &lt;!—这是先按日期产生文件夹，再形成下一级固定的文件夹—&gt;</span><br><span class="line">       <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;DatePattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yyyyMMdd/&quot;</span><span class="attr">TimerServer</span>/<span class="attr">TimerServer.log</span>&quot;&quot;  /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--每个文件的大小。只在混合方式与文件大小方式下使用。</span></span><br><span class="line"><span class="comment">超出大小后在所有文件名后自动增加正整数重新命名，数字最大的最早写入。</span></span><br><span class="line"><span class="comment">可用的单位:KB|MB|GB。不要使用小数,否则会一直写入当前日志--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;maximumFileSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;500KB&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--计数类型为1，2，3…--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;CountDirection&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">       &lt;!—过滤设置，LevelRangeFilter为使用的过滤器。 --&gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">filter</span> <span class="attr">type</span>=<span class="string">&quot;log4net.Filter.LevelRangeFilter&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;LevelMin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;DEBUG&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;LevelMax&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARN&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">filter</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--记录的格式。一般用log4net.Layout.PatternLayout布局--&gt;</span></span><br><span class="line">       &lt;!—此处用继承了log4net.Layout.PatternLayout的自定义布局，TGLog.ExpandLayout2</span><br><span class="line">为命名空间。%property&#123;Operator&#125;、%property&#123;Action&#125;是自定义的输出-－&gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">&quot;TGLog.ExpandLayout2.ReflectionLayout,TGLog&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">value</span>=<span class="string">&quot;记录时间：%date 线程ID:[%thread] 日志级别：%-5level 记录类：%logger     操作者ID：%property&#123;Operator&#125; 操作类型：%property&#123;Action&#125;%n             当前机器名:%property%n当前机器名及登录用户：%username   %n               记录位置：%location%n 消息描述：%property&#123;Message&#125;%n                    异常：%exception%n 消息：%message%newline%n%n&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意这些配置属性有些是可选的，如果需要，一定要写正确，否则要么输出的不是自己想要的结果，要么干脆不输出任何信息。</p>
<h4 id="写入sql数据库">写入SQL数据库</h4>
<p>需要在相应的数据库中准备好一张表，创建语句如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">CREATE TABLE [<span class="type">Log</span>] (</span><br><span class="line"></span><br><span class="line"><span class="function">[<span class="type">ID</span>] [<span class="built_in">int</span>] <span class="title">IDENTITY</span></span> (<span class="number">1</span>, <span class="number">1</span>) NOT NULL ,</span><br><span class="line"></span><br><span class="line">[<span class="type">Date</span>] [<span class="built_in">datetime</span>] NOT NULL ,</span><br><span class="line"></span><br><span class="line">[<span class="type">Thread</span>] [<span class="type">varchar</span>] (<span class="number">100</span>) COLLATE Chinese_PRC_CI_AS NULL ,</span><br><span class="line"></span><br><span class="line">[<span class="type">Level</span>] [<span class="type">varchar</span>] (<span class="number">100</span>) COLLATE Chinese_PRC_CI_AS NULL ,</span><br><span class="line"></span><br><span class="line">[<span class="type">Logger</span>] [<span class="type">varchar</span>] (<span class="number">200</span>) COLLATE Chinese_PRC_CI_AS NULL ,</span><br><span class="line"></span><br><span class="line">[<span class="type">Operator</span>] [<span class="built_in">int</span>] NULL ,</span><br><span class="line"></span><br><span class="line">[<span class="type">Message</span>] [<span class="type">text</span>] COLLATE Chinese_PRC_CI_AS NULL ,</span><br><span class="line"></span><br><span class="line">[<span class="type">ActionType</span>] [<span class="built_in">int</span>] NULL ,</span><br><span class="line"></span><br><span class="line">[<span class="type">Operand</span>] [<span class="type">varchar</span>] (<span class="number">300</span>) COLLATE Chinese_PRC_CI_AS NULL ,</span><br><span class="line"></span><br><span class="line">[<span class="type">IP</span>] [<span class="type">varchar</span>] (<span class="number">20</span>) COLLATE Chinese_PRC_CI_AS NULL ,</span><br><span class="line"></span><br><span class="line">[<span class="type">MachineName</span>] [<span class="type">varchar</span>] (<span class="number">100</span>) COLLATE Chinese_PRC_CI_AS NULL ,</span><br><span class="line"></span><br><span class="line">[<span class="type">Browser</span>] [<span class="type">varchar</span>] (<span class="number">50</span>) COLLATE Chinese_PRC_CI_AS NULL ,</span><br><span class="line"></span><br><span class="line">[<span class="type">Location</span>] [<span class="type">text</span>] COLLATE Chinese_PRC_CI_AS NULL ,</span><br><span class="line"></span><br><span class="line">[<span class="type">Exception</span>] [<span class="type">text</span>] COLLATE Chinese_PRC_CI_AS NULL</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;ADONetAppender&quot;</span> <span class="attr">type</span>=<span class="string">&quot;log4net.Appender.ADONetAppender,log4net&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--BufferSize为缓冲区大小，只有日志记录超设定值才会一块写入到数据库--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bufferSize</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span> /&gt;</span>&lt;!—或写为<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;BufferSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span> /&gt;</span>--&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引用--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">connectionType</span> <span class="attr">value</span>=<span class="string">&quot;System.Data.SqlClient.SqlConnection,  System.Data, Version=1.0.3300.0, Culture=neutral,  PublicKeyToken=b77a5c561934e089&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--连接数据库字符串--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">connectionString</span> <span class="attr">value</span>=<span class="string">&quot;data  source=.;initial catalog=Test;integrated security=false;persist  security info=True;User ID=sa;Password=;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--插入到表Log--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">commandText</span> <span class="attr">value</span>=<span class="string">&quot;INSERT  INTO Log  ([Date],[Thread],[Level],[Logger],[Operator],[Message],[ActionType],[Operand],[IP],[MachineName],[Browser],[Location],[Exception])  VALUES (@log_date, @thread, @log_level, @logger,@operator,  @message,@action_type,@operand,@ip,@machineName,@browser,@location,@exception)&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!—日志记录时间，RawTimeStampLayout为默认的时间输出格式 --&gt;</span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;<span class="name">parameter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">parameterName</span> <span class="attr">value</span>=<span class="string">&quot;@log_date&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">dbType</span> <span class="attr">value</span>=<span class="string">&quot;DateTime&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">&quot;log4net.Layout.RawTimeStampLayout&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="comment">&lt;!--线程号--&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;<span class="name">parameter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">parameterName</span> <span class="attr">value</span>=<span class="string">&quot;@thread&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">dbType</span> <span class="attr">value</span>=<span class="string">&quot;String&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!—长度不可以省略，否则不会输出--&gt;</span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">size</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">&quot;log4net.Layout.PatternLayout&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​          <span class="tag">&lt;<span class="name">conversionPattern</span> <span class="attr">value</span>=<span class="string">&quot;%thread&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="comment">&lt;!--日志等级--&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;<span class="name">parameter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">parameterName</span> <span class="attr">value</span>=<span class="string">&quot;@log_level&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">dbType</span> <span class="attr">value</span>=<span class="string">&quot;String&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">size</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">&quot;log4net.Layout.PatternLayout&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​          <span class="tag">&lt;<span class="name">conversionPattern</span> <span class="attr">value</span>=<span class="string">&quot;%level&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="comment">&lt;!--日志记录类名称--&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;<span class="name">parameter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">parameterName</span> <span class="attr">value</span>=<span class="string">&quot;@logger&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">dbType</span> <span class="attr">value</span>=<span class="string">&quot;String&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">size</span> <span class="attr">value</span>=<span class="string">&quot;200&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">&quot;log4net.Layout.PatternLayout&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​          <span class="tag">&lt;<span class="name">conversionPattern</span> <span class="attr">value</span>=<span class="string">&quot;%logger&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​     </span><br><span class="line"></span><br><span class="line">​      <span class="comment">&lt;!--操作者。这个是自定义的输出字段，使用重新实现的布局器ReflectionLayout --&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;<span class="name">parameter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">parameterName</span> <span class="attr">value</span>=<span class="string">&quot;@operator&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!—设置为Int32时只有bufferSize的 value&lt;=&quot;1&quot;才正确输出，没有找出原因。--&gt;</span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">dbType</span> <span class="attr">value</span>=<span class="string">&quot;Int16&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">&quot;TGLog.ExpandLayout2.ReflectionLayout,TGLog&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​          <span class="tag">&lt;<span class="name">conversionPattern</span> <span class="attr">value</span>=<span class="string">&quot;%property&#123;Operator&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="comment">&lt;!--操作对象--&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;<span class="name">parameter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">parameterName</span> <span class="attr">value</span>=<span class="string">&quot;@operand&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">dbType</span> <span class="attr">value</span>=<span class="string">&quot;String&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">size</span> <span class="attr">value</span>=<span class="string">&quot;300&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">&quot;TGLog.ExpandLayout2.ReflectionLayout,TGLog&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​          <span class="tag">&lt;<span class="name">conversionPattern</span> <span class="attr">value</span>=<span class="string">&quot;%property&#123;Operand&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      &lt;!—IP地址--&gt;</span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;<span class="name">parameter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">parameterName</span> <span class="attr">value</span>=<span class="string">&quot;@ip&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">dbType</span> <span class="attr">value</span>=<span class="string">&quot;String&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">size</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">&quot;TGLog.ExpandLayout2.ReflectionLayout,TGLog&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​          <span class="tag">&lt;<span class="name">conversionPattern</span> <span class="attr">value</span>=<span class="string">&quot;%property&#123;IP&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="comment">&lt;!--机器名--&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;<span class="name">parameter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">parameterName</span> <span class="attr">value</span>=<span class="string">&quot;@machineName&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">dbType</span> <span class="attr">value</span>=<span class="string">&quot;String&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">size</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">&quot;TGLog.ExpandLayout2.ReflectionLayout,TGLog&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​          <span class="tag">&lt;<span class="name">conversionPattern</span> <span class="attr">value</span>=<span class="string">&quot;%property&#123;MachineName&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="comment">&lt;!--浏览器--&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;<span class="name">parameter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">parameterName</span> <span class="attr">value</span>=<span class="string">&quot;@browser&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">dbType</span> <span class="attr">value</span>=<span class="string">&quot;String&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">size</span> <span class="attr">value</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">&quot;TGLog.ExpandLayout2.ReflectionLayout,TGLog&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​          <span class="tag">&lt;<span class="name">conversionPattern</span> <span class="attr">value</span>=<span class="string">&quot;%property&#123;Browser&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​     </span><br><span class="line"></span><br><span class="line">​      &lt;!—日志消息--&gt;</span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;<span class="name">parameter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">parameterName</span> <span class="attr">value</span>=<span class="string">&quot;@message&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">dbType</span> <span class="attr">value</span>=<span class="string">&quot;String&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">size</span> <span class="attr">value</span>=<span class="string">&quot;3000&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">&quot;TGLog.ExpandLayout2.ReflectionLayout,TGLog&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​          <span class="tag">&lt;<span class="name">conversionPattern</span> <span class="attr">value</span>=<span class="string">&quot;%property&#123;Message&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="comment">&lt;!--动作类型--&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;<span class="name">parameter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">parameterName</span> <span class="attr">value</span>=<span class="string">&quot;@action_type&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">dbType</span> <span class="attr">value</span>=<span class="string">&quot;Int16&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">&quot;TGLog.ExpandLayout2.ReflectionLayout,TGLog&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​          <span class="tag">&lt;<span class="name">conversionPattern</span> <span class="attr">value</span>=<span class="string">&quot;%property&#123;ActionType&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      &lt;!—记录日志的位置--&gt;</span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;<span class="name">parameter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">parameterName</span> <span class="attr">value</span>=<span class="string">&quot;@location&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">dbType</span> <span class="attr">value</span>=<span class="string">&quot;String&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">size</span> <span class="attr">value</span>=<span class="string">&quot;2000&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">&quot;log4net.Layout.PatternLayout&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​          <span class="tag">&lt;<span class="name">conversionPattern</span> <span class="attr">value</span>=<span class="string">&quot;%location&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​     </span><br><span class="line"></span><br><span class="line">​      &lt;!—异常信息。ExceptionLayout 为异常输出的默认格式--&gt;</span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;<span class="name">parameter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">parameterName</span> <span class="attr">value</span>=<span class="string">&quot;@exception&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">dbType</span> <span class="attr">value</span>=<span class="string">&quot;String&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">size</span> <span class="attr">value</span>=<span class="string">&quot;4000&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">&quot;log4net.Layout.ExceptionLayout&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：</p>
<p>向表中输出的字段不能多于数据表本身字段，而反之则可以，但这些多余字段一定使其可以为空，否则便写不到数据库；</p>
<p>输出字段的类型一定是对应数据表字段数据类型可以隐式转换的，而且长度也不能超过，否则也不能写入；</p>
<p>数据表字段设置尽量可以为空，这样可以避免一条日志记录存在空数据导致后面的日志都记录不了。</p>
<h3 id="logger配置"><code>&lt;logger&gt;</code>配置</h3>
<p>在配置文件 <code>&lt;appender&gt;</code>
中的配置好了输出的介质，格式，过滤方式，还要定义日志对象
<code>&lt;logger&gt;</code>。</p>
<p>在框架的体系里，所有的日志对象都是根日志(root logger)的后代。
因此如果一个日志对象没有在配置文件里显式定义，则框架使用根日志中定义的属性。在
<code>&lt;root&gt;</code> 标签里，可以定义 level 级别值和 Appender
的列表。如果没有定义LEVEL的值，则缺省为DEBUG。可以通过
<code>&lt;appender-ref&gt;</code> 标签定义日志对象使用的 Appender
对象。<code>&lt;appender-ref&gt;</code> 声明了在其他地方定义的 Appender
对象的一个引用。在一个 logger 对象中的设置会覆盖根日志的设置。而对
Appender 属性来说，子日志对象则会继承父日志对象的 Appender
列表。这种缺省的行为方式也可以通过显式地设定 <code>&lt;logger&gt;</code>
标签的 <code>additivity</code> 属性为 false 而改变。</p>
<p><code>&lt;root&gt;</code>
不显式申明时使用默认的配置。我觉得在使用时不定义
<code>&lt;root&gt;</code>，自定义多个<code>&lt;logger&gt;</code>，在程序中记录日志时直接使用<code>&lt;logger&gt;</code>的
name 来查找相应的<code>&lt;logger&gt;</code>，这样更灵活一些。例如：</p>
<!--同时写两个文件和数据库-->
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;ReflectionLayout&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;HashtableLayout&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ReflectionLayout&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ADONetAppender&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="关联配置文件">关联配置文件</h3>
<p>log4net 默认关联的是应用程序的配置文件 App.config (BS 程序是
Web.config)，可以使用程序集自定义属性来进行设置。下面来介绍一下这个自定义属性：<code>log4net.Config.XmlConifguratorAttribute</code>。</p>
<p>XmlConfiguratorAttribute 有 3 个属性：</p>
<ul>
<li>ConfigFile： 配置文件的名字，文件路径相对于应用程序目录</li>
</ul>
<p>(AppDomain.CurrentDomain.BaseDirectory)。ConfigFile 属性不能和
ConfigFileExtension 属性一起使用。</p>
<ul>
<li><p>ConfigFileExtension：
配置文件的扩展名，文件路径相对于应用程序的目录。ConfigFileExtension
属性不能和ConfigFile属性一起使用。</p></li>
<li><p>Watch：
如果将Watch属性设置为true，就会监视配置文件。当配置文件发生变化的时候，就会重新加载。</p></li>
</ul>
<p>如果 ConfigFile 和 ConfigFileExtension
都没有设置，则使用应用程序的配置文件 App.config（Web.config）。</p>
<p>可以在项目的AssemblyInfo.cs文件里添加以下的语句：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 监视默认的配置文件，App.exe.config   </span></span><br><span class="line">[<span class="meta">assembly: log4net.Config.XmlConfigurator(Watch = true)</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监视配置文件，App.exe.log4net。</span></span><br><span class="line">[<span class="meta">assembly: log4net.Config.XmlConfigurator(ConfigFileExtension = <span class="string">&quot;log4net&quot;</span>, Watch = true)</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用配置文件 log4net.config，不监视改变。注意 log4net.config 文件的目录，BS 程序在站点目录 \ 下，CS 则在应用程序启动目录下，如调试时在 /bin/Debug 下，一般将文件属性的文件输出目录调为 \ 始终复制即可</span></span><br><span class="line">[<span class="meta">assembly: log4net.Config.XmlConfigurator(ConfigFile = <span class="string">&quot;log4net.config&quot;</span>)</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用配置文件 App.exe.config ，不监视改变</span></span><br><span class="line">[<span class="meta">assembly: log4net.Config.XmlConfigurator()</span>]</span><br></pre></td></tr></table></figure>
<p>也可以在 Global.asax 的 Application_Start 里或者是 Program.cs 中的
Main 方法中添加，注意这里一定是绝对路径，如下所示：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是在BS程序下，使用自定义的配置文件log4net.xml，使用Server.MapPath(&quot;~&quot;) + //@&quot;/log4net.xml”来取得路径。/log4net.xml为相对于站点的路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ConfigureAndWatch()相当于Configure(Watch = true)</span></span><br><span class="line">log4net.Config.XmlConfigurator.ConfigureAndWatch(<span class="keyword">new</span> System.IO.FileInfo(Server.MapPath(<span class="string">&quot;~&quot;</span>) + <span class="string">@&quot;/log4net.xml&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是在CS程序下，可以用以下方法获得：</span></span><br><span class="line"><span class="built_in">string</span> assemblyFilePath = Assembly.GetExecutingAssembly().Location;</span><br><span class="line"><span class="built_in">string</span> assemblyDirPath = Path.GetDirectoryName(assemblyFilePath);</span><br><span class="line"><span class="built_in">string</span> configFilePath = assemblyDirPath + <span class="string">&quot; //log4net.xml&quot;</span>;</span><br><span class="line">log4net.Config.XmlConfigurator.ConfigureAndWatch(<span class="keyword">new</span> FileInfo(configFilePath));</span><br></pre></td></tr></table></figure>
<p>或直接使用绝对路径：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用自定义的配置文件，直接绝对路径为：c:/log4net.config</span></span><br><span class="line">log4net.Config.XmlConfigurator.Configure(<span class="keyword">new</span> System.IO.FileInfo(<span class="string">@&quot;c:/log4net.config&quot;</span>));</span><br></pre></td></tr></table></figure>
<h2 id="如何记录日志">如何记录日志</h2>
<p>Log4net使用很方便，先申明一个封装类ILog 的对象，如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">log4net.ILog log = log4net.LogManager.GetLogger(<span class="string">&quot;ReflectionLayout&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>其中 "ReflectionLayout" 便是我们自定义的日志对象
<code>&lt;logger&gt;</code> 的 name 的值。</p>
<p>对应5个日志输出级别，log 有 5
个方法，每个方法都有两个重载，使用如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    log.Debug(<span class="string">&quot;这是一个测试！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception ec)</span><br><span class="line">&#123;</span><br><span class="line">    log.Error(<span class="string">&quot;出现错误！&quot;</span>, ec);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果我们需要输出的消息是要区别开来，不按一个字符串全部输出，就需要进行一些扩展了。</p>
<h2 id="log4net的简单扩展">Log4net的简单扩展</h2>
<h3
id="通过重写布局layout输出传入的-message对象的属性">通过重写布局Layout输出传入的
message对象的属性</h3>
<h4 id="重写-layout-类">重写 Layout 类</h4>
<p>通过继承
log4net.Layout.PatternLayout类，使用log4net.Core.LoggingEvent类的方法得到了要输出的message类的名称，然后通过反射得到各个属性的值，使用PatternLayout类AddConverter方法传入得到的值。这里注意要引用用到的类的命名空间。</p>
<p>代码见附注8.2。</p>
<h4 id="配置相应的配置文件">配置相应的配置文件</h4>
<p>配置文件其他地方不用改动，只是需要改动 <code>&lt;appender&gt;</code>
中的 <code>&lt;layout&gt;</code>。例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">&quot;TGLog.ExpandLayout2.ReflectionLayout,TGLog&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;记录时间：%date    操作者ID：%property&#123;Operator&#125; 操作类型：%property&#123;Action&#125;%n  消息描述：%property&#123;Message&#125;%n 异常：%exception%n &quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中 <code>&lt;layout&gt;</code> 的 type 由原来的
log4net.Layout.PatternLayout
换为自定义的TGLog.ExpandLayout2.ReflectionLayout（TGLog.ExpandLayout2为命名空间）。%property{Operator}
输出的即为message类对象的属性Operator的值。数据库配置同样，相应的字段如果是自定义的，则输出选用自定义的<code>&lt;layout&gt;</code>。例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--动作类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parameter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">parameterName</span> <span class="attr">value</span>=<span class="string">&quot;@action_type&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dbType</span> <span class="attr">value</span>=<span class="string">&quot;Int16&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">&quot;TGLog.ExpandLayout2.ReflectionLayout,TGLog&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">conversionPattern</span> <span class="attr">value</span>=<span class="string">&quot;%property&#123;ActionType&#125;&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="程序中如何使用">程序中如何使用</h4>
<p>和一般使用方法基本相同，只是传入的参数是一个自定义的类，类的属性和配置文件中
<code>&lt;layout&gt;</code>
所有的%property{属性}是一致的，即%property{属性}在输出的时候就查找传入message类中有无对应的属性，如果有就输出值，没有则输出null。例：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">log4net.ILog log = log4net.LogManager.GetLogger(<span class="string">&quot;ReflectionLayout&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    log.Debug(<span class="keyword">new</span> LogMessage(<span class="number">1</span>,<span class="string">&quot;操作对象：0&quot;</span>, (<span class="built_in">int</span>)TGLog.ActionType.Other, <span class="string">&quot;这是四个参数测试&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception ec)</span><br><span class="line">&#123;</span><br><span class="line">    log.Error(<span class="keyword">new</span> LogMessage(​<span class="number">1</span>,<span class="string">&quot;操作对象：0&quot;</span>, <span class="string">&quot;192.168.1.1&quot;</span>,<span class="string">&quot;MyComputer&quot;</span>,<span class="string">&quot;Maxthon(MyIE2)Fans&quot;</span>),ec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>LogMessage的全部属性的构造方法如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LogMessage</span>(<span class="params"><span class="built_in">int</span> operatorID,<span class="built_in">string</span> operand,<span class="built_in">int</span> ActionType,<span class="built_in">string</span> message,<span class="built_in">string</span> ip,<span class="built_in">string</span> machineName,<span class="built_in">string</span> browser</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3
id="通过重新实现ilog接口来增加输入的参数">通过重新实现ILog接口来增加输入的参数</h3>
<h4
id="重写logimpllogmanager类及实现ilog接口">重写LogImpl，LogManager类及实现ILog接口</h4>
<p>这种方式是通过构造一个名为IMyLog接口，是继承Ilog接口而来，然后分别在MyLogImpl，MyLogManager重新实现IMyLog接口，增加了每种方法的参数。MyLogImpl，MyLogManager分别继承LogImpl，LogManager而来。</p>
<p>代码分别见 8.3、8.4、8.5：</p>
<h4 id="配置相应的配置文件-1">配置相应的配置文件</h4>
<p>配置文件其他地方不用改动，只是需要改动<appender>中的<layout>元素name为ConversionPattern的value中输出格式。例如：</p>
<p><layout type=" log4net.Layout.PatternLayout "></p>
<p>​ <param name="ConversionPattern"

 value="记录时间：%date    操作者ID：%property{Operator}             

操作类型：%property{Action}%n  消息描述：%property{Message}%n                    异常：%exception%n " /></p>
<p>​ </layout></p>
<p>%property{参数}中的参数在MyLogImpl类中定义，如语句：</p>
<p>loggingEvent.Properties["Operator"] = operatorID;</p>
<p>就定义了Operator输出参数，即%property{Operator}输出的即为IMyLog中的参数operatorID的值。</p>
<p>数据库配置同样。例：</p>
<!--动作类型-->
<p><parameter></p>
<p>​ <parameterName value="@action_type" /></p>
<p>​ <dbType value="Int16" /></p>
<p>​ <layout type=" log4net.Layout.PatternLayout "></p>
<p>​ <conversionPattern value="%property{ActionType}" /></p>
<p>​ </layout></p>
<p></parameter></p>
<h4 id="程序中如何使用-1">程序中如何使用</h4>
<p>先引用IMyLog
，MyLogManager所在的命名空间，创建一个IMyLog对象，myLog的5
个方法，每个方法都有四个重载，增加了多参数的重载。例：</p>
<p>IMyLog myLog = MyLogManager.GetLogger("ExpandILog");</p>
<p>try</p>
<p>​ {</p>
<p>myLog.Debug("这是一个参数重载测试!");</p>
<p>}</p>
<p>​ catch(Exception ec)</p>
<p>​ {</p>
<p>​ log.Error(</p>
<p>​ 1,</p>
<p>​ "操作对象：0",</p>
<p>​ (int)TGLog.ActionType.Other,</p>
<p>​ "这是全部参数测试",</p>
<p>​ "192.168.1.1",</p>
<p>​ "MyComputer",</p>
<p>​ "Maxthon(MyIE2)Fans",</p>
<p>​ ec</p>
<p>);</p>
<p>​ }</p>
<h2 id="总结">总结</h2>
<p>Log4net
功能很多，这里只是对已经尝试用过的功能总结一下，普通写日志已经足够。需要注意的是：</p>
<ol type="1">
<li><p>Log4net本身也有一些缺陷，比如一个记录引起了log4net本身的异常，就会使后面的日志无法记录下来，尤其是在写入数据库时。例如使用6.1扩展后，int型的属性在
<code>&lt;appender&gt;</code> 的元素 <code>&lt;bufferSize&gt;</code>
设置不为1时，<code>&lt;dbType value="Int32" /&gt;</code>时，就不能输出到数据库，而
<code>&lt;dbType value="Int16"</code>&gt;` 则没任何问题。</p></li>
<li><p>Log4net本身出现了异常，比如配置文件出现错误，有些日志输出方式会记录下这些异常，例如应用程序控制台；有些则不会输出这些错误，如数据库与文件。</p></li>
<li><p>扩展时也会留下一些问题。例如在使用6.1扩展输出字段时就会出现，在log.debug(object
message)中，如果message是一个自定义的类，属性与配置文件中输出设置也一致，构造函数时也只构造一个参数的实例，写文件与写数据库都成功，而将message按没有扩展的方式直接传入一个字符串，即log.debug(“信息内容”)使用则只能写入文件，而数据库则没写入。自定义的Layout
就是继承默认的PatternLayout，本来不应该出错，但出现了问题。原因分析是自定义的message类有类型为int的属性，作为一个对象传入时在默认值0，而直接使用字符串则int型的字段得不到默认值，引发异常。所以建议在有扩展存在时，最好多设几个<logger>,区分清楚，按照统一的形式记录日志，不要混合使用。</p></li>
<li><p>配置文件的设置一定要准确，在一点不正确就会导致日志不能正常输出，所以在配置时先从最简单的开始，同时输出方式选择一种能输出log4net本身异常的方式，成功后一点一点加在新配置，这样出错了也容易找到那个地方配置有问题。</p></li>
<li><p>log4net扩展性很强，几乎所有的组件都可以重写，在配置文件中配置好就可以使用。</p></li>
</ol>
<h2 id="附注">附注</h2>
<h3 id="patterlayout格式化字符表">PatterLayout格式化字符表</h3>
<table>
<colgroup>
<col style="width: 2%" />
<col style="width: 97%" />
</colgroup>
<thead>
<tr class="header">
<th>转换字符</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>a</td>
<td>等价于appdomain</td>
</tr>
<tr class="even">
<td>appdomain</td>
<td>引发日志事件的应用程序域的友好名称。（使用中一般是可执行文件的名字。）</td>
</tr>
<tr class="odd">
<td>c</td>
<td>等价于 logger</td>
</tr>
<tr class="even">
<td>C</td>
<td>等价于 type</td>
</tr>
<tr class="odd">
<td>class</td>
<td>等价于 type</td>
</tr>
<tr class="even">
<td>d</td>
<td>等价于 date</td>
</tr>
<tr class="odd">
<td>date</td>
<td>发生日志事件的本地时间。 使用 DE&gt;%utcdate
输出UTC时间。date后面还可以跟一个日期格式，用大括号括起来。DE&gt;例如：%date{HH:mm:ss,fff}或者%date{dd
MMM yyyy HH:mm:ss,fff}。如果date后面什么也不跟，将使用ISO8601 格式
。日期格式和.Net中DateTime类的ToString方法中使用的格式是一样。另外log4net还有3个自己的格式Formatter。
它们是 "ABSOLUTE", "DATE"和"ISO8601"分别代表 AbsoluteTimeDateFormatter,
DateTimeDateFormatter和Iso8601DateFormatter。例如：%date{ISO8601}或%date{ABSOLUTE}。它们的性能要好于ToString。</td>
</tr>
<tr class="even">
<td>exception</td>
<td>异常信息日志事件中必须存了一个异常对象，如果日志事件不包含没有异常对象，将什么也不输出。异常输出完毕后会跟一个换行。一般会在输出异常前加一个换行，并将异常放在最后。</td>
</tr>
<tr class="odd">
<td>F</td>
<td>等价于 file</td>
</tr>
<tr class="even">
<td>file</td>
<td>发生日志请求的源代码文件的名字。警告：只在调试的时候有效。调用本地信息会影响性能。</td>
</tr>
<tr class="odd">
<td>identity</td>
<td>当前活动用户的名字(Principal.Identity.Name).警告：会影响性能。（我测试的时候%identity返回都是空的。）</td>
</tr>
<tr class="even">
<td>l</td>
<td>等价于 location</td>
</tr>
<tr class="odd">
<td>L</td>
<td>等价于 line</td>
</tr>
<tr class="even">
<td>location</td>
<td>引发日志事件的方法（包括命名空间和类名），以及所在的源文件和行号。警告：会影响性能。没有pdb文件的话，只有方法名，没有源文件名和行号。</td>
</tr>
<tr class="odd">
<td>level</td>
<td>日志事件等级</td>
</tr>
<tr class="even">
<td>line</td>
<td>引发日志事件的行号警告：会影响性能。</td>
</tr>
<tr class="odd">
<td>logger</td>
<td>记录日志事件的Logger对象的名字。可以使用精度说明符控制Logger的名字的输出层级，默认输出全名。注意，精度符的控制是从右开始的。例如：logger
名为 "a.b.c"， 输出模型为%logger{2} ，将输出"b.c"。</td>
</tr>
<tr class="even">
<td>m</td>
<td>等价于 message</td>
</tr>
<tr class="odd">
<td>M</td>
<td>等价于 method</td>
</tr>
<tr class="even">
<td>message</td>
<td>由应用程序提供给日志事件的消息。</td>
</tr>
<tr class="odd">
<td>mdc</td>
<td>MDC (旧为：ThreadContext.Properties) 现在是事件属性的一部分。
保留它是为了兼容性，它等价于 property。</td>
</tr>
<tr class="even">
<td>method</td>
<td>发生日志请求的方法名（只有方法名而已）。警告：会影响性能。</td>
</tr>
<tr class="odd">
<td>n</td>
<td>等价于 newline</td>
</tr>
<tr class="even">
<td>newline</td>
<td>换行符</td>
</tr>
<tr class="odd">
<td>ndc</td>
<td>NDC (nested diagnostic context)</td>
</tr>
<tr class="even">
<td>p</td>
<td>等价于 level</td>
</tr>
<tr class="odd">
<td>P</td>
<td>等价于 property</td>
</tr>
<tr class="even">
<td>properties</td>
<td>等价于 property</td>
</tr>
<tr class="odd">
<td>property</td>
<td>输出事件的特殊属性。例如： %property{user}
输出user属性。属性是由loggers或appenders添加到时间中的。
有一个默认的属性"DE&gt;log4net:HostName"总是会有。DE&gt;%property将输出所有的属性
。（扩展后可以使用）</td>
</tr>
<tr class="even">
<td>r</td>
<td>等价于 timestamp</td>
</tr>
<tr class="odd">
<td>t</td>
<td>等价于 thread</td>
</tr>
<tr class="even">
<td>timestamp</td>
<td>从程序启动到事件发生所经过的毫秒数。</td>
</tr>
<tr class="odd">
<td>thread</td>
<td>引发日志事件的线程，如果没有线程名就使用线程号。</td>
</tr>
<tr class="even">
<td>type</td>
<td>引发日志请求的类的全名。.可以使用精度控制符。例如： 类名是
"log4net.Layout.PatternLayout", 格式模型是%type{1}
将输出"PatternLayout"。（也是从右开始的。）警告：会影响性能。</td>
</tr>
<tr class="odd">
<td>u</td>
<td>等价于 identity</td>
</tr>
<tr class="even">
<td>username</td>
<td>当前用户的WindowsIdentity。（类似：HostName/Username）警告：会影响性能。</td>
</tr>
<tr class="odd">
<td>utcdate</td>
<td>发生日志事件的UTC时间。DE&gt;后面还可以跟一个日期格式，用大括号括起来。DE&gt;例如：%utcdate{HH:mm:ss,fff}或者%utcdate{dd
MMM yyyy HH:mm:ss,fff}。如果utcdate后面什么也不跟，将使用ISO8601 格式
。日期格式和.Net中DateTime类的ToString方法中使用的格式是一样。另外log4net还有3个自己的格式Formatter。
它们是 "ABSOLUTE", "DATE"和"ISO8601"分别代表 AbsoluteTimeDateFormatter,
DateTimeDateFormatter和Iso8601DateFormatter。例如：%date{ISO8601}或%date{ABSOLUTE}。它们的性能要好于ToString。</td>
</tr>
<tr class="even">
<td>w</td>
<td>等价于 username</td>
</tr>
<tr class="odd">
<td>x</td>
<td>等价于 ndc</td>
</tr>
<tr class="even">
<td>X</td>
<td>等价于 mdc</td>
</tr>
<tr class="odd">
<td>%</td>
<td>%%输出一个百分号</td>
</tr>
</tbody>
</table>
<p>关于调用本地信息（caller location information）的说明：</p>
<p>%type %file %line %method %location %class %C %F %L %l %M
都会调用本地信息。这样做会影响性能。本地信息使用System.Diagnostics.StackTrace得到。.Net
1.0 不支持System.Diagnostics.StackTrace 类。</p>
<p>本地信息在调试模式下可以正常获取，在非调试模式下可能获取不到，或只能获取一部分。（根据我的测试，其实是需要有一个程序数据库（.pdb）文件。）</p>
<p>%property属性要用代码来设置才能使用（也就是扩展一下），</p>
<p>默认属性log4net:HostName不用设置。</p>
<p>转义字符的修饰符：</p>
<table>
<colgroup>
<col style="width: 17%" />
<col style="width: 14%" />
<col style="width: 15%" />
<col style="width: 15%" />
<col style="width: 36%" />
</colgroup>
<thead>
<tr class="header">
<th>Format modifier</th>
<th>left justify</th>
<th>minimum width</th>
<th>maximum width</th>
<th>comment</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>%20logger</td>
<td>false</td>
<td>20</td>
<td>none</td>
<td>如果logger名不足20个字符，就在左边补空格。</td>
</tr>
<tr class="even">
<td>%-20logger</td>
<td>true</td>
<td>20</td>
<td>none</td>
<td>如果logger名不足20个字符，就在右边补空格。</td>
</tr>
<tr class="odd">
<td>%.30logger</td>
<td>NA</td>
<td>none</td>
<td>30</td>
<td>超过30个字符将截断。</td>
</tr>
<tr class="even">
<td>%20.30logger</td>
<td>false</td>
<td>20</td>
<td>30</td>
<td>logger名要在20到30之间，少了在左边补空格，多了截断。</td>
</tr>
<tr class="odd">
<td>%-20.30logger</td>
<td>true</td>
<td>20</td>
<td>30</td>
<td>logger名要在20到30之间，少了在右边补空格，多了截断。</td>
</tr>
</tbody>
</table>
<h3 id="layout类代码">Layout类代码</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> log4net.Layout;</span><br><span class="line"><span class="keyword">using</span> log4net.Layout.Pattern;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> FastReflectionLib;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">TGLog.ExpandLayout2</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ReflectionLayout</span> : <span class="title">PatternLayout</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">ReflectionLayout</span>()</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">this</span>.AddConverter(<span class="string">&quot;property&quot;</span>, <span class="keyword">typeof</span>(ReflectionPatternConverter));</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ReflectionPatternConverter</span> : <span class="title">PatternLayoutConverter</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Convert</span>(<span class="params">System.IO.TextWriter writer, log4net.Core.LoggingEvent loggingEvent</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span> (Option != <span class="literal">null</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">// 写入指定键的值</span></span><br><span class="line">               WriteObject(writer, loggingEvent.Repository, LookupProperty(Option, loggingEvent));</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">// 写入所有关键值对</span></span><br><span class="line">               WriteDictionary(writer,loggingEvent.Repository, loggingEvent.GetProperties());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> 通过反射获取传入的日志对象的某个属性的值</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;property&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="built_in">object</span> <span class="title">LookupProperty</span>(<span class="params"><span class="built_in">string</span> property, log4net.Core.LoggingEvent loggingEvent</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="built_in">object</span> propertyValue = <span class="built_in">string</span>.Empty;</span><br><span class="line">           PropertyInfo propertyInfo =loggingEvent.MessageObject.GetType().GetProperty(property);</span><br><span class="line">           <span class="keyword">if</span> (propertyInfo != <span class="literal">null</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               propertyValue =propertyInfo.GetValue(loggingEvent.MessageObject, <span class="literal">null</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> propertyValue;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="mylogimpl类代码">MyLogImpl类代码</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> log4net.Core;</span><br><span class="line"><span class="keyword">using</span> log4net.Repository.Hierarchy;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> Bentley.DgnPlatformNET.DgnEC.PropertyCriterion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">TGLog.ExpandILog</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyLogImpl</span> : <span class="title">LogImpl</span>, <span class="title">IMyLog</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> The fully qualified name of this declaring type not the type of any subclass.</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">static</span> Type ThisDeclaringType = <span class="keyword">typeof</span>(MyLogImpl);</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">MyLogImpl</span>(<span class="params">ILogger logger</span>)</span></span><br><span class="line"><span class="function">           : <span class="title">base</span>(<span class="params">logger</span>)</span></span><br><span class="line">       &#123;       </span><br><span class="line">       &#125;</span><br><span class="line">       <span class="meta">#<span class="keyword">region</span> Implementation of IMyLog</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Debug</span>(<span class="params"><span class="built_in">int</span> operatorID, <span class="built_in">string</span> operand, <span class="built_in">int</span> actionType, <span class="built_in">object</span> message, <span class="built_in">string</span> ip, <span class="built_in">string</span> browser, <span class="built_in">string</span> machineName</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           Debug(operatorID, operand, actionType, message, ip, browser, machineName, <span class="literal">null</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Debug</span>(<span class="params"><span class="built_in">int</span> operatorID, <span class="built_in">string</span> operand, <span class="built_in">int</span> actionType, <span class="built_in">object</span> message, <span class="built_in">string</span> ip, <span class="built_in">string</span> browser, <span class="built_in">string</span> machineName, System.Exception t</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">this</span>.IsDebugEnabled)</span><br><span class="line">           &#123;</span><br><span class="line">               LoggingEvent loggingEvent = <span class="keyword">new</span> LoggingEvent(ThisDeclaringType, Logger.Repository,</span><br><span class="line">                                      Logger.Name, Level.Info, message, t);</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;Operator&quot;</span>] = operatorID;</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;Operand&quot;</span>] = operand;</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;ActionType&quot;</span>] = actionType;</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;IP&quot;</span>] = ip;</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;Browser&quot;</span>] = browser;</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;MachineName&quot;</span>] = machineName;</span><br><span class="line">               Logger.Log(loggingEvent);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Info</span>(<span class="params"><span class="built_in">int</span> operatorID, <span class="built_in">string</span> operand, <span class="built_in">int</span> actionType, <span class="built_in">object</span> message,<span class="built_in">string</span> ip, <span class="built_in">string</span> browser, <span class="built_in">string</span> machineName</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           Info(operatorID, operand, actionType, message, ip, browser, machineName, <span class="literal">null</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Info</span>(<span class="params"><span class="built_in">int</span> operatorID, <span class="built_in">string</span> operand, <span class="built_in">int</span> actionType, <span class="built_in">object</span> message, <span class="built_in">string</span> ip, <span class="built_in">string</span> browser, <span class="built_in">string</span> machineName, System.Exception t</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">this</span>.IsInfoEnabled)</span><br><span class="line">           &#123;</span><br><span class="line">               LoggingEvent loggingEvent = <span class="keyword">new</span> LoggingEvent(ThisDeclaringType, Logger.Repository, Logger.Name, Level.Info, message, t);</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;Operator&quot;</span>] = operatorID;</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;Operand&quot;</span>] = operand;</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;ActionType&quot;</span>] = actionType;</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;IP&quot;</span>] = ip;</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;Browser&quot;</span>] = browser;</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;MachineName&quot;</span>] = machineName;</span><br><span class="line">               Logger.Log(loggingEvent);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Warn</span>(<span class="params"><span class="built_in">int</span> operatorID, <span class="built_in">string</span> operand, <span class="built_in">int</span> actionType, <span class="built_in">object</span> message,<span class="built_in">string</span> ip, <span class="built_in">string</span> browser, <span class="built_in">string</span> machineName</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           Warn(operatorID, operand, actionType, message, ip, browser, machineName, <span class="literal">null</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Warn</span>(<span class="params"><span class="built_in">int</span> operatorID, <span class="built_in">string</span> operand, <span class="built_in">int</span> actionType, <span class="built_in">object</span> message, <span class="built_in">string</span> ip, <span class="built_in">string</span> browser, <span class="built_in">string</span> machineName, System.Exception t</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">this</span>.IsWarnEnabled)</span><br><span class="line">           &#123;</span><br><span class="line">               LoggingEvent loggingEvent = <span class="keyword">new</span> LoggingEvent(ThisDeclaringType, Logger.Repository,Logger.Name, Level.Info, message, t);</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;Operator&quot;</span>] = operatorID;</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;Operand&quot;</span>] = operand;</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;ActionType&quot;</span>] = actionType;</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;IP&quot;</span>] = ip;</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;Browser&quot;</span>] = browser;</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;MachineName&quot;</span>] = machineName;</span><br><span class="line">               Logger.Log(loggingEvent);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Error</span>(<span class="params"><span class="built_in">int</span> operatorID, <span class="built_in">string</span> operand, <span class="built_in">int</span> actionType, <span class="built_in">object</span> message,<span class="built_in">string</span> ip, <span class="built_in">string</span> browser, <span class="built_in">string</span> machineName</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           Error(operatorID, operand, actionType, message, ip, browser, machineName, <span class="literal">null</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Error</span>(<span class="params"><span class="built_in">int</span> operatorID, <span class="built_in">string</span> operand, <span class="built_in">int</span> actionType, <span class="built_in">object</span> message, <span class="built_in">string</span> ip, <span class="built_in">string</span> browser, <span class="built_in">string</span> machineName, System.Exception t</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">this</span>.IsErrorEnabled)</span><br><span class="line">           &#123;</span><br><span class="line">               LoggingEvent loggingEvent = <span class="keyword">new</span> LoggingEvent(ThisDeclaringType, Logger.Repository, Logger.Name, Level.Info, message, t);</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;Operator&quot;</span>] = operatorID;</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;Operand&quot;</span>] = operand;</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;ActionType&quot;</span>] = actionType;</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;IP&quot;</span>] = ip;</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;Browser&quot;</span>] = browser;</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;MachineName&quot;</span>] = machineName;</span><br><span class="line">               Logger.Log(loggingEvent);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fatal</span>(<span class="params"><span class="built_in">int</span> operatorID, <span class="built_in">string</span> operand, <span class="built_in">int</span> actionType, <span class="built_in">object</span> message, <span class="built_in">string</span> ip, <span class="built_in">string</span> browser, <span class="built_in">string</span> machineName</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           Fatal(operatorID, operand, actionType, message, ip, browser, machineName, <span class="literal">null</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fatal</span>(<span class="params"><span class="built_in">int</span> operatorID, <span class="built_in">string</span> operand, <span class="built_in">int</span> actionType, <span class="built_in">object</span> message, <span class="built_in">string</span> ip, <span class="built_in">string</span> browser, <span class="built_in">string</span> machineName, System.Exception t</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">this</span>.IsFatalEnabled)</span><br><span class="line">           &#123;</span><br><span class="line">               LoggingEvent loggingEvent = <span class="keyword">new</span> LoggingEvent(ThisDeclaringType, Logger.Repository, Logger.Name, Level.Info, message, t);</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;Operator&quot;</span>] = operatorID;</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;Operand&quot;</span>] = operand;</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;ActionType&quot;</span>] = actionType;</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;IP&quot;</span>] = ip;</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;Browser&quot;</span>] = browser;</span><br><span class="line">               loggingEvent.Properties[<span class="string">&quot;MachineName&quot;</span>] = machineName;</span><br><span class="line">               Logger.Log(loggingEvent);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="mylogmanager类代码">MyLogManager类代码</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Copyright 2001-2005 The Apache Software Foundation</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">// you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">// You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">// distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">// See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">// limitations under the License.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> log4net;</span><br><span class="line"><span class="keyword">using</span> log4net.Core;</span><br><span class="line"><span class="keyword">using</span> log4net.Repository;</span><br><span class="line"><span class="keyword">using</span> log4net.Repository.Hierarchy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">TGLog.ExpandILog</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyLogManager</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="meta">#<span class="keyword">region</span> Static Member Variables</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> The wrapper map to use to hold the <span class="doctag">&lt;see cref=&quot;EventIDLogImpl&quot;/&gt;</span> objects</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> WrapperMap s_wrapperMap = <span class="keyword">new</span> WrapperMap(newWrapperCreationHandler(WrapperCreationHandler));</span><br><span class="line">       <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">       <span class="meta">#<span class="keyword">region</span> Constructor</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> Private constructor to prevent object creation</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="title">MyLogManager</span>()</span> &#123; &#125;</span><br><span class="line">       <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">       <span class="meta">#<span class="keyword">region</span> Type Specific Manager Methods</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> Returns the named logger if it exists</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>If the named logger exists (in the default hierarchy) then it</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> returns a reference to the logger, otherwise it returns</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;c&gt;</span>null<span class="doctag">&lt;/c&gt;</span>.<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span>The fully qualified logger name to look for<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>The logger found, or null<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IMyLog <span class="title">Exists</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">return</span> Exists(Assembly.GetCallingAssembly(), name);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> Returns the named logger if it exists</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>If the named logger exists (in the specified domain) then it</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> returns a reference to the logger, otherwise it returns</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;c&gt;</span>null<span class="doctag">&lt;/c&gt;</span>.<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;domain&quot;&gt;</span>the domain to lookup in<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span>The fully qualified logger name to look for<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>The logger found, or null<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IMyLog <span class="title">Exists</span>(<span class="params"><span class="built_in">string</span> domain, <span class="built_in">string</span> name</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">return</span> WrapLogger(LoggerManager.Exists(domain, name));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> Returns the named logger if it exists</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>If the named logger exists (in the specified assembly&#x27;s domain) then it</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> returns a reference to the logger, otherwise it returns</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;c&gt;</span>null<span class="doctag">&lt;/c&gt;</span>.<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;assembly&quot;&gt;</span>the assembly to use to lookup the domain<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span>The fully qualified logger name to look for<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>The logger found, or null<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IMyLog <span class="title">Exists</span>(<span class="params">Assembly assembly, <span class="built_in">string</span> name</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">return</span> WrapLogger(LoggerManager.Exists(assembly, name));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> Returns all the currently defined loggers in the default domain.</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>The root logger is <span class="doctag">&lt;b&gt;</span>not<span class="doctag">&lt;/b&gt;</span> included in the returned array.<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>All the defined loggers<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IMyLog[] <span class="title">GetCurrentLoggers</span>()</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">return</span> GetCurrentLoggers(Assembly.GetCallingAssembly());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> Returns all the currently defined loggers in the specified domain.</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;domain&quot;&gt;</span>the domain to lookup in<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> The root logger is <span class="doctag">&lt;b&gt;</span>not<span class="doctag">&lt;/b&gt;</span> included in the returned array.</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>All the defined loggers<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IMyLog[] <span class="title">GetCurrentLoggers</span>(<span class="params"><span class="built_in">string</span> domain</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">return</span> WrapLoggers(LoggerManager.GetCurrentLoggers(domain));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> Returns all the currently defined loggers in the specified assembly&#x27;s domain.</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;assembly&quot;&gt;</span>the assembly to use to lookup the domain<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> The root logger is <span class="doctag">&lt;b&gt;</span>not<span class="doctag">&lt;/b&gt;</span> included in the returned array.</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>All the defined loggers<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IMyLog[] <span class="title">GetCurrentLoggers</span>(<span class="params">Assembly assembly</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">return</span> WrapLoggers(LoggerManager.GetCurrentLoggers(assembly));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> Retrieve or create a named logger.</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>Retrieve a logger named as the <span class="doctag">&lt;paramref name=&quot;name&quot;/&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> parameter. If the named logger already exists, then the</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> existing instance will be returned. Otherwise, a new instance is</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> created.<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>By default, loggers do not have a set level but inherit</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> it from the hierarchy. This is one of the central features of</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> log4net.<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span>The name of the logger to retrieve.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>the logger with the name specified<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IMyLog <span class="title">GetLogger</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">return</span> GetLogger(Assembly.GetCallingAssembly(), name);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> Retrieve or create a named logger.</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>Retrieve a logger named as the <span class="doctag">&lt;paramref name=&quot;name&quot;/&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> parameter. If the named logger already exists, then the</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> existing instance will be returned. Otherwise, a new instance is</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> created.<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>By default, loggers do not have a set level but inherit</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> it from the hierarchy. This is one of the central features of</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> log4net.<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;domain&quot;&gt;</span>the domain to lookup in<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span>The name of the logger to retrieve.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>the logger with the name specified<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IMyLog <span class="title">GetLogger</span>(<span class="params"><span class="built_in">string</span> domain, <span class="built_in">string</span> name</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">return</span> WrapLogger(LoggerManager.GetLogger(domain, name));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> Retrieve or create a named logger.</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>Retrieve a logger named as the <span class="doctag">&lt;paramref name=&quot;name&quot;/&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> parameter. If the named logger already exists, then the</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> existing instance will be returned. Otherwise, a new instance is</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> created.<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>By default, loggers do not have a set level but inherit</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> it from the hierarchy. This is one of the central features of</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> log4net.<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;assembly&quot;&gt;</span>the assembly to use to lookup the domain<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span>The name of the logger to retrieve.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>the logger with the name specified<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IMyLog <span class="title">GetLogger</span>(<span class="params">Assembly assembly, <span class="built_in">string</span> name</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">return</span> WrapLogger(LoggerManager.GetLogger(assembly, name));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> Shorthand for <span class="doctag">&lt;see cref=&quot;LogManager.GetLogger(string)&quot;/&gt;</span>.</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> Get the logger for the fully qualified name of the type specified.</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;type&quot;&gt;</span>The full name of <span class="doctag">&lt;paramref name=&quot;type&quot;/&gt;</span> will</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> be used as the name of the logger to retrieve.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>the logger with the name specified<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IMyLog <span class="title">GetLogger</span>(<span class="params">Type type</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">return</span> GetLogger(Assembly.GetCallingAssembly(), type.FullName);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> Shorthand for <span class="doctag">&lt;see cref=&quot;LogManager.GetLogger(string)&quot;/&gt;</span>.</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> Get the logger for the fully qualified name of the type specified.</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;domain&quot;&gt;</span>the domain to lookup in<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;type&quot;&gt;</span>The full name of <span class="doctag">&lt;paramref name=&quot;type&quot;/&gt;</span> will</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> be used as the name of the logger to retrieve.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>the logger with the name specified<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IMyLog <span class="title">GetLogger</span>(<span class="params"><span class="built_in">string</span> domain, Type type</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">return</span> WrapLogger(LoggerManager.GetLogger(domain, type));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> Shorthand for <span class="doctag">&lt;see cref=&quot;LogManager.GetLogger(string)&quot;/&gt;</span>.</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> Get the logger for the fully qualified name of the type specified.</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;assembly&quot;&gt;</span>the assembly to use to lookup the domain<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;type&quot;&gt;</span>The full name of <span class="doctag">&lt;paramref name=&quot;type&quot;/&gt;</span> will</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> be used as the name of the logger to retrieve.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>the logger with the name specified<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IMyLog <span class="title">GetLogger</span>(<span class="params">Assembly assembly, Type type</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">return</span> WrapLogger(LoggerManager.GetLogger(assembly, type));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">       <span class="meta">#<span class="keyword">region</span> Extension Handlers</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> Lookup the wrapper object for the logger specified</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;logger&quot;&gt;</span>the logger to get the wrapper for<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>the wrapper for the logger specified<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IMyLog <span class="title">WrapLogger</span>(<span class="params">ILogger logger</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">return</span> (IMyLog)s_wrapperMap.GetWrapper(logger);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> Lookup the wrapper objects for the loggers specified</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;loggers&quot;&gt;</span>the loggers to get the wrappers for<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>Lookup the wrapper objects for the loggers specified<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IMyLog[] <span class="title">WrapLoggers</span>(<span class="params">ILogger[] loggers</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           IMyLog[] results = <span class="keyword">new</span> IMyLog[loggers.Length];</span><br><span class="line">           <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; loggers.Length; i++)</span><br><span class="line">           &#123;</span><br><span class="line">               results[i] = WrapLogger(loggers[i]);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> results;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> Method to create the <span class="doctag">&lt;see cref=&quot;ILoggerWrapper&quot;/&gt;</span> objects used by</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> this manager.</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;logger&quot;&gt;</span>The logger to wrap<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>The wrapper for the logger specified<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ILoggerWrapper <span class="title">WrapperCreationHandler</span>(<span class="params">ILogger logger</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> MyLogImpl(logger);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="imylog类代码">IMyLog类代码</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> log4net;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">TGLog.ExpandILog</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IMyLog</span> : <span class="title">ILog</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">Debug</span>(<span class="params"><span class="built_in">int</span> operatorID, <span class="built_in">string</span> operand, <span class="built_in">int</span> actionType, <span class="built_in">object</span> message,<span class="built_in">string</span> ip, <span class="built_in">string</span> browser, <span class="built_in">string</span> machineName</span>)</span>;</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">Debug</span>(<span class="params"><span class="built_in">int</span> operatorID, <span class="built_in">string</span> operand, <span class="built_in">int</span> actionType,<span class="built_in">object</span> message,<span class="built_in">string</span> ip, <span class="built_in">string</span> browser, <span class="built_in">string</span> machineName, Exception t</span>)</span>;</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">Info</span>(<span class="params"><span class="built_in">int</span> operatorID, <span class="built_in">string</span> operand, <span class="built_in">int</span> actionType, <span class="built_in">object</span> message,<span class="built_in">string</span> ip, <span class="built_in">string</span> browser, <span class="built_in">string</span> machineName</span>)</span>;</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">Info</span>(<span class="params"><span class="built_in">int</span> operatorID, <span class="built_in">string</span> operand, <span class="built_in">int</span> actionType, <span class="built_in">object</span> message,<span class="built_in">string</span> ip, <span class="built_in">string</span> browser, <span class="built_in">string</span> machineName, Exception t</span>)</span>;</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">Warn</span>(<span class="params"><span class="built_in">int</span> operatorID, <span class="built_in">string</span> operand, <span class="built_in">int</span> actionType, <span class="built_in">object</span> message,<span class="built_in">string</span> ip, <span class="built_in">string</span> browser, <span class="built_in">string</span> machineName</span>)</span>;</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">Warn</span>(<span class="params"><span class="built_in">int</span> operatorID, <span class="built_in">string</span> operand, <span class="built_in">int</span> actionType, <span class="built_in">object</span> message, <span class="built_in">string</span> ip, <span class="built_in">string</span> browser, <span class="built_in">string</span> machineName, Exception t</span>)</span>;</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">Error</span>(<span class="params"><span class="built_in">int</span> operatorID, <span class="built_in">string</span> operand, <span class="built_in">int</span> actionType, <span class="built_in">object</span> message,<span class="built_in">string</span> ip, <span class="built_in">string</span> browser, <span class="built_in">string</span> machineName</span>)</span>;</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">Error</span>(<span class="params"><span class="built_in">int</span> operatorID, <span class="built_in">string</span> operand, <span class="built_in">int</span> actionType, <span class="built_in">object</span> message,<span class="built_in">string</span> ip, <span class="built_in">string</span> browser, <span class="built_in">string</span> machineName, Exception t</span>)</span>;</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">Fatal</span>(<span class="params"><span class="built_in">int</span> operatorID, <span class="built_in">string</span> operand, <span class="built_in">int</span> actionType, <span class="built_in">object</span> message,<span class="built_in">string</span> ip, <span class="built_in">string</span> browser, <span class="built_in">string</span> machineName</span>)</span>;</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">Fatal</span>(<span class="params"><span class="built_in">int</span> operatorID, <span class="built_in">string</span> operand, <span class="built_in">int</span> actionType, <span class="built_in">object</span> message,<span class="built_in">string</span> ip, <span class="built_in">string</span> browser, <span class="built_in">string</span> machineName, Exception t</span>)</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a
href="https://blog.csdn.net/binnygoal/article/details/79557746">非常完善的Log4net详细说明-CSDN博客</a></li>
<li><a
href="https://logging.apache.org/log4net/release/manual/configuration.html">Apache
log4net – Apache log4net Manual: Configuration - Apache log4net</a></li>
<li><a
href="https://stackify.com/what-is-structured-logging-and-why-developers-need-it/">What
Is Structured Logging and Why Developers Need It - Stackify</a></li>
<li><a
href="http://files.cnblogs.com/longshizhong/使用log4net记录日志.rar">使用log4net记录日志</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>日志</category>
      </categories>
      <tags>
        <tag>.NET</tag>
        <tag>Log4net</tag>
      </tags>
  </entry>
  <entry>
    <title>C# 获取当前程序运行路径的方法集合</title>
    <url>/posts/2023/2JYPDKM.html</url>
    <content><![CDATA[<p>本文介绍了如何在 C#
中获取当前程序的运行路径，同时对比这些方法的差别。</p>
<span id="more"></span>
<h2 id="获取方式">获取方式</h2>
<ol type="1">
<li><p>获取当前进程的完整路径，包含文件名(进程名)</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> str = <span class="keyword">this</span>.GetType().Assembly.Location;</span><br><span class="line">result: X:\xxx\xxx\xxx.exe (.exe文件所在的目录+.exe文件名)</span><br></pre></td></tr></table></figure></li>
<li><p>获取新的 Process
组件并将其与当前活动的进程关联的主模块的完整路径，包含文件名(进程名)。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> str = System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName;</span><br><span class="line">result: X:\xxx\xxx\xxx.exe (.exe文件所在的目录+.exe文件名)</span><br></pre></td></tr></table></figure></li>
<li><p>获取和设置当前目录（即该进程从中启动的目录）的完全限定路径。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> str = System.Environment.CurrentDirectory;</span><br><span class="line">result: X:\xxx\xxx (.exe文件所在的目录)</span><br></pre></td></tr></table></figure></li>
<li><p>获取当前 Thread
的当前应用程序域的基目录，它由程序集冲突解决程序用来探测程序集。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> str = System.AppDomain.CurrentDomain.BaseDirectory;</span><br><span class="line">result: X:\xxx\xxx\ (.exe文件所在的目录+<span class="string">&quot;\&quot;)</span></span><br></pre></td></tr></table></figure></li>
<li><p>获取和设置包含该应用程序的目录的名称。(推荐)</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> str = System.AppDomain.CurrentDomain.SetupInformation.ApplicationBase;</span><br><span class="line">result: X:\xxx\xxx\ (.exe文件所在的目录+<span class="string">&quot;\&quot;)</span></span><br></pre></td></tr></table></figure></li>
<li><p>获取启动了应用程序的可执行文件的路径，不包括可执行文件的名称。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> str = System.Windows.Forms.Application.StartupPath;</span><br><span class="line">result: X:\xxx\xxx (.exe文件所在的目录)</span><br></pre></td></tr></table></figure></li>
<li><p>获取启动了应用程序的可执行文件的路径，包括可执行文件的名称。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> str = System.Windows.Forms.Application.ExecutablePath;</span><br><span class="line">result: X:\xxx\xxx\xxx.exe (.exe文件所在的目录+.exe文件名)</span><br></pre></td></tr></table></figure></li>
<li><p>获取应用程序的当前工作目录(不可靠)。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> str = System.IO.Directory.GetCurrentDirectory();</span><br><span class="line">result: X:\xxx\xxx (.exe文件所在的目录)</span><br></pre></td></tr></table></figure></li>
<li><p>包含应用程序的基目录的字符串，不包括尾部分隔符。这通常是启动程序集的目录。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">AppContext.BaseDirectory</span><br></pre></td></tr></table></figure></li>
<li><p>获取包含当前执行的程序集的文件的路径</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Assembly.GetExecutingAssembly().Location</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个方法也可以用于获取其他程序集的路径，只要你传入那个程序集的类型。</p>
</blockquote></li>
</ol>
<h2 id="区别">区别</h2>
<ol type="1">
<li><code>Directory.GetCurrentDirectory()</code> 和
<code>Environment.CurrentDirectory</code>
都返回当前工作目录的完全限定路径，它们通常是相同的。但是，<code>Directory.GetCurrentDirectory()</code>
返回的路径可能会因为工作目录的改变而改变，而
<code>Environment.CurrentDirectory</code>
只是获取当前工作目录的值，不会随着工作目录的改变而改变。</li>
<li><code>AppContext.BaseDirectory</code>
返回应用程序的基目录，这个目录通常是启动程序集的目录，不包括尾部分隔符。</li>
<li><code>Assembly.GetExecutingAssembly().Location</code>
获取包含当前执行的程序集的文件的路径，它通常是一个完整的文件路径。使用这个方法时，需要注意，当程序集是从网络上下载时，可能无法获取到它的位置。</li>
</ol>
<h2 id="总结">总结</h2>
<p>具体使用哪种方法获取当前路径取决于你的具体需求。一般来说，如果你需要获取应用程序的基目录，应该使用
<code>AppContext.BaseDirectory</code>；如果需要获取包含当前执行程序集的文件路径，应该使用
<code>Assembly.GetExecutingAssembly().Location</code>。如果需要获取当前工作目录的路径，可以使用
<code>Directory.GetCurrentDirectory()</code> 或
<code>Environment.CurrentDirectory</code>。</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>实用代码</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>moment 中日期跨年月加减后结果测试</title>
    <url>/posts/2022/25J6BC2.html</url>
    <content><![CDATA[<p>在使用 <code>moment</code>
进行日期加减处理时，有些担心其天数会变动，比如：</p>
<ol type="1">
<li>2月 28号加一个月是否为 3 月 31 号？</li>
<li>3月 31号减一个月是否为 2 月 28 号？</li>
</ol>
<span id="more"></span>
<p>现在直接上代码进行测试：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moment0 = <span class="title function_">moment</span>(<span class="string">&#x27;2022-03-31&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;moment0:&#x27;</span>,moment0.<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subMoment = moment0.<span class="title function_">subtract</span>(<span class="number">1</span>,<span class="string">&#x27;month&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;subMoment:&#x27;</span>,subMoment.<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addMoment = moment0.<span class="title function_">add</span>(<span class="number">1</span>,<span class="string">&#x27;month&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;addMoment:&#x27;</span>,addMoment.<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subMoment2 = moment0.<span class="title function_">subtract</span>(<span class="number">1</span>,<span class="string">&#x27;month&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;subMoment2:&#x27;</span>,subMoment2.<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="string">&quot;moment0:&quot;</span> <span class="string">&quot;2022-03-31&quot;</span></span><br><span class="line"><span class="string">&quot;subMoment:&quot;</span> <span class="string">&quot;2022-02-28&quot;</span></span><br><span class="line"><span class="string">&quot;addMoment:&quot;</span> <span class="string">&quot;2022-03-28&quot;</span></span><br><span class="line"><span class="string">&quot;subMoment2:&quot;</span> <span class="string">&quot;2022-02-28&quot;</span></span><br></pre></td></tr></table></figure>
<p>代码实现如下：</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="testMomentAddSubtract" src="https://codepen.io/galensgan/embed/OJZvOyO?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
See the Pen <a href="https://codepen.io/galensgan/pen/OJZvOyO">
testMomentAddSubtract</a> by GALENS
(<a href="https://codepen.io/galensgan"><span class="citation"
data-cites="galensgan">@galensgan</span></a>) on
<a href="https://codepen.io">CodePen</a>.
</iframe>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Date</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Moment</tag>
        <tag>Date</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>echarts各个配置项概念</title>
    <url>/posts/2022/C57H56.html</url>
    <content><![CDATA[<p>echarts
是百度开源的一个绘制图表库，号称是百度最良心的作品。本文将主要介绍
echarts 配置的相关概念，在使用时，可以按需去查找相关 api。</p>
<span id="more"></span>
<h2 id="安装">安装</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install echarts --save</span><br></pre></td></tr></table></figure>
<h2 id="使用">使用</h2>
<p>在 vue 中使用时示例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;main&quot; :style=&quot;height: 200px; width: 200px&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import * as echarts from &#x27;echarts&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.initChart()</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy() &#123;</span><br><span class="line">    if (!this.chart) &#123;</span><br><span class="line">      return</span><br><span class="line">    &#125;</span><br><span class="line">    this.chart.dispose()</span><br><span class="line">    this.chart = null</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    initChart() &#123;</span><br><span class="line">      // 参数</span><br><span class="line">      const option = &#123;</span><br><span class="line">        legend: &#123;</span><br><span class="line">          right: &#x27;0&#x27;,</span><br><span class="line">          orient: &#x27;vertical&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        series: [</span><br><span class="line">          &#123;</span><br><span class="line">            name: &#x27;Nightingale Chart&#x27;,</span><br><span class="line">            type: &#x27;pie&#x27;,</span><br><span class="line">            radius: [50, 94],</span><br><span class="line">            center: [&#x27;50%&#x27;, &#x27;50%&#x27;],</span><br><span class="line">            roseType: &#x27;area&#x27;,</span><br><span class="line">            itemStyle: &#123;</span><br><span class="line">              borderRadius: 8</span><br><span class="line">            &#125;,</span><br><span class="line">            data: [</span><br><span class="line">              &#123; value: 40, name: &#x27;rose 1&#x27; &#125;,</span><br><span class="line">              &#123; value: 38, name: &#x27;rose 2&#x27; &#125;,</span><br><span class="line">              &#123; value: 32, name: &#x27;rose 3&#x27; &#125;,</span><br><span class="line">              &#123; value: 30, name: &#x27;rose 4&#x27; &#125;,</span><br><span class="line">              &#123; value: 28, name: &#x27;rose 5&#x27; &#125;,</span><br><span class="line">              &#123; value: 26, name: &#x27;rose 6&#x27; &#125;,</span><br><span class="line">              &#123; value: 22, name: &#x27;rose 7&#x27; &#125;,</span><br><span class="line">              &#123; value: 18, name: &#x27;rose 8&#x27; &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 基于准备好的dom，初始化echarts实例</span><br><span class="line">      var myChart = echarts.init(document.getElementById(&#x27;main&#x27;))</span><br><span class="line">      // 绘制图表</span><br><span class="line">      myChart.setOption(option)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考：<a
href="https://echarts.apache.org/handbook/zh/basics/download">获取
Apache ECharts</a></p>
</blockquote>
<h2 id="图表容器大小">图表容器大小</h2>
<p>如上例所示，在定义 <code>&lt;div&gt;</code> 节点的时候，通过 CSS
使得该节点具有宽度和高度。初始化的时候，传入该节点，图表的大小默认即为该节点的大小（推荐）。也可以通过配置
<code>option.width</code> 或 <code>option.height</code> 将其覆盖。</p>
<h3 id="响应容器大小的变化">响应容器大小的变化</h3>
<p>可以监听页面的 <code>window.onresize</code>
事件获取浏览器大小改变的事件，然后调用 <a
href="https://echarts.apache.org/api.html#echartsInstance.resize"><code>echartsInstance.resize</code></a>
改变图表的大小。</p>
<p>该方法仅在窗口大小改变时，才会触发
<code>resize</code>，具有一定的局限性。</p>
<h2 id="样式">样式</h2>
<h3 id="颜色主题">颜色主题</h3>
<p>系统除了默认外，内置了 <code>dark</code>
主题，在初始化时，传入的第二个参数即为主题的名称。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> chart = echarts.<span class="title function_">init</span>(dom, <span class="string">&#x27;dark&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="自动注册和加载主题">自动注册和加载主题</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设主题名称是 &quot;vintage&quot;</span></span><br><span class="line">$.<span class="title function_">getJSON</span>(<span class="string">&#x27;xxx/xxx/vintage.json&#x27;</span>, <span class="keyword">function</span>(<span class="params">themeJSON</span>) &#123;</span><br><span class="line">  echarts.<span class="title function_">registerTheme</span>(<span class="string">&#x27;vintage&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">parse</span>(themeJSON));</span><br><span class="line">  <span class="keyword">var</span> chart = echarts.<span class="title function_">init</span>(dom, <span class="string">&#x27;vintage&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="调色盘">调色盘</h3>
<p>可以在 <code>option.color</code> 中设置全局调色盘，<code>color</code>
是一个颜色数组，也可以在 <code>series</code> 中单独设置调色盘颜色。</p>
<h3 id="直接样式设置">直接样式设置</h3>
<p>直接的样式设置是比较常用设置方式。纵观 ECharts 的 <a
href="https://echarts.apache.org/option.html#">option</a>
中，很多地方可以设置 <a
href="https://echarts.apache.org/option.html#series-bar.itemStyle">itemStyle</a>、<a
href="https://echarts.apache.org/option.html#series-line.lineStyle">lineStyle</a>、<a
href="https://echarts.apache.org/option.html#series-line.areaStyle">areaStyle</a>、<a
href="https://echarts.apache.org/option.html#series-bar.label">label</a>
等等。这些的地方可以直接设置图形元素的颜色、线宽、点的大小、标签的文字、标签的样式等等。</p>
<h2 id="数据集">数据集</h2>
<p><code>数据集</code>（<code>dataset</code>）是专门用来管理数据的组件。虽然每个系列都可以在
<code>series.data</code> 中设置数据，但是从 ECharts4 支持
<code>数据集</code> 开始，更推荐使用 <code>数据集</code>
来管理数据。因为这样，数据可以被多个组件复用，也方便进行
“数据和其他配置”
分离的配置风格。毕竟，在运行时，数据是最常改变的，而其他配置大多并不会改变。</p>
<blockquote>
<p>本文未完待续...</p>
</blockquote>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a
href="https://echarts.apache.org/handbook/zh/get-started">echarts文档</a></li>
<li><a href="https://echarts.apache.org/zh/api.html#echarts">echarts
各个类的定义</a></li>
<li><a href="https://echarts.apache.org/zh/option.html#title">echarts
实例setupOption配置</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Echarts</category>
      </categories>
      <tags>
        <tag>echarts</tag>
      </tags>
  </entry>
  <entry>
    <title>通用的深复制功能实现</title>
    <url>/posts/2022/14XRC75.html</url>
    <content><![CDATA[<p>在代码中经常会遇到需要把对象复制一遍，或者把属性名相同的值复制一遍。为了使得复制操作更加优雅，可以使用下列方式来进行复制，而不必针为每个类实现克隆操作。</p>
<span id="more"></span>
<h2 id="代码">代码</h2>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 深度复制</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 这样做了为了能够</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 参考 </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">DeepClone</span>&lt;<span class="title">TIn</span>, <span class="title">TOut</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Func&lt;TIn, TOut&gt; _cache = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Func&lt;TIn, TOut&gt; <span class="title">GetFunc</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        ParameterExpression parameterExpression = Expression.Parameter(<span class="keyword">typeof</span>(TIn), <span class="string">&quot;p&quot;</span>);</span><br><span class="line">        List&lt;MemberBinding&gt; memberBindingList = <span class="keyword">new</span> List&lt;MemberBinding&gt;();</span><br><span class="line"></span><br><span class="line">        Type inType = <span class="keyword">typeof</span>(TIn);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="function"><span class="keyword">var</span> item <span class="keyword">in</span> <span class="title">typeof</span>(<span class="params">TOut</span>).<span class="title">GetProperties</span>())</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!item.CanWrite)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 有可能克隆目标为子类，父类中没有相应属性</span></span><br><span class="line">            <span class="keyword">var</span> prop = inType.GetProperty(item.Name);</span><br><span class="line">            <span class="keyword">if</span> (prop == <span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            MemberExpression property = Expression.Property(parameterExpression,prop);</span><br><span class="line">            MemberBinding memberBinding = Expression.Bind(item, property);</span><br><span class="line">            memberBindingList.Add(memberBinding);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        MemberInitExpression memberInitExpression = Expression.MemberInit(Expression.New(<span class="keyword">typeof</span>(TOut)), memberBindingList.ToArray());</span><br><span class="line">        Expression&lt;Func&lt;TIn, TOut&gt;&gt; lambda = Expression.Lambda&lt;Func&lt;TIn, TOut&gt;&gt;(memberInitExpression, <span class="keyword">new</span> ParameterExpression[] &#123; parameterExpression &#125;);</span><br><span class="line">        <span class="keyword">return</span> lambda.Compile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取结果</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;tIn&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TOut <span class="title">Clone</span>(<span class="params">TIn tIn</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_cache == <span class="literal">null</span>) _cache = GetFunc();</span><br><span class="line">        <span class="keyword">return</span> _cache(tIn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p><a href="https://www.zhangshengrong.com/p/Wx1J0r2NoM/">C#
快速高效率复制对象（表达式树）</a></p>
<p><a
href="https://codeleading.com/article/11753696302/">C#基于表达式（Expression）实现对象深拷贝</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>实用代码</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>实用代码</tag>
      </tags>
  </entry>
  <entry>
    <title>C# 判断文件是否被占用</title>
    <url>/posts/2022/E348XP.html</url>
    <content><![CDATA[<p>在<code>C#</code>中判断文件是否被占用一般有两种方法，一是利用<code>FileStream</code>结合<code>try...catch...finally</code>实现，二是调用<code>Windows API</code>实现，下面给出两种方法的代码。</p>
<span id="more"></span>
<h2 id="文件流法">文件流法</h2>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp3</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> filePath = <span class="string">@&quot;D:\data.xlsx&quot;</span>;</span><br><span class="line">            <span class="built_in">bool</span> occupied = IsOccupied(filePath);</span><br><span class="line">            <span class="keyword">if</span> (occupied)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;文件被占用&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;文件未被占用&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">IsOccupied</span>(<span class="params"><span class="built_in">string</span> filePath</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            FileStream stream = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                stream = <span class="keyword">new</span> FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.None);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (stream != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    stream.Close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="windows-api法">Windows <a
href="https://so.csdn.net/so/search?q=API&amp;spm=1001.2101.3001.7020">API</a>法</h2>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp3</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 判断文件是否打开</span></span><br><span class="line">        [<span class="meta">DllImport(<span class="string">&quot;kernel32.dll&quot;</span>)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr _lopen(<span class="built_in">string</span> lpPathName, <span class="built_in">int</span> iReadWrite);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭文件句柄</span></span><br><span class="line">        [<span class="meta">DllImport(<span class="string">&quot;kernel32.dll&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">bool</span> <span class="title">CloseHandle</span>(<span class="params">IntPtr hObject</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 常量</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">int</span> OF_READWRITE = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">int</span> OF_SHARE_DENY_NONE = <span class="number">0x40</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> IntPtr HFILE_ERROR = <span class="keyword">new</span> IntPtr(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> filePath = <span class="string">@&quot;D:\data.xlsx&quot;</span>;</span><br><span class="line">            <span class="built_in">bool</span> occupied = IsOccupied(filePath);</span><br><span class="line">            <span class="keyword">if</span> (occupied)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;文件被占用&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;文件未被占用&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">IsOccupied</span>(<span class="params"><span class="built_in">string</span> filePath</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            IntPtr handler = _lopen(filePath, OF_READWRITE | OF_SHARE_DENY_NONE);</span><br><span class="line">            CloseHandle(handler);</span><br><span class="line">            <span class="keyword">return</span> handler == HFILE_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p>原谅链接：https://blog.csdn.net/HerryDong/article/details/115626620</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>实用代码</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>eggjs 启动和停止报错</title>
    <url>/posts/2021/2P3NVEN.html</url>
    <content><![CDATA[<p>在 eggjs 在进行生产环境部署的时候，执行 <code>npm start</code> 和
<code>npm stop</code> 报错，特作记录。</p>
<span id="more"></span>
<h2 id="启动报错">启动报错</h2>
<p>如果运行 <code>npm start</code>
报错，但是又不提示具体原因，此时可以改用 <code>git</code>
来执行，它会将错误提示到命令行窗口上。</p>
<h2 id="停止报错">停止报错</h2>
<p>eggjs 启动后，如果运行 <code>npm stop</code> 报错，提示未能找到名
‘’node.exe“ 的 processId。</p>
<p>这种情况下，是因为系统的 wmic 未添加到环境变量，将
<code>C:\Windows\System32\wbem</code> 添加到 <code>path</code>
环境变量后，重启终端即可。</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Eggjs</category>
      </categories>
      <tags>
        <tag>eggjs</tag>
      </tags>
  </entry>
  <entry>
    <title>eggjs 给路径添加别名并实现智能提示</title>
    <url>/posts/2022/3M46N6F.html</url>
    <content><![CDATA[<p>本文介绍了如何在 eggjs 中给路径添加别名并实现 vscode 的智能提示。</p>
<span id="more"></span>
<h2 id="配置别名">配置别名</h2>
<h3 id="安装依赖">安装依赖</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm i <span class="literal">--save</span> module<span class="literal">-alias</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">yarn add module<span class="literal">-alias</span></span><br></pre></td></tr></table></figure>
<h3 id="配置-package.json-文件">配置 <code>package.json</code> 文件</h3>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Aliases</span></span><br><span class="line"><span class="attr">&quot;_moduleAliases&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./app&quot;</span><span class="punctuation">,</span> <span class="comment">//  . represent application&#x27;s root</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="加载配置">加载配置</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js，若没有，则新建</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">configWillLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 此时 config 文件已经被读取并合并，但是还并未生效</span></span><br><span class="line">  <span class="comment">// 这是应用层修改配置的最后时机</span></span><br><span class="line">  <span class="comment">// 注意：此函数只支持同步调用    </span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;module-alias/register&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：</strong></p>
<p>因为需要将该代码放置在所有使用路径别名代码的前面，因此在这里将此引用放置在app.js中，当然，也可以在所需的地方进行单独引用（不推荐）</p>
</blockquote>
<h3 id="使用">使用</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;@/utils/index.js&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="ied-实现对别名的智能提示">IED 实现对别名的智能提示</h2>
<p>在根目录中创建 <code>jsconfig.json</code>
文件，里面添加如下内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此处是根，如果已经存在配置，则去掉外层大括号</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;app/*&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>至此，<code>vscode</code> 即可智能提示了。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220315151928119.png"
alt="image-20220315151928119" />
<figcaption aria-hidden="true">image-20220315151928119</figcaption>
</figure>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a
href="%5Bmodule-alias%20-%20npm%20(npmjs.com)%5D(https://www.npmjs.com/package/module-alias)">module-alias</a></li>
<li><a
href="%5Begg.js%20路径别名配置%20module-alias_pyp_demon的博客-CSDN博客%5D(https://blog.csdn.net/pyp_demon/article/details/108329015)">egg.js
路径别名配置 module-alias</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Eggjs</category>
      </categories>
      <tags>
        <tag>eggjs</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 中安装 PaddleOCR</title>
    <url>/posts/2022/2775XKA.html</url>
    <content><![CDATA[<p>本文记录了如何在 Windows 的环境下(Windows Server 2008 R2)安装
PaddleOCR。</p>
<span id="more"></span>
<h2 id="python环境搭建">Python环境搭建</h2>
<h3 id="安装anaconda">安装Anaconda</h3>
<ul>
<li><p>说明：使用paddlepaddle需要先安装python环境，这里我们选择python集成环境Anaconda工具包</p>
<ul>
<li>Anaconda是1个常用的python包管理程序</li>
<li>安装完Anaconda后，可以安装python环境，以及numpy等所需的工具包环境。</li>
</ul></li>
<li><p>Anaconda下载：</p>
<ul>
<li><p>地址：https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/?C=M&amp;O=D</p></li>
<li><p>大部分win10电脑均为64位操作系统，选择x86_64版本；若电脑为32位操作系统，则选择x86.exe</p>
<figure>
<img data-src="https://github.com/PaddlePaddle/PaddleOCR/raw/release/2.6/doc/install/windows/Anaconda_download.png"
alt="anaconda download" />
<figcaption aria-hidden="true">anaconda download</figcaption>
</figure></li>
<li><p>下载完成后，双击安装程序进入图形界面</p></li>
<li><p>默认安装位置为C盘，建议将安装位置更改到D盘：</p>
<p><img data-src="https://github.com/PaddlePaddle/PaddleOCR/raw/release/2.6/doc/install/windows/anaconda_install_folder.png" alt="install config" style="max-width:min(100%,300px)" /></p></li>
<li><p>勾选conda加入环境变量，忽略警告：</p>
<p><img data-src="https://github.com/PaddlePaddle/PaddleOCR/raw/release/2.6/doc/install/windows/anaconda_install_env.png" alt="add conda to path" style="max-width:min(100%,300px)" /></p></li>
</ul></li>
</ul>
<p>可以使用 scoop 进行安装：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install miniconda3</span><br></pre></td></tr></table></figure>
<h3 id="打开终端并创建conda环境">打开终端并创建conda环境</h3>
<ul>
<li><p>打开Anaconda Prompt终端：左下角Windows Start Menu -&gt; Anaconda3
-&gt; Anaconda Prompt启动控制台</p>
<p><img data-src="https://github.com/PaddlePaddle/PaddleOCR/raw/release/2.6/doc/install/windows/anaconda_prompt.png" alt="anaconda download" style="max-width:min(100%,300px)" /></p>
<ul>
<li><p>创建新的conda环境</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在命令行输入以下命令，创建名为paddle_env的环境</span></span><br><span class="line"><span class="comment"># 此处为加速下载，使用清华源</span></span><br><span class="line">conda create <span class="literal">--name</span> paddle_env python=<span class="number">3.8</span> <span class="literal">--channel</span> https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/  <span class="comment"># 这是一行命令</span></span><br></pre></td></tr></table></figure>
<p>该命令会创建1个名为paddle_env、python版本为3.8的可执行环境，根据网络状态，需要花费一段时间</p>
<p>之后命令行中会输出提示信息，输入y并回车继续安装</p>
<p><img data-src="https://github.com/PaddlePaddle/PaddleOCR/raw/release/2.6/doc/install/windows/conda_new_env.png" alt="conda create" style="max-width:min(100%,300px)" /></p></li>
<li><p>激活刚创建的conda环境，在命令行中输入以下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 激活 paddle_env 环境</span></span><br><span class="line">conda activate paddle_env</span><br><span class="line"><span class="comment"># 查看当前python的位置</span></span><br><span class="line"><span class="built_in">where</span> python</span><br></pre></td></tr></table></figure>
<p><img data-src="https://github.com/PaddlePaddle/PaddleOCR/raw/release/2.6/doc/install/windows/conda_list_env.png" alt="create environment" style="max-width:min(100%,300px)" /></p></li>
</ul>
<p>以上 anaconda 环境和 python 环境安装完毕!</p>
<p>保持 <code>paddle_env</code>
处于激活状态，下面两步都需要在这个环境中进行安装。</p></li>
</ul>
<h2 id="安装paddlepaddle">安装PaddlePaddle</h2>
<ul>
<li><p>您的机器安装的是CUDA9或CUDA10，请运行以下命令安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m pip install paddlepaddle-gpu -i https://mirror.baidu.com/pypi/simple</span><br></pre></td></tr></table></figure></li>
<li><p>您的机器是CPU，请运行以下命令安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m pip install paddlepaddle -i https://mirror.baidu.com/pypi/simple</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="安装paddleocr-whl包">安装PaddleOCR whl包</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install &quot;paddleocr&gt;=2.0.1&quot; # 推荐使用2.0.1+版本</span><br></pre></td></tr></table></figure>
<p>对于Windows环境用户：直接通过pip安装的shapely库可能出现<code>[winRrror 126] 找不到指定模块的问题</code>。建议从<a
href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#shapely">这里</a>下载shapely安装包完成安装。</p>
<p>其中 <code>cp38</code> 中的 38 代表 python 版本号。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载原来的 shapely</span></span><br><span class="line">pip uninstall shapely</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制下载的安装文件到当前目录，执行如下命令</span></span><br><span class="line">pip install Shapely<span class="literal">-1</span>.<span class="number">8.2</span><span class="literal">-cp39-cp39-win_amd64</span>.whl</span><br></pre></td></tr></table></figure>
<h2 id="测试">测试</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">paddleocr <span class="literal">--image_dir</span> ./imgs/<span class="number">11</span>.jpg <span class="literal">--use_angle_cls</span> true <span class="literal">--use_gpu</span> false</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Python</category>
        <category>PaddleOCR</category>
      </categories>
      <tags>
        <tag>PaddleOCR</tag>
      </tags>
  </entry>
  <entry>
    <title>Lodash 中一些让人喜出望外的函数</title>
    <url>/posts/2022/071MK6.html</url>
    <content><![CDATA[<h2 id="为什么选择-lodash">为什么选择 Lodash ？</h2>
<p>Lodash 通过降低 array、number、objects、string 等等的使用难度从而让
JavaScript 变得更简单。 Lodash 的模块化方法 非常适用于：</p>
<ul>
<li>遍历 array、object 和 string</li>
<li>对值进行操作和检测</li>
<li>创建符合功能的函数</li>
</ul>
<p>下面是本人在阅读文档时，对遇到的一些让人觉得非常好用的函数的整理。</p>
<blockquote>
<p>文档版本：4.17.15</p>
</blockquote>
<span id="more"></span>
<h2 id="array">Array</h2>
<h3 id="difference系列">_.difference系列</h3>
<p>返回第一个数组中与第二个数组不同的值。</p>
<p>当在 vue 中 watch 的是一个数组时，找到变化的值非常有用。</p>
<h3 id="uniq-系列">_.uniq 系列</h3>
<p>返回数组中所有第一次出现的值。</p>
<p>用于去重很有用。</p>
<h2 id="function">Function</h2>
<h3 id="throttle">_.throttle</h3>
<p>节流函数，在一定时间内仅会执行一次。</p>
<p>可以用于更新上传或下载的进度。</p>
<h2 id="number">Number</h2>
<h3 id="clamp">_.clamp</h3>
<p>传入一个值下界和上界，返回在这个界限内的值。</p>
<h2 id="object">Object</h2>
<h3 id="at">_.at</h3>
<p>通过传入属性路径来获取值，属性路径是字符串，同时路径支持函数</p>
<h3 id="default">_.default</h3>
<p>对于是undefined的属性赋予初值</p>
<h3 id="get">_.get</h3>
<p>同 <code>_.at</code>，但可以传入一个未找到时的默认值</p>
<h3 id="invoke">_.invoke</h3>
<p>通过<strong>字符串路径</strong>来调用对象中原生的方法</p>
<h3 id="pick">_.pick</h3>
<p>通过给定的字符串路径来重新构建一个对象</p>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此表示诚挚感谢！</p>
<ol type="1">
<li><a href="https://www.lodashjs.com/">Lodash中文文档</a></li>
<li><a href="https://lodash.com/docs/4.17.15">Lodash英文文档</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Lodash</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>lodash</tag>
      </tags>
  </entry>
  <entry>
    <title>egg-redis 常用操作</title>
    <url>/posts/2022/2JXSX6J.html</url>
    <content><![CDATA[<p>本文总结了 egg-redis 的一些参数设置和常用用法，方便开发食用。</p>
<span id="more"></span>
<h2 id="存单个值">存单个值</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">redis.<span class="title function_">set</span>(key, value, expiryMode, time )</span><br></pre></td></tr></table></figure>
<h2 id="expirymode">expiryMode</h2>
<ul>
<li><code>EX</code> 过期时间单位是秒</li>
<li><code>PX</code> 过期时间单位是分钟</li>
</ul>
<h2 id="修改过期时间">修改过期时间</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">redis.<span class="title function_">expire</span>(<span class="string">&#x27;name&#x27;</span>, <span class="number">20</span>); <span class="comment">// 秒</span></span><br></pre></td></tr></table></figure>
<h2 id="设置-key-在指定时间过期">设置 key 在指定时间过期</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> redis.<span class="title function_">expireat</span>(key,timestamp); <span class="comment">// timestamp 时间戳 秒</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> redis.<span class="title function_">pexpireat</span>(key,timestamp); <span class="comment">// timestamp 时间戳 毫秒</span></span><br></pre></td></tr></table></figure>
<h2 id="存数组">存数组</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">redis</span>.<span class="title function_">sadd</span>(<span class="string">&#x27;setList&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;赵六&#x27;</span>)</span><br><span class="line"></span><br><span class="line">返回值：[<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;赵六&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h2 id="向数组结尾添加元素">向数组结尾添加元素</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">redis</span>.<span class="title function_">rpush</span>(<span class="string">&#x27;userList&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">redis</span>.<span class="title function_">rpush</span>(<span class="string">&#x27;userList&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">redis</span>.<span class="title function_">rpush</span>(<span class="string">&#x27;userList&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>)</span><br><span class="line"></span><br><span class="line">返回一个数组 [<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h2 id="向数组开始位置添加元素">向数组开始位置添加元素</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">redis</span>.<span class="title function_">lpush</span>(<span class="string">&#x27;userList&#x27;</span>, <span class="string">&#x27;数组左边新增的&#x27;</span>)</span><br><span class="line">[</span><br><span class="line">    <span class="string">&quot;数组左边新增的&quot;</span>,</span><br><span class="line">    <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="存对象">存对象</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">redis</span>.<span class="title function_">hmset</span>(<span class="string">&#x27;userInfo&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;address&#x27;</span>,<span class="string">&#x27;回龙观&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="向对象中添加属性">向对象中添加属性</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">redis</span>.<span class="title function_">hset</span>(<span class="string">&#x27;loginUser&#x27;</span>, <span class="string">&#x27;id&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">redis</span>.<span class="title function_">hset</span>(<span class="string">&#x27;loginUser&#x27;</span>, <span class="string">&#x27;uname&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line"><span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">redis</span>.<span class="title function_">hset</span>(<span class="string">&#x27;loginUser&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>, <span class="string">&#x27;18888888888&#x27;</span>)</span><br><span class="line"><span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">redis</span>.<span class="title function_">hset</span>(<span class="params"><span class="string">&#x27;loginUser&#x27;</span>, <span class="string">&#x27;address&#x27;</span>, <span class="string">&#x27;北京市朝阳区&#x27;</span></span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;uname&quot;</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="string">&quot;phone&quot;</span>: <span class="string">&quot;18888888888&quot;</span>,</span><br><span class="line">    <span class="string">&quot;address&quot;</span>: <span class="string">&quot;北京市朝阳区&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="获取普通值">获取普通值</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取key 为 gender 的数据</span></span><br><span class="line"><span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">redis</span>.<span class="title function_">get</span>(<span class="string">&#x27;gender&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="获取值得数据类型">获取值得数据类型</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ctx.<span class="property">body</span> = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">redis</span>.<span class="title function_">type</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">返回 string</span><br></pre></td></tr></table></figure>
<h2 id="获取数组中所有元素">获取数组中所有元素</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表示获取数组中所有的值 0 ，-1</span></span><br><span class="line">ctx.<span class="property">body</span> = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">redis</span>.<span class="title function_">lrange</span>(<span class="string">&#x27;userList&#x27;</span>,<span class="number">0</span>,-<span class="number">1</span>)</span><br><span class="line">[</span><br><span class="line">    <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="获取集合中的所有数据">获取集合中的所有数据</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">redis</span>.<span class="title function_">smembers</span>(<span class="string">&#x27;setList&#x27;</span>)</span><br><span class="line">[</span><br><span class="line">    <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">    <span class="string">&quot;赵六&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="获取对象中的所有数据">获取对象中的所有数据</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ctx.<span class="property">body</span> = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">redis</span>.<span class="title function_">hgetall</span>(<span class="params"><span class="string">&#x27;loginUser&#x27;</span></span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;uname&quot;</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="string">&quot;phone&quot;</span>: <span class="string">&quot;18888888888&quot;</span>,</span><br><span class="line">    <span class="string">&quot;address&quot;</span>: <span class="string">&quot;北京市朝阳区&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="获取对象中的指定属性">获取对象中的指定属性</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">redis</span>.<span class="title function_">hget</span>(<span class="string">&#x27;loginUser&#x27;</span>, <span class="string">&#x27;address&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="一次性获取对象中的多个属性">一次性获取对象中的多个属性</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">redis</span>.<span class="title function_">hmget</span>(<span class="string">&#x27;userInfo&#x27;</span>, <span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;address&#x27;</span>)</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="string">&quot;18&quot;</span>,</span><br><span class="line">    <span class="string">&quot;回龙观&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="获取指定-key-的过期时间">获取指定 key 的过期时间</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> redis.<span class="title function_">ttl</span>(key); <span class="comment">// 单位秒</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> redis.<span class="title function_">pttl</span>(key); <span class="comment">// 单位毫秒</span></span><br></pre></td></tr></table></figure>
<h2 id="删除指定-key-的过期时间">删除指定 key 的过期时间</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> redis.<span class="title function_">persist</span>(key)</span><br></pre></td></tr></table></figure>
<h2 id="删除指定的key">删除指定的key</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">redis</span>.<span class="title function_">del</span>(<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="删除redis中所有数据">删除redis中所有数据</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">redis</span>.<span class="title function_">flushall</span>()</span><br></pre></td></tr></table></figure>
<h2 id="从数组最左边删除一项">从数组最左边删除一项</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">redis</span>.<span class="title function_">lpop</span>(<span class="string">&#x27;userList&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="从数组最右边删除一项">从数组最右边删除一项</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">redis</span>.<span class="title function_">rpop</span>(<span class="string">&#x27;userList&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此表示感谢！</p>
<ol type="1">
<li><a
href="https://notes.jindll.com/node/egg-redis%E5%B8%B8%E7%94%A8api.html#%E5%8A%9F%E8%83%BD">egg-redis常用api</a></li>
<li><a href="https://github.com/eggjs/egg-redis">官方文档</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Eggjs</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>eggjs</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs文件上传下载处理相关的包</title>
    <url>/posts/2021/1TBWW0K.html</url>
    <content><![CDATA[<ul>
<li><p>文件压缩与解压缩 compressing</p></li>
<li><p>流处理</p>
<p>pump</p></li>
<li><p>消费流</p>
<p>stream-wormhole</p></li>
</ul>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Nodejs</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>nodejs</tag>
        <tag>文件上传下载</tag>
      </tags>
  </entry>
  <entry>
    <title>进程守护 pm2 的使用</title>
    <url>/posts/2021/31GSH68.html</url>
    <content><![CDATA[<p>最近在后端的部署中，发现一个好用的进程守护包，叫
MP2，记录下它的基本使用。</p>
<span id="more"></span>
<h2 id="安装">安装</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install pm2@latest -g</span><br><span class="line"># or</span><br><span class="line">$ yarn global add pm2</span><br></pre></td></tr></table></figure>
<h2 id="启动-app">启动 App</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pm2 start app.js</span><br></pre></td></tr></table></figure>
<h2 id="管理进程">管理进程</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pm2 restart app_name</span><br><span class="line">$ pm2 reload app_name</span><br><span class="line">$ pm2 stop app_name</span><br><span class="line">$ pm2 delete app_name</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p><a
href="https://pm2.keymetrics.io/docs/usage/pm2-doc-single-page/">pm2官方文档</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Nodejs</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 中函数的参数</title>
    <url>/posts/2023/JKVCZP.html</url>
    <content><![CDATA[<p>函数的参数有 4 种，本文对这 4
种进行简要列举，方便回忆，详细请阅读后文中的参考链接。</p>
<span id="more"></span>
<h2 id="位置参数">位置参数</h2>
<p>用法如下 ：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">power</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br></pre></td></tr></table></figure>
<p><strong>使用要点：</strong></p>
<ol type="1">
<li>在调用时，必须按顺序给位置参数传递值</li>
</ol>
<h2 id="默认参数">默认参数</h2>
<p>用法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">power</span>(<span class="params">x, n=<span class="number">2</span></span>):</span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure>
<p><strong>使用要点：</strong></p>
<ol type="1">
<li>默认参数应在位置参数后面</li>
<li>在调用时，默认参数可以不传递值。没有值时取默认值</li>
<li>默认参数必须指向不变对象</li>
</ol>
<blockquote>
<p>在类的定义中，可以使用默认参数来实现函数的重载</p>
</blockquote>
<h2 id="可变参数">可变参数</h2>
<p>可变参数定义如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">*numbers</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br></pre></td></tr></table></figure>
<p>调用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用方式1</span></span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">calc(nums[<span class="number">0</span>], nums[<span class="number">1</span>], nums[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用方式2</span></span><br><span class="line">nums2 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment"># 定义一个 tuple</span></span><br><span class="line">cal(*nums2)</span><br></pre></td></tr></table></figure>
<p><strong>使用要点：</strong></p>
<ol type="1">
<li>可变参数接收者是 tuple 类型</li>
</ol>
<h2 id="关键字参数">关键字参数</h2>
<p>关键字参数允许传入任意个(包含 0
个)含参数名的参数，这些关键字参数在函数内部自动组装为一个 dict
类型。</p>
<h3 id="非命名关键字参数">非命名关键字参数</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">person</span>(<span class="params">name, age, **kw</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;name:&#x27;</span>, name, <span class="string">&#x27;age:&#x27;</span>, age, <span class="string">&#x27;other:&#x27;</span>, kw)</span><br></pre></td></tr></table></figure>
<h3 id="命名关键字参数">命名关键字参数</h3>
<p>如果要限制关键字参数的名字，就可以用命名关键字参数。</p>
<p>使用时，只能传入指定的关键字名，命名关键字参数需要一个特殊分隔符<code>*</code>，<code>*</code>后面的参数被视为命名关键字参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">person</span>(<span class="params">name, age, *, city, job=“dev”</span>):</span><br><span class="line">    <span class="built_in">print</span>(name, age, city, job)</span><br></pre></td></tr></table></figure>
<p><strong>使用要点：</strong></p>
<ol type="1">
<li>使用时，只能传入指定的关键字名。</li>
<li>命名关键字参数需要一个特殊分隔符<code>*</code>，<code>*</code>后面的参数被视为命名关键字参数。</li>
<li>如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符<code>*</code>：</li>
<li>命名参数可以设置默认值</li>
<li>没有默认值的命名参数，必须要传入值</li>
</ol>
<h2 id="参数组合">参数组合</h2>
<p>当必选参数、默认参数、可变参数、关键字参数和命名关键字参数组合使用时，其定义顺序为：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">a, b, c=<span class="number">0</span>, *args, **kw</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>, a, <span class="string">&#x27;b =&#x27;</span>, b, <span class="string">&#x27;c =&#x27;</span>, c, <span class="string">&#x27;args =&#x27;</span>, args, <span class="string">&#x27;kw =&#x27;</span>, kw)</span><br></pre></td></tr></table></figure>
<p>可以通过 tuple 和 dic 调用上述函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">args = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">kw = &#123;<span class="string">&#x27;d&#x27;</span>: <span class="number">99</span>, <span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;#&#x27;</span>&#125;</span><br><span class="line">f1(*args, **kw)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意前面的 <code>*</code> 号</p>
</blockquote>
<p>所以：对于任意函数，都可以通过类似<code>func(*args, **kw)</code>的形式调用它，无论它的参数是如何定义的。</p>
<h2 id="致谢">致谢</h2>
<p>本文参考以下文章，在此报以诚挚谢意！</p>
<ol type="1">
<li><a
href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017261630425888">函数的参数-廖雪峰的官方网站</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Python</category>
        <category>Base</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs 环境安装</title>
    <url>/posts/2022/2RW3NJ1.html</url>
    <content><![CDATA[
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Nodejs</category>
      </categories>
  </entry>
  <entry>
    <title>js对象获取属性的几种方法</title>
    <url>/posts/2020/1T9E994.html</url>
    <content><![CDATA[<p>js 对象获取属性有多种方法。</p>
<span id="more"></span>
<h2 id="通过-.-方式获取属性值">通过 <code>.</code> 方式获取属性值</h2>
<p>key是静态的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;<span class="attr">name</span>: <span class="string">&quot;zhang&quot;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br></pre></td></tr></table></figure>
<h2 id="通过-获取属性值">通过 <code>[]</code> 获取属性值</h2>
<p>key是动态的，可以是字符串，或者数字的形式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = &#123;<span class="string">&quot;apple&quot;</span>: <span class="number">3</span>, <span class="string">&quot;pear&quot;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">const</span> person = &#123;<span class="attr">name</span>: <span class="string">&quot;zhang&quot;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits[<span class="string">&quot;apple&quot;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person[<span class="number">1</span>]);  <span class="comment">// 注意这里的写法跟数组容易混淆，cc仍是对象，不是数组</span></span><br></pre></td></tr></table></figure>
<p>通过使用这种方式，可以在属性名定义和使用上实现解耦。</p>
<h2 id="object.keys方式">Object.keys()方式</h2>
<p>这是对象内置属性方法:
<strong>Object.keys()</strong>；该方法返回一个数组，数组内包括
<strong>对象内可枚举属性以及方法名称</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = &#123;<span class="string">&quot;apple&quot;</span>: <span class="number">3</span>, <span class="string">&quot;pear&quot;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">const</span> keys= <span class="title class_">Object</span>.<span class="title function_">keys</span>(fruits);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(keys); <span class="comment">// 输出 keys [&quot;apple&quot;, &quot;pear&quot;]</span></span><br></pre></td></tr></table></figure>
<h2 id="object.getownpropertynames">Object.getOwnPropertyNames()</h2>
<p>方法返回一个 <strong>指定对象</strong>
所有自身属性的属性名（包括<strong>不可枚举属性</strong>, 但不包括 Symbol
值作为名称的属性）组成的<strong>数组.</strong>（<strong>不可枚举:
比如属性是一个js方法</strong>）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = &#123;<span class="string">&quot;apple&quot;</span>: <span class="number">3</span>, <span class="string">&quot;pear&quot;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(fruits);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(keys);　　<span class="comment">// 输出 keys [&quot;apple&quot;, &quot;pear&quot;]</span></span><br></pre></td></tr></table></figure>
<h2 id="for...in">for...in</h2>
<p>最原始的 <strong>for...in</strong> 循环</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = &#123;<span class="string">&quot;apple&quot;</span>: <span class="number">3</span>, <span class="string">&quot;pear&quot;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">const</span> keys =[];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> fruits)&#123;</span><br><span class="line">    keys.<span class="title function_">push</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(keys);   <span class="comment">// 输出 keys [&quot;apple&quot;, &quot;pear&quot;]</span></span><br></pre></td></tr></table></figure>
<h2 id="致谢">致谢</h2>
<ol type="1">
<li><p><a
href="https://www.cnblogs.com/yangyi9343/p/9298276.html">JS获取对象“属性”的方法</a></p></li>
<li><p><a
href="https://blog.csdn.net/u012491783/article/details/86540044">js对象获取属性的方法(.和[]方式)</a></p></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>JSLanguage</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>eggjs 实现文件下载</title>
    <url>/posts/2022/198SKHP.html</url>
    <content><![CDATA[<p>本文 介绍了在 eggjs
中如何编写下载模块供其它终端进行文件下载的方法。</p>
<span id="more"></span>
<h2 id="eggjs-官方方法">Eggjs 官方方法</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">index</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">body</span> = [</span><br><span class="line">    <span class="string">&#x27;&lt;a download href=&quot;/download&quot;&gt;download&lt;/a&gt;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&lt;br&gt;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&lt;a download href=&quot;/download-image&quot;&gt;download image&lt;/a&gt;&#x27;</span>,</span><br><span class="line">  ].<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向下传递流</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">download</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> filePath = path.<span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">config</span>.<span class="property">static</span>.<span class="property">dir</span>, <span class="string">&#x27;hello.txt&#x27;</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="title function_">attachment</span>(<span class="string">&#x27;hello.txt&#x27;</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="title function_">set</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/octet-stream&#x27;</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">body</span> = fs.<span class="title function_">createReadStream</span>(filePath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从其它地方转存下载文件</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">downloadImage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">&#x27;http://cdn2.ettoday.net/images/1200/1200526.jpg&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="title function_">curl</span>(url, &#123;</span><br><span class="line">    <span class="attr">streaming</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">type</span> = <span class="string">&#x27;jpg&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">body</span> = res.<span class="property">res</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2
id="支持进度条和剩余时间content-length">支持进度条和剩余时间(Content-Length)</h2>
<p>为了支持进度条，需要在 HTTP 返回头里设置
<code>Content-Length</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">download</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> filePath = <span class="string">&#x27;/path/to/file&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> fileSize = (<span class="keyword">await</span> util.<span class="title function_">promisify</span>(fs.<span class="property">stat</span>)(filePath)).<span class="property">size</span>.<span class="title function_">toString</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="title function_">attachment</span>(filePath);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="title function_">set</span>(<span class="string">&#x27;Content-Length&#x27;</span>, fileSize);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="title function_">set</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/octet-stream&#x27;</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">body</span> = fs.<span class="title function_">createReadStream</span>(filePath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="分段下载">分段下载</h2>
<p>未完成。</p>
<h2 id="参考">参考</h2>
<ol type="1">
<li>https://github.com/eggjs/examples/blob/master/download/app/controller/index.js</li>
<li><a
href="https://www.zhihu.com/question/59351806">eggjs怎么实现文件下载？</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Eggjs</category>
      </categories>
      <tags>
        <tag>eggjs</tag>
        <tag>文件下载</tag>
      </tags>
  </entry>
  <entry>
    <title>js中this的粗暴简单理解</title>
    <url>/posts/2020/2EFJQ9T.html</url>
    <content><![CDATA[<p>从 C# 转到 JS, 感觉 各种帖子中的对于 JS 中的 this
指向描述得复杂无比，本来好好简单的事情，害得我花了好久的时间才理解。于是将自己的拙见分享出来。</p>
<span id="more"></span>
<p>要理解 this 的指向，只需要记住：</p>
<p><strong>this
指向执行时所在的上下文，即被调用函数所在的对象。</strong></p>
<h2 id="一般情况">一般情况</h2>
<p>那么究竟要怎么确定 this
对象呢？我们只需要一级一级向上，遇到的第一个对象就是我们要的 this
对象。</p>
<p>下面举例说明：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">s</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">s</span>:<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="attr">f</span>:fun</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例1</span></span><br><span class="line">obj.<span class="title function_">f</span>(); <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例2</span></span><br><span class="line"><span class="title function_">fun</span>(); <span class="comment">//2</span></span><br></pre></td></tr></table></figure>
<p>例 1 中，从 <code>obj.f()</code> 向上级搜索，找到的第一个对象就是
<code>obj</code> ,所以例 1 中的 this 是 obj。</p>
<p>例 2 中，从 <code>f()</code> 开始向上搜索，找到的第一个对象是当前
model。</p>
<p>下面再来一个例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">f</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;姓名：&#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">B.<span class="property">f</span> = A.<span class="property">f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例3</span></span><br><span class="line">B.<span class="title function_">f</span>()   <span class="comment">// 姓名：李四</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例4</span></span><br><span class="line">A.<span class="title function_">f</span>()   <span class="comment">// 姓名：张三</span></span><br></pre></td></tr></table></figure>
<p>例 3 中，<code>B</code> 对象中的 <code>f()</code> 函数是由
<code>A</code> 传递给它的，因为函数在内存中是一个单独的地址，所以
<code>A</code> 在将 <code>f</code> 赋给 <code>B</code>
的过程中，并不会将 <code>A</code>
的作用域也一并传递过去，所以，<code>B</code> 中 <code>f()</code>
的上一级就是 <code>B</code>。</p>
<h2 id="匿名函数">匿名函数</h2>
<p>上面的规则，不适用于匿名函数。匿名函数是在哪儿声明，它的
<code>this</code> 就指向声明位置处函数的上下文中的
<code>this</code>。</p>
<h2 id="特殊情况">特殊情况</h2>
<p>JS 提供了一些可以修改 this
指向的函数。它们分别是call()、apply()、bind()。这些方法会指定里面 this
的指向。</p>
<p>具体区别请见 <a
href="https://www.runoob.com/w3cnote/js-call-apply-bind.html">JavaScript
中 call()、apply()、bind() 的用法</a>。</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>JSLanguage</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title>js代码简化的几种方式</title>
    <url>/posts/2020/1C38P4H.html</url>
    <content><![CDATA[<p>splice 的缺陷</p>
<p>为了在编写 JS
代码过程，更加的简洁和优雅，总结了一些简化语句的使用方法。</p>
<span id="more"></span>
<h2 id="传统-switch-改写">传统 switch 改写</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 改动前</span></span><br><span class="line"><span class="keyword">if</span>(result&gt;<span class="number">1</span> &amp;&amp; result&lt;<span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;<span class="title function_">elseif</span>(<span class="params">result&gt;<span class="number">10</span> &amp;&amp; result&lt;<span class="number">20</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改动后</span></span><br><span class="line"><span class="keyword">switch</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">case</span> (result&gt;<span class="number">1</span> &amp;&amp; result&lt;<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">case</span> (result&gt;<span class="number">10</span> &amp;&amp; result&lt;<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="attr">default</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三元运算符替换">三元运算符替换</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改前</span></span><br><span class="line"><span class="keyword">if</span>(bool)&#123;</span><br><span class="line">    val = <span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    val = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改动后</span></span><br><span class="line">val = bool ? <span class="number">1</span> : <span class="number">2</span></span><br></pre></td></tr></table></figure>
<h2 id="逻辑判断改写">逻辑判断改写</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(bool)&#123;</span><br><span class="line">    val = <span class="title function_">test</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 改动后</span></span><br><span class="line">bool &amp;&amp; (val = <span class="title function_">test</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!bool)&#123;</span><br><span class="line">    val = <span class="title function_">test</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 改动后</span></span><br><span class="line">bool || (val = <span class="title function_">test</span>())</span><br></pre></td></tr></table></figure>
<h2 id="对象属性改写">对象属性改写</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(result==<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;one&#x27;</span></span><br><span class="line">&#125;<span class="title function_">elseif</span>(<span class="params">result=<span class="number">2</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;two&#x27;</span></span><br><span class="line">&#125;<span class="title function_">elseif</span>(<span class="params">result=<span class="number">3</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;three&#x27;</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 改动后</span></span><br><span class="line">result_info = &#123;<span class="number">1</span>:<span class="string">&#x27;one&#x27;</span>,<span class="number">2</span>:<span class="string">&#x27;two&#x27;</span>,<span class="number">3</span>:<span class="string">&#x27;three&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">return</span> result_info[result] ? result_info[result] : <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="致谢">致谢</h2>
<ol type="1">
<li><a
href="https://segmentfault.com/q/1010000007013419">js减少if语句的技巧</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>JSLanguage</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>exports、module.exports 和 export、export default 到底是咋回事？</title>
    <url>/posts/2020/1PNK91Q.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>最近使用 node 和 vue 一起编程，想到 ES6 各种 export 、export
default。阿西吧，头都大了....</p>
<p>头大完了，那我们坐下先理理他们的使用范围。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">require:  node 支持的引入</span><br><span class="line"></span><br><span class="line">module.exports / exports: 只有 node 支持的导出</span><br><span class="line"></span><br><span class="line">export / import : 只有es6 支持的导出引入</span><br></pre></td></tr></table></figure>
<p>这一刻起，我觉得是时候要把它们之间的关系都给捋清楚了，不然我得混乱死。话不多少，咱们开干！！</p>
<span id="more"></span>
<h2 id="node模块">node模块</h2>
<h3 id="理解">理解</h3>
<p>Node里面的模块系统遵循的是 CommonJS 规范。</p>
<p>那问题又来了，什么是CommonJS规范呢？</p>
<p>由于js以前比较混乱，各写各的代码，没有一个模块的概念，而这个规范出来其实就是对模块的一个定义。</p>
<p><strong>CommonJS定义的模块分为: 模块标识(module)、模块定义(exports)
、模块引用(require)</strong></p>
<p>先解释 exports 和 module.exports</p>
<p>在一个 node 执行一个文件时，会给这个文件内生成一个 exports 和 module
对象， 而 module 又有一个 exports
属性。他们都指向一块{}内存区域，关系如下图。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span> = <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;&#125;;</span><br></pre></td></tr></table></figure>
<p><img data-src="https://user-gold-cdn.xitu.io/2017/7/31/6227d4e0917f4af649d9f9e750eddb09?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" /></p>
<p>那下面我们来看看代码的吧。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//utils.js</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">exports</span>); <span class="comment">//能打印出结果为：&#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">exports</span>); <span class="comment">//能打印出结果为：&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">a</span> = <span class="number">200</span>; <span class="comment">//这里辛苦劳作帮 module.exports 的内容给改成 &#123;a : 200&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">a</span> = <span class="number">100</span>; <span class="comment">//修改内存里面的值为100</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span> = <span class="string">&#x27;指向其他内存区&#x27;</span>; <span class="comment">//这里把exports的指向指走</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//test.js</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">&#x27;/utils&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 打印为 &#123;a : 100&#125; </span></span><br></pre></td></tr></table></figure>
<p>从上面可以看出，其实 require 导出的内容是 module.exports
的指向的内存块内容，并不是exports 的。</p>
<p>简而言之，区分他们之间的区别就是 exports 只是 module.exports
的引用，辅助后者添加内容用的。下面的摘抄<a
href="https://nodejs.org/docs/latest-v12.x/api/modules.html#modules_module_exports">nodejs官方的代码</a>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">require</span>(<span class="params"><span class="comment">/* ... */</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable language_">module</span> = &#123; <span class="attr">exports</span>: &#123;&#125; &#125;;</span><br><span class="line">  (<span class="function">(<span class="params"><span class="variable language_">module</span>, <span class="built_in">exports</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Module code here. In this example, define a function.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">someFunc</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">exports</span> = someFunc;</span><br><span class="line">    <span class="comment">// At this point, exports is no longer a shortcut to module.exports, and</span></span><br><span class="line">    <span class="comment">// this module will still export an empty default object.</span></span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = someFunc;</span><br><span class="line">    <span class="comment">// At this point, the module will now export someFunc, instead of the</span></span><br><span class="line">    <span class="comment">// default object.</span></span><br><span class="line">  &#125;)(<span class="variable language_">module</span>, <span class="variable language_">module</span>.<span class="property">exports</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用白话讲就是，exports 只辅助 module.exports
操作内存中的数据，辛辛苦苦各种操作数据完，累得要死，结果到最后真正被
require 出去的内容还是 module.exports 的，真是好苦逼啊。</p>
<p>其实大家用内存块的概念去理解，就会很清楚了。</p>
<p>然后呢，为了避免糊涂，尽量都用 module.exports 导出，然后用 require
导入。</p>
<h3 id="node-模块的导出方式">node 模块的导出方式</h3>
<p>上面讲了 exports, module.exports 的区别</p>
<p>接下来总结一下使用 CommonJS 规范时，有哪些导出形式</p>
<h3 id="导出函数">导出函数</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义模块</span></span><br><span class="line"><span class="comment">// user.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getName</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Jim&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">getName</span> = getName;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用模块</span></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="built_in">require</span>(<span class="string">&#x27;./user&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`User: <span class="subst">$&#123;user.getName()&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="title class_">User</span>: <span class="title class_">Jim</span></span><br></pre></td></tr></table></figure>
<h3 id="导出多个函数和值">导出多个函数和值</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="comment">// user.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getName</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Jim&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getLocation</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Munich&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dateOfBirth = <span class="string">&#x27;12.01.1982&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">getName</span> = getName;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">getLocation</span> = getLocation;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">dob</span> = dateOfBirth;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="built_in">require</span>(<span class="string">&#x27;./user&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  <span class="string">`<span class="subst">$&#123;user.getName()&#125;</span> lives in <span class="subst">$&#123;user.getLocation()&#125;</span> and was born on <span class="subst">$&#123;user.dob&#125;</span>.`</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="title class_">Jim</span> lives <span class="keyword">in</span> <span class="title class_">Munich</span> and was born on <span class="number">12.01</span><span class="number">.1982</span>.</span><br></pre></td></tr></table></figure>
<p>在导出的过程中，可以与原变量有不同的名字</p>
<h3 id="语法变化">语法变化</h3>
<p>我们可以在文件的任何地方导出方法或者值:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">getName</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Jim&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">getLocation</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Munich&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">dob</span> = <span class="string">&#x27;12.01.1982&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="导出默认值">导出默认值</h3>
<p>上面的方式是对函数和值进行分别导出，这种方式适合于帮助类。但当你只想导出一个对象的时候，可以使用
<code>module.exports</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age, email</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">email</span> = email;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getUserStats</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">      Name: <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span></span></span><br><span class="line"><span class="string">      Age: <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span></span></span><br><span class="line"><span class="string">      Email: <span class="subst">$&#123;<span class="variable language_">this</span>.email&#125;</span></span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处直接将类赋值给 module.exports</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">User</span>;</span><br></pre></td></tr></table></figure>
<h2 id="es6-中的模块导出导入">ES6 中的模块导出导入</h2>
<p>说实话，在 es
中的模块，就非常清晰了。不过也有一些细节的东西需要搞清楚。</p>
<p>比如 export 和 export default，还有 导入的时候，import a from ..,
import {a} from ..，总之也有点乱，那么下面我们就开始把它们捋清楚吧。</p>
<h3 id="export-和-export-default">export 和 export default</h3>
<p>首先我们讲这两个导出，下面我们讲讲它们的区别：</p>
<ul>
<li><p>export 与 export default
均可用于导出常量、函数、文件、模块等</p></li>
<li><p>在一个文件或模块中，export、import 可以有多个，export default
仅有一个</p></li>
<li><p>通过 export 方式导出，在导入时要加{ name }，export default
则不需要</p></li>
<li><p>export 导入时，只能使用定义时的名称，而 export default
导入时，可以是任意名称</p></li>
<li><p>export 能直接导出变量表达式，export default 不行</p></li>
</ul>
<p>上面的两种方式，export 适合于一个模块中有 0 个或者多个 export
的情况；export default 则只能有一个。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出独立的特征</span></span><br><span class="line"><span class="comment">// Exporting individual features</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name1, name2, …, nameN; <span class="comment">// also var, const</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name1 = …, name2 = …, …, nameN; <span class="comment">// also var, const</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">functionName</span>(<span class="params"></span>)&#123;...&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ClassName</span> &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出列表</span></span><br><span class="line"><span class="comment">// Export list</span></span><br><span class="line"><span class="keyword">export</span> &#123; name1, name2, …, nameN &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出时重命名</span></span><br><span class="line"><span class="comment">// Renaming exports</span></span><br><span class="line"><span class="keyword">export</span> &#123; variable1 <span class="keyword">as</span> name1, variable2 <span class="keyword">as</span> name2, …, nameN &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出时解构并重命名</span></span><br><span class="line"><span class="comment">// Exporting destructured assignments with renaming</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; name1, <span class="attr">name2</span>: bar &#125; = o;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Default exports</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> expression;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">…</span>) &#123; … &#125; <span class="comment">// also class, function*</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">name1</span>(<span class="params">…</span>) &#123; … &#125; <span class="comment">// also class, function*</span></span><br><span class="line"><span class="keyword">export</span> &#123; name1 <span class="keyword">as</span> <span class="keyword">default</span>, … &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 聚合模块：用于聚合其它模块并在当前模块导出</span></span><br><span class="line"><span class="comment">// Aggregating modules</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> …; <span class="comment">// does not set the default export </span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">as</span> name1 <span class="keyword">from</span> …; <span class="comment">// Draft ECMAScript® 2O21</span></span><br><span class="line"><span class="keyword">export</span> &#123; name1, name2, …, nameN &#125; <span class="keyword">from</span> …;</span><br><span class="line"><span class="keyword">export</span> &#123; import1 <span class="keyword">as</span> name1, import2 <span class="keyword">as</span> name2, …, nameN &#125; <span class="keyword">from</span> …;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> &#125; <span class="keyword">from</span> …;</span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2>
<ul>
<li>在 node 中使用 module.exports exports 和 require</li>
<li>在 ES6 中使用 export export default 和 import</li>
</ul>
<h2 id="致谢">致谢</h2>
<ol type="1">
<li><p><a
href="https://juejin.im/post/6844903489257095181">exports、module.exports
和 export、export default 到底是咋回事</a></p></li>
<li><p><a
href="https://www.sitepoint.com/understanding-module-exports-exports-node-js/">Understanding
module.exports and exports in Node.js</a></p></li>
<li><p><a
href="https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export">MDN
export</a></p></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>JSLanguage</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>js中对象的创建及理解</title>
    <url>/posts/2020/ZWWE36.html</url>
    <content><![CDATA[<p>初学 JavalScrip
时，它的自由让人很不适应，特别是对于对象的创建，很是疑惑：它没有类的概念（初学时了解的水平），也没有构造函数,
而更不能理解的是，它的实例是通过 new
函数得到的。直到看了《JavaScrip高级程序设计》之后，才恍然大悟，特此总结，希望能给那些初学者一点解惑之光，若有不足之处，还请斧正。</p>
<span id="more"></span>
<h2 id="用-c-创建对象">用 C# 创建对象</h2>
<p>首先，我们看一下，在 C# 中怎么创建一个对象</p>
<ul>
<li><p>定义类</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类的定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 定义属性</span></span><br><span class="line">    <span class="keyword">public</span> String Name &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name,<span class="built_in">int</span> age</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Name = name;</span><br><span class="line">        <span class="keyword">this</span>.Age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建C#对象</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Person person = <span class="keyword">new</span> Person(<span class="string">&#x27;zhangsan&#x27;</span>,<span class="number">18</span>);</span><br></pre></td></tr></table></figure>
<p>上面就是 C# 创建对象的过程</p></li>
</ul>
<h2 id="用-js-创建对象">用 js 创建对象</h2>
<p>现在我们再来看一下 js 中如何创建对象（ES5中构造函数方式）</p>
<ul>
<li><p>定义函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fuction <span class="title class_">Person</span>(name,age)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建 js 对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// const ES6 中的声明</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;lisi&#x27;</span>,<span class="number">19</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="js-创建对象原理分析">js 创建对象原理分析</h2>
<p>要理解 js 中创建对象为什么可以 new
函数得到，我们需要追本溯源，一步一步了解 js 中创建对象的演变</p>
<ul>
<li><p>最开始是 new Object 形式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;lisi&#x27;</span>;</span><br><span class="line">person.<span class="property">age</span> = <span class="number">19</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>然后是工厂模式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">	o.<span class="property">name</span> = name;</span><br><span class="line">	o.<span class="property">age</span> = age;</span><br><span class="line">	<span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>随着演变，出现了构造函数模式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义构造函数时，首字母建议大写，用于区别一般函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>分析</p>
<p>对比工厂模式和构造函数模式，我们可以看到有如下区别</p>
<ul>
<li><p>后者没有显式地创建对象</p></li>
<li><p>直接将属性和方法赋给了 this 对象</p></li>
<li><p>没有 return 语句</p></li>
<li><p>创建新实例的时候，必须用 new</p></li>
</ul>
<p>构造函数在创建对象的时候，其实经过了下面步骤：</p>
<ul>
<li>创建一个新对象</li>
<li>将构造函数的作用域赋给新对象（因此 this 指向了新的对象）</li>
<li>执行构造函数的代码（为这个新对象添加属性）</li>
<li>返回新对象</li>
</ul></li>
</ul>
<p>通过上面分析，我们就很容易地理解了，为什么 new
一个函数可以创建对象</p>
<h2 id="将构造函数当作函数">将构造函数当作函数</h2>
<p>构造函数与其他函数的唯一区别，就在于调用它们的方式不同。不过，构造函数毕竟也是函数，不存在定义构造函数的特殊语法。任何函数，只要通过
new 操作符来调用，那它就可以作为构造函数；而任何函数，如果不通过 new
操作符来调用，那它跟普通函数也不会有什么两样。不过直接调用的时候，它就是向上下文的
this 添加字段。</p>
<h2 id="构造函数方式的问题">构造函数方式的问题</h2>
<p>使用构造函数的主要问题，就是每个方法都要在每个实例上重新创建一遍。</p>
<p>例如有如下构造函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, job</span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">job</span> = job;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当实例化多个 Person 后，每个实例中的 sayName
不是同一个，上面的定义可以等价为：</p>
<p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, job</span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">job</span> = job;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">sayName</span> = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;alert(this.name)&quot;</span>); <span class="comment">// 与声明函数在逻辑上是等价的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然而，创建两个完成同样任务的 Function 实例的确没有必要；况且有 this
对象在，根本不用在执行代码前就把函数绑定到特定对象上面。因此，大可像下面这样，通过把函数定义转移到构造函数外部来解决这个问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, job</span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">job</span> = job;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">sayName</span> = sayName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayName</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们把
sayName()函数的定义转移到了构造函数外部。而在构造函数内部，我们将
sayName 属性设置成等于全局的 sayName 函数。这样一来，由于 sayName
包含的是一个指向函数的指针。</p>
<h2 id="最优的对象声明方式">最优的对象声明方式</h2>
<p>既然分析了 js
创建对象的原理，那么现在就必须要分享一下，什么是最优的对象声明方式了。原理部分直接省略，此处只给出最终的答案——动态原型模式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, job</span>)&#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">job</span> = job;</span><br><span class="line">    <span class="comment">// 方法: 在原型上声明</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span>.<span class="property">sayName</span> != <span class="string">&quot;function&quot;</span>)&#123;</span><br><span class="line">        <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>JSLanguage</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>js对象</tag>
      </tags>
  </entry>
  <entry>
    <title>数组中 unshift 与解构赋值一起使用，顺序错误分析</title>
    <url>/posts/2020/1SH18GY.html</url>
    <content><![CDATA[<p>js 数组为空时，使用 unshift
方法，通过解构向数组头部插入数据时，会失效，等同于 push 效果。</p>
<span id="more"></span>
<p>代码复现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = []</span><br><span class="line"><span class="comment">// unshift 2 个值</span></span><br><span class="line">arr.<span class="title function_">unshift</span>(...[<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;空数组 unshift 后的值: &#x27;</span>,arr);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结果</span></span><br><span class="line">空数组 unshift 后的值:  [ <span class="number">1</span>, <span class="number">2</span> ]</span><br></pre></td></tr></table></figure>
<p>我们发现，上面的结果并不是我们想要的，我们所期望的结果应该是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 期望结果</span></span><br><span class="line">空数组 unshift 后的值:  [ <span class="number">2</span>, <span class="number">1</span> ]</span><br></pre></td></tr></table></figure>
<p>那么，为什么出现上面意外的结果，原因就是因为 arr 初始值为空。</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>JSLanguage</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javalscript 中的原型来源和理解</title>
    <url>/posts/2021/1RYMZHY.html</url>
    <content><![CDATA[<p>一直不能很好的理解 javascrip
的原型，个人认为它的原型有些反人类直觉，所以让人不是很好理解，所以特意抽时间整理了下。</p>
<span id="more"></span>
<h2 id="为什么用原型来实现继承">为什么用原型来实现继承</h2>
<p>我一直存在这样一个疑惑，既然 js 提供了对象，为什么不能提供像
C#、Javal
这种语言中对象的继承特性，而是要靠原型来实现，让我开始接触时，产生了不解和抵触。
直到我看到了这篇文章：<a
href="http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html">Javascript继承机制的设计思想</a>
才恍然大悟。</p>
<p>javascrip 设计者 Brendan
Eich，他的主要方向和兴趣是函数式编程。再加上当时<strong>网景公司的整个管理层，都是Java语言的信徒，Sun公司完全介入网页脚本语言的决策。</strong></p>
<p>所以，<strong>Javascript语言实际上是两种语言风格的混合产物----（简化的）函数式编程+（简化的）面向对象编程。</strong>这是由Brendan
Eich（函数式编程）与网景公司（面向对象编程）共同决定的。</p>
<p>javascript 的设计思路为：</p>
<ol type="1">
<li><p>借鉴C语言的基本语法；</p></li>
<li><p>借鉴Java语言的数据类型和内存管理；</p></li>
<li><p>借鉴Scheme语言，将函数提升到"第一等公民"（first
class）的地位；</p></li>
<li><p>借鉴<a
href="http://en.wikipedia.org/wiki/Self_(programming_language)">Self语言</a>，使用基于原型（prototype）的继承机制。</p></li>
</ol>
<p>由于 Javascript 借鉴了 Java 里的设计思想，javascrip
里面都是对象，所以必须有一种机制，将所有对象联系起来。最后，Brendan
Eich设计了基于原型的"继承"。</p>
<h2 id="怎么理解原来及原型链">怎么理解原来及原型链</h2>
<p>原型及原型链的理解可以参考：<a
href="https://segmentfault.com/a/1190000021232132">一张图搞定JS原型&amp;原型链</a></p>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a
href="http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html">Javascript继承机制的设计思想</a></li>
<li><a
href="http://www.ruanyifeng.com/blog/2011/06/birth_of_javascript.html">Javascript诞生记</a></li>
<li><a
href="https://segmentfault.com/a/1190000021232132">一张图搞定JS原型&amp;原型链</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>JSLanguage</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javalscript 中的原型来源和理解</title>
    <url>/posts/2021/1RYMZHY.html</url>
    <content><![CDATA[<p>一直不能很好的理解 javascrip
的原型，个人认为它的原型有些反人类直觉，所以让人不是很好理解，所以特意抽时间整理了下。</p>
<span id="more"></span>
<h2 id="为什么用原型来实现继承">为什么用原型来实现继承</h2>
<p>我一直存在这样一个疑惑，既然 js 提供了对象，为什么不能提供像
C#、Javal
这种语言中对象的继承特性，而是要靠原型来实现，让我开始接触时，产生了不解和抵触。
直到我看到了这篇文章：<a
href="http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html">Javascript继承机制的设计思想</a>
才恍然大悟。</p>
<p>javascrip 设计者 Brendan
Eich，他的主要方向和兴趣是函数式编程。再加上当时<strong>网景公司的整个管理层，都是Java语言的信徒，Sun公司完全介入网页脚本语言的决策。</strong></p>
<p>所以，<strong>Javascript语言实际上是两种语言风格的混合产物----（简化的）函数式编程+（简化的）面向对象编程。</strong>这是由Brendan
Eich（函数式编程）与网景公司（面向对象编程）共同决定的。</p>
<p>javascript 的设计思路为：</p>
<ol type="1">
<li><p>借鉴C语言的基本语法；</p></li>
<li><p>借鉴Java语言的数据类型和内存管理；</p></li>
<li><p>借鉴Scheme语言，将函数提升到"第一等公民"（first
class）的地位；</p></li>
<li><p>借鉴<a
href="http://en.wikipedia.org/wiki/Self_(programming_language)">Self语言</a>，使用基于原型（prototype）的继承机制。</p></li>
</ol>
<p>由于 Javascript 借鉴了 Java 里的设计思想，javascrip
里面都是对象，所以必须有一种机制，将所有对象联系起来。最后，Brendan
Eich设计了基于原型的"继承"。</p>
<h2 id="怎么理解原来及原型链">怎么理解原来及原型链</h2>
<p>原型及原型链的理解可以参考：<a
href="https://segmentfault.com/a/1190000021232132">一张图搞定JS原型&amp;原型链</a></p>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a
href="http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html">Javascript继承机制的设计思想</a></li>
<li><a
href="http://www.ruanyifeng.com/blog/2011/06/birth_of_javascript.html">Javascript诞生记</a></li>
<li><a
href="https://segmentfault.com/a/1190000021232132">一张图搞定JS原型&amp;原型链</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>JSLanguage</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>深入浅出地理解 js 中原型</title>
    <url>/posts/2022/18JF19Q.html</url>
    <content><![CDATA[<p>准备静心理解一下 JS
中的原型，仔细一查，网上各有各的理解，各有各的缺点，让人眼花缭乱，看不通透。本文将从原理手，由浅入深地理解原型的概念。</p>
<span id="more"></span>
<p><img data-src="https://s2.loli.net/2022/01/20/KA85wXbD7Cp6zvF.jpg" /></p>
<p>相信初学者一定认得此图，本人才理解时，把它视作天书，日夜观摩，妄想一步登天，顿悟
JS
原型链的大道，后来才发现，还是得从原理出发，才能行以致远，取得真经。</p>
<p>咱们先从 JS 的起源说起。</p>
<h2 id="js-的诞生">JS 的诞生</h2>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>JSLanguage</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>原型</tag>
      </tags>
  </entry>
  <entry>
    <title>promise的理解与实践</title>
    <url>/posts/2020/MV7E84.html</url>
    <content><![CDATA[<p>Promise 的使用是 js
编程中必须要掌握的技能，而且，它确实使用起来很方便，下面整理一下相关的知识点，以免今后遗忘，同时，节约查询的时间。</p>
<span id="more"></span>
<h2 id="原理学习">原理学习</h2>
<p>我认为孔家少爷的知乎解释最透彻，<strong>该系列文章由浅入深逐步实现
Promise，并结合流程图、实例以及动画进行演示，达到深刻理解 Promise
用法的目的。</strong>链接如下：</p>
<ol type="1">
<li><a href="https://zhuanlan.zhihu.com/p/58428287">图解 Promise
实现原理（一）—— 基础实现</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/102017798">图解 Promise
实现原理（二）—— Promise 链式调用</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/102018239">图解 Promise
实现原理（三）—— Promise 原型方法实现</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/102018323">图解 Promise
实现原理（四）—— Promise 静态方法实现</a></li>
</ol>
<p>在 new Promise(fn)时，fn会立即执行</p>
<h2 id="使用总结">使用总结</h2>
<p>有了<code>Promise</code>对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，<code>Promise</code>对象提供统一的接口，使得控制异步操作更加容易。</p>
<p><code>Promise</code>也有一些缺点。</p>
<ul>
<li><p>首先，无法取消<code>Promise</code>，一旦新建它就会立即执行，无法中途取消。</p></li>
<li><p>其次，如果不设置回调函数，<code>Promise</code>内部抛出的错误，不会反应到外部。</p></li>
<li><p>第三，当处于<code>pending</code>状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p></li>
</ul>
<p>如果某些事件不断地反复发生，一般来说，使用 <a
href="https://nodejs.org/api/stream.html">Stream</a>
模式是比部署<code>Promise</code>更好的选择。</p>
<h3 id="基本用法">基本用法</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">// ... some code</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// failure</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>例1：</strong></p>
<p>Promise 新建后就会立即执行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Promise&#x27;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;resolved.&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi!&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise</span></span><br><span class="line"><span class="comment">// Hi!</span></span><br><span class="line"><span class="comment">// resolved</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，Promise
新建后立即执行，所以首先输出的是<code>Promise</code>。然后，<code>then</code>方法指定的回调函数，将在当前脚本所有同步任务执行完才会执行，所以<code>resolved</code>最后输出。</p>
<p><strong>例2:</strong></p>
<p><code>resolve</code>函数的参数除了正常的值以外，还可能是另一个
Promise 实例，比如像下面这样。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="title function_">resolve</span>(p1);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>上面代码中，<code>p1</code>和<code>p2</code>都是 Promise
的实例，但是<code>p2</code>的<code>resolve</code>方法将<code>p1</code>作为参数，即一个异步操作的结果是返回另一个异步操作。</p>
<p>注意，这时<code>p1</code>的状态就会传递给<code>p2</code>，也就是说，<code>p1</code>的状态决定了<code>p2</code>的状态。如果<code>p1</code>的状态是<code>pending</code>，那么<code>p2</code>的回调函数就会等待<code>p1</code>的状态改变；如果<code>p1</code>的状态已经是<code>resolved</code>或者<code>rejected</code>，那么<code>p2</code>的回调函数将会立刻执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;fail&#x27;</span>)), <span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(p1), <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p2</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error))</span><br><span class="line"><span class="comment">// Error: fail</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，<code>p1</code>是一个 Promise，3
秒之后变为<code>rejected</code>。<code>p2</code>的状态在 1
秒之后改变，<code>resolve</code>方法返回的是<code>p1</code>。由于<code>p2</code>返回的是另一个
Promise，导致<code>p2</code>自己的状态无效了，由<code>p1</code>的状态决定<code>p2</code>的状态。所以，后面的<code>then</code>语句都变成针对后者（<code>p1</code>）。又过了
2
秒，<code>p1</code>变为<code>rejected</code>，导致触发<code>catch</code>方法指定的回调函数。</p>
<p>注意，调用<code>resolve</code>或<code>reject</code>并不会终结 Promise
的参数函数的执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(r);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，调用<code>resolve(1)</code>以后，后面的<code>console.log(2)</code>还是会执行，并且会首先打印出来。这是因为立即
resolved 的 Promise
是在本轮事件循环的末尾执行，总是晚于本轮循环的同步任务。</p>
<p>一般来说，调用<code>resolve</code>或<code>reject</code>以后，Promise
的使命就完成了，后继操作应该放到<code>then</code>方法里面，而不应该直接写在<code>resolve</code>或<code>reject</code>的后面。所以，最好在它们前面加上<code>return</code>语句，这样就不会有意外。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 后面的语句不会执行</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="原型函数">原型函数</h3>
<h4 id="promise.prototype.then">Promise.prototype.then() <a
href="https://es6.ruanyifeng.com/#docs/promise#Promise-prototype-then">§</a>
<a href="https://es6.ruanyifeng.com/#docs/promise">⇧</a></h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getJSON</span>(<span class="string">&quot;/post/1.json&quot;</span>).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">post</span> =&gt;</span> <span class="title function_">getJSON</span>(post.<span class="property">commentURL</span>)</span><br><span class="line">).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">comments</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resolved: &quot;</span>, comments),</span><br><span class="line">  <span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;rejected: &quot;</span>, err)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>其中，err 是可以省略的</p>
<h4 id="promise.prototype.catch">Promise.prototype.catch() <a
href="https://es6.ruanyifeng.com/#docs/promise#Promise-prototype-catch">§</a>
<a href="https://es6.ruanyifeng.com/#docs/promise">⇧</a></h4>
<p><code>Promise.prototype.catch()</code>方法是<code>.then(null, rejection)</code>或<code>.then(undefined, rejection)</code>的别名，用于指定发生错误时的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getJSON</span>(<span class="string">&#x27;/posts.json&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">posts</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 处理 getJSON 和 前一个回调函数运行时发生的错误</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发生错误！&#x27;</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="promise.prototype.finally">Promise.prototype.finally() <a
href="https://es6.ruanyifeng.com/#docs/promise#Promise-prototype-finally">§</a>
<a href="https://es6.ruanyifeng.com/#docs/promise">⇧</a></h4>
<p><code>finally()</code>方法用于指定不管 Promise
对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">promise</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;···&#125;);</span><br></pre></td></tr></table></figure>
<p>上面代码中，不管<code>promise</code>最后的状态，在执行完<code>then</code>或<code>catch</code>指定的回调函数以后，都会执行<code>finally</code>方法指定的回调函数。</p>
<h4 id="promise.all">Promise.all() <a
href="https://es6.ruanyifeng.com/#docs/promise#Promise-all">§</a> <a
href="https://es6.ruanyifeng.com/#docs/promise">⇧</a></h4>
<p><code>Promise.all()</code>方法用于将多个 Promise 实例，包装成一个新的
Promise 实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2, p3]);</span><br></pre></td></tr></table></figure>
<p>上面代码中，<code>Promise.all()</code>方法接受一个数组作为参数，<code>p1</code>、<code>p2</code>、<code>p3</code>都是
Promise
实例，如果不是，就会先调用下面讲到的<code>Promise.resolve</code>方法，将参数转为
Promise
实例，再进一步处理。另外，<code>Promise.all()</code>方法的参数可以不是数组，但必须具有
Iterator 接口，且返回的每个成员都是 Promise 实例。</p>
<p><code>p</code>的状态由<code>p1</code>、<code>p2</code>、<code>p3</code>决定，分成两种情况。</p>
<p>（1）只有<code>p1</code>、<code>p2</code>、<code>p3</code>的状态都变成<code>fulfilled</code>，<code>p</code>的状态才会变成<code>fulfilled</code>，此时<code>p1</code>、<code>p2</code>、<code>p3</code>的返回值组成一个数组，传递给<code>p</code>的回调函数。</p>
<p>（2）只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个被<code>rejected</code>，<code>p</code>的状态就变成<code>rejected</code>，此时第一个被<code>reject</code>的实例的返回值，会传递给<code>p</code>的回调函数。</p>
<p>下面是一个具体的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成一个Promise对象的数组</span></span><br><span class="line"><span class="keyword">const</span> promises = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>].<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">getJSON</span>(<span class="string">&#x27;/post/&#x27;</span> + id + <span class="string">&quot;.json&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>(promises).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">posts</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面代码中，<code>promises</code>是包含 6 个 Promise
实例的数组，只有这 6
个实例的状态都变成<code>fulfilled</code>，或者其中有一个变为<code>rejected</code>，才会调用<code>Promise.all</code>方法后面的回调函数。</p>
<h4 id="promise.race">Promise.race() <a
href="https://es6.ruanyifeng.com/#docs/promise#Promise-race">§</a> <a
href="https://es6.ruanyifeng.com/#docs/promise">⇧</a></h4>
<p><code>Promise.race()</code>方法同样是将多个 Promise
实例，包装成一个新的 Promise 实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2, p3]);</span><br></pre></td></tr></table></figure>
<p>上面代码中，只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个实例率先改变状态，<code>p</code>的状态就跟着改变。那个率先改变的
Promise 实例的返回值，就传递给<code>p</code>的回调函数。</p>
<p><code>Promise.race()</code>方法的参数与<code>Promise.all()</code>方法一样，如果不是
Promise
实例，就会先调用下面讲到的<code>Promise.resolve()</code>方法，将参数转为
Promise 实例，再进一步处理。</p>
<h4 id="promise.allsettled">Promise.allSettled() <a
href="https://es6.ruanyifeng.com/#docs/promise#Promise-allSettled">§</a>
<a href="https://es6.ruanyifeng.com/#docs/promise">⇧</a></h4>
<p><code>Promise.allSettled()</code>方法接受一组 Promise
实例作为参数，包装成一个新的 Promise
实例。只有等到所有这些参数实例都返回结果，不管是<code>fulfilled</code>还是<code>rejected</code>，包装实例才会结束。该方法由
<a href="https://github.com/tc39/proposal-promise-allSettled">ES2020</a>
引入。</p>
<h4 id="promise.any">Promise.any() <a
href="https://es6.ruanyifeng.com/#docs/promise#Promise-any">§</a> <a
href="https://es6.ruanyifeng.com/#docs/promise">⇧</a></h4>
<p><code>Promise.any()</code>方法接受一组 Promise
实例作为参数，包装成一个新的 Promise
实例。只要参数实例有一个变成<code>fulfilled</code>状态，包装实例就会变成<code>fulfilled</code>状态；如果所有参数实例都变成<code>rejected</code>状态，包装实例就会变成<code>rejected</code>状态。该方法目前是一个第三阶段的<a
href="https://github.com/tc39/proposal-promise-any">提案</a> 。</p>
<p><code>Promise.any()</code>跟<code>Promise.race()</code>方法很像，只有一点不同，就是不会因为某个
Promise 变成<code>rejected</code>状态而结束。</p>
<h4 id="promise.resolve">Promise.resolve() <a
href="https://es6.ruanyifeng.com/#docs/promise#Promise-resolve">§</a> <a
href="https://es6.ruanyifeng.com/#docs/promise">⇧</a></h4>
<p>有时需要将现有对象转为 Promise
对象，<code>Promise.resolve()</code>方法就起到这个作用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jsPromise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>($.<span class="title function_">ajax</span>(<span class="string">&#x27;/whatever.json&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p>上面代码将 jQuery 生成的<code>deferred</code>对象，转为一个新的
Promise 对象。</p>
<p><code>Promise.resolve()</code>等价于下面的写法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;foo&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>需要注意的是，立即<code>resolve()</code>的 Promise
对象，是在本轮“事件循环”（event
loop）的结束时执行，而不是在下一轮“事件循环”的开始时。</p>
<h4 id="promise.reject">Promise.reject() <a
href="https://es6.ruanyifeng.com/#docs/promise#Promise-reject">§</a> <a
href="https://es6.ruanyifeng.com/#docs/promise">⇧</a></h4>
<p><code>Promise.reject(reason)</code>方法也会返回一个新的 Promise
实例，该实例的状态为<code>rejected</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">reject</span>(<span class="string">&#x27;出错了&#x27;</span>))</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="literal">null</span>, <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 出错了</span></span><br></pre></td></tr></table></figure>
<p>上面代码生成一个 Promise
对象的实例<code>p</code>，状态为<code>rejected</code>，回调函数会立即执行。</p>
<p>注意，<code>Promise.reject()</code>方法的参数，会原封不动地作为<code>reject</code>的理由，变成后续方法的参数。这一点与<code>Promise.resolve</code>方法不一致。</p>
<h4 id="promise.try">Promise.try() <a
href="https://es6.ruanyifeng.com/#docs/promise#Promise-try">§</a> <a
href="https://es6.ruanyifeng.com/#docs/promise">⇧</a></h4>
<p>实际开发中，经常遇到一种情况：不知道或者不想区分，函数<code>f</code>是同步函数还是异步操作，但是想用
Promise
来处理它。因为这样就可以不管<code>f</code>是否包含异步操作，都用<code>then</code>方法指定下一步流程，用<code>catch</code>方法处理<code>f</code>抛出的错误。一般就会采用下面的写法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(f)</span><br></pre></td></tr></table></figure>
<p>上面的写法有一个缺点，就是如果<code>f</code>是同步函数，那么它会在本轮事件循环的末尾执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;now&#x27;</span>);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(f);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;next&#x27;</span>);</span><br><span class="line"><span class="comment">// next</span></span><br><span class="line"><span class="comment">// now</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，函数<code>f</code>是同步的，但是用 Promise
包装了以后，就变成异步执行了。</p>
<p>那么有没有一种方法，让同步函数同步执行，异步函数异步执行，并且让它们具有统一的
API 呢？用法如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">try</span>(<span class="function">() =&gt;</span> database.<span class="property">users</span>.<span class="title function_">get</span>(&#123;<span class="attr">id</span>: userId&#125;))</span><br><span class="line">  .<span class="title function_">then</span>(...)</span><br><span class="line">  .<span class="title function_">catch</span>(...)</span><br></pre></td></tr></table></figure>
<h3 id="async-await">Async Await</h3>
<p><code>await</code>命令就是 promise 中 then`命令的语法糖。</p>
<p><a href="https://es6.ruanyifeng.com/#docs/async">async 函数</a></p>
<h2 id="致谢">致谢</h2>
<p>详细的原文链接：阮一峰老师的 <a
href="https://es6.ruanyifeng.com/#docs/promise">ES6入门 之 Promise
对象</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>JSLanguage</category>
      </categories>
      <tags>
        <tag>NexT</tag>
        <tag>Javascript</tag>
        <tag>promise</tag>
      </tags>
  </entry>
  <entry>
    <title>js中单击按钮选择本地文件</title>
    <url>/posts/2021/383PEWF.html</url>
    <content><![CDATA[<p>js 原生打开本地文件是通过设置 <code>input</code> 的
<code>type='file'</code>来实现的，但是它的界面很丑，往往达不到使用的要求，于是，我们通常的做法是通过一个
<code>button</code> 去触发 <code>input</code> 的事件，实现文件选择。</p>
<span id="more"></span>
<h2 id="vue-实现">vue 实现</h2>
<p>以下示例使用 <code>quasar</code> 组件开发。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// template代码</span><br><span class="line">&lt;q-btn</span><br><span class="line">  label=&quot;从Excel导入&quot;</span><br><span class="line">  dense</span><br><span class="line">  size=&quot;sm&quot;</span><br><span class="line">  outline</span><br><span class="line">  color=&quot;orange&quot;</span><br><span class="line">  @click=&quot;selectExcelFile&quot;</span><br><span class="line">&gt;&lt;/q-btn&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; id=&quot;fileInput&quot; style=&quot;display: none&quot; @change=&quot;fileSelected&quot; /&gt;</span><br><span class="line"></span><br><span class="line">// excel模块</span><br><span class="line">import XLSX from &#x27;js-xlsx&#x27;</span><br><span class="line"></span><br><span class="line">// js 代码</span><br><span class="line">methods: &#123;</span><br><span class="line">  // 选择文件</span><br><span class="line">  selectExcelFile() &#123;</span><br><span class="line">    const elem = document.getElementById(&#x27;fileInput&#x27;)</span><br><span class="line">    elem.click()</span><br><span class="line">    elem.value=&#x27;&#x27; // 清空 vule，这样才可以再次选择文件</span><br><span class="line">  &#125;,</span><br><span class="line">  fileSelected(e) &#123;     </span><br><span class="line">      // 判断是否选择了文件</span><br><span class="line">      if (e.target.files.length === 0) &#123;</span><br><span class="line">        return</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 获取选择的文件</span><br><span class="line">      const file = e.target.files[0]</span><br><span class="line"></span><br><span class="line">      // 获取选择的文件</span><br><span class="line">      const file = e.target.files[0]</span><br><span class="line"></span><br><span class="line">      const excelData = await this.readExcelData(file)</span><br><span class="line">      if (!excelData) return</span><br><span class="line"></span><br><span class="line">      // 其它操作</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">  // 读取 excel 数据</span><br><span class="line">  async readExcelData(file) &#123;</span><br><span class="line">      return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        const reader = new FileReader()</span><br><span class="line">        reader.onload = e =&gt; &#123;</span><br><span class="line">          const data = new Uint8Array(e.target.result)</span><br><span class="line">          const workbook = XLSX.read(data, &#123; type: &#x27;array&#x27; &#125;)</span><br><span class="line">          /* DO SOMETHING WITH workbook HERE */</span><br><span class="line">          // 变成json</span><br><span class="line">          const jsonObj = XLSX.utils.sheet_to_json(</span><br><span class="line">            workbook.Sheets[workbook.SheetNames[0]]</span><br><span class="line">          )</span><br><span class="line">          resolve(jsonObj)</span><br><span class="line">        &#125;</span><br><span class="line">        reader.onerror = () =&gt; &#123;</span><br><span class="line">          reject(false)</span><br><span class="line">        &#125;</span><br><span class="line">        reader.readAsArrayBuffer(file)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="选项说明">选项说明</h2>
<table>
<thead>
<tr class="header">
<th>选项名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>multiple</td>
<td>表示可以多选文件</td>
</tr>
<tr class="even">
<td>accept</td>
<td>用逗号隔开的 MIME 类型列表。</td>
</tr>
</tbody>
</table>
<p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types">常见
MIME 类型列表</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>JSLanguage</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>文件选择</tag>
      </tags>
  </entry>
  <entry>
    <title>个人常用 js 开发包</title>
    <url>/posts/2022/3B8HS2.html</url>
    <content><![CDATA[<p>本文收集本人在开发中使用到的一些工具包，在使用之前，经过对比，筛选出自认为合适的应用于实际开发中。</p>
<span id="more"></span>
<h2 id="工具类">工具类</h2>
<table>
<colgroup>
<col style="width: 5%" />
<col style="width: 37%" />
<col style="width: 20%" />
<col style="width: 37%" />
</colgroup>
<thead>
<tr class="header">
<th>包名</th>
<th>作用</th>
<th>官网</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>lodash.js</td>
<td>提供对数组，集合，时间，函数，类型判断，数学，数字，队列，字符串，属性等操作的工具包</td>
<td>https://lodash.com/docs/4.17.15</td>
<td></td>
</tr>
<tr class="even">
<td>*ramda.js</td>
<td>一个专门为函数式编程风格设计的库，一个可以轻松创建函数管道的库，一个永远不会改变用户数据的库</td>
<td>https://ramdajs.com/</td>
<td>功能同 lodash,但是使用方式不一样，loash 更符合 lumda 表达式习惯</td>
</tr>
<tr class="odd">
<td>moment.js</td>
<td>时间处理相关包</td>
<td>https://momentjs.com/</td>
<td></td>
</tr>
<tr class="even">
<td>*day.js</td>
<td>时间处理相关包</td>
<td>https://day.js.org/zh-CN/</td>
<td>比 moment 小，压缩后只有 2 k 左右</td>
</tr>
<tr class="odd">
<td>*big.js</td>
<td>一个小型，快速的JavaScript库，用于任意精度的十进制算术运算</td>
<td>https://mikemcl.github.io/big.js/</td>
<td>此处有两个其它同类型库的比较，使前需要仔细对比：https://github.com/MikeMcl/big.js/issues/45#issuecomment-104211175</td>
</tr>
<tr class="even">
<td>qs</td>
<td>一个 url参数转化 (parse和stringify)的轻量级js库</td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="文件操作">文件操作</h2>
<table>
<thead>
<tr class="header">
<th>包名</th>
<th>作用</th>
<th>官网</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<blockquote>
<p>* 号代表暂未使用，但觉得不错，用于收藏</p>
</blockquote>
<h2 id="参考">参考</h2>
<p>本文主要参考以下文章，在此致以诚挚谢意！</p>
<ol type="1">
<li><a
href="https://www.zhihu.com/question/429436558">知乎：有哪些必看的 JS
库？</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>JSLanguage</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>如何向回调函数中传递参数</title>
    <url>/posts/2022/BA7F9Q.html</url>
    <content><![CDATA[<p>有时候我们需要向回调函数中传递参数，比如在 <code>vue</code>
中父组件向子组件的事件响应函数中传递自定义对象。</p>
<span id="more"></span>
<h2 id="vue-中实现">Vue 中实现</h2>
<p>子组件中：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">&quot;changed&quot;</span>, data);</span><br></pre></td></tr></table></figure>
<p>父组件中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ele @changed=&quot;valueChanged($event,customData)&quot;/&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>$event 的位置可以改变</p>
</blockquote>
<h2 id="js-中实现">JS 中实现</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">runMethod</span>(data,<span class="function">(<span class="params">callbackData</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="title function_">callback</span>(callbackData,customData)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在回调函数上包裹一层匿名函数，然后当成回调传递给方法使用</p>
</blockquote>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>JSLanguage</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>js 对象与 json 互相转换</title>
    <url>/posts/2023/18D31C7.html</url>
    <content><![CDATA[<p><strong>js 转 json：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(对象,过滤器，缩进)</span><br></pre></td></tr></table></figure>
<p><strong>json 转 javascript：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonText,过滤器)</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p><strong>参考：</strong></p>
<p><a
href="https://blog.csdn.net/latency_cheng/article/details/73468205">JavaScript
对象与 JSON 对象的相互转换</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>JSLanguage</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>js 下载文件后弹出保存框</title>
    <url>/posts/2022/WP9100.html</url>
    <content><![CDATA[<p>本文介绍了如何在前端 js
在下载文件时，弹出另存为对话框，方便用户可以选择保存的位置。</p>
<span id="more"></span>
<h2 id="正文">正文</h2>
<p>可以使用 <code>showSaveFilePicker()</code> API 来实现，这个实现是 <a
href="https://wicg.github.io/file-system-access/">File System Access</a>
API 的一部分，虽然它仍然是一个草案，但是可以在 <code>Chromuim</code>
内核的浏览器中使用。</p>
<p>代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handleSaveImg</span>(<span class="params">event</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> image = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>( <span class="function">(<span class="params">res</span>) =&gt;</span> canvas.<span class="title function_">toBlob</span>( res ) );</span><br><span class="line">  <span class="keyword">if</span>( <span class="variable language_">window</span>.<span class="property">showSaveFilePicker</span> ) &#123;</span><br><span class="line">    <span class="keyword">const</span> handle = <span class="keyword">await</span> <span class="title function_">showSaveFilePicker</span>();</span><br><span class="line">    <span class="keyword">const</span> writable = <span class="keyword">await</span> handle.<span class="title function_">createWritable</span>();</span><br><span class="line">    <span class="keyword">await</span> writable.<span class="title function_">write</span>( image );</span><br><span class="line">    writable.<span class="title function_">close</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> saveImg = <span class="variable language_">document</span>.<span class="title function_">createElement</span>( <span class="string">&quot;a&quot;</span> );</span><br><span class="line">    saveImg.<span class="property">href</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>( image );</span><br><span class="line">    saveImg.<span class="property">download</span>= <span class="string">&quot;image.png&quot;</span>;</span><br><span class="line">    saveImg.<span class="title function_">click</span>();</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>( saveImg.<span class="property">href</span> ), <span class="number">60000</span> );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a href="https://save-canvas-as.glitch.me/">live demo</a></li>
<li><a
href="https://glitch.com/edit/#!/save-canvas-as?path=script.js%3A21%3A12">code</a></li>
<li><a
href="https://stackoverflow.com/questions/67804382/force-showing-the-save-as-dialog-box-when-downloading-a-file">Force
showing the "Save as" dialog box when downloading a file</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>JSLanguage</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>js 中常用的几个精度计算库，解决精度丢失问题</title>
    <url>/posts/2022/2J626YP.html</url>
    <content><![CDATA[<p>Javascript 中所有的数据都是 64 位的浮点数保存，无法做到非常精确。</p>
<p>比如：<code>0.1+0.2</code>、<code>0.1*0.2</code> 这样的计算。</p>
<p>然而在进行一些金额的计算时，对于精度要求的需要比较精准，所以需要使用一些包来进行处理。</p>
<span id="more"></span>
<h2 id="math.js">Math.js</h2>
<p><a href="https://mathjs.org/docs/index.html">Math.js</a> 是一个用于
JavaScript 和 Node.js 的扩展数学库。</p>
<p>它具有支持符号计算的灵活表达式解析器，大量内置函数和常量，并提供了集成的解决方案来处理不同的数据类型，例如数字，大数，复数，分数，单位和矩阵。</p>
<p>强大且易于使用。</p>
<h2 id="decimal.js">decimal.js</h2>
<p><a href="http://mikemcl.github.io/decimal.js/">decimal.js</a> 是
JavaScript 的任意精度的十进制类型。</p>
<h2 id="big.js">big.js</h2>
<p><a href="http://mikemcl.github.io/big.js/">big.js</a>
是一个小型，快速，易于使用的库，用于任意精度的十进制算术运算。</p>
<h2 id="bignumber.js">bignumber.js</h2>
<p><a href="https://mikemcl.github.io/bignumber.js/">bignumber.js</a>
是一个用于任意精度算术的 JavaScript 库。</p>
<h2 id="比较"><a
href="https://npmtrends.com/big.js-vs-bignumber.js-vs-decimal.js-vs-mathjs">比较</a></h2>
<iframe src="https://npmtrends.com/big.js-vs-bignumber.js-vs-decimal.js-vs-mathjs"/>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>JSLanguage</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Quasar中css总结</title>
    <url>/posts/2020/3BD2JEJ.html</url>
    <content><![CDATA[<p>用了一段时间的quasar了，它里面封装的 css
类确实很好用，但是在帮助文档中，描述得零零散散，不方便使用，遂总结一下。</p>
<span id="more"></span>
<h2 id="字体"><a
href="http://www.quasarchs.com/style/typography#%E6%A0%87%E9%A2%98">字体</a></h2>
<h3 id="文字大小">文字大小</h3>
<p>text-[ h1~6, subtitle1, subtitle2, body1~2, caption, overline ]</p>
<h3 id="字体粗细">字体粗细</h3>
<p>text-weight-[ thin, light, regular, medium, bold, bolder ]</p>
<h3 id="字体对齐">字体对齐</h3>
<p>text-[ right, left, center, justify, bold, italic, no-wrap, stike,
uppercase, lowercase, captitalize ]</p>
<h3 id="字体颜色">字体颜色</h3>
<p>text-[颜色名称]：text-teal</p>
<h2 id="颜色"><a
href="http://www.quasarchs.com/style/color-palette">颜色</a></h2>
<h3 id="基本色">基本色</h3>
<p>primary（淡蓝），secondary（淡绿），accent（淡紫），dark（黑色），positive（深绿），negative（红色），Info（亮蓝），warning（黄色）</p>
<h3 id="其它颜色">其它颜色</h3>
<p>每种颜色由浅到深分为 1-14 级</p>
<p>red, pink, purple, deep-purple, indigo（靛蓝）, blue, light-blue,
cyan, teal（青色）, green, light-green, lime, yellow, amber, orange,
deep-orange, brown, grey, blue-grey</p>
<h3 id="在-css-中使用">在 css 中使用</h3>
<p>在应用程序的<code>*.vue</code>文件中，可以使用<code>$primary</code>，<code>$red-1</code>等颜色。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!-- 注意lang=&quot;sass&quot; --&gt;</span><br><span class="line">&lt;style lang=&quot;sass&quot;&gt;</span><br><span class="line"><span class="selector-tag">div</span></span><br><span class="line">  <span class="attribute">color</span>: $red-<span class="number">1</span></span><br><span class="line">  background-color: $grey-<span class="number">5</span></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h2 id="间距"><a
href="http://www.quasarchs.com/style/spacing">间距</a></h2>
<h3 id="语法">语法</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">q-[p|m][t|r|b|l|a|x|y]-[none|auto|xs|sm|md|lg|xl]</span><br><span class="line">    T       D                   S</span><br><span class="line"></span><br><span class="line">T - type</span><br><span class="line">  - values: p (padding), m (margin)</span><br><span class="line"></span><br><span class="line">D - direction</span><br><span class="line">  - values:</span><br><span class="line">      t (top), r (right), b (bottom), l (left),</span><br><span class="line">      a (all), x (both left &amp; right), y (both top &amp; bottom)</span><br><span class="line"></span><br><span class="line">S - size</span><br><span class="line">  - values:</span><br><span class="line">      none,</span><br><span class="line">      auto (ONLY for specific margins: q-ml-*, q-mr-*, q-mx-*),</span><br><span class="line">      xs (extra small),</span><br><span class="line">      sm (small),</span><br><span class="line">      md (medium),</span><br><span class="line">      lg (large),</span><br><span class="line">      xl (extra large)</span><br></pre></td></tr></table></figure>
<h3 id="例子">例子</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 所有方向小的padding --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;q-pa-sm&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 项部中margin, 右边小margin --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-card</span> <span class="attr">class</span>=<span class="string">&quot;q-mt-md q-mr-sm&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="阴影"><a
href="http://www.quasarchs.com/style/shadows">阴影</a></h2>
<table>
<colgroup>
<col style="width: 37%" />
<col style="width: 62%" />
</colgroup>
<thead>
<tr class="header">
<th>css 类名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>no-shadow</code></td>
<td>移除任何阴影</td>
</tr>
<tr class="even">
<td><code>inset-shadow</code></td>
<td>设置一个插入阴影</td>
</tr>
<tr class="odd">
<td><code>shadow-1</code></td>
<td>设置1的深度</td>
</tr>
<tr class="even">
<td><code>shadow-2</code></td>
<td>设置2的深度</td>
</tr>
<tr class="odd">
<td><code>shadow-N</code></td>
<td>其中<code>N</code>是1到24的整数</td>
</tr>
<tr class="even">
<td><code>shadow-transition</code></td>
<td>在阴影上应用CSS转换; 最好与<code>hoverable</code>类一起使用</td>
</tr>
<tr class="odd">
<td>shadow-up-1</td>
<td>设置1的深度</td>
</tr>
<tr class="even">
<td>shadow-up-2</td>
<td>设置2的深度</td>
</tr>
<tr class="odd">
<td>shadow-up-N</td>
<td>其中N是1到24的整数</td>
</tr>
</tbody>
</table>
<h2 id="可见性"><a
href="http://www.quasarchs.com/style/visibility">可见性</a></h2>
<h3 id="常见功能">常见功能</h3>
<table>
<colgroup>
<col style="width: 21%" />
<col style="width: 78%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">类名</th>
<th style="text-align: left;">说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>disabled</code></td>
<td
style="text-align: left;">游标更改为“disable”，不透明度设置为较低值。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>hidden</code></td>
<td
style="text-align: left;">将<code>display</code>设置为<code>none</code>。与下面的类相比
- <code>hidden</code>类意味着元素不会显示并且不会占用布局中的空间。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>invisible</code></td>
<td
style="text-align: left;">将<code>visibility</code>设置为<code>hidden</code>。与上面的类相比，<code>invisible</code>类意味着元素不会显示，但它仍然占用布局空间。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>transparent</code></td>
<td style="text-align: left;">背景颜色是透明的。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>dimmed</code></td>
<td
style="text-align: left;">在您的元素上应用深色透明覆盖层。不要在已经有<strong>:after</strong>伪元素的元素上使用。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>light-dimmed</code></td>
<td
style="text-align: left;">在您的元素上应用白色透明覆盖层。不要在已经有<strong>:after</strong>伪元素的元素上使用。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>ellipsis</code></td>
<td
style="text-align: left;">截取文本并在没有足够的可用空间时显示省略号。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>ellipsis-2-lines</code></td>
<td
style="text-align: left;">当两行中没有足够的可用空间时，截断文本并显示省略号（仅适用于Webkit浏览器）。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>ellipsis-3-lines</code></td>
<td
style="text-align: left;">当三行中没有足够的可用空间时，截断文本并显示省略号（仅适用于Webkit浏览器）。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>z-top</code></td>
<td
style="text-align: left;">将元素定位在任何其他组件的顶部，但位于Popovers、提示框、通知框之后。</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>z-max</code></td>
<td
style="text-align: left;">将元素定位在任何其他组件（包括Drawer，Modals，Notifications，Layout
header/footer…）之上</td>
</tr>
</tbody>
</table>
<h2 id="定位"><a
href="http://www.quasarchs.com/style/positioning">定位</a></h2>
<h3 id="对齐">对齐</h3>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">类名</th>
<th style="text-align: left;">说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>float-left</code></td>
<td style="text-align: left;">浮动到左侧</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>float-right</code></td>
<td style="text-align: left;">浮动到右侧</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>on-left</code></td>
<td
style="text-align: left;">在右侧设置一个小边距;通常用于有兄弟元素的图标元素</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>on-right</code></td>
<td
style="text-align: left;">在左侧设置一个小边距;通常用于有兄弟元素的图标元素</td>
</tr>
</tbody>
</table>
<h2 id="辅助类"><a
href="http://www.quasarchs.com/style/other-helper-classes">辅助类</a></h2>
<h3 id="鼠标相关">鼠标相关</h3>
<table>
<colgroup>
<col style="width: 41%" />
<col style="width: 58%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">类名</th>
<th style="text-align: left;">说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>non-selectable</code></td>
<td style="text-align: left;">用户将无法选择DOM节点及其文本</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>scroll</code></td>
<td
style="text-align: left;">应用CSS调整使所有平台上的滚动工作达到最佳状态</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>no-scroll</code></td>
<td style="text-align: left;">隐藏DOM节点上的滚动条</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>no-pointer-events</code></td>
<td style="text-align: left;">DOM元素不会成为鼠标事件的目标 -
点击、悬停等</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>all-pointer-events</code></td>
<td
style="text-align: left;"><code>no-pointer-events</code>的反义词</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>cursor-pointer</code></td>
<td
style="text-align: left;">改变DOM元素上的鼠标指针，看起来好像在可点击的链接上</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>cursor-not-allowed</code></td>
<td
style="text-align: left;">更改DOM元素上的鼠标指针，使其看起来好像不会执行任何操作</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>cursor-inherit</code></td>
<td
style="text-align: left;">将DOM元素上的鼠标指针更改为与父选项相同</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>cursor-none</code></td>
<td style="text-align: left;">没有鼠标光标被渲染</td>
</tr>
</tbody>
</table>
<h3 id="大小相关">大小相关</h3>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">类名</th>
<th style="text-align: left;">说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>fit</code></td>
<td style="text-align: left;">宽度和高度设置为100％</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>full-height</code></td>
<td style="text-align: left;">高度设置为100％</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>full-width</code></td>
<td style="text-align: left;">宽度设置为100％</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>window-height</code></td>
<td style="text-align: left;">高度设置为100vh，顶部和底部边距为0</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>window-width</code></td>
<td style="text-align: left;">宽度设置为100vw，左边距和右边距0</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>block</code></td>
<td
style="text-align: left;">将<code>display</code>属性设置为<code>block</code></td>
</tr>
</tbody>
</table>
<h3 id="方向有关">方向有关</h3>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">类名</th>
<th style="text-align: left;">说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>rotate-45</code></td>
<td style="text-align: left;">旋转45度</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>rotate-90</code></td>
<td style="text-align: left;">旋转90度</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>rotate-135</code></td>
<td style="text-align: left;">旋转135度</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>rotate-180</code></td>
<td style="text-align: left;">旋转180度</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>rotate-205</code></td>
<td style="text-align: left;">旋转205度</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>rotate-270</code></td>
<td style="text-align: left;">旋转270度</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>rotate-315</code></td>
<td style="text-align: left;">旋转315度</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>flip-horizontal</code></td>
<td style="text-align: left;">水平翻转DOM元素</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>flip-vertical</code></td>
<td style="text-align: left;">垂直翻转DOM元素</td>
</tr>
</tbody>
</table>
<h3 id="边界相关">边界相关</h3>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">类名</th>
<th style="text-align: left;">说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>no-border</code></td>
<td style="text-align: left;">删除任何边框</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>no-border-radius</code></td>
<td style="text-align: left;">删除边框可能具有的任何半径</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>rounded-borders</code></td>
<td style="text-align: left;">应用通用边框半径</td>
</tr>
</tbody>
</table>
<h2 id="flex"><a
href="http://www.quasarchs.com/layout/grid/introduction-to-flexbox">Flex</a></h2>
<h3 id="设置方向">设置方向</h3>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">类名</th>
<th style="text-align: left;">说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>row</code></td>
<td style="text-align: left;">Flex行</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>row inline</code></td>
<td style="text-align: left;">内联Flex行</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>column</code></td>
<td style="text-align: left;">Flex列</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>column inline</code></td>
<td style="text-align: left;">内联Flex列</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>row reverse</code></td>
<td
style="text-align: left;">将<code>flex-direction</code>设置为<code>row-reverse</code>的Flex行</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>column reverse</code></td>
<td
style="text-align: left;">将<code>flex-direction</code>设置为<code>column-reverse</code>的Flex列</td>
</tr>
</tbody>
</table>
<h3 id="包裹">包裹</h3>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">类名</th>
<th style="text-align: left;">说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>wrap</code></td>
<td
style="text-align: left;">如有必要进行包裹（默认为“on”，不需要指定）</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>no-wrap</code></td>
<td style="text-align: left;">即使有必要，也不要包裹</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>reverse-wrap</code></td>
<td style="text-align: left;">如有必要逆向包裹</td>
</tr>
</tbody>
</table>
<h3 id="对齐-1">对齐</h3>
<ul>
<li><p>沿主轴</p>
<figure>
<img data-src="https://cdn.quasar.dev/img/flexbox-main-axis-align---2.svg"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure></li>
<li><p>垂直于主轴</p>
<figure>
<img data-src="https://cdn.quasar.dev/img/flexbox-cross-axis-align.svg"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure></li>
<li><p>多条主轴且有多余空间时</p>
<figure>
<img data-src="https://cdn.quasar.dev/img/flexbox-content-align.svg"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure></li>
</ul>
<h3 id="自对齐">自对齐</h3>
<p><strong>子元素可以覆盖父元素上指定的对齐方式</strong>。
这允许对单个Flex项进行对齐。</p>
<p>可用值有： <code>self-start</code>, <code>self-center</code>,
<code>self-baseline</code>, <code>self-end</code>,
<code>self-stretch</code></p>
<figure>
<img data-src="https://cdn.quasar.dev/img/flexbox-self.svg" alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<h3 id="大小">大小</h3>
<p>与 flex 值使用类似</p>
<p>Quasar使用一个12分的列系统来分配子行的大小。
以下是可用的CSS辅助类的一些示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-8&quot;</span>&gt;</span>two thirds<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-2&quot;</span>&gt;</span>one sixth<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-auto&quot;</span>&gt;</span>auto size based on content and available space<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>fills remaining available space<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在上面的例子中，由于8/12 = 2/3 =
66％，col-8占据了行宽的三分之二（2/3），而col-2占据了六分之一（2/12 = 1
/ 6〜16.67％）。</p>
<p>CSS辅助类<code>col-auto</code>使单元格只填充需要渲染的空间。
另一方面，<code>col</code>试图填充所有可用的空间，同时如果需要也可以缩小。</p>
<p>CSS辅助类<code>col-grow</code>使单元格至少填充需要渲染的空间，并有可能在有更多空间可用时增长。</p>
<p>CSS辅助类<code>col-shrink</code>使单元格最多填充需要呈现的空间，并且当没有足够的可用空间时有可能收缩。</p>
<h3 id="顺序">顺序</h3>
<p><strong>您可以使用<code>order-first</code>和<code>order-last</code>
CSS辅助类来设置子元素的顺序</strong>。</p>
<p>默认情况下，Flex项按源(source)顺序排列。
但是，order属性控制它们在flex容器中的显示顺序。
如果您需要更多粒度，请使用<code>order</code> CSS属性并分配所需的值。</p>
<p>例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;order: 2&quot;</span>&gt;</span>Second column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;order-last&quot;</span>&gt;</span>Third column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;order-first&quot;</span>&gt;</span>First column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>以下是CSS<code>order</code>属性的工作原理：</p>
<figure>
<img data-src="https://cdn.quasar.dev/img/flexbox-order.svg" alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Quasar</category>
      </categories>
      <tags>
        <tag>Quasar</tag>
      </tags>
  </entry>
  <entry>
    <title>WindowsServer安装Verdaccio安装排坑日记</title>
    <url>/posts/2022/7MJX55.html</url>
    <content><![CDATA[<p>为了在js开发中更加便利的模块化，解决开发中频繁地更新npm包的问题，决定搭建一个轻量的npm包管理服务。比较了
verdaccio，cnpm 后，最后选择了
verdaccio。因为它够方便和快速，同时也够用。</p>
<span id="more"></span>
<h2 id="npm-私有仓库">npm 私有仓库</h2>
<h3 id="npm-私有仓库的好处">npm 私有仓库的好处</h3>
<ol type="1">
<li><p>安全性角度考虑：如果我们想要一个公共组件库，那么把组件放到我们私有库中，只有内网可以访问，这样可以避免组件中业务的泄露；</p></li>
<li><p>模块复用性角度考虑：多个项目之间有重复的共有模块，当需要修改模块，通过简单的统一的配置就可以实现；提炼后的组件有专门的地址可以用来查看，方便使用，在后期项目的引用中也能节约开发成本</p></li>
<li><p>npm 包下载速度角度考虑：使用内部的地址，能够在开发下载 node
包的同时，将关联的依赖包缓存到 npm
私有仓库服务器中，下载速度更快；</p></li>
<li><p>项目开发中的路劲角度考虑：在项目开发中书写代码更整洁简练，不需书写更长的相对路径；</p></li>
<li><p>公司技术沉淀角度考虑：知识的沉淀，在公司业务相关的应用上尤佳；</p></li>
<li><p>版本角度的考虑：相当于一个容器，统一管理需要的包，保持版本的唯一；</p></li>
<li><p>开发效率角度考虑：使私有公共业务或组件模块能以共有包一样的管理组织方式，保持一致性，提高开发效率.</p></li>
</ol>
<h3 id="npm-私有仓库的原理">npm 私有仓库的原理</h3>
<figure>
<img data-src="https://zhaomenghuan.js.org/assets/img/private-npm.f27dab4e.jpg"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<p>用户 install 后向私有 npm
发起请求，服务器会先查询所请求的这个模块是否是我们自己的私有模块或已经缓存过的公共模块，如果是则直接返回给用户；如果请求的是一个还没有被缓存的公共模块，那么则会向上游源请求模块并进行缓存后返回给用户。上游的源可以是
npm 仓库，也可以是淘宝镜像。</p>
<h2 id="常用的仓库地址">常用的仓库地址</h2>
<ul>
<li>npm —— <a
href="https://registry.npmjs.org/">https://registry.npmjs.org</a></li>
<li>cnpm —— <a href="http://r.cnpmjs.org/">http://r.cnpmjs.org</a></li>
<li>taobao —— <a
href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></li>
<li>nj —— <a
href="https://registry.nodejitsu.com/">https://registry.nodejitsu.com</a></li>
<li>rednpm —— <a
href="http://registry.mirror.cqupt.edu.cn/">http://registry.mirror.cqupt.edu.cn</a></li>
<li>npmMirror —— https://skimdb.npmjs.com/registry</li>
<li>edunpm —— <a
href="http://registry.enpmjs.org/">http://registry.enpmjs.org</a></li>
</ul>
<h2 id="windows-server环境">windows server环境</h2>
<ul>
<li>windows server 2022</li>
<li>宝塔面板</li>
</ul>
<h2 id="配置nginx">配置nginx</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	listen 443 ssl http2;</span><br><span class="line">	server_name registry.xxx.com;</span><br><span class="line">  </span><br><span class="line">    # ssl</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate cert.crt;</span><br><span class="line">    ssl_certificate_key cert.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_protocols TLSv1.2 TLSv1.1 TLSv1; #SSL协议</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#SSL加密算法</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line">        proxy_set_header    Host $host;</span><br><span class="line">        proxy_set_header    X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header    X-Forwarded-Proto $scheme;</span><br><span class="line">        proxy_pass          http://127.0.0.1:4873/;</span><br><span class="line">        proxy_read_timeout  600;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">	 &#125;</span><br><span class="line">	</span><br><span class="line">	 // 必须要有</span><br><span class="line">	 location ~ ^/verdaccio/(.*)$ &#123;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-NginX-Proxy true;</span><br><span class="line">        proxy_pass http://127.0.0.1:4873/$1;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="无法加载-venders-等静态文件">无法加载 venders 等静态文件</h2>
<p>按照官方教程配置完成后，在 ngnix 配置
https，然后通过域名（https://mydomain.com:4433）访问 verdaccio
时，一直是空白。</p>
<p>F12打开调试面板，查看网络项，发现读取 runtime, vendors, main
等文件是失败的，查看其 headers，发现其请求的 url 是
<code>https://mydomain.com/-/xx</code>, 端口莫名丢掉了。</p>
<p><img data-src="https://s2.loli.net/2022/01/06/A5Slk24eLHWZaN3.png" /></p>
<p>造成这种问题的原因是，在nginx的配置中，少了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location ~ ^/verdaccio/(.*)$ ...</span><br></pre></td></tr></table></figure>
<p>这项配置。</p>
<h2 id="参考">参考</h2>
<p>本文主要参考以下，在此报以诚挚感谢！</p>
<ol type="1">
<li><a
href="https://zhaomenghuan.js.org/blog/npm-private-repository-verdaccio.html#npm-%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85">npm
私有仓库工具 Verdaccio 搭建</a></li>
<li><a
href="https://github.com/verdaccio/verdaccio/blob/a6b0d63afb21c0a0e7eb11435e9924e02f97be1a/website/blog/2021-04-14-verdaccio-5-migration-guide.md#a-new-public-url-environment-variable-a-new-public-url-environment-variable">Verdaccio
5 migration guidelines，介绍了 VERDACCIO_PUBLIC_URL的作用</a></li>
<li><a
href="https://github.com/verdaccio/verdaccio/wiki/Debugging-Verdaccio">Debugging
Verdaccio</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Verdaccio</category>
      </categories>
      <tags>
        <tag>Verdaccio</tag>
        <tag>私服npm</tag>
      </tags>
  </entry>
  <entry>
    <title>verdaccio 私有化配置</title>
    <url>/posts/2022/38ND00E.html</url>
    <content><![CDATA[<h2 id="添加用户">添加用户</h2>
<p>添加用户是通过终端电脑的npm来操作的，在输入下列命令后，根据要求输入用户名和密码即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm adduser --registry https://mydomain.com:port/</span><br></pre></td></tr></table></figure>
<h2 id="授权验证">授权验证</h2>
<h2 id="i18n">i18n</h2>
<h2 id="发布包">发布包</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm publish --registry https://mydomain.com:port/</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a href="https://verdaccio.org/docs/configuration/">verdaccio
官方配置文档</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Verdaccio</category>
      </categories>
      <tags>
        <tag>私服npm</tag>
        <tag>verdaccio</tag>
      </tags>
  </entry>
  <entry>
    <title>Quasar中css总结</title>
    <url>/posts/2021/3BD2JEJ.html</url>
    <content><![CDATA[<p>Quasar 中的控件常用用法总结。</p>
<span id="more"></span>
<h2 id="q-select">q-select</h2>
<h3 id="映射选项">映射选项</h3>
<p>使返回值为对象中的某个字段</p>
<ul>
<li>代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-select</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;field-value&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">filled</span></span></span><br><span class="line"><span class="tag">  <span class="attr">fill-input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;fixedAssetInfo.typeId&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:options</span>=<span class="string">&quot;types&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">use-input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">option-value</span>=<span class="string">&quot;_id&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">display-value</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">emit-value</span></span></span><br><span class="line"><span class="tag">  <span class="attr">map-options</span></span></span><br><span class="line"><span class="tag">  <span class="attr">option-label</span>=<span class="string">&quot;name&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">dense</span></span></span><br><span class="line"><span class="tag">  <span class="attr">options-dense</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:no-option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-section</span> <span class="attr">class</span>=<span class="string">&quot;text-grey&quot;</span>&gt;</span>No results<span class="tag">&lt;/<span class="name">q-item-section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>说明</li>
</ul>
<table>
<thead>
<tr class="header">
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>filled</td>
<td>边框为方形</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Quasar</category>
      </categories>
      <tags>
        <tag>Quasar</tag>
      </tags>
  </entry>
  <entry>
    <title>vue2.x中安装quasar</title>
    <url>/posts/2021/2HDPP49.html</url>
    <content><![CDATA[<p>随着 quasar 的升级，quasar 从 1.x升级到了 2.x，而通过
<code>vue add quasar</code> 会安装<code>vue-cli-plugin-quasar</code>
4.x，通过该 CLI 安装的 qusar 为 quasar 2.x 版本，2.x 版本支持
vue3,但是却不兼容 vue2.x。这导致在 vue 2.x 中按照教程使用
<code>vue add quasar</code> 后，运行时总是失败。</p>
<span id="more"></span>
<p>失败错误如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Uncaught TypeError: Object(...) is not a function</span><br><span class="line">    at eval (webpack-internal:///./node_modules/quasar/src/plugins/Platform.js:29)</span><br><span class="line">    at Module../node_modules/quasar/src/plugins/Platform.js (chunk-vendors.js:4272)</span><br><span class="line">    at __webpack_require__ (app.js:849)</span><br><span class="line">    at fn (app.js:151)</span><br><span class="line">    at eval (webpack-internal:///./node_modules/quasar/src/install-quasar.js:18)</span><br><span class="line">    at Module../node_modules/quasar/src/install-quasar.js (chunk-vendors.js:4236)</span><br><span class="line">    at __webpack_require__ (app.js:849)</span><br><span class="line">    at fn (app.js:151)</span><br><span class="line">    at eval (webpack-internal:///./node_modules/quasar/src/vue-plugin.js:2)</span><br><span class="line">    at Module../node_modules/quasar/src/vue-plugin.js (chunk-vendors.js:4380)</span><br></pre></td></tr></table></figure>
<p>为了解决上述问题，我们需要使用 quasar-cli 3.x
或者以下的版本来安装。</p>
<p>在使用 <code>vue add</code> 的时候，增加一个版本号，如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">vue add quasar@<span class="number">3</span>.x</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Quasar</category>
      </categories>
      <tags>
        <tag>Quasar</tag>
      </tags>
  </entry>
  <entry>
    <title>创建 npm 工具库</title>
    <url>/posts/2022/2VDPVDM.html</url>
    <content><![CDATA[<h2 id="打包工具的选择">打包工具的选择</h2>
<p>如果我们需要构建一个简单的小型应用并让它快速运行起来，可以使用
<code>Parcel</code>；如果需要构建一个类库只需要导入很少第三方库，可以使用
<code>Rollup</code>；如果需要构建一个复杂的应用，需要集成很多第三方库，并且需要代码分拆、HMR等功能，推荐使用
<code>Webpack</code> <a
href="https://zhuanlan.zhihu.com/p/350601275">[3]</a>。</p>
<p>所以，在开发工具库时，我们选择 <code>rollup</code> 作为打包工具。</p>
<span id="more"></span>
<h2 id="初始化">初始化</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mkdir wow<span class="literal">-tool</span></span><br><span class="line"><span class="built_in">cd</span> wow<span class="literal">-tool</span></span><br><span class="line">npm init <span class="literal">-y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加src目录</span></span><br><span class="line">mkdir src</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 index.js 入口文件</span></span><br><span class="line"><span class="built_in">New-Item</span> src/index.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改入口文件位置</span></span><br><span class="line"><span class="comment"># package.json 中 exports 修改为如下值，使其支持浏览器和 nodejs</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;exports&quot;</span>:&#123; </span><br><span class="line">    <span class="string">&quot;require&quot;</span>: <span class="string">&quot;./dist/yourPackageName.cjs.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;import&quot;</span>: <span class="string">&quot;./dist/yourPackageName.esm.js&quot;</span> </span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="安装-rollup">安装 rollup</h2>
<p>将 rollup 安装为本地开发依赖</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># npm</span></span><br><span class="line">npm install rollup <span class="literal">--save-dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># yarn</span></span><br><span class="line">yarn add rollup <span class="literal">--dev</span></span><br></pre></td></tr></table></figure>
<h2 id="安装-rollup-插件">安装 rollup 插件</h2>
<p>先安装如下rollup插件：</p>
<table>
<colgroup>
<col style="width: 31%" />
<col style="width: 68%" />
</colgroup>
<thead>
<tr class="header">
<th>插件包名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><span class="citation"
data-cites="rollup/plugin-node-resolve">@rollup/plugin-node-resolve</span></td>
<td>使用 nodejs的解析算法，使得可以在 node_modules 中使用第三方包</td>
</tr>
<tr class="even">
<td><span class="citation"
data-cites="rollup/plugin-commonjs">@rollup/plugin-commonjs</span></td>
<td>将 CommonJS 模块转成 ES 模块</td>
</tr>
<tr class="odd">
<td><span class="citation"
data-cites="rollup/plugin-alias">@rollup/plugin-alias</span></td>
<td>在打包的时候创建别名</td>
</tr>
<tr class="even">
<td><span class="citation"
data-cites="rollup/plugin-replace">@rollup/plugin-replace</span></td>
<td>在打包时替换目标字符串</td>
</tr>
<tr class="odd">
<td><span class="citation"
data-cites="rollup/plugin-eslint">@rollup/plugin-eslint</span></td>
<td>代码规范化</td>
</tr>
<tr class="even">
<td><span class="citation"
data-cites="rollup/plugin-babel">@rollup/plugin-babel</span></td>
<td>与 babel 无缝集成，将 ES6 代码转换成 ES5</td>
</tr>
<tr class="odd">
<td>rollup-plugin-terser</td>
<td>通过使用 terser 引擎，缩减打包后的大小</td>
</tr>
<tr class="even">
<td>rollup-plugin-clear</td>
<td>在编译前清空输出目录</td>
</tr>
<tr class="odd">
<td><span class="citation"
data-cites="rollup/plugin-json">@rollup/plugin-json</span></td>
<td>将 json 文件转成 ES 模块</td>
</tr>
<tr class="even">
<td>rollup-plugin-serve</td>
<td>创建开发服务</td>
</tr>
<tr class="odd">
<td>rollup-plugin-livereload</td>
<td>实时重载代码修改</td>
</tr>
<tr class="even">
<td>rollup-plugin-filesize</td>
<td>在终端中显示包文件的大小</td>
</tr>
</tbody>
</table>
<p>安装命令如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># npm</span></span><br><span class="line">npm install @rollup/plugin<span class="literal">-node-resolve</span> @rollup/plugin<span class="literal">-commonjs</span> @rollup/plugin<span class="literal">-alias</span> @rollup/plugin<span class="operator">-replace</span> @rollup/plugin<span class="literal">-eslint</span> @rollup/plugin<span class="literal">-babel</span> rollup<span class="literal">-plugin-terser</span> rollup<span class="literal">-plugin-clear</span> @rollup/plugin<span class="literal">-json</span> rollup<span class="literal">-plugin-serve</span> rollup<span class="literal">-plugin-livereload</span> rollup<span class="literal">-plugin-filesize</span> <span class="literal">--save-dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># yarn</span></span><br><span class="line"><span class="comment"># yarn 安装开发依赖的命令如下</span></span><br><span class="line">yarn add &lt;package<span class="literal">-name</span>&gt; <span class="literal">--dev</span></span><br></pre></td></tr></table></figure>
<p>插件的具体作用参考：<a
href="https://github.com/rollup/awesome">rollup官方插件库</a></p>
<h2 id="配置-rollup">配置 rollup</h2>
<ol type="1">
<li>根据开发环境区分不同的配置</li>
<li>设置对应的 <code>npm script</code></li>
<li>输出不同规范的产物：umd、umd.min、cjs、esm</li>
<li>兼容 <code>jest</code> 不支持 <code>es module</code>的问题</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mkdir config</span><br><span class="line"><span class="built_in">cd</span> config</span><br><span class="line"><span class="built_in">New-Item</span> rollup.config.base.js</span><br><span class="line"><span class="built_in">New-Item</span> rollup.config.dev.js</span><br><span class="line"><span class="built_in">New-Item</span> rollup.config.prod.js</span><br></pre></td></tr></table></figure>
<h3 id="rollup.config.base.js">rollup.config.base.js</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; nodeResolve &#125; <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-node-resolve&#x27;</span> <span class="comment">// 解析 node_modules 中的模块</span></span><br><span class="line"><span class="keyword">import</span> commonjs <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-commonjs&#x27;</span> <span class="comment">// cjs =&gt; esm</span></span><br><span class="line"><span class="keyword">import</span> alias <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-alias&#x27;</span> <span class="comment">// alias 和 reslove 功能</span></span><br><span class="line"><span class="keyword">import</span> replace <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-replace&#x27;</span></span><br><span class="line"><span class="keyword">import</span> eslint <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-eslint&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; babel &#125; <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-babel&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; terser &#125; <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-terser&#x27;</span></span><br><span class="line"><span class="keyword">import</span> clear <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-clear&#x27;</span></span><br><span class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-json&#x27;</span> <span class="comment">// 支持在源码中直接引入json文件，不影响下面的</span></span><br><span class="line"><span class="keyword">import</span> &#123; name, version, author &#125; <span class="keyword">from</span> <span class="string">&#x27;../package.json&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处 pkgName 要修改成自己的包名</span></span><br><span class="line"><span class="keyword">const</span> pkgName = <span class="string">&#x27;vtools&#x27;</span></span><br><span class="line"><span class="keyword">const</span> banner =</span><br><span class="line"><span class="string">&#x27;/*!\n&#x27;</span> +</span><br><span class="line"><span class="string">` * <span class="subst">$&#123;name&#125;</span> v<span class="subst">$&#123;version&#125;</span>\n`</span> +</span><br><span class="line"><span class="string">` * (c) 2014-<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear()&#125;</span> <span class="subst">$&#123;author&#125;</span>\n`</span> +</span><br><span class="line"><span class="string">&#x27; * Released under the MIT License.\n&#x27;</span> +</span><br><span class="line"><span class="string">&#x27; */&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">input</span>: <span class="string">&#x27;src/index.js&#x27;</span>,</span><br><span class="line">  <span class="comment">// 同时打包多种规范的产物</span></span><br><span class="line">  <span class="attr">output</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">file</span>: <span class="string">`dist/<span class="subst">$&#123;pkgName&#125;</span>.umd.js`</span>,</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&#x27;umd&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: pkgName,</span><br><span class="line">      banner</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">file</span>: <span class="string">`dist/<span class="subst">$&#123;pkgName&#125;</span>.umd.min.js`</span>,</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&#x27;umd&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: pkgName,</span><br><span class="line">      banner,</span><br><span class="line">      <span class="attr">plugins</span>: [<span class="title function_">terser</span>()]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">file</span>: <span class="string">`dist/<span class="subst">$&#123;pkgName&#125;</span>.cjs.js`</span>,</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&#x27;cjs&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: pkgName,</span><br><span class="line">      banner</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">file</span>: <span class="string">`dist/<span class="subst">$&#123;pkgName&#125;</span>.esm.js`</span>,</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&#x27;es&#x27;</span>,</span><br><span class="line">      banner</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 注意 plugin 的使用顺序</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">json</span>(),</span><br><span class="line">    <span class="title function_">clear</span>(&#123;</span><br><span class="line">      <span class="attr">targets</span>: [<span class="string">&#x27;dist&#x27;</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title function_">alias</span>(),</span><br><span class="line">    <span class="title function_">replace</span>(&#123;</span><br><span class="line">      <span class="string">&#x27;process.env.NODE_ENV&#x27;</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(process.<span class="property">env</span>.<span class="property">NODE_ENV</span> || <span class="string">&#x27;development&#x27;</span>),</span><br><span class="line">      <span class="attr">preventAssignment</span>: <span class="literal">true</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title function_">nodeResolve</span>(),</span><br><span class="line">    <span class="title function_">commonjs</span>(&#123;</span><br><span class="line">      <span class="attr">include</span>: <span class="string">&#x27;node_modules/**&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title function_">eslint</span>(&#123;</span><br><span class="line">      <span class="attr">throwOnError</span>: <span class="literal">true</span>, <span class="comment">// 抛出异常并阻止打包</span></span><br><span class="line">      <span class="attr">include</span>: [<span class="string">&#x27;src/**&#x27;</span>],</span><br><span class="line">      <span class="attr">exclude</span>: [<span class="string">&#x27;node_modules/**&#x27;</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title function_">babel</span>(&#123; <span class="attr">babelHelpers</span>: <span class="string">&#x27;bundled&#x27;</span> &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>修改包名</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此处 pkgName 要修改成自己的包名</span></span><br><span class="line"><span class="keyword">const</span> pkgName = <span class="string">&#x27;vtools&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="rollup.config.dev.js">rollup.config.dev.js</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> baseConfig <span class="keyword">from</span> <span class="string">&#x27;./rollup.config.base&#x27;</span></span><br><span class="line"><span class="keyword">import</span> serve <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-serve&#x27;</span></span><br><span class="line"><span class="keyword">import</span> livereload <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-livereload&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  ...baseConfig,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    ...baseConfig.<span class="property">plugins</span>,</span><br><span class="line">    <span class="title function_">serve</span>(&#123;</span><br><span class="line">      <span class="attr">port</span>: <span class="number">8080</span>,</span><br><span class="line">      <span class="attr">contentBase</span>: [<span class="string">&#x27;dist&#x27;</span>, <span class="string">&#x27;examples/brower&#x27;</span>],</span><br><span class="line">      <span class="attr">openPage</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title function_">livereload</span>(&#123;</span><br><span class="line">      <span class="attr">watch</span>: <span class="string">&#x27;examples/brower&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="rollup.config.prod.js">rollup.config.prod.js</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> baseConfig <span class="keyword">from</span> <span class="string">&#x27;./rollup.config.base&#x27;</span></span><br><span class="line"><span class="keyword">import</span> filesize <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-filesize&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  ...baseConfig,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    ...baseConfig.<span class="property">plugins</span>,</span><br><span class="line">    <span class="title function_">filesize</span>()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="配置-prettier">配置 prettier</h2>
<p>prettier 主要用于代码格式校验和修正。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --save-exact 添加准确的版本号，例如：&quot;webpack&quot;: &quot;^5.1.3&quot;，添加--save-exact后将没有 ^ 号</span></span><br><span class="line"><span class="comment"># npm</span></span><br><span class="line">npm install <span class="literal">--save-dev</span> <span class="literal">--save-exact</span> prettier</span><br><span class="line"><span class="comment"># yarn</span></span><br><span class="line">yarn add <span class="literal">--dev</span> <span class="literal">--exact</span> prettier</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加配置文件</span></span><br><span class="line"><span class="built_in">New-Item</span> .prettierrc.js</span><br><span class="line"><span class="comment"># 添加下列内容</span></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  printWidth: <span class="number">80</span>,</span><br><span class="line">  tabWidth: <span class="number">2</span>,</span><br><span class="line">  useTabs: false,</span><br><span class="line">  singleQuote: true,</span><br><span class="line">  proseWrap: <span class="string">&#x27;preserve&#x27;</span>,</span><br><span class="line">  arrowParens: <span class="string">&#x27;avoid&#x27;</span>,</span><br><span class="line">  bracketSpacing: true,</span><br><span class="line">  disableLanguages: [<span class="string">&#x27;vue&#x27;</span>],</span><br><span class="line">  endOfLine: <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">  eslintIntegration: false,</span><br><span class="line">  htmlWhitespaceSensitivity: <span class="string">&#x27;ignore&#x27;</span>,</span><br><span class="line">  ignorePath: <span class="string">&#x27;.prettierignore&#x27;</span>,</span><br><span class="line">  jsxBracketSameLine: false,</span><br><span class="line">  jsxSingleQuote: true,</span><br><span class="line">  parser: <span class="string">&#x27;babel&#x27;</span>,</span><br><span class="line">  requireConfig: false,</span><br><span class="line">  stylelintIntegration: false,</span><br><span class="line">  trailingComma: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">  tslintIntegration: true,</span><br><span class="line">  <span class="string">&#x27;workbench.iconTheme&#x27;</span>: <span class="string">&#x27;vscode-icons&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;editor.minimap.enabled&#x27;</span>: false,</span><br><span class="line">  <span class="string">&#x27;editor.renderWhitespace&#x27;</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;editor.renderControlCharacters&#x27;</span>: false,</span><br><span class="line">  semi: false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加忽略文件</span></span><br><span class="line"><span class="built_in">New-Item</span> .prettierignore.js <span class="literal">-value</span> build`ncoverage</span><br></pre></td></tr></table></figure>
<h2 id="配置-eslint">配置 eslint</h2>
<p>eslint 主要用于代码质量的校验。</p>
<p><strong>安装</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在开发环境中安装 esLint</span></span><br><span class="line">npm i eslint -D</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成配置文件</span></span><br><span class="line">npx eslint --init</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开发中使用 eslit 检查语法，用 prettier 检查格式</span></span><br><span class="line"><span class="comment">// 1.选择 To check syntax and find problems</span></span><br><span class="line"><span class="comment">// 2.选择用 javaScript modules 开发</span></span><br></pre></td></tr></table></figure>
<p><strong>安装插件并配置</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 standard 规范</span></span><br><span class="line">npm install --save-dev eslint-config-standard eslint-config-prettier eslint-plugin-promise eslint-plugin-<span class="keyword">import</span> eslint-plugin-node</span><br><span class="line"></span><br><span class="line"><span class="comment">// .eslintrc.js 配置</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">es2021</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">jest</span>: <span class="literal">true</span> <span class="comment">// 支持jest</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;standard&#x27;</span>, <span class="string">&#x27;prettier&#x27;</span>],</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">ecmaVersion</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&#x27;module&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// .eslintignore 配置忽略 dist, 防止校验打包的产物</span></span><br><span class="line"><span class="title class_">New</span>-<span class="title class_">Item</span> .<span class="property">eslintignore</span>.<span class="property">js</span> -value dist</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果有更复杂的需求，可以安装 eslint-config-prettier 来禁用 eslint 与
prettier 之间冲突的配置。</p>
</blockquote>
<h2 id="配置-babel">配置 babel</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm i -D @babel/core @babel/preset-env babel-plugin-transform-<span class="keyword">async</span>-to-promises</span><br><span class="line"></span><br><span class="line"><span class="title class_">New</span>-<span class="title class_">Item</span> .<span class="property">babelrc</span>.<span class="property">js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// .babelrc.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    [<span class="string">&#x27;@babel/preset-env&#x27;</span>, &#123;</span><br><span class="line">      <span class="comment">// rollupjs 会处理模块，所以设置成 false</span></span><br><span class="line">      <span class="attr">modules</span>: <span class="literal">false</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// 避免 babel 将 async/await 转成 Generator</span></span><br><span class="line">    <span class="comment">// 这样兼容性更好</span></span><br><span class="line">    <span class="string">&#x27;transform-async-to-promises&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="单元测试">单元测试</h2>
<p>test 目录下创建 xxx.test.js（xxx 和 源码中的文件名保持一致）</p>
<ul>
<li>选用 <code>jest</code> 做单元测试</li>
<li>配置 <code>eslint</code> 的 <code>jest</code> 环境</li>
<li>解决 <code>jest</code> 不支持 <code>es module</code> 的问题</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm i <span class="literal">-D</span> jest</span><br><span class="line"><span class="comment"># 支持 `es module`</span></span><br><span class="line">npm i <span class="literal">-D</span> rollup<span class="literal">-jest</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加测试目录</span></span><br><span class="line">mkdir test</span><br><span class="line"></span><br><span class="line"><span class="comment"># package.json 中设置 </span></span><br><span class="line"><span class="string">&quot;jest&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;preset&quot;</span>: <span class="string">&quot;rollup-jest&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行测试</span></span><br><span class="line">npx jest </span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试覆盖率</span></span><br><span class="line">npx jest <span class="literal">--coverage</span></span><br></pre></td></tr></table></figure>
<h2 id="更新忽略文件">更新忽略文件</h2>
<h3 id="gitignore">.gitignore</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># `n 代表换行</span></span><br><span class="line"><span class="comment"># 如果是用 git 仓库管理来作为包服务的话，dist 不能忽略</span></span><br><span class="line"><span class="built_in">New-Item</span> .gitignore <span class="literal">-value</span> node_modules`ndist`ncoverage`n</span><br></pre></td></tr></table></figure>
<h3 id="npmignore">.npmignore</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建文件</span></span><br><span class="line"><span class="built_in">New-Item</span> .npmignore</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加内容</span></span><br><span class="line">node_modules</span><br><span class="line">test</span><br><span class="line">src</span><br><span class="line">.babelrc.js</span><br><span class="line">.eslintrc.js</span><br><span class="line">scripts</span><br><span class="line">coverage</span><br><span class="line">docs</span><br><span class="line">.czrc</span><br><span class="line">.eslintignore</span><br><span class="line">.huskyrc</span><br><span class="line">.commitlint.config.js</span><br><span class="line">.commitlint.config</span><br></pre></td></tr></table></figure>
<h2 id="readme.md">README.md</h2>
<p>添加徽标</p>
<ul>
<li>GitHub徽标官网是<a
href="https://link.juejin.cn?target=https%3A%2F%2Fshields.io%2F">shields.io</a></li>
<li>普通徽标</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="comment">//img.shields.io/badge/&#123;徽标标题&#125;-&#123;徽标内容&#125;-&#123;徽标颜色&#125;.svg</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// eg</span></span><br><span class="line">![build](<span class="attr">https</span>:<span class="comment">//img.shields.io/badge/build-passing-success.svg)</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>
<ul>
<li>动态徽标</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://img.shields.io/github/issues/&#123;github用户名&#125;/&#123;仓库名&#125;.svg</span><br><span class="line">https://img.shields.io/github/forks/&#123;github用户名&#125;/&#123;仓库名&#125;.svg</span><br><span class="line">https://img.shields.io/github/stars/&#123;github用户名&#125;/&#123;仓库名&#125;.svg</span><br><span class="line">https://img.shields.io/github/license/&#123;github用户名&#125;/&#123;仓库名&#125;.svg</span><br></pre></td></tr></table></figure>
<h2 id="git-提交校验">git 提交校验</h2>
<p><strong>安装下列包：</strong></p>
<table>
<colgroup>
<col style="width: 35%" />
<col style="width: 64%" />
</colgroup>
<thead>
<tr class="header">
<th>包名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>husky</td>
<td>关联git的hook与项目，可以实现在提交时校验提交信息的规范性</td>
</tr>
<tr class="even">
<td><span class="citation"
data-cites="commitlint/config-conventional">@commitlint/config-conventional</span></td>
<td>代码提交 message 规范校验格式库</td>
</tr>
<tr class="odd">
<td><span class="citation"
data-cites="commitlint/cli">@commitlint/cli</span></td>
<td>代码提交 message 规范校验</td>
</tr>
<tr class="even">
<td>commitizen</td>
<td>代码交互提交</td>
</tr>
<tr class="odd">
<td>cz-conventional</td>
<td></td>
</tr>
</tbody>
</table>
<p><strong>完整安装及配置：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install <span class="literal">--save-dev</span> husky @commitlint/config<span class="literal">-conventional</span> @commitlint/<span class="built_in">cli</span> commitizen cz<span class="literal">-conventional-changelog</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># commitlint.config</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;module.exports = &#123;extends: [&#x27;@commitlint/config-conventional&#x27;]&#125;&quot;</span> &gt; commitlint.config.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 git</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># commitlint 使用 husky 的消息钩子</span></span><br><span class="line">npx husky install</span><br><span class="line"><span class="comment"># 注意，-- commitlint 之间有一个空格</span></span><br><span class="line">npx husky add .husky/commit<span class="literal">-msg</span> <span class="string">&#x27;npx --no -- commitlint --edit &quot;$1&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># .czrc</span></span><br><span class="line"><span class="built_in">New-Item</span> .czrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容</span></span><br><span class="line">&#123; <span class="string">&quot;path&quot;</span>: <span class="string">&quot;cz-conventional-changelog&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># package.json</span></span><br><span class="line"><span class="comment"># commitizen 快捷命令</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;commit&quot;</span>: <span class="string">&quot;cz&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>常用的commitlint type类别：</strong></p>
<ul>
<li>build：发布</li>
<li>chore：构建过程或辅助工具的变动</li>
<li>ci：合并其它贡献者的代码变化（continuous integration）</li>
<li>docs：文档（documentation）</li>
<li>feat：新功能（feature）</li>
<li>fix：修补bug</li>
<li>perf：</li>
<li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li>
<li>style： 格式（不影响代码运行的变动）</li>
<li>test：增加测试</li>
</ul>
<blockquote>
<p>例：</p>
<p>git commit -m 'feat: 增加 xxx 功能' git commit -m 'bug: 修复 xxx
功能'</p>
</blockquote>
<h2 id="配置package.json">配置package.json</h2>
<p>经过上述配置，我们还需要配置一些 npm 脚本来运行，如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npx rollup -w --environment NODE_ENV:development -c config/rollup.config.dev.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npx rollup --environment NODE_ENV:production -c config/rollup.config.prod.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;x&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm --no-git-tag-version version major&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;y&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm --no-git-tag-version version minor&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;z&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm --no-git-tag-version version patch&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint src&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run lint --fix&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;commit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git-cz&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test:c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest --coverage&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prepublish&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm publish --access=public&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pub:x&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run x &amp;&amp; npm publish --access=public&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pub:y&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run y &amp;&amp; npm publish --access=public&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pub:z&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run z &amp;&amp; npm publish --access=public&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>完整版：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wow-tool&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;provide some usefull uities for javascript&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// main,module,broser 分别代表不同环境下的入口文件</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dst/sw-utils.cjs.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dst/sw-utils.esm.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npx rollup -w --environment NODE_ENV:development -c config/rollup.config.dev.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npx rollup --environment NODE_ENV:production -c config/rollup.config.prod.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;x&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm --no-git-tag-version version major&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;y&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm --no-git-tag-version version minor&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;z&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm --no-git-tag-version version patch&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint src&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run lint --fix&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;commit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git-cz&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test:c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest --coverage&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prepublish&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm publish --access=public&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pub:x&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run x &amp;&amp; npm publish --access=public&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pub:y&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run y &amp;&amp; npm publish --access=public&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pub:z&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run z &amp;&amp; npm publish --access=public&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;jest&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;preset&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rollup-jest&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitee.com/noctiflorous/wow-tool.git&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;bugs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitee.com/noctiflorous/wow-tool.git/issues&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;homepage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitee.com/noctiflorous/wow-tool.git#readme&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 开发依赖（作为npm包被install时，开发依赖不会被下载进node_modules）</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@babel/core&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.16.7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/preset-env&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.16.7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@commitlint/cli&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^16.0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@commitlint/config-conventional&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^16.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@rollup/plugin-alias&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.1.9&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@rollup/plugin-babel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.3.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@rollup/plugin-commonjs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^21.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@rollup/plugin-eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^8.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@rollup/plugin-json&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@rollup/plugin-node-resolve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^13.1.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@rollup/plugin-replace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;commitizen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.2.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cz-conventional-changelog&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.3.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.32.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint-config-standard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^16.0.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint-plugin-import&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.25.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint-plugin-node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^11.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint-plugin-promise&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;husky&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.0.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^27.4.7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rollup&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.63.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rollup-jest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.1.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rollup-plugin-clear&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rollup-plugin-filesize&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^9.1.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rollup-plugin-livereload&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rollup-plugin-serve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rollup-plugin-terser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.0.2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 依赖（作为npm包被install时，依赖会被下载进node_modules）</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="编写功能">编写功能</h2>
<p>上述配置完成后，就可以开始编写功能了。</p>
<p>入口函数为 <code>src/index.js</code> ，该入口在
<code>rollup.config.base.js</code> 中定义的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> units = [<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;KB&#x27;</span>, <span class="string">&#x27;MB&#x27;</span>, <span class="string">&#x27;GB&#x27;</span>, <span class="string">&#x27;TB&#x27;</span>, <span class="string">&#x27;PB&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字节转存储大小</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">bytes</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">humanStorageSize</span>(<span class="params">bytes</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> u = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">parseInt</span>(bytes, <span class="number">10</span>) &gt;= <span class="number">1024</span> &amp;&amp; u &lt; units.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">    bytes /= <span class="number">1024</span></span><br><span class="line">    ++u</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;bytes.toFixed(<span class="number">1</span>)&#125;</span><span class="subst">$&#123;units[u]&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="编写测试">编写测试</h2>
<p>针对上述的 <code>humanStorageSize</code>
方法编写一个单元测试，单元编写参考：<a
href="https://github.com/ambar/rollup-jest">rollup-jest</a> 、<a
href="https://github.com/facebook/jest">jest</a></p>
<p><strong>使用示例：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;parses extname&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(path.<span class="title function_">extname</span>(<span class="string">&#x27;foo.md&#x27;</span>)).<span class="title function_">toBe</span>(<span class="string">&#x27;.md&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>humanStorageSize 测试示例：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新建文件</span></span><br><span class="line"><span class="title class_">New</span>-<span class="title class_">Item</span> test/humanStorageSize.<span class="property">test</span>.<span class="property">js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加如下内容</span></span><br><span class="line"><span class="keyword">import</span> &#123; humanStorageSize &#125; <span class="keyword">from</span> <span class="string">&#x27;../src/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;test humanStorageSize&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(<span class="title function_">humanStorageSize</span>(<span class="number">1024</span>)).<span class="title function_">toBe</span>(<span class="string">&#x27;1.0KB&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>执行测试</strong>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">// 运行测试</span><br><span class="line">npx jest test/humanStorageSize</span><br></pre></td></tr></table></figure>
<p><strong>测试结果</strong>：</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220407181351999.png"
alt="image-20220407181351999" />
<figcaption aria-hidden="true">image-20220407181351999</figcaption>
</figure>
<h2 id="通过-git-管理包">通过 Git 管理包</h2>
<p>如果公司没有私有包服务器，同时也不想将包发到 npm 上，可以发布到私有
Git 仓库里，然后直接从 Git 安装包。<a
href="https://galens.uamazing.cn/posts/2022/3TYQ1H6.html">&gt;&gt; 用
git 管理私有包</a></p>
<h2 id="发布到-npm">发布到 npm</h2>
<h2 id="发布到-verdaccio">发布到 verdaccio</h2>
<h2 id="参考">参考</h2>
<p>本文主要参考以下文章，在此致以诚挚谢意！</p>
<ol type="1">
<li><a
href="https://juejin.cn/post/6844904030976606216">详解从零创建自己的NPM包</a></li>
<li><a href="https://juejin.cn/post/6945376222863949831">开发一个规范的
npm 包</a></li>
<li><a
href="https://zhuanlan.zhihu.com/p/350601275">深入对比Webpack、Parcel、Rollup打包工具</a></li>
<li><a
href="https://www.ruanyifeng.com/blog/2020/08/how-nodejs-use-es6-module.html">Node.js
如何处理 ES6 模块 - 阮一峰的网络日志 (ruanyifeng.com)</a></li>
<li><a href="https://github.com/SunshowerC/blog/issues/8">package.json
中 你还不清楚的 browser，module，main 字段优先级</a></li>
<li><a href="https://webpack.js.org/guides/package-exports/">Package
exports | webpack</a></li>
<li><a
href="https://blog.csdn.net/huzhenv5/article/details/105231011">ES6和commonJs模块化规范的混用</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Package</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>npm包开发建议</title>
    <url>/posts/2022/31N5JWW.html</url>
    <content><![CDATA[<h2 id="技术选型">技术选型</h2>
<blockquote>
<p>建议根据所开发的npm包功能，选择更加快速且合理的打包方案。如果开发的是一个
<code>tools</code> 这样的工具库，显然更适合用 <code>rollup</code>
打包。如果是开发的是一个业务组件（vue），则更加适合采用
<code>@vue/cli</code> 的 <code>lib</code> 模式来构建。</p>
</blockquote>
<p>为什么一定要选择打包工具来开发 <code>npm</code> 包?</p>
<ul>
<li>不一定非要使用构建工具来开发，使用构建工具主要是为了使用它强大的生态系统。比如代码风格检测、本地服务、同时构建多种规范的产物等等，方便我们的开发</li>
</ul>
<p>为什么是 <code>rollup</code> 而不是 <code>webpack</code>?</p>
<ul>
<li>随着 <code>rollup</code> 和 <code>webpack</code>
的版本更新，二者之间的差异性特性越来越小</li>
<li><code>rollup</code>
配置简单，支持同时打包输出多种规范的产物（iife、cjs、umd、esm、amd、system）</li>
<li><code>webpack</code>
功能强大社区丰富，更加适合大型应用；不支持打包输出为<code>es module</code>，而且产物不是很纯净</li>
<li>构建<code>App应用</code>时，webpack比较合适；如果是<code>类库（纯js项目）</code>，rollup更加适合。</li>
</ul>
<span id="more"></span>
<h2 id="完整的开发流程">完整的开发流程</h2>
<ol type="1">
<li>初始化项目</li>
<li>创建合理的目录结构</li>
<li>配置 <code>eslint</code> 统一代码风格</li>
<li>配置 <code>typescript</code> 开发环境</li>
<li>配置 <code>babel</code></li>
<li>配置 <code>git</code> 提交的校验钩子</li>
<li>开始编写代码</li>
<li>watch 模式开发(本地服务)</li>
<li>添加单元测试，编写测试示例</li>
<li>完善 <code>package.json</code> 必要字段</li>
<li>配置合适的 <code>npm script</code></li>
<li>本地测试开发的 <code>npm</code> 包</li>
<li>发布包到 <code>npm</code></li>
<li>提交代码到 <code>git</code> 仓库</li>
</ol>
<h2 id="合理的包结构">合理的包结构</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">├── bin  <span class="comment">// 用于存放可执行二进制文件的目录</span></span><br><span class="line">├── <span class="title function_">dist</span>(lib)  <span class="comment">// 产物输出目录</span></span><br><span class="line">├── docs <span class="comment">// 文档说明</span></span><br><span class="line">├── examples <span class="comment">// 示例</span></span><br><span class="line">├── package.<span class="property">json</span></span><br><span class="line">├── <span class="variable constant_">README</span>.<span class="property">md</span> <span class="comment">// 包说明，会在npm展示</span></span><br><span class="line">├── scripts <span class="comment">// 脚本</span></span><br><span class="line">├── <span class="title function_">src</span>(packages) <span class="comment">// 源码</span></span><br><span class="line">├── test <span class="comment">// 单元测试</span></span><br><span class="line">└── ...  <span class="comment">// 一些配置文件（eg: eslint、babel）</span></span><br></pre></td></tr></table></figure>
<h2 id="致谢">致谢</h2>
<p>本文摘抄于以下文章，在此致以诚挚谢意！</p>
<ol type="1">
<li><a href="https://juejin.cn/post/6945376222863949831">开发一个规范的
npm 包</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Package</category>
      </categories>
      <tags>
        <tag>npm包</tag>
      </tags>
  </entry>
  <entry>
    <title>npm镜像源管理工具nrm使用</title>
    <url>/posts/2022/W1573T.html</url>
    <content><![CDATA[<p>通过 nrm(npmregistry manager) 可以很方面的管理和切换 npm
的镜像源。</p>
<span id="more"></span>
<h2 id="安装">安装</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> nrm</span><br></pre></td></tr></table></figure>
<h2 id="使用">使用</h2>
<p><strong>查看可用源列表：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nrm ls</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果中带 * 号的为当前使用的源</p>
</blockquote>
<p><strong>快速切换：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nrm use xxx</span><br></pre></td></tr></table></figure>
<p><strong>增加镜像源：</strong></p>
<p>如果我们需要增加特定的源，比如自己的私有源，可以执行以下命令进行添加，其中
<code>reigstry</code>为源名，<code>url</code>为源的路径。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nrm add &lt;registry&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure>
<p><strong>删除：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nrm del &lt;registry&gt;</span><br></pre></td></tr></table></figure>
<p><strong>测试某个源的速度：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nrm test xxx</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Package</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>pakage</tag>
        <tag>nrm</tag>
      </tags>
  </entry>
  <entry>
    <title>Quasar 项目中的别名</title>
    <url>/posts/2023/4PA3A5.html</url>
    <content><![CDATA[<p><img data-src="https://cdn.quasar.dev/logo-v2/svg/logotype.svg" /></p>
<p>使用 Quasar CLI 与 Vite 搭建 vue 项目后，没有经典的 vite.config.js
文件，相反，只有
<strong>quasar.config.js</strong>文件<strong>（</strong>更多详细信息：https://quasar.dev/quasar-cli-vite/quasar-config-file）。</p>
<p>在这种情况下，如何为 src 目录设置别名呢？</p>
<span id="more"></span>
<p>如果有使用 ElementUI Admin 的经验，可能会将 src 设置成别名
<code>@</code>，然而在 Quasar 中，官方建议不将将 <code>@</code> 当作 src
的别名，因为 npm 包中，组织包是以 <code>@</code> 开头，会发生冲突。</p>
<blockquote>
<p>在所有项目中，最好都不要使用 @ 作为 src 别名</p>
</blockquote>
<h2 id="系统别名">系统别名</h2>
<p>Quasar 为我们提供了配置好的别名，可以直接使用，它们分别是：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Alias</th>
<th style="text-align: left;">Resolves to</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>src</code></td>
<td style="text-align: left;">/src</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>app</code></td>
<td style="text-align: left;">/</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>components</code></td>
<td style="text-align: left;">/src/components</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>layouts</code></td>
<td style="text-align: left;">/src/layouts</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>pages</code></td>
<td style="text-align: left;">/src/pages</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>assets</code></td>
<td style="text-align: left;">/src/assets</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>boot</code></td>
<td style="text-align: left;">/src/boot</td>
</tr>
</tbody>
</table>
<h2 id="自定义别名">自定义别名</h2>
<p>如果上述别名无法满足日常使用，还可以通过这个教程添加自定义别名：<a
href="https://v1.quasar.dev/quasar-cli/handling-webpack#adding-webpack-aliases">Adding
Webpack aliases</a></p>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此致以诚挚谢意！</p>
<p><a
href="https://medium.com/@florin.codreanu/setting-alias-on-quasar-cli-with-vite-dbcce7e93f76">Setting
alias ‘@’ on Quasar CLI with Vite - Florin Codreanu - Medium</a></p>
<p><a href="https://github.com/quasarframework/quasar/issues/3306">How
to set own alias · Issue #3306 · quasarframework/quasar
(github.com)</a></p>
<p><a
href="https://v1.quasar.dev/quasar-cli/handling-webpack#webpack-aliases">Handling
Webpack | Quasar Framework</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Quasar</category>
      </categories>
      <tags>
        <tag>Quasar</tag>
      </tags>
  </entry>
  <entry>
    <title>yarn 常用命令</title>
    <url>/posts/2022/AKDK4Z.html</url>
    <content><![CDATA[<p>yarn 的常用命令如下：</p>
<span id="more"></span>
<h2 id="添加">添加</h2>
<p><strong>本地安装：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add &lt;package&gt;[@&lt;version&gt;]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>&lt;&gt; 代表名称</p>
<p>[] 中内容代表可选</p>
</blockquote>
<p><strong>安装为开发依赖：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">yarn add &lt;package&gt;[@&lt;version&gt;] -D</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">yarn add &lt;package&gt;[@&lt;version&gt;] --dev</span><br></pre></td></tr></table></figure>
<p><strong>全局安装：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn global add &lt;package&gt;[@&lt;version&gt;]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意 global 的顺序，位于 add 之前</p>
</blockquote>
<h2 id="移除">移除</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn remove &lt;package&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行 <code>yarn remove foo</code> 会从你的直接依赖里移除名为
<code>foo</code> 的包，在此期间会更新你的 <code>package.json</code> 和
<code>yarn.lock</code> 文件</p>
</blockquote>
<h2 id="运行">运行</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn run [script][&lt;args&gt;]</span><br></pre></td></tr></table></figure>
<h2 id="缓存">缓存</h2>
<p><strong>查看缓存位置：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn cache dir</span><br></pre></td></tr></table></figure>
<p><strong>清空缓存：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn cache clean</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Package</category>
      </categories>
      <tags>
        <tag>yarn</tag>
        <tag>package</tag>
      </tags>
  </entry>
  <entry>
    <title>yarn镜像源管理工具yrm使用</title>
    <url>/posts/2022/QRGC5D.html</url>
    <content><![CDATA[<p>通过 yrm(yarn registry manager) 可以很方面的管理和切换
yarn的镜像源。</p>
<span id="more"></span>
<h2 id="安装">安装</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> yrm</span><br></pre></td></tr></table></figure>
<h2 id="使用">使用</h2>
<p><strong>查看可用源列表：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yrm ls</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果中带 * 号的为当前使用的源</p>
</blockquote>
<p><strong>快速切换：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yrm use xxx</span><br></pre></td></tr></table></figure>
<p><strong>增加镜像源：</strong></p>
<p>如果我们需要增加特定的源，比如自己的私有源，可以执行以下命令进行添加，其中
<code>reigstry</code>为源名，<code>url</code>为源的路径。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yrm add &lt;registry&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure>
<p><strong>删除：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yrm del &lt;registry&gt;</span><br></pre></td></tr></table></figure>
<p><strong>测试某个源的速度：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yrm test xxx</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Package</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>pakage</tag>
        <tag>nrm</tag>
      </tags>
  </entry>
  <entry>
    <title>Quasar 中 Table 虚拟滚动切换后数据显示不全的解决办法</title>
    <url>/posts/2023/3XYDGYD.html</url>
    <content><![CDATA[<p>在使用 Quasar 中的 Table
控件时，当用户选择全部后，由于数据较多，会导致响应会非常卡顿，为了解决这个问题，于是向
Table 增加虚拟滚动的功能。</p>
<p>可是当进行页面切换时，发现不能完整的显示当前页的数据，每行最多只有 12
条数据。</p>
<span id="more"></span>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20230515101947071.png"
alt="image-20230515101947071" />
<figcaption aria-hidden="true">image-20230515101947071</figcaption>
</figure>
<p>通过排查，发现下面浅绿色的部分用于滚动触发，所以猜想是否是虚拟列表中渲染的最小行数限制了，于是将
<code>virtual-scroll-slice-size</code> 设置成 25
后，问题得到了解决。</p>
<p>参考：<a
href="http://v1.quasarchs.com/vue-components/table#qtable-api">表格 |
Quasar Framework 中文网 (quasarchs.com)</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Quasar</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Quasar</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>向 verdaccio 新建用户并发布包</title>
    <url>/posts/2022/GZ1MBS.html</url>
    <content><![CDATA[<p>本文记录了如何向私有镜像管理器（verdaccio）中新建用户并发布本地包的方法。</p>
<span id="more"></span>
<p>verdaccio 没有用户注册管理界面，一切需要在终端利用 npm 操作。</p>
<h2 id="登陆用户">登陆用户</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm adduser --registry https://yourdomain.cn/</span><br></pre></td></tr></table></figure>
<h2 id="发布包">发布包</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm publish --registry https://yourdomain.cn/</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Package</category>
      </categories>
      <tags>
        <tag>verdaccio</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>用 git 管理私有包</title>
    <url>/posts/2022/3TYQ1H6.html</url>
    <content><![CDATA[<p>在实际的开发中，有时候 npm
上的包可能不满足使用要求，需要在其基础上进行修改，然后发布自己的包。在程序体量不大的情况下，可以采用
<code>Git</code> 来进行包管理。</p>
<span id="more"></span>
<p>下文以 <code>Quasar</code> 组件为例。</p>
<h2 id="下载包">下载包</h2>
<p>使用 npm 或 yarn 将包更新到自己需要的版本。以后基于该版本进行修改</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yarn add quasar@<span class="number">1.18</span>.<span class="number">9</span></span><br></pre></td></tr></table></figure>
<h2 id="新建-git">新建 Git</h2>
<ul>
<li><p>复制包的内容到新目录，然后运行 <code>git init</code>
初始化包</p></li>
<li><p>按需修改组件，新增一个 tag</p></li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git remote add origin xxx(仓库地址)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...省略分支推送</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建tag </span></span><br><span class="line">git tag v1.<span class="number">18.9</span>.<span class="number">1</span></span><br><span class="line"><span class="comment"># 推送tag</span></span><br><span class="line">git push origin v1.<span class="number">18.9</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="更新标签">更新标签</h2>
<p>标签无法更新，只有先删除再重新创建。</p>
<p>删除代码如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">git tag <span class="literal">-d</span> [<span class="type">tag</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">git push origin :refs/tags/[<span class="type">tagName</span>]</span><br></pre></td></tr></table></figure>
<h2 id="使用">使用</h2>
<p><strong>yarn</strong> 格式:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yarn add &lt;git remote url&gt;<span class="comment">#&lt;branch/commit/tag&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>npm 格式:</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install <span class="literal">-s</span> &lt;git remote url&gt;<span class="comment">#&lt;branch/commit/tag&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p><a
href="https://classic.yarnpkg.com/en/docs/cli/add#toc-adding-dependencies">yarn
Adding dependencies</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Package</category>
      </categories>
      <tags>
        <tag>package</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>The unauthenticated git protocol on port 9418 is no longer supported</title>
    <url>/posts/2022/Q9EGFQ.html</url>
    <content><![CDATA[<p>在使用 <code>npm install</code> 或 <code>yarn insatll</code>
时，报错：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">error Command failed.</span><br><span class="line"><span class="keyword">Exit</span> code: <span class="number">128</span></span><br><span class="line">Command: git</span><br><span class="line">Arguments: <span class="built_in">ls</span><span class="literal">-remote</span> <span class="literal">--tags</span> <span class="literal">--heads</span> git://github.com/adobe<span class="literal">-webplatform</span>/eve.git</span><br><span class="line">Directory: E:\galensShare\Develop\swToolsFrontEnd</span><br><span class="line">Output:</span><br><span class="line">fatal: remote error:</span><br><span class="line">  The unauthenticated git protocol on port <span class="number">9418</span> is no longer supported.</span><br><span class="line">Please see https://github.blog/<span class="number">2021</span><span class="literal">-09-01-improving-git-protocol-security-github</span>/ <span class="keyword">for</span> more information.</span><br><span class="line">info Visit https://yarnpkg.com/en/docs/<span class="built_in">cli</span>/install <span class="keyword">for</span> documentation about this command.</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p><strong>原因分析</strong>：</p>
<p>这是由于某些依赖包是通过 Git 来进行安装的，并且其安装链接为 SSH，而
Github 现已不支持 SSH 安装，所以会报错。</p>
<p><strong>解决办法</strong>：</p>
<p>搜索 <code>.gitconfig</code> 文件</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220408162030125.png"
alt="image-20220408162030125" />
<figcaption aria-hidden="true">image-20220408162030125</figcaption>
</figure>
<p>在里面添加如下内容，来告诉 git 在遇到它时使用 https 而不是 SSH。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[url &quot;https://&quot;]</span><br><span class="line">    insteadOf = ssh://</span><br><span class="line">[url &quot;https://&quot;]</span><br><span class="line">    insteadOf = git://</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Package</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>如何优雅地在本地测试 npm 包</title>
    <url>/posts/2022/2151DJJ.html</url>
    <content><![CDATA[<p>需要发布 <code>my-package</code>，想在 <code>my-project</code>
项目内测试 <code>my-package</code>，可以通过下列 3 种方式。</p>
<blockquote>
<p><code>my-package</code> 是包名，<code>my-project</code>
是测试项目名</p>
</blockquote>
<span id="more"></span>
<h2 id="yalc-模拟仓库">yalc 模拟仓库</h2>
<p>全局安装：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm i yalc <span class="literal">-g</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">yarn global add yalc</span><br></pre></td></tr></table></figure>
<p>my-npm build 后， 执行 <code>yalc public</code>，在 my-project 中
<code>yalc add my-package</code></p>
<h2 id="参考">参考</h2>
<p><a href="https://github.com/wclr/yalc">yalc</a></p>
<p><a
href="https://juejin.cn/post/7006241938974179359">如何优雅地在本地测试
npm 包</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Package</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>Vite 配置别名</title>
    <url>/posts/2023/HR60E3.html</url>
    <content><![CDATA[<p>当以命令行方式运行 <code>vite</code> 时，Vite 会自动解析 <a
href="https://cn.vitejs.dev/guide/#index-html-and-project-root">项目根目录</a>
下名为 <code>vite.config.js</code> 的文件。</p>
<span id="more"></span>
<p>因此，我们在 <code>vite.config.js</code> 中进行别名的配置。</p>
<h2 id="配置">配置</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">      <span class="attr">components</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/components&#x27;</span>),</span><br><span class="line">      <span class="attr">styles</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/styles&#x27;</span>),</span><br><span class="line">      <span class="attr">plugins</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/plugins&#x27;</span>),</span><br><span class="line">      <span class="attr">views</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/views&#x27;</span>),</span><br><span class="line">      <span class="attr">layouts</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/layouts&#x27;</span>),</span><br><span class="line">      <span class="attr">utils</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/utils&#x27;</span>),</span><br><span class="line">      <span class="attr">apis</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/apis&#x27;</span>),</span><br><span class="line">      <span class="attr">dirs</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/directives&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<ol type="1">
<li><p><a href="https://cn.vitejs.dev/config/">配置 Vite</a></p></li>
<li><p><a
href="https://cn.vitejs.dev/config/shared-options.html#resolve-alias">resolve.alias</a></p></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Vite</category>
      </categories>
      <tags>
        <tag>Vite</tag>
      </tags>
  </entry>
  <entry>
    <title>在 rollup 中配置别名</title>
    <url>/posts/2022/3JD7WCR.html</url>
    <content><![CDATA[<p>在 <code>rollup</code> 中配置别名需要用到 <a
href="https://www.npmjs.com/package/@rollup/plugin-alias"><span
class="citation"
data-cites="rollup/plugin-alias">@rollup/plugin-alias</span></a>
包。</p>
<span id="more"></span>
<h2 id="安装">安装</h2>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install @rollup/plugin<span class="literal">-alias</span> <span class="literal">--save-dev</span></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">yarn add <span class="literal">-D</span> @rollup/plugin<span class="literal">-alias</span></span><br></pre></td></tr></table></figure>
<h2 id="使用">使用</h2>
<p>在 <code>rollup.config.js</code> <a
href="https://www.rollupjs.org/guide/en/#configuration-files">配置文件</a>
中导入下列配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> alias <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-alias&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">alias</span>(&#123;</span><br><span class="line">      <span class="attr">entries</span>: [</span><br><span class="line">        &#123; <span class="attr">find</span>: <span class="string">&#x27;utils&#x27;</span>, <span class="attr">replacement</span>: <span class="string">&#x27;../../../utils&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">find</span>: <span class="string">&#x27;batman-1.0.0&#x27;</span>, <span class="attr">replacement</span>: <span class="string">&#x27;./joker-1.5.0&#x27;</span> &#125;,</span><br><span class="line">        <span class="comment">// __dirName 是 config 所在的目录</span></span><br><span class="line">        &#123; <span class="attr">find</span>: <span class="string">&#x27;@&#x27;</span>, <span class="attr">replacement</span>: path.<span class="title function_">resolve</span>(path.<span class="title function_">dirname</span>(__dirname), <span class="string">&#x27;src&#x27;</span>) &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>__dirname
代表根目录，说明参见：http://nodejs.cn/api/globals.html#__dirname</p>
</blockquote>
<h2 id="jest-中配置别名">jest 中配置别名</h2>
<p>为了使别名支持<code>jest</code> 单元测试，需要对 <code>jest</code> <a
href="https://jestjs.io/docs/configuration">配置</a> <a
href="https://jestjs.io/docs/configuration#modulenamemapper-objectstring-string--arraystring">moduleNameMapper</a></p>
<p>在 <code>package.json</code> 文件中添加如下配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package 根</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;jest&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;moduleNameMapper&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;^@/(.*)&quot;</span><span class="punctuation">:</span><span class="string">&quot;&lt;rootDir&gt;/src/$1&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span> </span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="vscode-中别名智能识别">vscode 中别名智能识别</h2>
<p>在根目录中创建 <a
href="https://code.visualstudio.com/docs/languages/jsconfig">jsconfig.json</a>
文件，里面添加如下内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此处是根，如果已经存在配置，则去掉外层大括号</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;app/*&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p>https://www.npmjs.com/package/<span class="citation"
data-cites="rollup/plugin-alias">@rollup/plugin-alias</span></p>
<p>https://medium.com/<span class="citation"
data-cites="justintulk/solve-module-import-aliasing-for-webpack-jest-and-vscode-74007ce4adc9">@justintulk/solve-module-import-aliasing-for-webpack-jest-and-vscode-74007ce4adc9</span></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Package</category>
      </categories>
      <tags>
        <tag>Rollup</tag>
        <tag>Package</tag>
      </tags>
  </entry>
  <entry>
    <title>.NET 中对所有类添加 IgnoreExtraElements 属性</title>
    <url>/posts/2022/JME2G9.html</url>
    <content><![CDATA[<p>在将 mongodb 中的数据映射到类的时候，当 mongodb
中的字段与定义的实体类的字段不一样时，会报错，此时只需要在类上添加
<code>BsonIgnoreExtraElements</code> 特性，即可解决。</p>
<span id="more"></span>
<h2 id="正文">正文</h2>
<p>假设有如下 mongodb 数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;Name&quot;: &quot;zhangsan&quot;,</span><br><span class="line">    &quot;Age&quot;: 20,</span><br><span class="line">    &quot;Gender&quot;: &quot;男&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;Name&quot;: &quot;xiaofang&quot;,</span><br><span class="line">    &quot;Age&quot;: 18</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>数据库对应的类的定义为：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">BsonIgnoreExtraElements</span>]</span><br><span class="line"><span class="keyword">public</span> calss Person</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name&#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age&#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了使 mongodb 在映射到 <code>Person</code> 时不报错，要在
<code>Person</code> 上添加 <code>[BsonIgnoreExtraElements]</code>
特性。</p>
<blockquote>
<p>BsonIgnoreExtraElements 位于命名空间
MongoDB.Bson.Serialization.Attributes 中</p>
</blockquote>
<p>这种方式有个弊端，如果要在每一个类上添加
<code>[BsonIgnoreExtraElements]</code>，那写代码时简直难受，且代码侵入性很大。</p>
<p><strong>有没有办法将 <code>BsonIgnoreExtraElements</code>
应用于所有的类呢？</strong></p>
<p>当然有，其方法如下，只需要在初始化 <code>MongoClient</code>
之前运行一次如下代码即可。该设置是单例的，下次初始化时就不需要运行了。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mongodb 全局设置</span></span><br><span class="line"><span class="keyword">var</span> pack = <span class="keyword">new</span> ConventionPack();</span><br><span class="line"><span class="comment">// 在反序列化时，忽略多出的字段</span></span><br><span class="line">pack.Add(<span class="keyword">new</span> IgnoreExtraElementsConvention(<span class="literal">true</span>));</span><br><span class="line">pack.Add(<span class="keyword">new</span> IgnoreIfNullConvention(<span class="literal">true</span>));</span><br></pre></td></tr></table></figure>
<blockquote>
<p>ConventionPack 位于命名空间 MongoDB.Bson.Serialization.Conventions
中</p>
</blockquote>
<ul>
<li><p>IgnoreExtraElementsConvention：忽略库中有但是类中没有定义的字段。这个一般用于敏感字段处理，例如密码字段，它会存在用户
Collection
中，但是这个字段只是登录校验的时候会用到（这时可以用js来查询），其他用户查询（linq查询）基本都不需要用到密码字段。</p></li>
<li><p>IgnoreIfNullConvention：如果字段
<code>null</code>，则不存这个字段，简单来说就是省空间，假设一个类中有
<code>A，B</code> 两个字段，其中 <code>A</code>
字段为空，如果指定该设置，存为 <code>&#123;B:'B'&#125;</code>，否则，存为
<code>&#123;A:null, B:'B'&#125;</code>。</p></li>
</ul>
<h2 id="参考">参考</h2>
<ol type="1">
<li><p><a
href="https://www.cnblogs.com/Erik_Xu/p/5514804.html">MongoDB系列（二）：C#应用</a></p></li>
<li><p><a href="https://qa.1r1g.com/sf/ask/1641404411/#">MongoDB
C#驱动程序 - 忽略绑定上的字段</a></p></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongodb</category>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>.NET</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>聚合</title>
    <url>/posts/2021/MAACZD.html</url>
    <content><![CDATA[<p>聚合操作将来自多个文档分组在一起，并可以对分组数据执行各种操作，然后返回单个结果。</p>
<span id="more"></span>
<p>MongoDB提供了三种聚合方式:</p>
<ul>
<li>Aggregation Pipeline</li>
<li>Map-Reduce Function</li>
<li>Single Purpose Aggreation Methods</li>
</ul>
<h2 id="aggregations-pipeline">Aggregations Pipeline</h2>
<p>聚合管道主要用于对数据的查询，转换和修改。</p>
<p><strong>格式：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="property">orders</span>.<span class="title function_">aggregate</span>([</span><br><span class="line">   &#123; <span class="attr">$match</span>: &#123; <span class="attr">status</span>: <span class="string">&quot;A&quot;</span> &#125; &#125;,</span><br><span class="line">   &#123; <span class="attr">$group</span>: &#123; <span class="attr">_id</span>: <span class="string">&quot;$cust_id&quot;</span>, <span class="attr">total</span>: &#123; <span class="attr">$sum</span>: <span class="string">&quot;$amount&quot;</span> &#125; &#125; &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>
<p>基础的聚合使用 <code>聚合操作</code>
来进行查询。聚合操作也可以在分布式集合（Sharding
Collection）中使用。</p>
<p><strong>优化：</strong></p>
<p>聚合管道还可以通过索引来优化性能。</p>
<h2 id="single-purpose-aggregation-operations">Single Purpose
Aggregation Operations</h2>
<p>Mongodb 使用
<code>estimateDocumentCount()</code>、<code>count()</code>、<code>distinct()</code>
来从集合中聚合文档。</p>
<h2 id="map-reduce">Map-Reduce</h2>
<p>从 5.0 开始，map-reduce 已经弃用。</p>
<p>Map-reduce 操作将大量的数据转成有用的聚合数据。</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongodb</category>
        <category>Aggregation</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>Aggregation</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb聚合中将多个数组合并成一个数组</title>
    <url>/posts/2022/2GHTM80.html</url>
    <content><![CDATA[<h2 id="需求">需求</h2>
<p>有时候，我们需要在查询结果中将某个字段(其类型是数组)合并起来，仅返回一个数组。</p>
<span id="more"></span>
<h2 id="例子">例子</h2>
<p>假设集合 <code>user</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 小明</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="string">&quot;_id&quot;</span> : <span class="title class_">ObjectId</span>(<span class="string">&quot;5eb6bb5bc95fdd10d0f6d21e&quot;</span>), </span><br><span class="line">    <span class="string">&quot;name&quot;</span> : <span class="string">&quot;小明&quot;</span>, </span><br><span class="line">    <span class="string">&quot;education&quot;</span> : <span class="string">&quot;本科&quot;</span>, </span><br><span class="line">    <span class="string">&quot;experiences&quot;</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;profession&quot;</span> : <span class="string">&quot;程序员&quot;</span>, </span><br><span class="line">            <span class="string">&quot;ability&quot;</span> : [</span><br><span class="line">                <span class="string">&quot;java&quot;</span>, </span><br><span class="line">                <span class="string">&quot;nodejs&quot;</span>, </span><br><span class="line">                <span class="string">&quot;golang&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 小红</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="string">&quot;_id&quot;</span> : <span class="title class_">ObjectId</span>(<span class="string">&quot;5eb6bbdbc95fdd10d0f6d220&quot;</span>), </span><br><span class="line">    <span class="string">&quot;name&quot;</span> : <span class="string">&quot;小红&quot;</span>, </span><br><span class="line">    <span class="string">&quot;education&quot;</span> : <span class="string">&quot;本科&quot;</span>, </span><br><span class="line">    <span class="string">&quot;experiences&quot;</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;profession&quot;</span> : <span class="string">&quot;销售&quot;</span>, </span><br><span class="line">            <span class="string">&quot;ability&quot;</span> : [</span><br><span class="line">                <span class="string">&quot;沟通&quot;</span>, </span><br><span class="line">                <span class="string">&quot;财务计算&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;profession&quot;</span> : <span class="string">&quot;采购员&quot;</span>, </span><br><span class="line">            <span class="string">&quot;ability&quot;</span> : [</span><br><span class="line">                <span class="string">&quot;英语&quot;</span>, </span><br><span class="line">                <span class="string">&quot;统计&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 小三</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="string">&quot;_id&quot;</span> : <span class="title class_">ObjectId</span>(<span class="string">&quot;5eb6bdbbc95fdd10d0f6d23f&quot;</span>), </span><br><span class="line">    <span class="string">&quot;name&quot;</span> : <span class="string">&quot;小三&quot;</span>, </span><br><span class="line">    <span class="string">&quot;education&quot;</span> : <span class="string">&quot;大专&quot;</span>, </span><br><span class="line">    <span class="string">&quot;experiences&quot;</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;profession&quot;</span> : <span class="string">&quot;行政助理&quot;</span>, </span><br><span class="line">            <span class="string">&quot;ability&quot;</span> : [</span><br><span class="line">                <span class="string">&quot;英语&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来我想查询出所有学历为 <code>本科</code>
的阅历(experiences)列表，并把它们合并成一个数组返回，返回期望结果如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>, </span><br><span class="line">    <span class="string">&quot;experiences&quot;</span> : [</span><br><span class="line">        &#123; <span class="string">&quot;profession&quot;</span> : <span class="string">&quot;销售&quot;</span>, <span class="string">&quot;ability&quot;</span> : [<span class="string">&quot;沟通&quot;</span>, <span class="string">&quot;财务计算&quot;</span>] &#125;, </span><br><span class="line">        &#123; <span class="string">&quot;profession&quot;</span> : <span class="string">&quot;采购员&quot;</span>, <span class="string">&quot;ability&quot;</span> : [<span class="string">&quot;英语&quot;</span>,  <span class="string">&quot;统计&quot;</span>]&#125;, </span><br><span class="line">        &#123; <span class="string">&quot;profession&quot;</span> : <span class="string">&quot;程序员&quot;</span>, <span class="string">&quot;ability&quot;</span> : [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;nodejs&quot;</span>, <span class="string">&quot;golang&quot;</span>]&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="aggregate-实现">Aggregate 实现</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="title function_">getCollection</span>(<span class="string">&quot;user&quot;</span>).<span class="title function_">aggregate</span>(</span><br><span class="line">    [</span><br><span class="line">        &#123; </span><br><span class="line">            <span class="string">&quot;$match&quot;</span> : &#123; <span class="string">&quot;education&quot;</span> : <span class="string">&quot;本科&quot;</span> &#125;</span><br><span class="line">        &#125;, </span><br><span class="line">        &#123; </span><br><span class="line">            <span class="string">&quot;$group&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>, </span><br><span class="line">                <span class="string">&quot;experiences&quot;</span> : &#123;</span><br><span class="line">                    <span class="string">&quot;$addToSet&quot;</span> : <span class="string">&quot;$experiences&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, </span><br><span class="line">        &#123; </span><br><span class="line">            <span class="string">&quot;$project&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;experiences&quot;</span> : &#123;</span><br><span class="line">                    <span class="string">&quot;$reduce&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;input&quot;</span> : <span class="string">&quot;$experiences&quot;</span>, </span><br><span class="line">                        <span class="string">&quot;initialValue&quot;</span> : [], </span><br><span class="line">                        <span class="comment">// this 是指每个迭代的数组元素，value 指上一次操作的结果值</span></span><br><span class="line">                        <span class="string">&quot;in&quot;</span> : &#123; <span class="string">&quot;$concatArrays&quot;</span> : [<span class="string">&quot;$$value&quot;</span>, <span class="string">&quot;$$this&quot;</span>] &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p>本文摘抄至以下文章，在此表示诚挚感谢！</p>
<ol type="1">
<li><p><a href="https://www.cnblogs.com/wzs5800/p/12861279.html">mongo
使用聚合合并字段</a></p></li>
<li><p>https://docs.mongodb.com/manual/reference/operator/aggregation/reduce/</p></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongodb</category>
        <category>Aggregation</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb查询优化方法</title>
    <url>/posts/2022/2N28YC5.html</url>
    <content><![CDATA[<p>详见参考文档。</p>
<span id="more"></span>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a
href="https://www.mongodb.com/docs/manual/core/query-optimization/#query-optimization">Query
Optimization</a></li>
<li><a
href="https://www.mongodb.com/docs/manual/reference/explain-results/#explain-results">Explain
Results</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongodb</category>
        <category>查询优化</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB 中的数组字段 $lookup 技巧</title>
    <url>/posts/2022/1X1W7HR.html</url>
    <content><![CDATA[<p>在 MongoDB 中可以直接对数组字段进行
<code>$lookup</code>，完全不需要先将数组进行 <code>$unwind</code>。</p>
<span id="more"></span>
<p>以下面的代码为例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userLevelRoles = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">model</span>(<span class="string">&#x27;user&#x27;</span>).<span class="title function_">aggregate</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">$match</span>: &#123;</span><br><span class="line">      <span class="attr">userId</span>: &#123; <span class="attr">$eq</span>: userId &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 用户与角色</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">$lookup</span>: &#123;</span><br><span class="line">      <span class="attr">from</span>: <span class="string">&#x27;user_role&#x27;</span>,</span><br><span class="line">      <span class="attr">localField</span>: <span class="string">&#x27;_id&#x27;</span>,</span><br><span class="line">      <span class="attr">foreignField</span>: <span class="string">&#x27;userId&#x27;</span>,</span><br><span class="line">      <span class="attr">as</span>: <span class="string">&#x27;userRoles&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 角色</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">$lookup</span>: &#123;</span><br><span class="line">      <span class="attr">from</span>: <span class="string">&#x27;role&#x27;</span>,</span><br><span class="line">      <span class="attr">localField</span>: <span class="string">&#x27;userRoles.roleId&#x27;</span>,</span><br><span class="line">      <span class="attr">foreignField</span>: <span class="string">&#x27;_id&#x27;</span>,</span><br><span class="line">      <span class="attr">as</span>: <span class="string">&#x27;rolesOfUser&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>
<p>从上面的查询中我们可以看到，第一个 <code>$lookup</code> 出来的
<code>userRoles</code>
是一个数组，当用这个字段再次进行查询时，只需要将它当成一个对象使用即可。</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongodb</category>
        <category>Aggregation</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>Aggregation</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB 聚合管道优化</title>
    <url>/posts/2022/1S7MQ2A.html</url>
    <content><![CDATA[<p>MongoDB
在聚合之前会有一个优化阶段来提升性能。在开发中，也可以参考这些优化方式，来优化咱们的聚合查询。</p>
<span id="more"></span>
<h2 id="映射优化">映射优化</h2>
<p>聚合管道可以确定它是否只需要文档中字段的一个子集就可以获得结果。
如果是这样，管道将只使用那些必需的字段，从而减少通过管道传递的数据量。</p>
<blockquote>
<p>在 <code>$match</code> 后，可以先 <code>$project</code>
掉一些不需要的字段（通过 <code>&#123;fileName: 0 || false&#125;</code>
来实现）。</p>
</blockquote>
<h2 id="管道序列优化">管道序列优化</h2>
<p>(<code>$project</code> or <code>$unset</code> or
<code>$addFields</code> or <code>$set</code>) + <code>$match</code>
序列优化。</p>
<h2 id="参考">参考</h2>
<p><a
href="https://docs.mongoing.com/aggregation/aggregation-pipeline/aggregation-pipeline-optimization">聚合管道优化</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongodb</category>
        <category>查询优化</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Query 和 Projection 操作符</title>
    <url>/posts/2022/TZZNFQ.html</url>
    <content><![CDATA[<p>本文总结了 mongoDB 中的查询和映射操作符。</p>
<blockquote>
<p>具体使用方法可以单击操作符跳转查看</p>
</blockquote>
<span id="more"></span>
<h2 id="query-selectors查询操作符">Query Selectors，查询操作符</h2>
<h3 id="comparison比较">Comparison，比较</h3>
<p>For comparison of different BSON type values, see the <a
href="https://www.mongodb.com/docs/manual/reference/bson-type-comparison-order/#std-label-bson-types-comparison-order">specified
BSON comparison order</a>.</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Name</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/eq/#mongodb-query-op.-eq"><code>$eq</code></a></td>
<td style="text-align: left;">Matches values that are equal to a
specified value.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/gt/#mongodb-query-op.-gt"><code>$gt</code></a></td>
<td style="text-align: left;">Matches values that are greater than a
specified value.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/gte/#mongodb-query-op.-gte"><code>$gte</code></a></td>
<td style="text-align: left;">Matches values that are greater than or
equal to a specified value.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/in/#mongodb-query-op.-in"><code>$in</code></a></td>
<td style="text-align: left;">Matches any of the values specified in an
array.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/lt/#mongodb-query-op.-lt"><code>$lt</code></a></td>
<td style="text-align: left;">Matches values that are less than a
specified value.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/lte/#mongodb-query-op.-lte"><code>$lte</code></a></td>
<td style="text-align: left;">Matches values that are less than or equal
to a specified value.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/ne/#mongodb-query-op.-ne"><code>$ne</code></a></td>
<td style="text-align: left;">Matches all values that are not equal to a
specified value.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/nin/#mongodb-query-op.-nin"><code>$nin</code></a></td>
<td style="text-align: left;">Matches none of the values specified in an
array.</td>
</tr>
</tbody>
</table>
<h3 id="logical逻辑">Logical，逻辑</h3>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Name</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/and/#mongodb-query-op.-and"><code>$and</code></a></td>
<td style="text-align: left;">Joins query clauses with a logical
<code>AND</code> returns all documents that match the conditions of both
clauses.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/not/#mongodb-query-op.-not"><code>$not</code></a></td>
<td style="text-align: left;">Inverts the effect of a query expression
and returns documents that do <em>not</em> match the query
expression.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/nor/#mongodb-query-op.-nor"><code>$nor</code></a></td>
<td style="text-align: left;">Joins query clauses with a logical
<code>NOR</code> returns all documents that fail to match both
clauses.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/or/#mongodb-query-op.-or"><code>$or</code></a></td>
<td style="text-align: left;">Joins query clauses with a logical
<code>OR</code> returns all documents that match the conditions of
either clause.</td>
</tr>
</tbody>
</table>
<h3 id="element单元">Element，单元</h3>
<table>
<colgroup>
<col style="width: 52%" />
<col style="width: 47%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Name</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/exists/#mongodb-query-op.-exists"><code>$exists</code></a></td>
<td style="text-align: left;">Matches documents that have the specified
field.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/type/#mongodb-query-op.-type"><code>$type</code></a></td>
<td style="text-align: left;">Selects documents if a field is of the
specified type.</td>
</tr>
</tbody>
</table>
<h3 id="evaluation判断">Evaluation，判断</h3>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Name</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/expr/#mongodb-query-op.-expr"><code>$expr</code></a></td>
<td style="text-align: left;">Allows use of aggregation expressions
within the query language.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/jsonSchema/#mongodb-query-op.-jsonSchema"><code>$jsonSchema</code></a></td>
<td style="text-align: left;">Validate documents against the given JSON
Schema.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/mod/#mongodb-query-op.-mod"><code>$mod</code></a></td>
<td style="text-align: left;">Performs a modulo operation on the value
of a field and selects documents with a specified result.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/regex/#mongodb-query-op.-regex"><code>$regex</code></a></td>
<td style="text-align: left;">Selects documents where values match a
specified regular expression.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/text/#mongodb-query-op.-text"><code>$text</code></a></td>
<td style="text-align: left;">Performs text search.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/where/#mongodb-query-op.-where"><code>$where</code></a></td>
<td style="text-align: left;">Matches documents that satisfy a
JavaScript expression.</td>
</tr>
</tbody>
</table>
<h3 id="geospatial地理空间">Geospatial，地理空间</h3>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Name</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/geoIntersects/#mongodb-query-op.-geoIntersects"><code>$geoIntersects</code></a></td>
<td style="text-align: left;">Selects geometries that intersect with a
<a
href="https://www.mongodb.com/docs/manual/reference/glossary/#std-term-GeoJSON">GeoJSON</a>
geometry. The <a
href="https://www.mongodb.com/docs/manual/core/2dsphere/">2dsphere</a>
index supports <a
href="https://www.mongodb.com/docs/manual/reference/operator/query/geoIntersects/#mongodb-query-op.-geoIntersects"><code>$geoIntersects</code></a>.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/#mongodb-query-op.-geoWithin"><code>$geoWithin</code></a></td>
<td style="text-align: left;">Selects geometries within a bounding <a
href="https://www.mongodb.com/docs/manual/reference/geojson/#std-label-geospatial-indexes-store-geojson">GeoJSON
geometry</a>. The <a
href="https://www.mongodb.com/docs/manual/core/2dsphere/">2dsphere</a>
and <a href="https://www.mongodb.com/docs/manual/core/2d/">2d</a>
indexes support <a
href="https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/#mongodb-query-op.-geoWithin"><code>$geoWithin</code></a>.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/near/#mongodb-query-op.-near"><code>$near</code></a></td>
<td style="text-align: left;">Returns geospatial objects in proximity to
a point. Requires a geospatial index. The <a
href="https://www.mongodb.com/docs/manual/core/2dsphere/">2dsphere</a>
and <a href="https://www.mongodb.com/docs/manual/core/2d/">2d</a>
indexes support <a
href="https://www.mongodb.com/docs/manual/reference/operator/query/near/#mongodb-query-op.-near"><code>$near</code></a>.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/nearSphere/#mongodb-query-op.-nearSphere"><code>$nearSphere</code></a></td>
<td style="text-align: left;">Returns geospatial objects in proximity to
a point on a sphere. Requires a geospatial index. The <a
href="https://www.mongodb.com/docs/manual/core/2dsphere/">2dsphere</a>
and <a href="https://www.mongodb.com/docs/manual/core/2d/">2d</a>
indexes support <a
href="https://www.mongodb.com/docs/manual/reference/operator/query/nearSphere/#mongodb-query-op.-nearSphere"><code>$nearSphere</code></a>.</td>
</tr>
</tbody>
</table>
<h3 id="array数组">Array，数组</h3>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Name</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/all/#mongodb-query-op.-all"><code>$all</code></a></td>
<td style="text-align: left;">Matches arrays that contain all elements
specified in the query.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/elemMatch/#mongodb-query-op.-elemMatch"><code>$elemMatch</code></a></td>
<td style="text-align: left;">Selects documents if element in the array
field matches all the specified <a
href="https://www.mongodb.com/docs/manual/reference/operator/query/elemMatch/#mongodb-query-op.-elemMatch"><code>$elemMatch</code></a>
conditions.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/size/#mongodb-query-op.-size"><code>$size</code></a></td>
<td style="text-align: left;">Selects documents if the array field is a
specified size.</td>
</tr>
</tbody>
</table>
<h3 id="bitwise位">Bitwise，位</h3>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Name</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/bitsAllClear/#mongodb-query-op.-bitsAllClear"><code>$bitsAllClear</code></a></td>
<td style="text-align: left;">Matches numeric or binary values in which
a set of bit positions <em>all</em> have a value of <code>0</code>.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/bitsAllSet/#mongodb-query-op.-bitsAllSet"><code>$bitsAllSet</code></a></td>
<td style="text-align: left;">Matches numeric or binary values in which
a set of bit positions <em>all</em> have a value of <code>1</code>.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/bitsAnyClear/#mongodb-query-op.-bitsAnyClear"><code>$bitsAnyClear</code></a></td>
<td style="text-align: left;">Matches numeric or binary values in which
<em>any</em> bit from a set of bit positions has a value of
<code>0</code>.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/bitsAnySet/#mongodb-query-op.-bitsAnySet"><code>$bitsAnySet</code></a></td>
<td style="text-align: left;">Matches numeric or binary values in which
<em>any</em> bit from a set of bit positions has a value of
<code>1</code>.</td>
</tr>
</tbody>
</table>
<h2 id="projection-operators映射操作符">Projection
Operators，映射操作符</h2>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Name</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/projection/positional/#mongodb-projection-proj.-"><code>$</code></a></td>
<td style="text-align: left;">Projects the first element in an array
that matches the query condition.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/projection/elemMatch/#mongodb-projection-proj.-elemMatch"><code>$elemMatch</code></a></td>
<td style="text-align: left;">Projects the first element in an array
that matches the specified <a
href="https://www.mongodb.com/docs/manual/reference/operator/projection/elemMatch/#mongodb-projection-proj.-elemMatch"><code>$elemMatch</code></a>
condition.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/aggregation/meta/#mongodb-expression-exp.-meta"><code>$meta</code></a></td>
<td style="text-align: left;">Projects the document's score assigned
during <a
href="https://www.mongodb.com/docs/manual/reference/operator/query/text/#mongodb-query-op.-text"><code>$text</code></a>
operation.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/projection/slice/#mongodb-projection-proj.-slice"><code>$slice</code></a></td>
<td style="text-align: left;">Limits the number of elements projected
from an array. Supports skip and limit slices.</td>
</tr>
</tbody>
</table>
<h2 id="miscellaneous-operators其它操作符">Miscellaneous
Operators，其它操作符</h2>
<table>
<colgroup>
<col style="width: 59%" />
<col style="width: 40%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Name</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/comment/#mongodb-query-op.-comment"><code>$comment</code></a></td>
<td style="text-align: left;">Adds a comment to a query predicate.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a
href="https://www.mongodb.com/docs/manual/reference/operator/query/rand/#mongodb-query-op.-rand"><code>$rand</code></a></td>
<td style="text-align: left;">Generates a random float between 0 and
1.</td>
</tr>
</tbody>
</table>
<h2 id="参考">参考</h2>
<p><a
href="%5BQuery%20and%20Projection%20Operators%20—%20MongoDB%20Manual%5D(https://www.mongodb.com/docs/manual/reference/operator/query/)">Query
and Projection Operators</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Database</category>
        <category>Mongodb</category>
        <category>Operators</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF MVVM Stylet使用文档（中文）19-2 Debug Converter</title>
    <url>/posts/2020/AEXRX4.html</url>
    <content><![CDATA[<p>在我曾经需要调试绑定的每个项目上，最简单的方法是在绑定上放置一个转换器，它只记录它看到的值。`DebugConverter
就是这样一个转换器的实现，它将记录对 Visual Studio
输出窗口的每次调用，前提是你正在运行一个调试版本。</p>
<span id="more"></span>
<p>基本用法很简单:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding MyProperty, Converter=&#123;x:Static s:DebugConverter.Instance&#125;&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果您希望同时激活多个实例，并希望为每个实例指定一个名称(包含在其输出中)，您可以这样做:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- In any .Resources section - doesn&#x27;t have to be Window.Resources --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">s:DebugConverter</span> <span class="attr">x:key</span>=<span class="string">&quot;debugConverter&quot;</span> <span class="attr">Name</span>=<span class="string">&quot;MySpecialName&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Later in code --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding MyProperty, Converter=&#123;StaticResource debugConverter&#125;&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Stylet 框架</category>
        <category>Misc</category>
      </categories>
      <tags>
        <tag>MVVM</tag>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF MVVM Stylet使用文档（中文）19-3 BoolToVisibilityConverter</title>
    <url>/posts/2020/10KD94C.html</url>
    <content><![CDATA[<p>在几乎每个项目中，我都需要根据 ViewModel 中的一些 bool
值隐藏/显示一个元素。您可以使用 DataTriggers
或使用转换器来实现这一点。</p>
<span id="more"></span>
<p>转换器实现非常简单: 当绑定到一个 bool 属性时，如果它读取一个 true
值，它将返回一个(预配置的)可见性，如果它读取一个 false
值，它将返回另一个。</p>
<p>如果你绑定到一个类型的属性而不是 bool，它将使用以下规则:</p>
<ol type="1">
<li><p>如果该值为null，则视为false</p></li>
<li><p>如果值为0 (比如 int、float、double等)，则将其视为false</p></li>
<li><p>如果值是空集合、字典等，则将其视为 false</p></li>
<li><p>否则，它就被当作是真的</p></li>
</ol>
<p>这与许多语言中的 “真实/虚假”
规则相匹配。比如说，当且仅当绑定到的集合不是空的时候，才显示一个
<code>ListView</code>，这个很方便。</p>
<p>基本示例用法:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- In any .Resources section - doesn&#x27;t have to be Window.Resources --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">s:BoolToVisibilityConverter</span> <span class="attr">x:Key</span>=<span class="string">&quot;boolToVisConverter&quot;</span> <span class="attr">TrueVisibility</span>=<span class="string">&quot;Visible&quot;</span> <span class="attr">FalseVisibility</span>=<span class="string">&quot;Hidden&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Later in code --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Visibility</span>=<span class="string">&quot;&#123;Binding SomeBoolProperty, Converter=&#123;StaticResource boolToVisConverter&#125;&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果你想要(通常的)的转换器是这种情况时：true
的情况是<code>Visiblity.Visible</code> ，false 的情况是
<code>Visibility.Collapsed</code> 。这是简化方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Visibility</span>=<span class="string">&quot;&#123;Binding SomeBoolProperty, Converter=&#123;x:Static s:BoolToVisibilityConverter.Instance&#125;&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>同样地，如果你想要(稍微不太常见的)是：true 时是
<code>Visibility.Collapsed</code>，而 false 是
<code>Visibility.Visible</code> 。这也有一个简化方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Visibility</span>=<span class="string">&quot;&#123;Binding SomeBoolProperty, Converter=&#123;x:Static s:BoolToVisibilityConverter.InverseInstance&#125;&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Stylet 框架</category>
        <category>Misc</category>
      </categories>
      <tags>
        <tag>MVVM</tag>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF MVVM Stylet使用文档（中文）19-1 LabelledValue</title>
    <url>/posts/2020/PBS08B.html</url>
    <content><![CDATA[<p>有时您希望向用户显示一些对象，但您希望将自定义(字符串)标签与之关联，视图中将显示该标签。因此要创建易用类来包装对象并关联这个标签。</p>
<span id="more"></span>
<p>然后你会想要重写 ToString 以及 Equals 和
GetHashCode，这样你的视图就只显示标签，这样它们就能在含有<code>SelectedItem</code>
的类中工作 (例如，<code>ComboBox</code>)。最后，您将希望实现
<code>INotifyPropertyChanged</code>，以便视图能够对其进行更改。</p>
<p>这就是<code>LabelledValue&lt;T&gt;</code>
的全部内容——一个具有字符串<code>Label</code>属性和 <code>T</code>
<code>Value</code> 属性的类。加上一个重写的 <code>ToString</code>，
<code>GetHashCode</code>， <code>Equals</code>，并实现了
<code>INotifyPropertyChanged</code>。</p>
<p>例如:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> MyEnum</span><br><span class="line">&#123;</span><br><span class="line">   Foo,</span><br><span class="line">   Bar,</span><br><span class="line">   Baz</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">MyViewModel</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// Implement INotifyPropertyChanged if you want</span></span><br><span class="line">   <span class="keyword">public</span> BindableCollection&lt;LabelledValue&lt;MyEnum&gt;&gt; EnumValues &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">   <span class="keyword">public</span> LabelledValue&lt;MyEnum&gt; SelectedEnumValue &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">MyViewModel</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">this</span>.EnumValues = <span class="keyword">new</span> BindableCollection&lt;LabelledValue&lt;MyEnum&gt;&gt;()</span><br><span class="line">      &#123;</span><br><span class="line">         LabelledValue.Create(<span class="string">&quot;Foo Value&quot;</span>, MyEnum.Foo),</span><br><span class="line">         LabelledValue.Create(<span class="string">&quot;Bar Value&quot;</span>, MyEnum.Bar),</span><br><span class="line">         LabelledValue.Create(<span class="string">&quot;Baz Value&quot;</span>, MyEnum.Baz),</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.SelectedEnumValue = <span class="keyword">this</span>.EnumValues[<span class="number">0</span>];</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后，在视图中：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ComboBox</span> <span class="attr">ItemsSource</span>=<span class="string">&quot;&#123;Binding EnumValues&#125;&quot;</span> <span class="attr">SelectedItem</span>=<span class="string">&quot;&#123;Binding SelectedEnumValue&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Stylet 框架</category>
        <category>Misc</category>
      </categories>
      <tags>
        <tag>MVVM</tag>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>如何获得Stylet中IContainer的引用</title>
    <url>/posts/2021/2MV52X2.html</url>
    <content><![CDATA[<p>使用 Stylet 框架进行 MVVM 开发，采用 IoC 时，我们可能需要传递 IoC
生成的 <code>IContainer</code>
引用，这样可以在其它地方自由地获取实例，比如整个程序的配置文件。</p>
<span id="more"></span>
<h2 id="正文">正文</h2>
<p>想要获取 <code>IContainer</code>，可以在 <code>Bootstrapper</code>
中获取。代码如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Stylet;</span><br><span class="line"><span class="keyword">using</span> StyletIoC;</span><br><span class="line"><span class="keyword">using</span> log4net.Core;</span><br><span class="line"><span class="keyword">using</span> log4net;</span><br><span class="line"><span class="keyword">using</span> Server.Pages;</span><br><span class="line"><span class="keyword">using</span> Server.Database;</span><br><span class="line"><span class="keyword">using</span> Server.Config;</span><br><span class="line"><span class="keyword">using</span> Server.Http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Server</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Bootstrapper</span> : <span class="title">Bootstrapper</span>&lt;<span class="title">ShellViewModel</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ILog _logger = LogManager.GetLogger(<span class="keyword">typeof</span>(Bootstrapper));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> HttpServiceMain _httpServer;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ConfigureIoC</span>(<span class="params">IStyletIoCBuilder builder</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Configure the IoC container in here</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 注册 IoC</span></span><br><span class="line">            <span class="keyword">var</span> userConfig = <span class="keyword">new</span> UserConfig();</span><br><span class="line">            builder.Bind&lt;UserConfig&gt;().ToInstance(userConfig);</span><br><span class="line">            builder.Bind&lt;LiteDBManager&gt;().ToInstance(<span class="keyword">new</span> LiteDBManager(userConfig));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">base</span>.ConfigureIoC(builder);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在此处获取 Container, 其它地方获取的都是空</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Configure</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Perform any other configuration before the application starts</span></span><br><span class="line">			</span><br><span class="line">            <span class="comment">// 加载静态网页服务</span></span><br><span class="line">            _httpServer = <span class="keyword">new</span> HttpServiceMain();</span><br><span class="line">            _httpServer.Start(Container);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 加载 websocket</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnStart</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Stylet.Logging.LogManager.Enabled = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加对所有未捕获异常的读取</span></span><br><span class="line">            AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CurrentDomain_UnhandledException</span>(<span class="params"><span class="built_in">object</span> sender, UnhandledExceptionEventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _logger.Error(<span class="string">&quot;未捕获异常:&quot;</span> + e.ExceptionObject.ToString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p>[1]. <a
href="https://github.com/canton7/Stylet/wiki/IoC%3A-Static-Service-Locator">IoC:
Static Service Locator</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Stylet 框架</category>
        <category>StyletIoC</category>
      </categories>
      <tags>
        <tag>Stylet</tag>
        <tag>IoC</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF MVVM Stylet使用文档（中文）14-1-Introduction of StyletIoC</title>
    <url>/posts/2020/3CQNFDK.html</url>
    <content><![CDATA[<p>StyletIoC 是一个非常轻量和非常快的 IoC
容器。它被设计来只做很少的事情，但做得很好，且直观。</p>
<span id="more"></span>
<p>它使用一个流畅的接口进行配置——没有任何XML垃圾，也没有依赖关系。</p>
<p>现在，我假设您对 IoC
容器的概念有一定的了解——如果没有，请阅读一些资料，然后再回来。我以后可能会写一篇更深入的介绍。</p>
<h2 id="服务和实现services-and-implementations">服务和实现（Services and
Implementations）</h2>
<p>StyletIoC
是围绕服务的概念构建的。服务是具体类型、抽象类型或接口，由具体类型实现(或可以实现)，例如:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">IVehicle</span> &#123; ... &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">HotHatchback</span> : <span class="title">IVehicle</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p>这里，<code>IVehicle</code> 是服务，<code>HotHatchback</code>
是实现服务的具体类型。注意 <code>HotHatchback</code>
也是一个服务，它是由 <code>HotHatchback</code> 类本身实现的。</p>
<p>配置 StyletIoC
时，要定义一组关系。每个关系都是服务与实现它的类型(或多个类型)之间的关系。所以这里，我们可以告诉
StyletIoC: "在服务 <code>IVehicle</code> 和类型
<code>HotHatchback</code> 之间创建一个关系”。</p>
<p>稍后，当你想要一个 <code>IVehicle</code> 的实现时，你可以请求
StyletIoC: “给我一个实现服务 <code>IVehicle</code>
的实例"，然后StyletIoC 会构造一个 <code>HotHatchback</code>
并将它传递给你。</p>
<h2
id="处理类型服务定位符和注入resolving-types---the-service-locator-and-injection">处理类型——服务定位符和注入（Resolving
Types - The Service Locator and Injection）</h2>
<p>有3种方法让 StyletIoC 为我们构建一个类型:</p>
<ol type="1">
<li><p>通过直接调用 IContainer.Get</p></li>
<li><p>构造函数注入</p></li>
<li><p>属性注入</p></li>
</ol>
<p>直接调用 <code>IContainer.Get</code>
是最容易解释的，它看起来像这样:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ioc = ... <span class="comment">// Covered in lots of detail elsewhere</span></span><br><span class="line"><span class="keyword">var</span> vehicle = ioc.Get&lt;IVehicle&gt;();</span><br></pre></td></tr></table></figure>
<p>尽管这看起来很诱人，但这只应该在应用程序的根目录中完成——在其他地方使用构造函数注入和参数注入。</p>
<p>当 StyletIoC
为您构造一个类型时，它将寻找一个构造函数，该构造函数具有它知道如何解析的类型的参数。然后，它将解析这些类型，并将它们注入构造函数。例如:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Engine</span> &#123; ... &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Car</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Car</span>(<span class="params">Engine engine</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// &#x27;engine&#x27; contains a new instance of Engine</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是 StyletIoC 之外的创建新实例最常见的方式——StyletIoC
构造的每一个类型都会在它的构造函数中列出它的依赖项，而 StyletIoC
会构造每一个，注入它的依赖项。</p>
<p>如果你愿意，你也可以做参数注入，如果要注入的参数有属性
<code>[Inject]</code>，例如:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Engine</span> &#123; ... &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Car</span></span><br><span class="line">&#123;</span><br><span class="line">   [<span class="meta">Inject</span>]</span><br><span class="line">   <span class="keyword">public</span> Engine Engine &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每种方法的各种优点，我们将在其他地方讨论。</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Stylet 框架</category>
        <category>StyletIoC</category>
      </categories>
      <tags>
        <tag>MVVM</tag>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>动态路由深度克隆路由导致VueRouter component重载</title>
    <url>/posts/2021/119HBCA.html</url>
    <content><![CDATA[<p>今天在一个以 vue-element-admin
为框架的项目中遇到这样一个问题：固定路由与动态路由切换时，vue 会重新加载
Layout 组件。</p>
<span id="more"></span>
<p>后经过排查，发现是由于在进行动态路由添加时，使用了 lodash 的
<code>cloneDeep()</code> 对原来的路由进行克隆导致的。</p>
<p><strong>路由配置文件：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Layout from &#x27;@/layout&#x27;</span><br><span class="line"></span><br><span class="line">// 固定路由</span><br><span class="line">export const constantRoutes = [</span><br><span class="line">  ...</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/&#x27;,</span><br><span class="line">    component: Layout,</span><br><span class="line">    redirect: &#x27;/dashboard&#x27;,</span><br><span class="line">    name: &#x27;DashboardIndex&#x27;,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#x27;dashboard&#x27;,</span><br><span class="line">        component: () =&gt; import(&#x27;@/views/dashboard/index&#x27;),</span><br><span class="line">        name: &#x27;Dashboard&#x27;,</span><br><span class="line">        meta: &#123; title: &#x27;首页&#x27;, icon: &#x27;dashboard&#x27;, affix: true &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">// 动态路由</span><br><span class="line">export const asyncRoutes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/workflow&#x27;,</span><br><span class="line">    name: &#x27;workflow&#x27;,</span><br><span class="line">    component: Layout,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: &#x27;工作流程&#x27;,</span><br><span class="line">      icon: &#x27;workflow&#x27;,</span><br><span class="line">      functionCode: &#x27;router/workflow&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    redirect: &#x27;/workflow/ownWorkflow/searchWorkflow&#x27;,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#x27;createWorkflow&#x27;,</span><br><span class="line">        component: () =&gt; import(&#x27;@/views/workflow/own-workflow/create-workflow&#x27;),</span><br><span class="line">        name: &#x27;CreateWorkFlow&#x27;,</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: &#x27;新建工作&#x27;,</span><br><span class="line">          icon: &#x27;add-document&#x27;,</span><br><span class="line">          functionCode: &#x27;router/createWorkflow&#x27;,</span><br><span class="line">          noCache: true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>动态路由生成：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// store中生成路由</span><br><span class="line">generateRoutes(&#123; commit &#125;, access) &#123;</span><br><span class="line">  return new Promise(resolve =&gt; &#123;</span><br><span class="line">    let accessedRoutes</span><br><span class="line">    if (access.includes(&#x27;*&#x27;)) &#123;</span><br><span class="line">      const cloneDatas = _.cloneDeep(asyncRoutes)</span><br><span class="line">      accessedRoutes = cloneDatas</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      accessedRoutes = filterAsyncRoutes(asyncRoutes, access)</span><br><span class="line">    &#125;</span><br><span class="line">    commit(&#x27;SET_ROUTES&#x27;, accessedRoutes)</span><br><span class="line">    resolve(accessedRoutes)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>原理分析</strong> 为什么使用 clone
后的路由配置，在切换时就会重新加载路由里面的 component 组件呢？
原来是因为 <code>cloneDeep()</code> 会进行深度克隆，路由中的 component
也会变成新的对象，该对象与固定路由中的 component
不是同一个，所以两者在进行切换时，会重载 Layout 布局。</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Vue</category>
        <category>VueRouter</category>
      </categories>
      <tags>
        <tag>VueRouter</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF MVVM Stylet使用文档（中文）19-4 IoC：Static Service Locator</title>
    <url>/posts/2020/1R7P97F.html</url>
    <content><![CDATA[<span id="more"></span>
<p>Caliburn.Micro 附带了一个名为 IoC
的静态服务定位器。这让你可以从代码中的任何地方访问 IoC
容器，就像这样:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = IoC.Get&lt;MyDialogViewModel&gt;();</span><br><span class="line"><span class="keyword">this</span>.windowManager.ShowDialog(vm);</span><br></pre></td></tr></table></figure>
<p>Stylet
没有包含这个，而且有很好的理由:我不想鼓励人们编写如此糟糕的代码。服务定位器模式经常被称为反模式。现在每个类都有一个对
IoC
的依赖(而不是它所依赖的实际类)，您不能仅通过查看类的构造函数就知道它的依赖关系是什么，相反，您必须遍历代码以才能得知它对<code>IoC.Get</code>的调用。</p>
<p>IoC 也在 Caliburn 内部使用导致产生了一些糟糕的设计选择。这些已经在
Stylet 中重新架构，因此内部不再需要IoC。</p>
<p>如果你真的需要 IoC
的支持(尽管它会导致糟糕的代码风格)，那么你可以很容易地编写自己的
IoC。首先创建这个静态 IoC 类:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">IoC</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Func&lt;Type, <span class="built_in">string</span>, <span class="built_in">object</span>&gt; GetInstance = (service, key) =&gt; &#123; <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;IoC is not initialized&quot;</span>); &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Func&lt;Type, IEnumerable&lt;<span class="built_in">object</span>&gt;&gt; GetAllInstances = service =&gt; &#123; <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;IoC is not initialized&quot;</span>); &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Action&lt;<span class="built_in">object</span>&gt; BuildUp = instance =&gt; &#123; <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;IoC is not initialized&quot;</span>); &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">Get</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> key = <span class="literal">null</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (T)GetInstance(<span class="keyword">typeof</span>(T), key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">IEnumerable</span>&lt;<span class="title">T</span>&gt; <span class="title">GetAll</span>&lt;<span class="title">T</span>&gt;()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> GetAllInstances(<span class="keyword">typeof</span>(T)).Cast&lt;T&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在引导程序中添加下面的代码：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Configure</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">   IoC.GetInstance = <span class="keyword">this</span>.Container.Get;</span><br><span class="line">   IoC.GetAllInstances = <span class="keyword">this</span>.Container.GetAll;</span><br><span class="line">   IoC.BuildUp = <span class="keyword">this</span>.Container.BuildUp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>DotNET</category>
        <category>Stylet 框架</category>
        <category>Misc</category>
      </categories>
      <tags>
        <tag>MVVM</tag>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.x帮助文档读书笔记</title>
    <url>/posts/2021/17EC6DQ.html</url>
    <content><![CDATA[<p>随着工作中不断使用 vue，总感觉对 vue
的使用不够随心所欲，所以，本篇为重新学习 vue
的帮助文档，并将精华部分整理成笔记。本记录 Vue.js 2.x 的帮助文档。</p>
<span id="more"></span>
<h2 id="基础">基础</h2>
<h3 id="vue-实例">Vue 实例</h3>
<ol type="1">
<li><p>创建实例</p>
<p>当一个 Vue 实例被创建时，它将 <code>data</code> 对象中的所有的
property 加入到 Vue 的<strong>响应式系统</strong>中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/ 我们的数据对象</span><br><span class="line">var data = &#123; a: 1 &#125;</span><br><span class="line"></span><br><span class="line">// 该对象被加入到一个 Vue 实例中</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  data: data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>值得注意的是只有当实例被创建时就已经存在于 <code>data</code> 中的
property 才是<strong>响应式</strong>的。</p>
<p>使用 <code>Object.freeze(obj)</code>，这会阻止修改现有的
property，也意味着响应系统无法再<em>追踪</em>变化。</p>
</blockquote></li>
<li><p>访问实例的 property 和方法</p>
<p>vue 本身 property 和方法，它们都有前缀
<code>$</code>，以便与用户定义的 property 区分开来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var data = &#123; a: 1 &#125;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &#x27;#example&#x27;,</span><br><span class="line">  data: data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.$data === data // =&gt; true</span><br><span class="line">vm.$el === document.getElementById(&#x27;example&#x27;) // =&gt; true</span><br><span class="line"></span><br><span class="line">// $watch 是一个实例方法</span><br><span class="line">vm.$watch(&#x27;a&#x27;, function (newValue, oldValue) &#123;</span><br><span class="line">  // 这个回调将在 `vm.a` 改变后调用</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="模板语法">模板语法</h3>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Vue</category>
        <category>Vue2.x</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue 中 this.$forceUpdate 生效范围</title>
    <url>/posts/2022/39S6V31.html</url>
    <content><![CDATA[<p>在 vue 中，当使用 <code>$forceUpdate</code>
时，要特别注意，该方法仅对被 vue 监听的字段生效。</p>
<span id="more"></span>
<p>所以，在使用中，如果需要更新某个字段时，使用 <code>this.$set()</code>
来修改或添加字段。</p>
<h2 id="参考">参考</h2>
<p><a
href="https://cn.vuejs.org/v2/guide/components-edge-cases.html#强制更新">vue
强制更新</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Vue</category>
        <category>Vue2.x</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue 中完美地二次封装 UI 组件</title>
    <url>/posts/2022/2H9CDXZ.html</url>
    <content><![CDATA[<p>当我们全局引用UI框架（类似于 <a
href="http://www.quasarchs.com/">Quasar
Framework</a>）的时候，为了使得整个项目风格统一，需要对某些组件进行二次封装，使得可以集中管理组件风格，使得代码易于维护。</p>
<span id="more"></span>
<h2 id="封装需求">封装需求</h2>
<ul>
<li><p>属性传递</p>
<p>二次封装后的组件与被封装组件和具有同样的参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;xxx-xxx v-bind=&quot;$attrs&quot;&gt;</span><br><span class="line">&lt;/xxx-xxx&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>事件传递</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;xxx-xxx v-on=&quot;$listeners&quot;&gt;</span><br><span class="line">&lt;/xxx-xxx&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>插槽传递</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;xxx-xxx&gt;</span><br><span class="line">	&lt;template v-for=&quot;name in $scopedSlots&quot; :slot=&quot;name&quot;&gt;</span><br><span class="line">		&lt;slot :name=&quot;name&quot; /&gt;</span><br><span class="line">	&lt;/template&gt;</span><br><span class="line">&lt;/xxx-xxx&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="vue-相关知识点">vue 相关知识点</h2>
<h3 id="vm.attrs"><a
href="https://cn.vuejs.org/v2/api/#vm-attrs">vm.$attrs</a></h3>
<p>官方解释：</p>
<blockquote>
<p>包含了父作用域中不作为 prop 被识别 (且获取) 的 attribute 绑定
(<code>class</code> 和 <code>style</code> 除外)。当一个组件没有声明任何
prop 时，这里会包含所有父作用域的绑定 (<code>class</code> 和
<code>style</code> 除外)，并且可以通过 <code>v-bind="$attrs"</code>
传入内部组件——在创建高级别的组件时非常有用。</p>
</blockquote>
<p>通俗的理解就是，子组件可以通过 <code>$attrs</code>
可以访问父组件传过来的所有属性，但需要注意的是如果父组件所传的属性中有在子组件
<code>props</code> 中有过声明，那么该属性不会出现在 <code>$attrs</code>
对象中。</p>
<h3 id="vm.listeners"><a
href="https://cn.vuejs.org/v2/api/#vm-listeners">vm.$listeners</a></h3>
<p>官方解释：</p>
<blockquote>
<p>包含了父作用域中的 (不含 <code>.native</code> 修饰器的)
<code>v-on</code> 事件监听器。它可以通过 <code>v-on="$listeners"</code>
传入内部组件——在创建更高层次的组件时非常有用。</p>
</blockquote>
<h3 id="vm.props"><a
href="https://cn.vuejs.org/v2/api/#vm-props">vm.$props</a></h3>
<p>官方解释：</p>
<blockquote>
<p>当前组件接收到的 props 对象。Vue 实例代理了对其 props 对象 property
的访问。</p>
</blockquote>
<h3 id="inheritattrs"><a
href="https://cn.vuejs.org/v2/api/index.html#inheritAttrs">inheritAttrs</a></h3>
<p>官方的解释让人看着头大，通俗来讲，其实默认情况就是把
<code>$attrs</code> 对象上没在子组件 <code>props</code>
中声明的属性加在子组件的根 <code>html</code> 标签上。</p>
<h3 id="vm.scopedslots"><a
href="https://cn.vuejs.org/v2/api/#vm-scopedSlots">vm.$scopedSlots</a></h3>
<p>官方解释：</p>
<blockquote>
<p>用来访问<a
href="https://cn.vuejs.org/v2/guide/components-slots.html#作用域插槽">作用域插槽</a>。对于包括
<code>默认 slot</code> 在内的每一个插槽，该对象都包含一个返回相应 VNode
的函数。</p>
</blockquote>
<p>通俗讲，就是通过该属性，可以访问所有的插槽。</p>
<h2 id="封装示例">封装示例</h2>
<p>为了能够实现上述两个需求，我们使用
<code>$attrs</code>、<code>$props</code>和<code>$listeners</code>
这三个属性来实现。下文将通过封装 <code>quasar</code> 组件中的
<code>QTable</code> 来举例说明</p>
<h3 id="原始组件">原始组件</h3>
<p>从 <a
href="http://www.quasarchs.com/vue-components/table#qtable-api">QTable
API</a> 中我们可以知道，其有63个属性，19 个插槽，9
个事件，在封装的时候，我们需要通过预设一些属性，使得表格符合我们的使用，但是又得保证其灵活性。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/image-20220406214311656.png"
alt="image-20220406214311656" />
<figcaption aria-hidden="true">image-20220406214311656</figcaption>
</figure>
<h3 id="二次封装">二次封装</h3>
<p>具体解释见里面的备注</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;q-table v-bind=&quot;$attrs&quot; :dense=&quot;dense&quot; v-on=&quot;$listeners&quot;&gt;</span><br><span class="line">    &lt;!--示例: 在封装组件中增加插槽，通过后备内容进行自定义，方便父组件覆盖当前插槽--&gt;</span><br><span class="line">    &lt;template v-slot:top=&quot;props&quot;&gt;</span><br><span class="line">      &lt;slot name=&quot;top&quot; v-bind=&quot;props&quot;&gt;</span><br><span class="line">        &lt;q-space /&gt;</span><br><span class="line">        &lt;q-input</span><br><span class="line">          v-model=&quot;filter&quot;</span><br><span class="line">          dense</span><br><span class="line">          debounce=&quot;300&quot;</span><br><span class="line">          placeholder=&quot;搜索&quot;</span><br><span class="line">          color=&quot;primary&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;template v-slot:append&gt;</span><br><span class="line">            &lt;q-icon name=&quot;search&quot; /&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/q-input&gt;</span><br><span class="line">      &lt;/slot&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--根据父类插槽定义，传递插槽到被封装组件--&gt;</span><br><span class="line">    &lt;template v-for=&quot;slotName in scopedSlotsName&quot; v-slot:[slotName]=&quot;props&quot;&gt;</span><br><span class="line">      &lt;!-- v-bind 是向插槽中传递参数，使得父类的插槽可以使用--&gt;</span><br><span class="line">      &lt;slot :name=&quot;slotName&quot; v-bind=&quot;props&quot; /&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/q-table&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // 默认为 true,为 true 时会把 `$attrs` 对象上没在子组件 `props` 中声明的属性加在子组件的根 `html` 标签上。</span><br><span class="line">  inheritAttrs: false,</span><br><span class="line"></span><br><span class="line">  props: &#123;</span><br><span class="line">    // 设置组件的默认值</span><br><span class="line">    dense: &#123;</span><br><span class="line">      type: Boolean,</span><br><span class="line">      default() &#123;</span><br><span class="line">        return true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      filter: &#x27;filter2&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  computed: &#123;</span><br><span class="line">    attrs() &#123;</span><br><span class="line">      // 因为 $attrs 不包含 $props 中的值，在此处对属性进行合并，然后供被封装组件使用</span><br><span class="line">      // 由于 Object.assign 是浅复制，所以不会影响字段的 getter 和 setter</span><br><span class="line">      return Object.assign(&#123;&#125;, this.$attrs, this.$props)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 作用域内的插槽名称</span><br><span class="line">    scopedSlotsName() &#123;</span><br><span class="line">      let keys = Object.keys(this.$scopedSlots)</span><br><span class="line">      // 过滤掉以$开头的字段,$ 开头的是 vue 框架的值</span><br><span class="line">      keys = keys.filter(key =&gt; !key.startsWith(&#x27;$&#x27;))</span><br><span class="line">      // 过滤掉已经添加插槽名称</span><br><span class="line">      const existSlotNames = [&#x27;top&#x27;]</span><br><span class="line">      keys = keys.filter(key =&gt; !existSlotNames.includes(key))</span><br><span class="line"></span><br><span class="line">      return keys</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;&gt;</span><br></pre></td></tr></table></figure>
<h3 id="组件使用">组件使用</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;wrapped-table :data=&quot;data&quot; :columns=&quot;columns&quot; :dense=&quot;dense&quot;&gt;</span><br><span class="line">    &lt;template v-slot:body-cell-index=&quot;props&quot;&gt;</span><br><span class="line">      &lt;q-td&gt;&#123;&#123; props.value &#125;&#125;_1&lt;/q-td&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/wrapped-table&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import WrappedTable from &#x27;./index.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123; WrappedTable &#125;,</span><br><span class="line"></span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      columns: [</span><br><span class="line">        &#123;</span><br><span class="line">          name: &#x27;index&#x27;,</span><br><span class="line">          label: &#x27;序号&#x27;,</span><br><span class="line">          align: &#x27;left&#x27;,</span><br><span class="line">          field: &#x27;name&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: &#x27;name&#x27;,</span><br><span class="line">          align: &#x27;center&#x27;,</span><br><span class="line">          label: &#x27;名称&#x27;,</span><br><span class="line">          field: &#x27;name&#x27;,</span><br><span class="line">          sortable: true</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      data: [</span><br><span class="line">        &#123;</span><br><span class="line">          index: 1,</span><br><span class="line">          name: &#x27;Frozen Yogurt&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          index: 1,</span><br><span class="line">          name: &#x27;Ice cream sandwich&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line"></span><br><span class="line">      dense: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a
href="https://www.codetd.com/article/13736693">解决Vue2.x中二次封装Vue组件时批量继承属性，方法，插槽的方法</a></li>
<li><a
href="https://blog.csdn.net/zh_rey/article/details/106735049">Vue二次封装组件，并传递props和v-on事件</a></li>
<li><a
href="https://segmentfault.com/a/1190000038483387">基于UI库二次组件封装
- SegmentFault 思否</a></li>
<li><a href="https://segmentfault.com/a/1190000021945187">浅谈 Vue2.4.0
$attrs 与 inheritAttrs - SegmentFault 思否</a></li>
<li><a href="https://cn.vuejs.org/v2/guide/components-slots.html">插槽 —
Vue.js (vuejs.org)</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Vue</category>
        <category>Vue2.x</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>asyncComputed 的原理浅析及使用</title>
    <url>/posts/2022/3G3ZXDE.html</url>
    <content><![CDATA[<p>在 vue 的计算属性中，是不能使用异步的，这个时候就需要用到 <a
href="https://github.com/foxbenjaminfox/vue-async-computed">vue-async-computed</a>
这个包提供的 <code>asyncComputed</code> 来实现异步计算属性。</p>
<p>本文将浅析其实现原理，然后介绍使用方法。</p>
<span id="more"></span>
<h2 id="主要步骤">主要步骤</h2>
<ol type="1">
<li>利用 asyncComputed 的 key 在 data 中初始化数据</li>
<li>将 asyncComputed 的计算属性重命名赋值给 computed</li>
<li>watch 重命名后的计算属性</li>
<li>当重命名的计算属性更改后，watch 生效，将值赋给 data
中对应的字段</li>
</ol>
<blockquote>
<p>在使用 this.asyncComputedField 时，其实是读取的 data
中对应名称的字段的值</p>
</blockquote>
<h2 id="参考">参考</h2>
<p><a
href="https://github.com/foxbenjaminfox/vue-async-computed">vue-async-computed</a></p>
<p><a
href="https://moonland.cc/2018/07/28/vue-%E5%BC%82%E6%AD%A5%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%AE%9E%E7%8E%B0/">Vue
异步计算属性实现</a></p>
<p><a
href="https://www.jianshu.com/p/738e5a5494f0">asyncComputed源码解析</a></p>
<p><a
href="https://blog.csdn.net/dandan666dandan/article/details/107409977">asyncComputed
异步计算属性</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Vue</category>
        <category>Vue2.x</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue 中 v-model 的最佳实现</title>
    <url>/posts/2022/DPK9DJ.html</url>
    <content><![CDATA[<p>在利用 vue
开发一个组件时，可能需要它能够实时响应变化的值，这个时候我们就需要用到
<code>v-model</code>。</p>
<p>然而在实际使用中，如果有两个相互影响的变量要进行实时变化时，就可能导致无限循环，提升编码难度。</p>
<p>本文给出了一个 <code>v-model</code> 的最佳实践，可以参考使用。</p>
<span id="more"></span>
<h2 id="需求示例">需求示例</h2>
<p>假设我们需要编写一个部门用户选择组件，它能够同时返回选择的部门和用户，同时在初始化时，可以回显到界面。</p>
<p>下面大致分析一下可能导致的问题：</p>
<p>如果用户数据改变后，则返回的部门也需要触发变化，而返回的部门改变了，又会去触发用户改变，这样就构成了一个无限循环。</p>
<p>要如何解决这个问题呢？继续向下阅读。</p>
<h2 id="实现代码">实现代码</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">DepartmentTree</span> <span class="attr">v-model</span>=<span class="string">&quot;_departmentIds&quot;</span>&gt;</span>部门树<span class="tag">&lt;/<span class="name">DepartmentTree</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">UsersTable</span> <span class="attr">v-model</span>=<span class="string">&quot;_users&quot;</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">UsersTable</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">DepartmentTree</span> <span class="keyword">from</span> <span class="string">&#x27;./departmentTree.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">UsersTable</span> <span class="keyword">from</span> <span class="string">&#x27;./usersTable.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123; <span class="title class_">DepartmentTree</span>, <span class="title class_">UsersTable</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">departmentIds</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">Array</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">default</span>: <span class="function">() =&gt;</span> []</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">users</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">Array</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">default</span>: <span class="function">() =&gt;</span> []</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">_departmentIds</span>: <span class="variable language_">this</span>.<span class="property">users</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">_users</span>: <span class="variable language_">this</span>.<span class="property">departmentIds</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 使得每次返回的值不是同一个引用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 在 watch 时可以解决新旧值一样的问题</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">usersCp</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">users</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 外部更改后，触发更新</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">departmentIds</span>(<span class="params">newValues</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 判断与 this._departmentIds 的区别，如果是完全一样，则不继续执行</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (newValues.<span class="property">lenght</span> === <span class="variable language_">this</span>.<span class="property">_departmentIds</span>.<span class="property">length</span>) <span class="keyword">return</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 如果不一样时,通过部门来更新 _users 数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 触发 users 更改</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="title function_">usersChanged</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 此处不需要触发 departments 修改，因为这个函数调用是由于外部的变化传递进来的</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 直接 watch users 的话，newValues 和 oldValues 是一样的</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 此处 watch 计算属性，这样就使得每次的结果不是同一个引用，新旧值就会不一样了</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">usersCp</span>(<span class="params">newValues, oldValues</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 判断与 this._users 是否一样</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_users</span>.<span class="property">length</span> === newValues.<span class="property">lenght</span>) <span class="keyword">return</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 将用户对应的 departmentIds 更新到 this._departmentIds 中</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">_departmentIds</span> = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(<span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x.<span class="property">departmentId</span>)))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 触发 departmentIds 改变</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="title function_">departmentIdsChanged</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// departmentIds 改变后，会触发 departmentIds watch 事件,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 在这个事件执行时，会先匹配是否与当前实例保存的值一样，如果一样就不执行</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 这样就不会导致无限循环了</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">usersChanged</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;update:users&#x27;</span>, <span class="variable language_">this</span>.<span class="property">_users</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">departmentIdsChanged</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;update:departmentIds&#x27;</span>, <span class="variable language_">this</span>.<span class="property">_departmentIds</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>上述代码的主要思想如下：</p>
<ol type="1">
<li>将外部变化与内部变化分开处理，外部变化处理通过 watch props
来实现，内部变化通过内部方法来实现</li>
<li>变化完成后，再向外传递变化结果</li>
<li>每次外部变化影响到内部时，都要进行验证，防止循环</li>
</ol>
<h2 id="watch-数组时新旧值相同处理">watch 数组时新旧值相同处理</h2>
<p>如果被 watch
的字段是一个数组时，它的新旧值都是一样的，因为引用相同，为了得到不一样的值，可以增加一个计算属性来进行过渡。</p>
<p>如上例中的 <code>usersCp</code>。</p>
<h2 id="参考">参考</h2>
<p><a
href="https://v2.cn.vuejs.org/v2/guide/components-custom-events.html#自定义组件的-v-model">自定义组件的
<code>v-model</code></a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Vue</category>
        <category>Vue2.x</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>一文理清在 vue2.x 中 compositionAPI 与 optionsAPI 混合使用要点</title>
    <url>/posts/2023/3E7GWG0.html</url>
    <content><![CDATA[<p>由于项目基于 vue2 框架，随着项目规模的增加，mixin
的组织方式越来越不方便维护，因此将其升级到 vue2.7，使用 composition API
与 options API 混合开发。</p>
<p>本文将一步一步梳理混合开发的步骤及要点，让大家对混合开发有一个全局的掌握。</p>
<span id="more"></span>
<h2 id="向后移植的功能">向后移植的功能</h2>
<ol type="1">
<li><a
href="https://vuejs.org/guide/extras/composition-api-faq.html">Composition
API</a></li>
<li>SFC <a
href="https://vuejs.org/api/sfc-script-setup.html"><code>&lt;script setup&gt;</code></a></li>
<li>SFC <a
href="https://vuejs.org/api/sfc-css-features.html#v-bind-in-css">CSS
v-bind</a></li>
<li><code>defineComponent()</code>：具有改进的类型推断（与Vue.extend相比）</li>
<li><code>h()、useSlot()、useAttrs()、useCssModules()</code></li>
<li><code>set()、del()</code>和 <code>nextTick()</code> 在 ESM
构建中也作为命名导出提供</li>
<li>支持
<code>emits</code>，但仅用作类型检查用途（不影响运行时行为）。</li>
<li>Vue2.7 还支持在模板表达式中使用 ESNext 语法</li>
<li>在模版里面用可选链，如<code>formData?.userInfo?.userId</code></li>
</ol>
<h2 id="关于被导出的-api-的注意事项">关于被导出的 API 的注意事项</h2>
<ul>
<li><p>在 ESM 构建版本中，这些 API 会 (且仅会) 被导出为具名 API：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue, &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">Vue.ref; // undefined，请换为使用具名导出的 API</span><br></pre></td></tr></table></figure></li>
<li><p>在 UMD 和 CJS 构建版本里，这些 API 会被导出为全局对象
<code>Vue</code> 的属性。</p></li>
<li><p>当调用外置的 CJS 版本进行打包时，打包工具应该有能力处理与 ESM
模块的互操作 (ESM interop)。</p></li>
</ul>
<h2 id="与-vue3-的差异">与 Vue3 的差异</h2>
<p>Composition API 使用 Vue2 的基于 getter/setter
的响应式系统进行反向移植，以确保浏览器兼容性。这意味着与 Vue3 的基于
proxy 的系统存在一些重要的行为差异：</p>
<ul>
<li>所有 Vue2 更改检测警告仍然适用；</li>
<li>reactive()、ref() 和 shallowReactive()
将直接转换原始对象而不是创建代理：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">html复制代码// 在2.7中可行，在3.x中不可行</span><br><span class="line">reactive(foo) === foo</span><br></pre></td></tr></table></figure>
<ul>
<li>readonly()
确实创建了一个单独的对象，但它不会跟踪新添加的属性并且不适用于数组；</li>
<li>避免在 reactive() 中使用数组作为 root
值，因为如果没有属性访问，则不会跟踪数组的变化（这将导致警告）；</li>
<li>Reactivity APIs 忽略带有 symbol 键的属性。</li>
</ul>
<p>此外，以下功能是未移植的：</p>
<ul>
<li>❌ createApp()（Vue2 没有独立的应用范围）</li>
<li>❌ 在 <code>&lt;script setup&gt;</code> 顶层使用 <code>await</code>
(Vue 2 不支持异步组件初始化)</li>
<li>❌ 模板表达式中的 TypeScript 语法（与 Vue2 解析器不兼容）</li>
<li>❌ Reactivity transform（仍处于试验阶段）</li>
<li>❌ options 组件不支持 expose
选项（但在<code>&lt;script setup&gt;</code> 中支持
<code>defineExpose()</code> )</li>
</ul>
<h2 id="vue2.x-升级为-vue2.7">vue2.x 升级为 vue2.7</h2>
<p>请查看官方升级文档 <a
href="https://v2.cn.vuejs.org/v2/guide/migration-vue-2-7.html#升级指南">升级指南</a></p>
<h2 id="如何在vue2.x项目中使用-compositionapi">如何在vue2.x项目中使用
compositionAPI</h2>
<h3 id="适用场景">适用场景</h3>
<p>当将 vue2.x 升级到 vue2.7 后，有时候需要维护原来的组件，分 3
种情况讨论：</p>
<ol type="1">
<li>若修改原来的功能，建议直接使用选项式 API 的方式开发，因为在
<code>setup</code> 中无法获取到 <code>this</code>，无法调用一些现有的
data、methods 等等。</li>
<li>若新增加功能且与现有功能不耦合，可以直接添加 <code>setup()</code>
函数，在该函数中增加新功能逻辑。当然，若有多个功能，可以将功能拆分成多个文件，然后在
<code>setup()</code> 函数中来聚合</li>
<li>若开发新组件，可以直接使用 <code>&lt;script setup&gt;</code>
的方式</li>
</ol>
<h3 id="开发需知">开发需知</h3>
<ol type="1">
<li><p><code>reactive()、ref()、shallowReactive()</code>
将直接转换原始对象而不是创建代理</p></li>
<li><p>使用组件时，不要使用自闭合标签，应
<code>&lt;component&gt;&lt;/component&gt;</code></p></li>
<li><p>对于数组，使用 <code>ref</code>，不要使用
<code>reactive</code></p></li>
</ol>
<h3 id="ref-与-reactive"><code>ref</code> 与 <code>reactive</code></h3>
<ul>
<li><code>reactive</code> 一般用于对象/数组类型的数据，都不需要使用
<code>.value</code>；</li>
<li><code>ref</code>一般用于基础数据类型的数据，在 JS
中读取和修改时，需要使用
<code>.value</code>，在模版中使用时则不需要；</li>
<li><code>reactive</code> 可以修改深层属性值，并保持响应；</li>
<li><code>reactive</code> 返回值和源对象不同；</li>
<li><code>reactive</code>的属性值可以是 <code>ref</code>值；</li>
<li><code>ref</code> 本质也是
<code>reactive</code>，<code>ref(obj)</code>等价于
<code>reactive(&#123;value: obj&#125;)</code>。</li>
</ul>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此报以诚挚谢意！</p>
<ol type="1">
<li><p><a href="https://blog.vuejs.org/posts/vue-2-7-naruto">Vue 2.7
"Naruto" Released | The Vue Point (vuejs.org)</a></p></li>
<li><p><a
href="https://v2.cn.vuejs.org/v2/guide/migration-vue-2-7.html">迁移至
Vue 2.7 — Vue.js (vuejs.org)</a></p></li>
<li><p><a
href="https://juejin.cn/post/7158362697803759624">Vue2.7正式发布，终于可以在Vue2项目中使用Vue3的特性了
- 掘金 (juejin.cn)</a></p></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Vue</category>
        <category>Vue2.x</category>
      </categories>
      <tags>
        <tag>NexT</tag>
        <tag>vue2.x</tag>
        <tag>compositionAPI</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3 模板 vscode 代码片段</title>
    <url>/posts/2023/3MXXBNW.html</url>
    <content><![CDATA[<p>Ctrl+Shift+p 搜
"代码片段(snipets)"，新建一个应用于当前项目的代码版本，在文件中增加如下内容：</p>
<span id="more"></span>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;vue3&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue&quot;</span><span class="punctuation">,</span> <span class="comment">// 表示仅在 vue 文件中生效</span></span><br><span class="line">    <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;&lt;template&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;  &lt;div&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;$1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;  &lt;/div&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;&lt;/template&gt;\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;&lt;script lang=\&quot;ts\&quot; setup&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;import &#123; ref &#125; from \&quot;vue\&quot; &quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;$2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;&lt;/script&gt;\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;&lt;style lang=\&quot;scss\&quot; scoped&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;$3&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;&lt;/style&gt;&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue3&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>然后在 vue 文件中，输入 <code>vue3</code> ，按 tab
键就可以自动生成代码片段了。</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Vue</category>
        <category>Vue3.x</category>
      </categories>
      <tags>
        <tag>vue3</tag>
        <tag>snipets</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 如何同时传递子组件和父组件的参数给方法</title>
    <url>/posts/2022/3Q3PPSM.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>在 vue 自定义事件中，子组件会通过 <code>emit</code>
向父组件传递参数，父组件执行回调函数。但是有时候父组件再执行回调时也需要传入参数，如果直接给父组件回调函数传入参数会覆盖掉子组件的参数。我们有三种解决办法。</p>
<h2 id="正文">正文</h2>
<h3 id="event-方法">$event 方法</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件中 Child.vue</span></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">  <span class="keyword">const</span> &#123; proxy &#125; = <span class="title function_">getCurrentInstance</span>()</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">edit</span> (item) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子组件参数&#x27;</span>, childParam)</span><br><span class="line">      proxy.$emit(<span class="string">&#x27;edit&#x27;</span>, childParam)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件接收参数</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> @<span class="attr">edit</span>=<span class="string">&quot;editFun($event, parentParam)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>当子组件有参数返回时，在父组件中使用 $event 作为占位符，这里 $event
就代表了子组件返回的参数。这里 $event
位置没有限制，可以在第一位，也可以在最后一位。</p>
<blockquote>
<p><strong>局限性</strong>：
只适合子组件返回一个参数的情况，如果子组件有多个参数返回，只能接收到第一个参数</p>
</blockquote>
<h3 id="箭头函数法">箭头函数法</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件中 Child.vue</span></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">  <span class="keyword">const</span> &#123; proxy &#125; = <span class="title function_">getCurrentInstance</span>()</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">edit</span> (item) &#123;</span><br><span class="line">      proxy.$emit(<span class="string">&#x27;edit&#x27;</span>, childParam1, childParam2)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件接收参数</span></span><br><span class="line">&lt;<span class="title class_">Child</span> @edit=<span class="string">&quot;(param1,param2)=&gt;editFun(param1,param2,parentParam)&quot;</span><span class="string">&quot;&gt;&lt;/Child&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script setup&gt;</span></span><br><span class="line"><span class="string">function editFun(p1,p2,p3)&#123;</span></span><br><span class="line"><span class="string">  ...</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>这种方法利用了一个箭头函数先把子模块返回的参数接收，然后再传递到回调函数中。</p>
<blockquote>
<p>使用是注意先接收子模块返回的参数，此方法对参数个数没有限制</p>
</blockquote>
<h3 id="arguments-方法">arguments 方法</h3>
<p>此方法类似于方法一，只不过是用 arguments 作为占位符,这里 argument
是一个数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件接收参数</span></span><br><span class="line">&lt;<span class="title class_">Child</span> @edit=<span class="string">&quot;editFun(arguments, scope.row)&quot;</span>&gt;&lt;/<span class="title class_">Child</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">editFun</span>(<span class="params">p1,p2</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  ...</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p>本文摘抄至以下文章，在此表示诚挚感谢！</p>
<ol type="1">
<li><a
href="https://blog.51cto.com/u_10624715/4781327">Vue3自定义事件中，子组件有返回参数，父组件也有参数的处理方法</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Vue</category>
        <category>Vue2.x</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>如何优雅地实现 echarts 的自适应</title>
    <url>/posts/2023/1G6444M.html</url>
    <content><![CDATA[<p>要实现 echarts 窗口自适应变化，可以使用 ResizeObserver API
监听容器元素的大小变化，并在容器大小变化时调用 echarts 实例的
<code>resize()</code> 方法重新渲染图表。</p>
<p>代码如下：</p>
<span id="more"></span>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * eCharts 图表自适应</span></span><br><span class="line"><span class="comment"> * 在 chart 值就去时会自动注册自适应逻辑</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ref</span>&#125; <span class="variable">echartRef</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">resizeECharts</span>(<span class="params">echartRef</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!echartRef) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">resizeCallback</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (echartRef &amp;&amp; echartRef.<span class="property">value</span>) echartRef.<span class="property">value</span>.<span class="title function_">resize</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">watch</span>(echart, <span class="function"><span class="params">newValue</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!newValue) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">const</span> parentDom = newValue.<span class="property">_dom</span>.<span class="property">parentElement</span></span><br><span class="line">    <span class="comment">// 监听 parentDom 元素的大小变化</span></span><br><span class="line">    <span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">ResizeObserver</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resizeCallback</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">    observer.<span class="title function_">observe</span>(parentDom)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Vue</category>
        <category>Vue2.x</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue2.x</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3 语法摘要</title>
    <url>/posts/2023/3CG1P9K.html</url>
    <content><![CDATA[<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/directive.png" alt="directive" style="max-width:min(100%,300px)" /></p>
<p>本文将 Vue3 中的组合式语法精简为快速笔记，方便在使用中总览 Vue
特性，灵活应用。</p>
<blockquote>
<p>该文不会介绍具体用法，建议先通读一遍 <a
href="https://cn.vuejs.org/guide/essentials/template-syntax.html#attribute-bindings">官方帮助文档</a>，记得风格偏好中选择自己喜欢的网络</p>
<p>如果某些概念读不懂，可以先去看官方文档</p>
</blockquote>
<span id="more"></span>
<h2 id="简写扫盲">简写扫盲</h2>
<table>
<thead>
<tr class="header">
<th>简写</th>
<th>全称</th>
<th>中文</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>SFC</td>
<td>Single File Component</td>
<td>单文件组件</td>
</tr>
<tr class="even">
<td>E2E</td>
<td>End to End</td>
<td>端到端的测试</td>
</tr>
</tbody>
</table>
<h2 id="开发工具建议"><a
href="https://cn.vuejs.org/guide/scaling-up/tooling.html">开发工具建议</a></h2>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>类别</th>
<th>技术名称</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>脚手架</td>
<td><a href="https://cn.vitejs.dev/">Vite</a></td>
</tr>
<tr class="even">
<td>IED</td>
<td><a href="https://code.visualstudio.com/">VSCode</a> + <a
href="https://marketplace.visualstudio.com/items?itemName=Vue.volar">Vue
语言特性 (Volar)</a></td>
</tr>
<tr class="odd">
<td></td>
<td>TypeScript</td>
</tr>
<tr class="even">
<td>Vite 项目测试</td>
<td><a href="https://vitest.dev/">Vitest</a></td>
</tr>
<tr class="odd">
<td>E2E 测试</td>
<td><a href="https://www.cypress.io/">Cypress</a></td>
</tr>
<tr class="even">
<td><a
href="https://cn.vuejs.org/guide/scaling-up/tooling.html#linting">代码规范</a></td>
<td><a
href="https://github.com/vuejs/eslint-plugin-vue">eslint-plugin-vue</a></td>
</tr>
<tr class="odd">
<td>字符串内联模板语法高亮</td>
<td><a
href="https://marketplace.visualstudio.com/items?itemName=Tobermory.es6-string-html">es6-string-html</a></td>
</tr>
</tbody>
</table>
<h2 id="基础">基础</h2>
<h3 id="模板">模板</h3>
<h4 id="模板语法">模板语法</h4>
<p>可以不采用模块，而是 <a
href="https://cn.vuejs.org/guide/extras/render-function.html">直接手写渲染函数</a>。</p>
<table>
<colgroup>
<col style="width: 25%" />
<col style="width: 74%" />
</colgroup>
<thead>
<tr class="header">
<th>类别</th>
<th>概要</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>文本插值</td>
<td>采用“Mustache”语法 (即双大括号)：<span>Message:
</span></td>
</tr>
<tr class="even">
<td>使用原始 HTML</td>
<td><a
href="https://cn.vuejs.org/api/built-in-directives.html#v-html"><code>v-html</code>
指令</a>：<span v-html="rawHtml"></td>
</tr>
<tr class="odd">
<td>Attribute 绑定</td>
<td><a
href="https://cn.vuejs.org/api/built-in-directives.html#v-bind"><code>v-bind</code>
指令</a>：<code>v-bind:id=</code> 或 <code>:id=</code></td>
</tr>
<tr class="even">
<td>布尔型 Attribute 绑定</td>
<td>不赋值时，为真
<code>&lt;button disabled&gt;Button&lt;/button&gt;</code></td>
</tr>
<tr class="odd">
<td>多个值动态绑定</td>
<td><code>&lt;div v-bind="objectOfAttrs"&gt;&lt;/div&gt;</code></td>
</tr>
<tr class="even">
<td>表达式</td>
<td>用在 双大括号 中或 Vue
指令中，可以使用有限的全局对象，例<code>Math</code> 和
<code>Date</code></td>
</tr>
<tr class="odd">
<td>指令参数</td>
<td>在指定后添加 <code>:</code> 作为参数，<a v-bind:href="url"/></td>
</tr>
<tr class="even">
<td>指令动态参数</td>
<td>&lt;a v-bind:[attributeName]="url" /&gt;，attributeName
可以是表达式或计算属性</td>
</tr>
</tbody>
</table>
<h4 id="ref-模板引用">ref 模板引用</h4>
<p>但在某些情况下，我们使用元素的 ref 属性来直接访问底层 DOM 元素。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input ref=&quot;input&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>声明一个同名的 ref 来访问 ref 指定的 DOM</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个 ref 来存放该元素的引用</span></span><br><span class="line"><span class="comment">// 必须和模板里的 ref 同名</span></span><br><span class="line"><span class="comment">// input 在 DOM 初次渲染和卸载后，会是 null</span></span><br><span class="line"><span class="keyword">const</span> input = <span class="title function_">ref</span>(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  input.<span class="property">value</span>.<span class="title function_">focus</span>()</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;input&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果不使用 <code>&lt;script setup&gt;</code>，需确保从
<code>setup()</code> 返回 ref：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> input = <span class="title function_">ref</span>(<span class="literal">null</span>)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      input</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="函数模板引用">函数模板引用</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input :ref=&quot;(el) =&gt; &#123; /* 将 el 赋值给一个数据属性或 ref 变量 */ &#125;&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>每次组件更新时，绑定的元素被卸载时都会调用函数</p>
<h4 id="组件-ref-限制">组件 ref 限制</h4>
<p>使用了 <code>&lt;script setup&gt;</code>
的组件是<strong>默认私有</strong>的，可以通过 <code>defineExpose</code>
宏显式向外暴露访问内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const a = 1</span><br><span class="line">const b = ref(2)</span><br><span class="line"></span><br><span class="line">// 像 defineExpose 这样的编译器宏不需要导入</span><br><span class="line">defineExpose(&#123;</span><br><span class="line">  a,</span><br><span class="line">  b</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="指令">指令</h3>
<p>指令是带有 <code>v-</code> 前缀的特殊 attribute。</p>
<h4 id="指令定义">指令定义</h4>
<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/directive.png" alt="directive" style="max-width:min(100%,300px)" /></p>
<h4 id="参数-arguments">参数 Arguments</h4>
<p>某些指令会需要一个“参数”，在指令名后通过一个冒号隔开做标识。</p>
<h4 id="动态参数">动态参数</h4>
<p>在指令参数上也可以使用一个 JavaScript 表达式。</p>
<p><strong>限制：</strong></p>
<p>动态参数中表达式的值应当是一个字符串，或者是
<code>null</code>。特殊值 <code>null</code> 意为显式移除该绑定。</p>
<p>动态参数表达式不能正在空格和引号，它们在 HTML attribute
名称中都是不合法的。可以使用计算属性来代替表达式。</p>
<h4 id="内置指令">内置指令</h4>
<p><a
href="https://cn.vuejs.org/api/built-in-directives.html#v-text">点击跳转-&gt;完整文档</a></p>
<table>
<colgroup>
<col style="width: 12%" />
<col style="width: 3%" />
<col style="width: 37%" />
<col style="width: 46%" />
</colgroup>
<thead>
<tr class="header">
<th>名称</th>
<th>缩写</th>
<th>期望值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>v-text</td>
<td></td>
<td>string</td>
<td>等同于 <code>&#123;&#123;content&#125;&#125;</code> 语法</td>
</tr>
<tr class="even">
<td>v-html</td>
<td></td>
<td>string</td>
<td>更新元素的 <a
href="https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML">innerHTML</a>，<code>scoped</code>
样式将不会作用于 <code>v-html</code> 里的内容</td>
</tr>
<tr class="odd">
<td>v-show</td>
<td></td>
<td>any</td>
<td>通过设置内联样式的 <code>display</code> CSS 属性来工作</td>
</tr>
<tr class="even">
<td>v-if</td>
<td></td>
<td>any</td>
<td>条件性地渲染，触发时元素及其所包含的指令/组件都会销毁和重构</td>
</tr>
<tr class="odd">
<td>v-else/v-else-if</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>v-for</td>
<td></td>
<td>Array | Object | number | string | Iterable</td>
<td><code>&lt;div v-for="(item, index) in items"&gt;&lt;/div&gt;</code><br/><code>&lt;div v-for="(value, key) in object"&gt;&lt;/div&gt;</code><br/><code>&lt;div v-for="(value, name, index) in object"&gt;&lt;/div&gt;</code></td>
</tr>
<tr class="odd">
<td>v-on</td>
<td>@</td>
<td>Function | Inline Statement | Object (不带参数)</td>
<td>给元素绑定事件监听器。</td>
</tr>
<tr class="even">
<td>v-bind</td>
<td>:</td>
<td>any (带参数) | Object (不带参数)</td>
<td>动态的绑定一个或多个 attribute，也可以是组件的 prop</td>
</tr>
<tr class="odd">
<td>v-model</td>
<td></td>
<td></td>
<td>在表单输入元素或组件上创建双向绑定</td>
</tr>
<tr class="even">
<td>v-slot</td>
<td>#</td>
<td></td>
<td>用于声明具名插槽或是期望接收 props 的作用域插槽</td>
</tr>
<tr class="odd">
<td>v-pre</td>
<td></td>
<td></td>
<td>跳过该元素及其所有子元素的编译。最常见的用例就是显示原始双大括号标签及内容。</td>
</tr>
<tr class="even">
<td>v-once</td>
<td></td>
<td></td>
<td>仅渲染元素和组件一次，并跳过之后的更新。</td>
</tr>
<tr class="odd">
<td>v-memo</td>
<td></td>
<td></td>
<td>缓存一个模板的子树。</td>
</tr>
<tr class="even">
<td>v-cloak</td>
<td></td>
<td></td>
<td>用于隐藏尚未完成编译的 DOM 模板。</td>
</tr>
</tbody>
</table>
<h3 id="响应式基础">响应式基础</h3>
<h4 id="用-reactive-定义响应式变量">用 <code>reactive()</code>
定义响应式变量</h4>
<p>使用 <a
href="https://cn.vuejs.org/api/reactivity-core.html#reactive"><code>reactive()</code></a>
函数创建一个响应式<em>对象</em>或<em>数组</em>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br></pre></td></tr></table></figure>
<p>响应式对象是 <a
href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">JavaScript
Proxy</a></p>
<p><code>reactive()</code> 创建的是深层响应，可以使用 <a
href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive">shallowreactive</a>
来创建仅第一级响应。</p>
<h4 id="reactive缺点"><code>reactive()</code>缺点</h4>
<p><code>reactive()</code> API 有两条限制：</p>
<ol type="1">
<li>仅对对象类型有效（对象、数组和 <code>Map</code>、<code>Set</code>
这样的<a
href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects#使用键的集合对象">集合类型</a>），而对
<code>string</code>、<code>number</code> 和 <code>boolean</code> 这样的
<a
href="https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive">原始类型</a>
无效。</li>
<li>因为 Vue 的响应式系统是通过属性访问进行追踪的，使用时必须使用
<code>响应式对象.属性</code>
的方式访问和赋值，如果赋值给其它变量，则不会传递响应式效果</li>
</ol>
<h4 id="响应式代理">响应式代理</h4>
<p><strong>开发中建议仅使用声明对象的代理版本。</strong></p>
<p>对同一个原始对象调用 <code>reactive()</code>
会总是返回同样的代理对象，而对一个已存在的代理对象调用
<code>reactive()</code> 会返回其本身。</p>
<p>响应式对象内的嵌套对象依然是代理。</p>
<h4 id="用-ref-定义响应式变量">用 <code>ref()</code> 定义响应式变量</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p><a
href="https://cn.vuejs.org/api/reactivity-core.html#ref"><code>ref()</code></a>
方法来允许创建任何值类型的响应式 <strong>ref</strong>。</p>
<p><code>ref()</code> 将传入参数的值包装为一个带 <code>.value</code>
属性的 ref 对象，通过 <code>.value</code> 来访问。</p>
<p>当值为对象类型时，会用 <code>reactive()</code> 自动转换它的
<code>.value</code>。</p>
<p>当 ref
在模板中作为顶层属性被访问时，它们会被自动“解包”，所以不需要使用
<code>.value</code>。</p>
<p>当一个 ref
被嵌套在一个响应式对象中，作为属性被访问或更改时，它会自动解包。</p>
<p>当 ref 作为响应式数组或像 <code>Map</code>
这种原生集合类型的元素被访问时，不会进行解包。</p>
<h4 id="暴露响应式状态">暴露响应式状态</h4>
<p>要在组件模板中使用响应式状态，需要在 <code>setup()</code>
函数中定义并返回。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// `setup` 是一个专门用于组合式 API 的特殊钩子函数</span></span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暴露 state 到模板</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      state</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="script-setup"><code>&lt;script setup&gt;</code></h4>
<p>使用 <code>&lt;script setup&gt;</code> 来简化手动暴露状态和方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">  state.<span class="property">count</span>++</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; state.count &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>顶层的导入和变量声明可在同一组件的模板中直接使用，相当于自动暴露给模板了。</p>
<h4 id="dom-更新时机">DOM 更新时机</h4>
<p>无论你进行了多少次状态更改，每个组件都只更新一次。</p>
<p>若要等待一个状态改变后的 DOM 更新完成，你可以使用 <a
href="https://cn.vuejs.org/api/general.html#nexttick">nextTick()</a>
这个全局 API。</p>
<h3 id="计算属性">计算属性</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br></pre></td></tr></table></figure>
<p>返回值会自动打包成一个 <strong>ref</strong></p>
<p>可以通过 <code>get()</code> 和 <code>set(newValue)</code>
控制计算属性的读写</p>
<h3 id="class-绑定">class 绑定</h3>
<p><code>class</code> 与 <code>style</code> 在使用 <code>v-bind</code>
时，除字符串外，表达式的值也可以是对象或数组。</p>
<p>对象和数组可以是内联的，也可以是独立的，还可以是 computed 类型</p>
<h4 id="绑定对象">绑定对象</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">const isActive = ref(true)</span><br><span class="line">const error = ref(null)</span><br><span class="line"></span><br><span class="line">const classObject = computed(() =&gt; (&#123;</span><br><span class="line">  active: isActive.value &amp;&amp; !error.value,</span><br><span class="line">  &#x27;text-danger&#x27;: error.value &amp;&amp; error.value.type === &#x27;fatal&#x27;</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; className: isActive &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="绑定数组">绑定数组</h4>
<p><strong>字符串数组形式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const activeClassName = ref(&#x27;active&#x27;)</span><br><span class="line">const errorClassName = ref(&#x27;text-danger&#x27;)</span><br><span class="line"></span><br><span class="line">&lt;div :class=&quot;[activeClassName, errorClassName]&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p><strong>三元表达式形式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div :class=&quot;[isActive ? activeClass : &#x27;&#x27;, errorClass]&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p><strong>对象数组形式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div :class=&quot;[&#123; active: isActive &#125;, errorClass]&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h4 id="组件的-class-规则">组件的 class 规则</h4>
<p>只有一个根元素的组件，组件上绑定的 class 自动与根元素合并</p>
<p>有多个根元素时，通过 <code>$attrs</code> 来指定绑定</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- MyComponent 模板使用 $attrs 时 --&gt;</span><br><span class="line">&lt;p :class=&quot;$attrs.class&quot;&gt;Hi!&lt;/p&gt;</span><br><span class="line">&lt;span&gt;This is a child component&lt;/span&gt;</span><br></pre></td></tr></table></figure>
<h3 id="style-绑定">style 绑定</h3>
<h4 id="绑定对象-1">绑定对象</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div :style=&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h4 id="绑定数组-1">绑定数组</h4>
<p>绑定一个包含多个样式对象的数组，对象会被合并。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div :style=&quot;[baseStyles, overridingStyles]&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h4 id="自动前缀">自动前缀</h4>
<p>当在 <code>:style</code> 中使用了需要<a
href="https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix">浏览器特殊前缀</a>的
CSS 属性时，Vue 会自动为他们加上相应的前缀</p>
<h4 id="样式多值">样式多值</h4>
<p>数组仅会渲染浏览器支持的最后一个值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div :style=&quot;&#123; display: [&#x27;-webkit-box&#x27;, &#x27;-ms-flexbox&#x27;, &#x27;flex&#x27;] &#125;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h3 id="v-if-条件渲染">v-if 条件渲染</h3>
<p><code>v-if</code>、<code>v-else-if</code>、<code>v-else</code>、<code>v-show</code></p>
<p><code>v-if</code> 有更高的切换开销，而 <code>v-show</code>
有更高的初始渲染开销。</p>
<p><code>v-if</code> 的优先级高于 <code>v-for</code>，<code>v-if</code>
的条件将无法访问到 <code>v-for</code> 作用域内定义的变量别名</p>
<p>同时使用 <code>v-if</code> 和 <code>v-for</code>
是<strong>不推荐的</strong>，可以通过包装一层 template 来解决</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template v-for=&quot;todo in todos&quot;&gt;</span><br><span class="line">  &lt;li v-if=&quot;!todo.isComplete&quot;&gt;</span><br><span class="line">    &#123;&#123; todo.name &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<h3 id="v-for-列表渲染">v-for 列表渲染</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;(value, key, index) in myObject&quot;&gt;</span><br><span class="line">  &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure>
<p><code>v-for</code> 可以直接接受一个整数值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span v-for=&quot;n in 10&quot;&gt;&#123;&#123; n &#125;&#125;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">// 此处 n 的初值是从 1 开始</span><br></pre></td></tr></table></figure>
<p>可以在任何时候为 <code>v-for</code> 提供一个 key，提高渲染效率。</p>
<p>数组更新、替换后，不会重新渲染整个列表，而是最大化重用。</p>
<h3 id="事件处理">事件处理</h3>
<p>使用 <code>v-on</code> 指令 (简写为 <code>@</code>) 来监听 DOM
事件，并在事件触发时执行对应的
JavaScript。用法：<code>v-on:click="methodName"</code> 或
<code>@click="handler"</code>。</p>
<p><code>$event</code>
变量代表原生事件，可以通过内联事件传递给事件处理函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@click=&quot;handler(message,$event)&quot;</span><br></pre></td></tr></table></figure>
<h4 id="事件修饰符">事件修饰符</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 修饰语可以使用链式书写 --&gt;</span><br><span class="line">&lt;a @click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<table>
<colgroup>
<col style="width: 5%" />
<col style="width: 16%" />
<col style="width: 77%" />
</colgroup>
<thead>
<tr class="header">
<th>序号</th>
<th>修饰符</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td><code>.stop</code></td>
<td>单击事件将停止传递</td>
</tr>
<tr class="even">
<td>2</td>
<td><code>.prevent</code></td>
<td>如果此事件没有被显式处理，阻止事件的默认行为。<br />比如 submit
的提交后会刷新界面的行为就该事件的默认行为</td>
</tr>
<tr class="odd">
<td>3</td>
<td><code>.self</code></td>
<td>仅当 event.target 是元素本身时才会触发事件处理器</td>
</tr>
<tr class="even">
<td>4</td>
<td><code>.capture</code></td>
<td>在事件在捕获阶段到达该元素时触发</td>
</tr>
<tr class="odd">
<td>5</td>
<td><code>.once</code></td>
<td>仅执行一次</td>
</tr>
<tr class="even">
<td>6</td>
<td><code>.passive</code></td>
<td>事件的默认行为立即执行</td>
</tr>
<tr class="odd">
<td>7</td>
<td><code>.&#123;keyAlias&#125;</code></td>
<td>只在某些按键下触发处理函数。</td>
</tr>
</tbody>
</table>
<blockquote>
<p>使用修饰符时需要注意调用顺序，因为相关代码是以相同的顺序生成的。</p>
<p>因此使用 <code>@click.prevent.self</code>
会阻止<strong>元素及其子元素的所有点击事件的默认行为</strong>，</p>
<p>而 <code>@click.self.prevent</code>
则只会阻止对元素本身的点击事件的默认行为。</p>
</blockquote>
<h4 id="按键修饰符">按键修饰符</h4>
<p>用于监听键盘事件。使用 <a
href="https://developer.mozilla.org/zh-CN/docs/Web/API/KeyboardEvent/key/Key_Values"><code>KeyboardEvent.key</code></a>
暴露的按键名称作为修饰符，但需要转为 kebab-case 形式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input @keyup.page-down=&quot;onPageDown&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p><strong>按键别名：</strong></p>
<p><code>.enter</code>、<code>.tab</code>、<code>.delete</code>
(捕获“Delete”和“Backspace”两个按键)、<code>.esc</code>、
<code>.space</code>、<code>.up</code>、 <code>.down</code>、
<code>.left</code>、 <code>.right</code></p>
<p><strong>系统按键：</strong></p>
<p><code>.ctrl</code>、 <code>.alt</code>、 <code>.shift</code>、
<code>.meta</code></p>
<p><strong>鼠标按键修饰符：</strong></p>
<p><code>.left</code>、<code>.right</code>、<code>.middle</code></p>
<p><strong><code>.exact</code> 修饰符：</strong></p>
<p>仅响应确定组合的事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 当按下 Ctrl 时，即使同时按下 Alt 或 Shift 也会触发 --&gt;</span><br><span class="line">&lt;button @click.ctrl=&quot;onClick&quot;&gt;A&lt;/button&gt;</span><br><span class="line">&lt;!-- 仅当按下 Ctrl 且未按任何其他键时才会触发 --&gt;</span><br><span class="line">&lt;button @click.ctrl.exact=&quot;onCtrlClick&quot;&gt;A&lt;/button&gt;</span><br><span class="line">&lt;!-- 仅当没有按下任何系统按键时触发 --&gt;</span><br><span class="line">&lt;button @click.exact=&quot;onClick&quot;&gt;A&lt;/button&gt;</span><br></pre></td></tr></table></figure>
<h3 id="v-model-输入绑定">v-model 输入绑定</h3>
<p>v-model 将 value 绑定到元素上，并监听 value
的变化，达到数据绑定的效果。</p>
<ul>
<li>文本类型的 <code>&lt;input&gt;</code> 和
<code>&lt;textarea&gt;</code> 元素会绑定 <code>value</code> property
并侦听 <code>input</code> 事件；</li>
<li><code>&lt;input type="checkbox"&gt;</code> 和
<code>&lt;input type="radio"&gt;</code> 会绑定 <code>checked</code>
property 并侦听 <code>change</code> 事件；</li>
<li><code>&lt;select&gt;</code> 会绑定 <code>value</code> property
并侦听 <code>change</code> 事件。</li>
</ul>
<p><code>v-model</code> 会忽略任何表单元素上初始的
<code>value</code>、<code>checked</code> 或 <code>selected</code>
attribute。</p>
<h4 id="修饰符">修饰符</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 在 &quot;change&quot; 事件后同步更新而不是 &quot;input&quot; --&gt;</span><br><span class="line">&lt;input v-model.lazy=&quot;msg&quot; /&gt;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr class="header">
<th>修饰符</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>.lazy</code></td>
<td>将数据修改从 input 事件修改到 change 事件后触发</td>
</tr>
<tr class="even">
<td><code>.number</code></td>
<td>用户输入自动转换为数字</td>
</tr>
<tr class="odd">
<td><code>.trim</code></td>
<td>自动去除用户输入内容中两端的空格</td>
</tr>
</tbody>
</table>
<h3 id="生命周期">生命周期</h3>
<p><img data-src="https://cn.vuejs.org/assets/lifecycle.16e4c08e.png" /></p>
<h3 id="监听器">监听器</h3>
<h4 id="watch">watch</h4>
<p><code>watch</code> 的第一个参数可以是不同形式的“数据源”：它可以是一个
ref (包括计算属性)、一个响应式对象、一个 getter
函数、或多个数据源组成的数组：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> y = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单个 ref</span></span><br><span class="line"><span class="title function_">watch</span>(x, <span class="function">(<span class="params">newX</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`x is <span class="subst">$&#123;newX&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// getter 函数</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> x.<span class="property">value</span> + y.<span class="property">value</span>,</span><br><span class="line">  <span class="function">(<span class="params">sum</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`sum of x + y is: <span class="subst">$&#123;sum&#125;</span>`</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">deep</span>: <span class="literal">false</span>, <span class="comment">// 默认 false, 表示非深层监听</span></span><br><span class="line">    <span class="attr">immediate</span>: fale, <span class="comment">// 默认 false, 表示创建监听时不立即执行</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个来源组成的数组</span></span><br><span class="line"><span class="title function_">watch</span>([x, <span class="function">() =&gt;</span> y.<span class="property">value</span>], <span class="function">(<span class="params">[newX, newY]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`x is <span class="subst">$&#123;newX&#125;</span> and y is <span class="subst">$&#123;newY&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>不能直接监听响应式对象的属性值，必须使用像上例中的 getter
函数形式。</p>
<p>watch 默认是深层监听器，如果只想监听某个属性，可以使用 getter
函数方式</p>
<h4 id="watcheffect">watchEffect</h4>
<p><code>watchEffect</code>
的回调会立即执行一次，它会自动追踪依赖，有点类似
<code>computed</code></p>
<blockquote>
<p><code>watchEffect</code>
仅会在其<strong>同步</strong>执行期间，才追踪依赖。在使用异步回调时，只有在第一个
<code>await</code> 正常工作前访问到的属性才会被追踪。</p>
</blockquote>
<h4 id="回调触发">回调触发</h4>
<p>默认情况下，用户创建的侦听器回调，都会在 Vue
组件更新<strong>之前</strong>被调用。在侦听器回调中访问的 DOM 是被 Vue
更新之前的状态。</p>
<p>使用 <code>flush: 'post'</code> 来设置监听回调在 DOM 更新后触发。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">watch</span>(source, callback, &#123;</span><br><span class="line">  <span class="attr">flush</span>: <span class="string">&#x27;post&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">watchEffect</span>(callback, &#123;</span><br><span class="line">  <span class="attr">flush</span>: <span class="string">&#x27;post&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="watchposteffect">watchPostEffect</h4>
<p>等效于：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">watchEffect</span>(callback, &#123;</span><br><span class="line">  <span class="attr">flush</span>: <span class="string">&#x27;post&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="停止侦听器">停止侦听器</h4>
<p>同步语句创建的侦听器，会自动停止，但是在异步中调用创建的监听器需要调用其返回值手动停止</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; watchEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 它会自动停止</span></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...这个则不会！</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> unwatch = <span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">  <span class="comment">// 手动停止</span></span><br><span class="line">  <span class="title function_">unwatch</span>()</span><br><span class="line">&#125;, <span class="number">100</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="组件">组件</h2>
<h3 id="组件基础">组件基础</h3>
<h4 id="组件定义">组件定义</h4>
<p><strong>script setup 形式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const count = ref(0)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;count++&quot;&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<p><strong>非 setup 形式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const count = ref(0)</span><br><span class="line">    return &#123; count &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;button @click=&quot;count++&quot;&gt;</span><br><span class="line">      You clicked me &#123;&#123; count &#125;&#125; times.</span><br><span class="line">    &lt;/button&gt;`</span><br><span class="line">  // 或者 `template: &#x27;#my-template-element&#x27;`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="组件使用">组件使用</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// 在 setup 中直接导入即可</span><br><span class="line">import ButtonCounter from &#x27;./ButtonCounter.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;Here is a child component!&lt;/h1&gt;</span><br><span class="line">  &lt;ButtonCounter /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<h4 id="传递-props">传递 props</h4>
<p><em>script setup</em> 使用 defineProps 定义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">defineProps([&#x27;title&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>非 <em>setup</em>，使用 <code>props</code> 定义，在
<code>setup(props,ctx)</code> 中读取值</p>
<h4 id="触发事件">触发事件</h4>
<p>通过 <a
href="https://cn.vuejs.org/api/sfc-script-setup.html#defineprops-defineemits"><code>defineEmits</code></a>
宏来声明需要抛出的事件。</p>
<p>在 <em>script setup</em> 中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const emit = defineEmits([&#x27;eventName&#x27;])</span><br><span class="line">emit(eventName,data)</span><br></pre></td></tr></table></figure>
<p>在 setup() 中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  emits: [&#x27;enlarge-text&#x27;],</span><br><span class="line">  setup(props, ctx) &#123;</span><br><span class="line">    ctx.emit(&#x27;enlarge-text&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="插槽">插槽</h4>
<p>使用 <code>&lt;slot /&gt;</code> 来点位</p>
<h4 id="动态组件">动态组件</h4>
<p>使用 <code>is</code> 属性实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- currentTab 改变时组件也改变 --&gt;</span><br><span class="line">&lt;component :is=&quot;tabs[currentTab]&quot;&gt;&lt;/component&gt;</span><br></pre></td></tr></table></figure>
<p>被传给 <code>:is</code> 的值可以是以下几种：</p>
<ul>
<li>被注册的组件名</li>
<li>导入的组件对象</li>
</ul>
<p>当使用 <code>&lt;component :is="..."&gt;</code>
来在多个组件间作切换时，被切换掉的组件会被卸载。</p>
<p>通过 <a
href="https://cn.vuejs.org/guide/built-ins/keep-alive.html">KeepAlive</a>强制被切换掉的组件仍然保持“存活”的状态。</p>
<h4 id="大小写">大小写</h4>
<p>HTML
标签和属性名称是不分大小写的，所以浏览器会把任何大写的字符解释为小写。</p>
<p>Vue 对组件元素做了预处理，因此在使用时，建议组件使用 PascalCase
命名方式。</p>
<p>组件可以使用 <code>&lt;/&gt;</code> 作为关闭标签。</p>
<h3 id="注册组件">注册组件</h3>
<h4 id="全局注册">全局注册</h4>
<p>使用 Vue 实例的 <code>app.component()</code> 方法，注册全局组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line">app.<span class="title function_">component</span>(</span><br><span class="line">  <span class="comment">// 注册的名字</span></span><br><span class="line">  <span class="string">&#x27;MyComponent&#x27;</span>,</span><br><span class="line">  <span class="comment">// 组件的实现</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>单文件组件注册成全局组件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;MyComponent&#x27;</span>, <span class="title class_">MyComponent</span>)</span><br></pre></td></tr></table></figure>
<p><code>app.component()</code> 方法可以被链式调用。</p>
<h4 id="局部注册">局部注册</h4>
<p>在使用 <code>&lt;script setup&gt;</code>
的单文件组件中，导入的组件可以直接在模板中使用，无需注册。</p>
<p>如果没有使用 <code>&lt;script setup&gt;</code>，则需要使用
<code>components</code> 选项来显式注册。</p>
<h3 id="props">props</h3>
<h4 id="props-定义">props 定义</h4>
<p>在使用 <code>&lt;script setup&gt;</code> 的单文件组件中，props
可以使用 <code>defineProps()</code> 宏来声明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps([&#x27;foo&#x27;])</span><br><span class="line"></span><br><span class="line">console.log(props.foo)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>在没有使用 <code>&lt;script setup&gt;</code> 的组件中，prop 可以使用
<a
href="https://cn.vuejs.org/api/options-state.html#props"><code>props</code></a>
选项来声明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  props: [&#x27;foo&#x27;],</span><br><span class="line">  setup(props) &#123;</span><br><span class="line">    // setup() 接收 props 作为第一个参数</span><br><span class="line">    console.log(props.foo)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>defineProps 与 props 中传递的参数是一样，它们有以下几种形式：</p>
<ol type="1">
<li><p>字符串数组，<code>[propName1,propName2,...]</code>，每个字符串表示特性名称</p></li>
<li><p>对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 使用 &lt;script setup&gt;</span><br><span class="line">defineProps(&#123;</span><br><span class="line">  title: String,</span><br><span class="line">  likes: Number</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<p><code>&lt;script setup&gt;</code> 还可以使用类型标注来声明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">defineProps&lt;&#123;</span><br><span class="line">  title?: string</span><br><span class="line">  likes?: number</span><br><span class="line">&#125;&gt;()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h4 id="传递值给-props">传递值给 props</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 传入静态值 --&gt;</span><br><span class="line">&lt;BlogPost likes=&quot;basketball&quot; readonly/&gt;</span><br><span class="line">&lt;!-- 根据一个变量的值动态传入 --&gt;</span><br><span class="line">&lt;BlogPost :likes=&quot;post.likes&quot;/&gt;</span><br></pre></td></tr></table></figure>
<h4 id="使用一个对象绑定多个-prop">使用一个对象绑定多个 prop</h4>
<p>可以将一个对象的所有属性都当作 props 传入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const post = &#123;</span><br><span class="line">  id: 1,</span><br><span class="line">  title: &#x27;My Journey with Vue&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;BlogPost v-bind=&quot;post&quot; /&gt;</span><br><span class="line">// 等效于</span><br><span class="line">&lt;BlogPost :id=&quot;post.id&quot; :title=&quot;post.title&quot; /&gt;</span><br></pre></td></tr></table></figure>
<h4 id="单向绑定">单向绑定</h4>
<p>props
因父组件的更新而变化，自然地将新的状态向下流往子组件，而不会逆向传递。</p>
<p><strong>不应该</strong>在子组件中去更改一个 prop。</p>
<p>导致想要更改一个 prop 的需求通常来源于以下两种场景：</p>
<ol type="1">
<li><p><strong>prop
被用于传入初始值；而子组件想在之后将其作为一个局部数据属性</strong>。在这种情况下，最好是新定义一个局部数据属性，从
props 上获取初始值即可：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>([<span class="string">&#x27;initialCounter&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计数器只是将 props.initialCounter 作为初始值</span></span><br><span class="line"><span class="comment">// 像下面这样做就使 prop 和后续更新无关了</span></span><br><span class="line"><span class="keyword">const</span> counter = <span class="title function_">ref</span>(props.<span class="property">initialCounter</span>)</span><br></pre></td></tr></table></figure></li>
<li><p><strong>需要对传入的 prop
值做进一步的转换</strong>。在这种情况中，最好是基于该 prop
值定义一个计算属性：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>([<span class="string">&#x27;size&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该 prop 变更时计算属性也会自动更新</span></span><br><span class="line"><span class="keyword">const</span> normalizedSize = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> props.<span class="property">size</span>.<span class="title function_">trim</span>().<span class="title function_">toLowerCase</span>())</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="props-校验">props 校验</h4>
<p>校验形式如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="comment">// 基础类型检查</span></span><br><span class="line">  <span class="comment">// （给出 `null` 和 `undefined` 值则会跳过任何类型检查）</span></span><br><span class="line">  <span class="attr">propA</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="comment">// 多种可能的类型</span></span><br><span class="line">  <span class="attr">propB</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>],</span><br><span class="line">  <span class="comment">// 必传，且为 String 类型</span></span><br><span class="line">  <span class="attr">propC</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span> <span class="comment">// 默认为 false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Number 类型的默认值</span></span><br><span class="line">  <span class="attr">propD</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="number">100</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 对象类型的默认值</span></span><br><span class="line">  <span class="attr">propE</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Object</span>,</span><br><span class="line">    <span class="comment">// 对象或数组的默认值</span></span><br><span class="line">    <span class="comment">// 必须从一个工厂函数返回。</span></span><br><span class="line">    <span class="comment">// 该函数接收组件所接收到的原始 prop 作为参数。</span></span><br><span class="line">    <span class="title function_">default</span>(<span class="params">rawProps</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">&#x27;hello&#x27;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 自定义类型校验函数</span></span><br><span class="line">  <span class="attr">propF</span>: &#123;</span><br><span class="line">    <span class="title function_">validator</span>(<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="comment">// The value must match one of these strings</span></span><br><span class="line">      <span class="keyword">return</span> [<span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;warning&#x27;</span>, <span class="string">&#x27;danger&#x27;</span>].<span class="title function_">includes</span>(value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 函数类型的默认值</span></span><br><span class="line">  <span class="attr">propG</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Function</span>,</span><br><span class="line">    <span class="comment">// 不像对象或数组的默认，这不是一个</span></span><br><span class="line">    <span class="comment">// 工厂函数。这会是一个用来作为默认值的函数</span></span><br><span class="line">    <span class="title function_">default</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;Default function&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>校验中的 type 有：</p>
<ul>
<li><code>String</code></li>
<li><code>Number</code></li>
<li><code>Boolean</code></li>
<li><code>Array</code></li>
<li><code>Object</code></li>
<li><code>Date</code></li>
<li><code>Function</code></li>
<li><code>Symbol</code></li>
<li>也可以是自定义类型，vue 通过 instanceof 来匹配</li>
</ul>
<h3 id="事件">事件</h3>
<h4 id="声明">声明</h4>
<p><code>$emit</code> 只能在模板中使用。</p>
<p>在 <code>script setup</code> 中无法使用，可以通过
<code>defineEmits</code> 来获取 <code>emit</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;inFocus&#x27;</span>, <span class="string">&#x27;submit&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发</span></span><br><span class="line"><span class="title function_">emit</span>(<span class="string">&#x27;submit&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><code>defineEmits()</code> 宏必须直接放置在
<code>&lt;script setup&gt;</code> 的顶级作用域下。</p>
<p>非 <code>&lt;script setup&gt;</code>中，事件需要通过 <a
href="https://cn.vuejs.org/api/options-state.html#emits"><code>emits</code></a>
选项来定义，<code>emit</code> 函数也被暴露在 <code>setup()</code>
的上下文对象上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  emits: [&#x27;inFocus&#x27;, &#x27;submit&#x27;],</span><br><span class="line">  setup(props, ctx) &#123;</span><br><span class="line">    ctx.emit(&#x27;submit&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>事件定义支持对象语法，它允许对触发事件的参数进行验证：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>(&#123;</span><br><span class="line">  <span class="title function_">submit</span>(<span class="params">payload</span>) &#123;</span><br><span class="line">    <span class="comment">// 通过返回值为 `true` 还是为 `false` 来判断</span></span><br><span class="line">    <span class="comment">// 验证是否通过</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>也可以使用 TypeScript 的类型标注来验证：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">const</span> emit = defineEmits&lt;&#123;</span><br><span class="line">  (<span class="attr">e</span>: <span class="string">&#x27;change&#x27;</span>, <span class="attr">id</span>: number): <span class="keyword">void</span></span><br><span class="line">  (<span class="attr">e</span>: <span class="string">&#x27;update&#x27;</span>, <span class="attr">value</span>: string): <span class="keyword">void</span></span><br><span class="line">&#125;&gt;()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h4 id="触发">触发</h4>
<p>事件通过 <code>v-on</code>(简写为 <code>@</code>) 来进行监听。</p>
<p>在组件的模板表达式中，也可以直接使用 <code>$emit</code>
方法触发自定义事件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button @click=&quot;$emit(&#x27;someEvent&#x27;)&quot;&gt;click me&lt;/button&gt;</span><br></pre></td></tr></table></figure>
<p>组件触发的事件<strong>没有冒泡机制</strong></p>
<h4 id="参数">参数</h4>
<p>第一个参数为事件名，第二个参数为事件参数</p>
<p><code>emit(emitName,eventArgs)</code></p>
<h4 id="校验">校验</h4>
<p>在对象定义中，通过添加 <code>submit</code> 来进行验证</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>(&#123;</span><br><span class="line">  <span class="title function_">submit</span>(<span class="params">payload</span>) &#123;</span><br><span class="line">    <span class="comment">// 通过返回值为 `true` 还是为 `false` 来判断</span></span><br><span class="line">    <span class="comment">// 验证是否通过</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="组件-v-model">组件 v-model</h3>
<h4 id="v-model-本质"><code>v-model</code> 本质</h4>
<p><code>v-model</code> 通过属性绑定和事件监听实现的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchText&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--等效于：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:value</span>=<span class="string">&quot;searchText&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">input</span>=<span class="string">&quot;searchText = $event.target.value&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="v-model-实现方式">v-model 实现方式</h4>
<ol type="1">
<li>定义一个 props，名为 <code>modelValue</code></li>
<li>当 props 变化时，触发 <code>update:modelValue</code> 事件</li>
</ol>
<p>事件传递的参数即为 v-model 的新值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;CustomInput</span><br><span class="line">  :modelValue=&quot;searchText&quot;</span><br><span class="line">  @update:modelValue=&quot;newValue =&gt; searchText = newValue&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>
<p>还可以使用 computed 属性来实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- CustomInput.vue --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; computed &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const props = defineProps([&#x27;modelValue&#x27;])</span><br><span class="line">const emit = defineEmits([&#x27;update:modelValue&#x27;])</span><br><span class="line"></span><br><span class="line">const value = computed(&#123;</span><br><span class="line">  get() &#123;</span><br><span class="line">    return props.modelValue</span><br><span class="line">  &#125;,</span><br><span class="line">  set(value) &#123;</span><br><span class="line">    emit(&#x27;update:modelValue&#x27;, value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input v-model=&quot;value&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<h4 id="多个-v-model">多个 v-model</h4>
<p>默认情况下，<code>v-model</code> 在组件上都是使用
<code>modelValue</code> 作为 prop，并以 <code>update:modelValue</code>
作为对应的事件。</p>
<p>可以通过给 <code>v-model</code> 指定一个参数来更改
<code>v-model</code> 映射。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;UserName</span><br><span class="line">  v-model:first-name=&quot;first&quot;</span><br><span class="line">  v-model:last-name=&quot;last&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>
<h4 id="自定义修饰符">自定义修饰符</h4>
<p>自定义的修饰符通过 <code>props.modelModifiers</code>
可以访问到。在触发事件时，可以判断 <code>Modifiers</code>
中是否有修饰符，如果有，根据修饰符对数据进行处理后再触发事件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  modelValue: String,</span><br><span class="line">  modelModifiers: &#123; default: () =&gt; (&#123;&#125;) &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const emit = defineEmits([&#x27;update:modelValue&#x27;])</span><br><span class="line"></span><br><span class="line">function emitValue(e) &#123;</span><br><span class="line">  let value = e.target.value</span><br><span class="line">  if (props.modelModifiers.capitalize) &#123;</span><br><span class="line">    value = value.charAt(0).toUpperCase() + value.slice(1)</span><br><span class="line">  &#125;</span><br><span class="line">  emit(&#x27;update:modelValue&#x27;, value)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; :value=&quot;modelValue&quot; @input=&quot;emitValue&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<p>又有参数又有修饰符的 <code>v-model</code> 绑定，生成的 prop 名将是
<code>arg + "Modifiers"</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;MyComponent v-model:title.capitalize=&quot;myText&quot;&gt;</span><br><span class="line"></span><br><span class="line">// 访问</span><br><span class="line">console.log(props.titleModifiers) // &#123; capitalize: true &#125;</span><br></pre></td></tr></table></figure>
<h3 id="attributes-继承">Attributes 继承</h3>
<p>父组件向子组件传递 Attributes 时，若子组件没有在 <a
href="https://cn.vuejs.org/guide/components/props.html">props</a> 和 <a
href="https://cn.vuejs.org/guide/components/events.html#defining-custom-events">emits</a>
中声明，则会向下继承。</p>
<p>当一个组件以单个元素为根作渲染时，继承的 attribute
会自动被添加到根元素上。</p>
<p>继承的 <code>class</code> 和 <code>style</code>
会与子组件上的相同属性合并。</p>
<h4 id="访问继承">访问继承</h4>
<p>在 <code>&lt;script setup&gt;</code> 中使用 <code>useAttrs()</code>
API 来访问一个组件继承的所有 attribute</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useAttrs &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const attrs = useAttrs()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>在 <code>setup(props,ctx)</code> 函数中通过 <code>ctx.attrs</code>
来访问</p>
<p><code>attrs</code> 对象总是反映为最新的
attribute，但它并不是响应式的。</p>
<h4 id="禁用继承">禁用继承</h4>
<p>设置 <code>inheritAttrs: false</code> 来禁用自动继承。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// 使用普通的 &lt;script&gt; 来声明选项</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">inheritAttrs</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// ...setup 部分逻辑</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>继承的 Attributes 可以在模板中直接用 <code>$attrs</code> 访问到。</p>
<p>这个 <code>$attrs</code> 对象包含了除组件所声明的 <code>props</code>
和 <code>emits</code> 之外的所有其他 attribute，例如
<code>class</code>，<code>style</code>，<code>v-on</code>
监听器等等。</p>
<p>有几点需要注意：</p>
<ul>
<li>和 props 有所不同，继承的 attributes 在 JavaScript
中保留了它们原始的大小写，所以像 <code>foo-bar</code> 这样的一个
attribute 需要通过 <code>$attrs['foo-bar']</code> 来访问。</li>
<li>像 <code>@click</code> 这样的一个 <code>v-on</code>
事件监听器将在此对象下被暴露为一个函数
<code>$attrs.onClick</code>。</li>
</ul>
<h4 id="指定继承">指定继承</h4>
<p>可以在子组件中通过 v-bind 来将 attributes 绑定到其它组件上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;btn-wrapper&quot;&gt;</span><br><span class="line">  &lt;button class=&quot;btn&quot; v-bind=&quot;$attrs&quot;&gt;click me&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h4 id="多根节点的-attributes-继承">多根节点的 Attributes 继承</h4>
<p>需要手动指定继承，无法像单根节点一样，自动继承</p>
<h3 id="插槽-slots">插槽 Slots</h3>
<p><code>&lt;slot&gt;</code> 元素是一个<strong>插槽出口</strong> (slot
outlet)，标示了父元素提供的<strong>插槽内容</strong> (slot content)
将在哪里被渲染。</p>
<p><img data-src="https://cn.vuejs.org/assets/slots.dbdaf1e8.png" /></p>
<h4 id="渲染作用域">渲染作用域</h4>
<p>插槽内容可以访问到父组件的数据作用域，<strong>无法访问</strong>子组件的数据。</p>
<h4 id="默认内容">默认内容</h4>
<p>放置 <code>&lt;slot&gt;</code>
标签时，标签之间的内容作为默认内容。</p>
<h4 id="具名插槽">具名插槽</h4>
<p>带 <code>name</code> 属性的插槽叫具名插槽。没有提供 <code>name</code>
的 <code>&lt;slot&gt;</code> 出口会隐式地命名为“default”。</p>
<p>使用 <code>v-slot:slotName</code>(简写为 <code>#slotName</code>)
方式来指定所使用的插槽。</p>
<p>默认插槽不用指定。</p>
<p>当一个组件同时接收默认插槽和具名插槽时，所有位于顶级的非
<code>&lt;template&gt;</code>
节点都被隐式地视为默认插槽的内容。如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;BaseLayout&gt;</span><br><span class="line">  &lt;template #header&gt;</span><br><span class="line">    &lt;h1&gt;Here might be a page title&lt;/h1&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 隐式的默认插槽 --&gt;</span><br><span class="line">  &lt;p&gt;A paragraph for the main content.&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;And another one.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template #footer&gt;</span><br><span class="line">    &lt;p&gt;Here&#x27;s some contact info&lt;/p&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/BaseLayout&gt;</span><br></pre></td></tr></table></figure>
<h4 id="动态插槽">动态插槽</h4>
<p>通过指令的动态参数传递不同的名称实现动态插槽。</p>
<h4 id="插槽传递参数">插槽传递参数</h4>
<p>插槽的内容无法访问到子组件的状态，在定义插槽时，我们需要先将组件数组绑定到插槽上，使用时，再从插槽中获取。</p>
<p><img data-src="https://cn.vuejs.org/assets/scoped-slots.1c6d5876.svg" /></p>
<p><strong>数据绑定：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- &lt;MyComponent&gt; 的模板 --&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;slot :text=&quot;greetingMessage&quot; :count=&quot;1&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p><strong>参数接收：</strong></p>
<ul>
<li>默认插槽使用 <code>v-slot="slotProps"</code> 或者
<code>#default="slotProps"</code>来接收参数</li>
<li>具名插槽使用 <code>#slotName="slotProps"</code> 来接收参数</li>
</ul>
<h4 id="无渲染组件">无渲染组件</h4>
<p>一些组件可能只包括了逻辑而不需要自己渲染内容，视图输出通过作用域插槽全权交给了消费者组件。我们将这种类型的组件称为<strong>无渲染组件</strong>。</p>
<h3 id="依赖注入">依赖注入</h3>
<p>依赖注入用于多级父子组件传值，解决 props 传值链路长的问题。</p>
<p><strong>props 传值：</strong></p>
<p><img data-src="https://cn.vuejs.org/assets/prop-drilling.11201220.png" /></p>
<p><strong>依赖注入：</strong></p>
<p><img data-src="https://cn.vuejs.org/assets/provide-inject.3e0505e4.png" /></p>
<h4 id="provide-提供">Provide (提供)</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; provide &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">provide(/* 注入名 */ &#x27;message&#x27;, /* 值 */ &#x27;hello!&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>第一个参数被称为<strong>注入名</strong>，可以是一个字符串或是一个
<code>Symbol</code></p>
<p>第二个参数是提供的值，值可以是任意类型，包括响应式的状态</p>
<p>可以在应用层进行依赖注入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const app = createApp(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">app.provide(/* 注入名 */ &#x27;message&#x27;, /* 值 */ &#x27;hello!&#x27;)</span><br></pre></td></tr></table></figure>
<h4 id="inject-注入">Inject (注入)</h4>
<p>使用 <a
href="https://cn.vuejs.org/api/composition-api-dependency-injection.html#inject"><code>inject()</code></a>
函数注入上层组件提供的数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 第二个参数是默认值</span></span><br><span class="line">    <span class="keyword">const</span> value = <span class="title function_">inject</span>(<span class="string">&#x27;key&#x27;</span>, <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">ExpensiveClass</span>())</span><br><span class="line">    <span class="keyword">return</span> &#123; value &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="使用建议">使用建议</h4>
<p>当提供 /
注入响应式的数据时，<strong>建议尽可能将任何对响应式状态的变更都保持在供给方组件中</strong>。这样可以确保所提供状态的声明和变更操作都内聚在同一个组件内，使其更容易维护。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 在供给方组件内 --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; provide, ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const location = ref(&#x27;North Pole&#x27;)</span><br><span class="line"></span><br><span class="line">function updateLocation() &#123;</span><br><span class="line">  location.value = &#x27;South Pole&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">provide(&#x27;location&#x27;, &#123;</span><br><span class="line">  location,</span><br><span class="line">  updateLocation</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 在注入方组件 --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; inject &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const &#123; location, updateLocation &#125; = inject(&#x27;location&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;updateLocation&quot;&gt;&#123;&#123; location &#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<h4 id="只读数据">只读数据</h4>
<p>可以使用 <a
href="https://cn.vuejs.org/api/reactivity-core.html#readonly"><code>readonly()</code></a>
来包装提供的值使其不能被修改</p>
<h3 id="异步组件">异步组件</h3>
<h4 id="定义">定义</h4>
<p>使用 <a
href="https://cn.vuejs.org/api/general.html#defineasynccomponent"><code>defineAsyncComponent</code></a>
方法来实现按需从服务器加载相关组件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AsyncComp</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...从服务器获取组件</span></span><br><span class="line">    <span class="title function_">resolve</span>(<span class="comment">/* 获取到的组件 */</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ... 像使用其他一般组件一样使用 `AsyncComp`</span></span><br></pre></td></tr></table></figure>
<p><a
href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import">ES
模块动态导入</a>也会返回一个 Promise，所以多数情况下我们会将它和
<code>defineAsyncComponent</code> 搭配使用。类似 Vite 和 Webpack
这样的构建工具也支持此语法
(并且会将它们作为打包时的代码分割点)，因此我们也可以用它来导入 Vue
单文件组件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AsyncComp</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span></span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&#x27;./components/MyComponent.vue&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h4 id="加载与错误状态">加载与错误状态</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">AsyncComp</span> = <span class="title function_">defineAsyncComponent</span>(&#123;</span><br><span class="line">  <span class="comment">// 加载函数</span></span><br><span class="line">  <span class="attr">loader</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./Foo.vue&#x27;</span>),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加载异步组件时使用的组件</span></span><br><span class="line">  <span class="attr">loadingComponent</span>: <span class="title class_">LoadingComponent</span>,</span><br><span class="line">  <span class="comment">// 展示加载组件前的延迟时间，默认为 200ms</span></span><br><span class="line">  <span class="attr">delay</span>: <span class="number">200</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加载失败后展示的组件</span></span><br><span class="line">  <span class="attr">errorComponent</span>: <span class="title class_">ErrorComponent</span>,</span><br><span class="line">  <span class="comment">// 如果提供了一个 timeout 时间限制，并超时了</span></span><br><span class="line">  <span class="comment">// 也会显示这里配置的报错组件，默认值是：Infinity</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">3000</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="逻辑复用">逻辑复用</h2>
<h3 id="组合式函数">组合式函数</h3>
<p>“组合式函数”(Composables) 是一个利用 Vue 的组合式 API
来封装和复用<strong>有状态逻辑</strong>的函数。在开发中可以将功能细分成一个个组合式函数，最后组合成功能。</p>
<h3 id="约定和最佳实践">约定和最佳实践</h3>
<h4 id="命名">命名</h4>
<p>组合式函数约定用驼峰命名法命名，并以“use”作为开头。</p>
<h4 id="输入参数兼容-ref">输入参数兼容 ref</h4>
<p>使用 <code>unref</code> 来兼容输入参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; unref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useFeature</span>(<span class="params">maybeRef</span>) &#123;</span><br><span class="line">  <span class="comment">// 若 maybeRef 确实是一个 ref，它的 .value 会被返回</span></span><br><span class="line">  <span class="comment">// 否则，maybeRef 会被原样返回</span></span><br><span class="line">  <span class="keyword">const</span> value = <span class="title function_">unref</span>(maybeRef)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="返回值">返回值</h4>
<p>组合式函数应始终返回一个包含多个 ref
的普通的非响应式对象，这样该对象在组件中被解构为 ref
之后仍可以保持响应性。</p>
<p>从组合式函数返回一个响应式对象会导致在对象解构过程中丢失与组合式函数内状态的响应性连接。</p>
<p>如果更希望以对象属性的形式来使用组合式函数中返回的状态，可以将返回的对象用
<code>reactive()</code> 包装一次，这样其中的 ref
会被自动解包，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mouse = <span class="title function_">reactive</span>(<span class="title function_">useMouse</span>())</span><br><span class="line"><span class="comment">// mouse.x 链接到了原来的 x ref</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mouse.<span class="property">x</span>)</span><br></pre></td></tr></table></figure>
<h4 id="额外操作">额外操作</h4>
<p>如果你的应用用到了<a
href="https://cn.vuejs.org/guide/scaling-up/ssr.html">服务端渲染</a>
(SSR)，请确保在组件挂载后(<code>onMounted</code>)才调用的生命周期钩子中执行
DOM 相关的其它操作，并在 <code>onUnmounted()</code> 中释放资源。</p>
<h4 id="使用限制">使用限制</h4>
<p>组合式函数在 <code>&lt;script setup&gt;</code> 或
<code>setup()</code> 钩子中，应始终被<strong>同步地</strong>调用。</p>
<h4
id="通过抽取组合式函数改善代码结构">通过抽取组合式函数改善代码结构</h4>
<p>可以基于逻辑问题将组件代码拆分成更小的函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; useFeatureA &#125; <span class="keyword">from</span> <span class="string">&#x27;./featureA.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useFeatureB &#125; <span class="keyword">from</span> <span class="string">&#x27;./featureB.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useFeatureC &#125; <span class="keyword">from</span> <span class="string">&#x27;./featureC.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; foo, bar &#125; = <span class="title function_">useFeatureA</span>()</span><br><span class="line"><span class="keyword">const</span> &#123; baz &#125; = <span class="title function_">useFeatureB</span>(foo)</span><br><span class="line"><span class="keyword">const</span> &#123; qux &#125; = <span class="title function_">useFeatureC</span>(baz)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h4 id="在选项式-api-中使用组合式函数">在选项式 API
中使用组合式函数</h4>
<p>如果你正在使用选项式 API，组合式函数必须在 <code>setup()</code>
中调用。且其返回的绑定必须在 <code>setup()</code> 中返回，以便暴露给
<code>this</code> 及其模板</p>
<h3 id="自定义指令">自定义指令</h3>
<h4 id="定义与使用">定义与使用</h4>
<p>在 <code>&lt;script setup&gt;</code> 中，任何以 <code>v</code>
开头的驼峰式命名的变量都可以被用作一个自定义指令。例如<code>vFocus</code>
可以在模板中以 <code>v-focus</code> 的形式使用。</p>
<p>在没有使用 <code>&lt;script setup&gt;</code>
的情况下，自定义指令需要通过 <code>directives</code> 选项注册。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">directives</span>: &#123;</span><br><span class="line">    <span class="comment">// 在模板中启用 v-focus</span></span><br><span class="line">    <span class="attr">focus</span>: &#123;</span><br><span class="line">      <span class="comment">/* ... */</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="指令钩子">指令钩子</h4>
<p>一个指令的定义对象可以提供几种钩子函数 (都是可选的)：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myDirective = &#123;</span><br><span class="line">  <span class="comment">// 在绑定元素的 attribute 前</span></span><br><span class="line">  <span class="comment">// 或事件监听器应用前调用</span></span><br><span class="line">  <span class="title function_">created</span>(<span class="params">el, binding, vnode, prevVnode</span>) &#123;</span><br><span class="line">    <span class="comment">// 下面会介绍各个参数的细节</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 在元素被插入到 DOM 前调用</span></span><br><span class="line">  <span class="title function_">beforeMount</span>(<span class="params">el, binding, vnode, prevVnode</span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 在绑定元素的父组件</span></span><br><span class="line">  <span class="comment">// 及他自己的所有子节点都挂载完成后调用</span></span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params">el, binding, vnode, prevVnode</span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 绑定元素的父组件更新前调用</span></span><br><span class="line">  <span class="title function_">beforeUpdate</span>(<span class="params">el, binding, vnode, prevVnode</span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 在绑定元素的父组件</span></span><br><span class="line">  <span class="comment">// 及他自己的所有子节点都更新后调用</span></span><br><span class="line">  <span class="title function_">updated</span>(<span class="params">el, binding, vnode, prevVnode</span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 绑定元素的父组件卸载前调用</span></span><br><span class="line">  <span class="title function_">beforeUnmount</span>(<span class="params">el, binding, vnode, prevVnode</span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 绑定元素的父组件卸载后调用</span></span><br><span class="line">  <span class="title function_">unmounted</span>(<span class="params">el, binding, vnode, prevVnode</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="简化形式">简化形式</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">directive</span>(<span class="string">&#x27;color&#x27;</span>, <span class="function">(<span class="params">el, binding</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这会在 `mounted` 和 `updated` 时都调用</span></span><br><span class="line">  el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="在组件上使用">在组件上使用</h4>
<p>当在组件上使用自定义指令时，它会始终应用于组件的根节点。</p>
<p>指令不能通过 <code>v-bind="$attrs"</code>
来传递给一个不同的元素。</p>
<h3 id="插件">插件</h3>
<p>插件没有严格定义的使用范围，但是插件发挥作用的常见场景主要包括以下几种：</p>
<ol type="1">
<li>通过 <a
href="https://cn.vuejs.org/api/application.html#app-component"><code>app.component()</code></a>
和 <a
href="https://cn.vuejs.org/api/application.html#app-directive"><code>app.directive()</code></a>
注册一到多个全局组件或自定义指令。</li>
<li>通过 <a
href="https://cn.vuejs.org/api/application.html#app-provide"><code>app.provide()</code></a>
使一个资源<a
href="https://cn.vuejs.org/guide/components/provide-inject.html">可被注入</a>进整个应用。</li>
<li>向 <a
href="https://cn.vuejs.org/api/application.html#app-config-globalproperties"><code>app.config.globalProperties</code></a>
中添加一些全局实例属性或方法</li>
<li>一个可能上述三种都包含了的功能库 (例如 <a
href="https://github.com/vuejs/vue-router-next">vue-router</a>)。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="keyword">const</span> myPlugin = &#123;</span><br><span class="line">  <span class="title function_">install</span>(<span class="params">app, options</span>) &#123;</span><br><span class="line">    <span class="comment">// 配置此应用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line">app.<span class="title function_">use</span>(myPlugin, &#123;</span><br><span class="line">  <span class="comment">/* 可选的选项 */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="内置组件">内置组件</h2>
<h3 id="transition">Transition</h3>
<p>Vue 提供了两个内置组件来制作基于状态变化的过渡和动画：</p>
<ul>
<li><code>&lt;Transition&gt;</code> 会在一个元素或组件进入和离开 DOM
时应用动画。</li>
<li><code>&lt;TransitionGroup&gt;</code> 会在一个 <code>v-for</code>
列表中的元素或组件被插入，移动，或移除时应用动画。</li>
</ul>
<h2 id="应用规模化">应用规模化</h2>
<h2 id="最佳实践">最佳实践</h2>
<h2 id="typescript">TypeScript</h2>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a href="https://cn.vuejs.org/guide/introduction.html">Vue 深度指南
(官方)</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Vue</category>
        <category>Vue3.x</category>
      </categories>
      <tags>
        <tag>NexT</tag>
        <tag>Vue</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>16款优秀的Vue UI组件库推荐</title>
    <url>/posts/2020/28N842C.html</url>
    <content><![CDATA[<p>Vue
是一个轻巧、高性能、可组件化的MVVM库，API简洁明了，上手快。从Vue推出以来，得到众多Web开发者的认可。
在公司的Web前端项目开发中，多个项目采用基于Vue的UI组件框架开发，并投入正式使用。
开发团队在使用Vue.js框架和UI组件库以后，开发效率大大提高，自己写的代码也少了，很多界面效果组件已经封装好了。
在选择Vue
UI组件库的过程中，通过GitHub上根据star数量、文档丰富程度、更新的频率以及维护等因素，也收集整理了一些优秀的Vue
UI组件库。</p>
<span id="more"></span>
<p><strong>PS：国内的UI组件大部分都只有一部分的，常用的头部导航，底部导航，listview，grid表格很多都是没有的。</strong></p>
<p><strong>后面才发现，基于Vue的Quasar Framework 介绍
这个框架UI组件很全面，准备下次使用这个框架了</strong></p>
<p>基于Vue的Quasar Framework 中文网 http://www.quasarchs.com/</p>
<p>quasarframework/quasar: Quasar Framework
https://github.com/quasarframework/quasar</p>
<p>Quasar（发音为/kweɪ.zɑɹ/)是MIT许可的开源框架（基于Vue），可帮助Web开发人员创建：
响应式网站 PWA（Progressive Web App） 通过Apache
Cordova构建移动APP（Android，iOS，…） 多平台桌面应用程序（使用Electron）
Quasar允许开发人员编写一次代码，然后使用相同的代码库同时部署为网站、PWA、Mobile
App和Electron
App。使用最先进的CLI设计应用程序，并提供精心编写，速度非常快的Quasar
Web组件。</p>
<p>当使用Quasar时，你不需要像Hammerjs，Momentjs或Bootstrap这样的额外重型库。它拥有这些功能，而且体积很小！</p>
<hr />
<h2 id="iview-ui组件库">1、 iView UI组件库</h2>
<p>iView 是一套基于 Vue.js 的开源 UI 组件库，主要服务于 PC
界面的中后台产品。iView的组件还是比较齐全的，更新也很快，文档写得很详细。有公司团队维护，比较可靠的Vue
UI组件框架。iView生态也做得很好，还有开源了一个iView
Admin，做后台非常方便。官网上介绍，iView已经应用在TalkingData、阿里巴巴、百度、腾讯、今日头条、京东、滴滴出行、美团、新浪、联想等大型公司的产品中。
iView官网：https://www.iviewui.com/</p>
<h2 id="vux-ui组件库">2、Vux UI组件库</h2>
<p>Vux是基于WeUI和Vue2.x开发的移动端UI组件库，主要服务于微信页面。Vux的定位已经很明确了，一是：Vue移动端UI组件库，二是：WeUI的基础样式库。Vux的组件涵盖了所有的WeUI的内容，还扩展了一些常用的组件。比如：Sticky、timeline、v-chart、XCircle。Vux是个人维护的。但是GitHub上star还是很高的，达到13k。在GitHub上看到对issue的关闭还是很迅速的。Vux文档基本的组件用法和效果都讲解到位了。在vux官网上也展示了很多Vux的使用案例。在微信页面开发中，基本没有太多的bug，开发还是比较顺手的。
Vux官网：https://vux.li/</p>
<h2 id="element-ui组件库">3、Element UI组件库</h2>
<p>Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0
的桌面端组件库。Element是饿了么前端开源维护的Vue
UI组件库，更新频率还是很高的，基本一周到半个月都会发布一个新版本。组件齐全，基本涵盖后台所需的所有组件，文档讲解详细，例子也很丰富。没有实际使用过，网上的Element教程和文章比较多。Element应该是一个质量比较高的Vue
UI组件库。 Element官网：http://element.eleme.io/#/zh-CN</p>
<h2 id="mint-ui组件库">4、Mint UI组件库</h2>
<p>Mint UI基于 Vue.js 的移动端组件库，同样出自饿了么前端的项目。Mint
UI是真正意义上的按需加载组件。可以只加载声明过的组件及其样式文件。Mint
UI 采用 CSS3
处理各种动效，避免浏览器进行不必要的重绘和重排，从而使用户获得流畅顺滑的体验。网上的视频教程很多都是基于Mint
UI来讲的，开发移动端web项目还是很方便，文档也很简介明了。很多页面Mint
UI组件都已经封装好，基本可以照着例子写，简单的调整一下就可以实现。不过，在GitHub上看最后一次代码提交在2018年1月16日。不知道是项目比较稳定没有更新，还是项目有被废弃的可能。
Mint UI官网：http://mint-ui.github.io/#!/zh-cn</p>
<h2 id="bootstrap-vue-ui组件库">5、Bootstrap-Vue UI组件库</h2>
<p>Bootstrap-VUE提供了基于vue2的Bootstrap
V4组件和网格系统的实现，完成了广泛和自动化的WAI
ARA可访问性标记。Bootstrap 4是最新发布的版本，与 Bootstrap3
相比拥有了更多的具体的类以及把一些有关的部分变成了相关的组件。同时
Bootstrap.min.css 的体积减少了40%以上。Bootstrap4 放弃了对 IE8 以及 iOS
6 的支持，现在仅仅支持 IE9 以上 以及 iOS 7
以上版本的浏览器。想当初刚流行响应式网站的时候，Bootstrap是世界上最受欢迎的建立移动优先网站的框架，Bootstrap可以说风靡全球。就算放在现在很多企业网站都是采用Bootstrap做的响应式。Bootstrap-Vue可以让你在Vue中也实现Bootstrap的效果。
Bootstrap-Vue官网：https://bootstrap-vue.js.org/</p>
<h2 id="ant-design-vue-ui组件库">6、Ant Design Vue UI组件库</h2>
<p>Ant Design Vue是 Ant Design 3.X 的 Vue
实现，开发和服务于企业级后台产品。在GitHub上可以找到几个Ant
Design的Vue组件。不过相比较而言，Ant Design Vue更胜一筹。Ant Design
Vue共享Ant Design of React设计工具体系，实现了所有Ant Design of
React的组件，支持现代浏览器和 IE9 及以上（需要
polyfills）。可以让熟悉Ant Design的在使用Vue时，很容易的上手。 Ant
Design
Vue官网：https://vuecomponent.github.io/ant-design-vue/docs/vue/introduce-cn/</p>
<h2 id="at-ui-ui组件库">7、AT-UI UI组件库</h2>
<p>AT-UI 是一款基于 Vue.js 2.0 的前端 UI 组件库，主要用于快速开发 PC
网站中后台产品，支持现代浏览器和 IE9 及以上。AT-UI
更加精简，实现了后台常用的组件。
AT_UI官网：https://at-ui.github.io/at-ui/#/zh</p>
<h2 id="vant-ui组件库">8、Vant UI组件库</h2>
<p>Vant是一个轻量、可靠的移动端 Vue
组件库。Vant是有赞团队开源的，主要维护也是有赞团队。Vant Weapp
是有赞移动端组件库 Vant 的小程序版本，两者基于相同的视觉规范，提供一致的
API 接口，助力开发者快速搭建小程序应用。截止到目前，Vant已经开源了50+
个经过有赞线上业务检验的组件。比如：、AddressEdit 地址编辑、AddressList
地址列表、Area 省市区选择、Card 卡片、Contact 联系人、Coupon
优惠券、GoodsAction 商品页行动点、SubmitBar 提交订单栏、Sku
商品规格弹层。如果做商城的，不太在意界面，实现业务逻辑的话，用Vant组件库开发还是很快的。
Vant官网：https://youzan.github.io/vant/#/zh-CN/intro</p>
<h2 id="cube-ui-ui组件库">9、cube-ui UI组件库</h2>
<p>cube-ui 是基于 Vue.js
实现的精致移动端组件库。由滴滴内部组件库精简提炼而来，经历了业务一年多的考验，并且每个组件都有充分单元测试，为后续集成提供保障。在交互体验方面追求极致。遵循统一的设计交互标准，高度还原设计效果；接口标准化，统一规范使用方式，开发更加简单高效。支持按需引入和后编译，轻量灵活；扩展性强，可以方便地基于现有组件实现二次开发。
cube-ui官网：https://didi.github.io/cube-ui/#/zh-CN</p>
<h2 id="muse-ui-ui组件库">10、Muse-UI UI组件库</h2>
<p>Muse-UI基于 Vue 2.0 优雅的 Material Design UI 组件库。Muse UI
拥有40多个UI 组件，用于适应不同业务环境。Muse UI
仅需少量代码即可完成主题样式替换。Muse UI 可用于开发的复杂单页应用
Muse-UI官网：https://muse-ui.org/#/zh-CN</p>
<h2 id="n3-components-ui组件库">11、N3-components UI组件库</h2>
<p>N3组件库是基于Vue.js构建的，让前端工程师和全栈工程师能快速构建页面和应用。N3-components超过60个组件
组件列表、自定义样式、支持多种模化范式（UMD）、使用ES6进行开发。
N3官网：https://n3-components.github.io/N3-components/component.html</p>
<h2 id="mand-mobile">12、Mand Mobile</h2>
<p>Mand
Mobile是面向金融场景的Vue移动端UI组件库，丰富、灵活、实用，快速搭建优质的金融类产品，让复杂的金融场景变简单。Mand
Mobile含有丰富的组件30+的基础组件，覆盖金融场景，极高的易用性组件均有详细说明文档、案例演示，汲取最前沿技术，组件化轻量化实现，兼顾稳定和品质，努力实现金融场景的全覆盖。
Mand Mobile官网：https://didi.github.io/mand-mobile/#/zh-CN/home</p>
<p>下面是1.x的文档和演示地址：（文档地址已经迁移了）</p>
<p>https://mand-mobile.github.io/1x-doc/
https://mand-mobile.github.io/2x-doc/</p>
<p><strong>之前的地址打不开了</strong></p>
<h2 id="we-vue-ui组件库">13、we-vue UI组件库</h2>
<p>we-vue 是一套基于 Vue.js 的移动关组件库，结合 weui.css
样式库，封装了一系列组件，非常适于微信公众号等移动端开发。we-vue 包含35+
个组件，单元测试覆盖率超 98%，支持
babel-plugin-import，完善的在线文档，详细的在线示例。
we-vue官网：https://wevue.org/</p>
<h2 id="veui-ui组件库">14、veui UI组件库</h2>
<p>veui是一个由百度EFE
team开发的Vue企业级UI组件库。目前文档还没有，只有demo。
GitHub上说是正在进行的一项工作。那我们就耐心等待吧。
veui官网：https://ecomfe.github.io/veui/components/#/</p>
<h2 id="semantic-ui-vue-ui组件库">15、Semantic-UI-Vue UI组件库</h2>
<p>Semantic-UI-Vue是基于 Vue.js对Semantic-UI 框架的实现。
Semantic作为一款开发框架，帮助开发者使用对人类友好的HTML语言构建优雅的响应式布局。Semantic-UI-Vue提供了一个类似于
Semantic-UI 的 API 以及一组可定制的主题。
Semantic-UI-Vue官网：https://semantic-ui-vue.github.io/#/
在选择框架的时候一定要根据实际Web开发情况和团队的熟悉程度来选择。一个好的UI组件库对一个Web项目来说很重要</p>
<h2 id="vue.js-material-component-framework-vuetify.js">16.Vue.js
Material Component Framework — Vuetify.js</h2>
<p><a
href="https://vuetifyjs.com/zh-Hans"><em>https://vuetifyjs.com/zh-Hans</em></a></p>
<p>Vuetify完全根据Material
Design规范开发。每个组件都是手工制作的，为您的下一个伟大的应用程序带来最好的UI工具。开发并没有停留在Google规范中的核心组件上。通过社区成员和赞助商的支持，更多的组件将被设计并提供给大家享受。</p>
<p>这个主要是国外比较流行的vue
ui组件，各种功能都有，有中文翻译的，但有些还是英文的，翻译得不是很好</p>
<p>PS：国内的UI组件大部分都只有一部分的，常用的头部导航，底部导航，listview，grid表格很多都是没有的。</p>
<h2 id="致谢">致谢</h2>
<p>本文摘至：<a
href="https://www.cnblogs.com/zdz8207/p/vue-ui-framework.html">16款优秀的Vue
UI组件库推荐</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Vue</category>
        <category>VueBasic</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3 如何在 setup 中调用异步方法</title>
    <url>/posts/2023/2KBPKH9.html</url>
    <content><![CDATA[<figure>
<img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/async-await.png"
alt="async-await" />
<figcaption aria-hidden="true">async-await</figcaption>
</figure>
<p>到目前为止，vue3 中的 <code>setup</code>
本身不能是异步函数，因此我们如果需要使用 <code>async</code>
函数，要将异步操作包装起来。可以通过以下方式实现：</p>
<span id="more"></span>
<h2 id="方法一使用-suspense">方法一：使用 suspense</h2>
<p>使用suspense 包裹你的组件，然后使用
<code>async setup()</code>。这种方式目前为实验性功能，不稳定。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Suspense&gt;</span><br><span class="line">  &lt;!-- 具有深层异步依赖的组件 --&gt;</span><br><span class="line">  &lt;Dashboard /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 在 #fallback 插槽中显示 “正在加载中” --&gt;</span><br><span class="line">  &lt;template #fallback&gt;</span><br><span class="line">    Loading...</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/Suspense&gt;</span><br><span class="line"></span><br><span class="line"># 若使用 script setup 语法时，可以直接在里面使用 await 等待异步返回</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  async setup() &#123;</span><br><span class="line">    // 在 `setup` 内部使用 `await` 需要非常小心</span><br><span class="line">    // 因为大多数组合式 API 函数只会在</span><br><span class="line">    // 第一个 `await` 之前工作</span><br><span class="line">    const res = await fetch(...)</span><br><span class="line">    const posts = await res.json()</span><br><span class="line">    return &#123;</span><br><span class="line">      posts</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="方法二使用生命周期钩子">方法二：使用生命周期钩子</h2>
<p>可以在生命周期钩子中调用异步方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const users = ref([]);</span><br><span class="line">    onBeforeMount(async () =&gt; &#123;</span><br><span class="line">      const res = await axios.get(&quot;https://jsonplaceholder.typicode.com/users&quot;);</span><br><span class="line">      users.value = res.data;</span><br><span class="line">      console.log(res);</span><br><span class="line">    &#125;);</span><br><span class="line">    return &#123;</span><br><span class="line">      users,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2
id="方法三将调用包裹在异步函数中">方法三：将调用包裹在异步函数中</h2>
<p>该方法与 方法二 原理相同：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const message = ref(&#x27;&#x27;);</span><br><span class="line"></span><br><span class="line">    async function fetchData() &#123;</span><br><span class="line">      const response = await fetch(&#x27;/api/data&#x27;);</span><br><span class="line">      const data = await response.json();</span><br><span class="line">      message.value = data.message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fetchData();</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      message,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p>本文参考了以下文章，在此报以诚挚谢意！</p>
<ol type="1">
<li><p><a href="https://www.cnblogs.com/shiazhen/p/14986454.html">vue3.0
中 如何在setup中使用async await</a></p></li>
<li><p><a
href="https://cn.vuejs.org/guide/built-ins/suspense.html#combining-with-other-components">Suspense
| Vue.js (vuejs.org)</a></p></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Vue</category>
        <category>Vue3.x</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue3.x</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>LearnVue 介绍</title>
    <url>/posts/2020/3W94T82.html</url>
    <content><![CDATA[<p>计划系统的对 Vue.js 的源代码进行深入学习。以 <a
href="https://github.com/answershuto/learnVue">learnVue</a>
入门，因为它当前的 star 数已经破 9k了, 肯定是干货满满的。</p>
<p>本文记录了在学习过程中的一些个人见解，同时，对于以前未涉及的知识点作一个总结和记录，以便今后回顾，如果也有小白恰好看到了这篇文章，希望也能帮到你，节省一些查找资料的时间。</p>
<p>当然，我所理解的可能会存在偏差，欢迎提留言指出，共同学习，共同进步。</p>
<p>最后，再次感谢 <a
href="https://github.com/answershuto">answershuto</a> 的 <a
href="https://github.com/answershuto/learnVue">learnVue</a>。</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Vue</category>
        <category>VueBasic</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>LearnVue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3 语法摘要</title>
    <url>/posts/2023/3CG1P9K.html</url>
    <content><![CDATA[<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/directive.png" alt="directive" style="max-width:min(100%,300px)" /></p>
<p>本文将 Vue3 中的组合式语法精简为快速笔记，方便在使用中总览 Vue
特性，灵活应用。</p>
<blockquote>
<p>该文不会介绍具体用法，建议先通读一遍 <a
href="https://cn.vuejs.org/guide/essentials/template-syntax.html#attribute-bindings">官方帮助文档</a>，记得风格偏好中选择自己喜欢的网络</p>
<p>如果某些概念读不懂，可以先去看官方文档</p>
</blockquote>
<span id="more"></span>
<h2 id="简写扫盲">简写扫盲</h2>
<table>
<thead>
<tr class="header">
<th>简写</th>
<th>全称</th>
<th>中文</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>SFC</td>
<td>Single File Component</td>
<td>单文件组件</td>
</tr>
<tr class="even">
<td>E2E</td>
<td>End to End</td>
<td>端到端的测试</td>
</tr>
</tbody>
</table>
<h2 id="开发工具建议"><a
href="https://cn.vuejs.org/guide/scaling-up/tooling.html">开发工具建议</a></h2>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>类别</th>
<th>技术名称</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>脚手架</td>
<td><a href="https://cn.vitejs.dev/">Vite</a></td>
</tr>
<tr class="even">
<td>IED</td>
<td><a href="https://code.visualstudio.com/">VSCode</a> + <a
href="https://marketplace.visualstudio.com/items?itemName=Vue.volar">Vue
语言特性 (Volar)</a></td>
</tr>
<tr class="odd">
<td></td>
<td>TypeScript</td>
</tr>
<tr class="even">
<td>Vite 项目测试</td>
<td><a href="https://vitest.dev/">Vitest</a></td>
</tr>
<tr class="odd">
<td>E2E 测试</td>
<td><a href="https://www.cypress.io/">Cypress</a></td>
</tr>
<tr class="even">
<td><a
href="https://cn.vuejs.org/guide/scaling-up/tooling.html#linting">代码规范</a></td>
<td><a
href="https://github.com/vuejs/eslint-plugin-vue">eslint-plugin-vue</a></td>
</tr>
<tr class="odd">
<td>字符串内联模板语法高亮</td>
<td><a
href="https://marketplace.visualstudio.com/items?itemName=Tobermory.es6-string-html">es6-string-html</a></td>
</tr>
</tbody>
</table>
<h2 id="基础">基础</h2>
<h3 id="模板">模板</h3>
<h4 id="模板语法">模板语法</h4>
<p>可以不采用模块，而是 <a
href="https://cn.vuejs.org/guide/extras/render-function.html">直接手写渲染函数</a>。</p>
<table>
<colgroup>
<col style="width: 25%" />
<col style="width: 74%" />
</colgroup>
<thead>
<tr class="header">
<th>类别</th>
<th>概要</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>文本插值</td>
<td>采用“Mustache”语法 (即双大括号)：<span>Message:
</span></td>
</tr>
<tr class="even">
<td>使用原始 HTML</td>
<td><a
href="https://cn.vuejs.org/api/built-in-directives.html#v-html"><code>v-html</code>
指令</a>：<span v-html="rawHtml"></td>
</tr>
<tr class="odd">
<td>Attribute 绑定</td>
<td><a
href="https://cn.vuejs.org/api/built-in-directives.html#v-bind"><code>v-bind</code>
指令</a>：<code>v-bind:id=</code> 或 <code>:id=</code></td>
</tr>
<tr class="even">
<td>布尔型 Attribute 绑定</td>
<td>不赋值时，为真
<code>&lt;button disabled&gt;Button&lt;/button&gt;</code></td>
</tr>
<tr class="odd">
<td>多个值动态绑定</td>
<td><code>&lt;div v-bind="objectOfAttrs"&gt;&lt;/div&gt;</code></td>
</tr>
<tr class="even">
<td>表达式</td>
<td>用在 双大括号 中或 Vue
指令中，可以使用有限的全局对象，例<code>Math</code> 和
<code>Date</code></td>
</tr>
<tr class="odd">
<td>指令参数</td>
<td>在指定后添加 <code>:</code> 作为参数，<a v-bind:href="url"/></td>
</tr>
<tr class="even">
<td>指令动态参数</td>
<td>&lt;a v-bind:[attributeName]="url" /&gt;，attributeName
可以是表达式或计算属性</td>
</tr>
</tbody>
</table>
<h4 id="ref-模板引用">ref 模板引用</h4>
<p>但在某些情况下，我们使用元素的 ref 属性来直接访问底层 DOM 元素。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input ref=&quot;input&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>声明一个同名的 ref 来访问 ref 指定的 DOM</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个 ref 来存放该元素的引用</span></span><br><span class="line"><span class="comment">// 必须和模板里的 ref 同名</span></span><br><span class="line"><span class="comment">// input 在 DOM 初次渲染和卸载后，会是 null</span></span><br><span class="line"><span class="keyword">const</span> input = <span class="title function_">ref</span>(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  input.<span class="property">value</span>.<span class="title function_">focus</span>()</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;input&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果不使用 <code>&lt;script setup&gt;</code>，需确保从
<code>setup()</code> 返回 ref：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> input = <span class="title function_">ref</span>(<span class="literal">null</span>)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      input</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="函数模板引用">函数模板引用</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input :ref=&quot;(el) =&gt; &#123; /* 将 el 赋值给一个数据属性或 ref 变量 */ &#125;&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>每次组件更新时，绑定的元素被卸载时都会调用函数</p>
<h4 id="组件-ref-限制">组件 ref 限制</h4>
<p>使用了 <code>&lt;script setup&gt;</code>
的组件是<strong>默认私有</strong>的，可以通过 <code>defineExpose</code>
宏显式向外暴露访问内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const a = 1</span><br><span class="line">const b = ref(2)</span><br><span class="line"></span><br><span class="line">// 像 defineExpose 这样的编译器宏不需要导入</span><br><span class="line">defineExpose(&#123;</span><br><span class="line">  a,</span><br><span class="line">  b</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="指令">指令</h3>
<p>指令是带有 <code>v-</code> 前缀的特殊 attribute。</p>
<h4 id="指令定义">指令定义</h4>
<p><img data-src="https://cdn.jsdelivr.net/gh/GalensGan/objects-storage/images/directive.png" alt="directive" style="max-width:min(100%,300px)" /></p>
<h4 id="参数-arguments">参数 Arguments</h4>
<p>某些指令会需要一个“参数”，在指令名后通过一个冒号隔开做标识。</p>
<h4 id="动态参数">动态参数</h4>
<p>在指令参数上也可以使用一个 JavaScript 表达式。</p>
<p><strong>限制：</strong></p>
<p>动态参数中表达式的值应当是一个字符串，或者是
<code>null</code>。特殊值 <code>null</code> 意为显式移除该绑定。</p>
<p>动态参数表达式不能正在空格和引号，它们在 HTML attribute
名称中都是不合法的。可以使用计算属性来代替表达式。</p>
<h4 id="内置指令">内置指令</h4>
<p><a
href="https://cn.vuejs.org/api/built-in-directives.html#v-text">点击跳转-&gt;完整文档</a></p>
<table>
<colgroup>
<col style="width: 12%" />
<col style="width: 3%" />
<col style="width: 37%" />
<col style="width: 46%" />
</colgroup>
<thead>
<tr class="header">
<th>名称</th>
<th>缩写</th>
<th>期望值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>v-text</td>
<td></td>
<td>string</td>
<td>等同于 <code>&#123;&#123;content&#125;&#125;</code> 语法</td>
</tr>
<tr class="even">
<td>v-html</td>
<td></td>
<td>string</td>
<td>更新元素的 <a
href="https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML">innerHTML</a>，<code>scoped</code>
样式将不会作用于 <code>v-html</code> 里的内容</td>
</tr>
<tr class="odd">
<td>v-show</td>
<td></td>
<td>any</td>
<td>通过设置内联样式的 <code>display</code> CSS 属性来工作</td>
</tr>
<tr class="even">
<td>v-if</td>
<td></td>
<td>any</td>
<td>条件性地渲染，触发时元素及其所包含的指令/组件都会销毁和重构</td>
</tr>
<tr class="odd">
<td>v-else/v-else-if</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>v-for</td>
<td></td>
<td>Array | Object | number | string | Iterable</td>
<td><code>&lt;div v-for="(item, index) in items"&gt;&lt;/div&gt;</code><br/><code>&lt;div v-for="(value, key) in object"&gt;&lt;/div&gt;</code><br/><code>&lt;div v-for="(value, name, index) in object"&gt;&lt;/div&gt;</code></td>
</tr>
<tr class="odd">
<td>v-on</td>
<td>@</td>
<td>Function | Inline Statement | Object (不带参数)</td>
<td>给元素绑定事件监听器。</td>
</tr>
<tr class="even">
<td>v-bind</td>
<td>:</td>
<td>any (带参数) | Object (不带参数)</td>
<td>动态的绑定一个或多个 attribute，也可以是组件的 prop</td>
</tr>
<tr class="odd">
<td>v-model</td>
<td></td>
<td></td>
<td>在表单输入元素或组件上创建双向绑定</td>
</tr>
<tr class="even">
<td>v-slot</td>
<td>#</td>
<td></td>
<td>用于声明具名插槽或是期望接收 props 的作用域插槽</td>
</tr>
<tr class="odd">
<td>v-pre</td>
<td></td>
<td></td>
<td>跳过该元素及其所有子元素的编译。最常见的用例就是显示原始双大括号标签及内容。</td>
</tr>
<tr class="even">
<td>v-once</td>
<td></td>
<td></td>
<td>仅渲染元素和组件一次，并跳过之后的更新。</td>
</tr>
<tr class="odd">
<td>v-memo</td>
<td></td>
<td></td>
<td>缓存一个模板的子树。</td>
</tr>
<tr class="even">
<td>v-cloak</td>
<td></td>
<td></td>
<td>用于隐藏尚未完成编译的 DOM 模板。</td>
</tr>
</tbody>
</table>
<h3 id="响应式基础">响应式基础</h3>
<h4 id="用-reactive-定义响应式变量">用 <code>reactive()</code>
定义响应式变量</h4>
<p>使用 <a
href="https://cn.vuejs.org/api/reactivity-core.html#reactive"><code>reactive()</code></a>
函数创建一个响应式<em>对象</em>或<em>数组</em>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br></pre></td></tr></table></figure>
<p>响应式对象是 <a
href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">JavaScript
Proxy</a></p>
<p><code>reactive()</code> 创建的是深层响应，可以使用 <a
href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive">shallowreactive</a>
来创建仅第一级响应。</p>
<h4 id="reactive缺点"><code>reactive()</code>缺点</h4>
<p><code>reactive()</code> API 有两条限制：</p>
<ol type="1">
<li>仅对对象类型有效（对象、数组和 <code>Map</code>、<code>Set</code>
这样的<a
href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects#使用键的集合对象">集合类型</a>），而对
<code>string</code>、<code>number</code> 和 <code>boolean</code> 这样的
<a
href="https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive">原始类型</a>
无效。</li>
<li>因为 Vue 的响应式系统是通过属性访问进行追踪的，使用时必须使用
<code>响应式对象.属性</code>
的方式访问和赋值，如果赋值给其它变量，则不会传递响应式效果</li>
</ol>
<h4 id="响应式代理">响应式代理</h4>
<p><strong>开发中建议仅使用声明对象的代理版本。</strong></p>
<p>对同一个原始对象调用 <code>reactive()</code>
会总是返回同样的代理对象，而对一个已存在的代理对象调用
<code>reactive()</code> 会返回其本身。</p>
<p>响应式对象内的嵌套对象依然是代理。</p>
<h4 id="用-ref-定义响应式变量">用 <code>ref()</code> 定义响应式变量</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p><a
href="https://cn.vuejs.org/api/reactivity-core.html#ref"><code>ref()</code></a>
方法来允许创建任何值类型的响应式 <strong>ref</strong>。</p>
<p><code>ref()</code> 将传入参数的值包装为一个带 <code>.value</code>
属性的 ref 对象，通过 <code>.value</code> 来访问。</p>
<p>当值为对象类型时，会用 <code>reactive()</code> 自动转换它的
<code>.value</code>。</p>
<p>当 ref
在模板中作为顶层属性被访问时，它们会被自动“解包”，所以不需要使用
<code>.value</code>。</p>
<p>当一个 ref
被嵌套在一个响应式对象中，作为属性被访问或更改时，它会自动解包。</p>
<p>当 ref 作为响应式数组或像 <code>Map</code>
这种原生集合类型的元素被访问时，不会进行解包。</p>
<h4 id="暴露响应式状态">暴露响应式状态</h4>
<p>要在组件模板中使用响应式状态，需要在 <code>setup()</code>
函数中定义并返回。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// `setup` 是一个专门用于组合式 API 的特殊钩子函数</span></span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暴露 state 到模板</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      state</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="script-setup"><code>&lt;script setup&gt;</code></h4>
<p>使用 <code>&lt;script setup&gt;</code> 来简化手动暴露状态和方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">  state.<span class="property">count</span>++</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; state.count &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>顶层的导入和变量声明可在同一组件的模板中直接使用，相当于自动暴露给模板了。</p>
<h4 id="dom-更新时机">DOM 更新时机</h4>
<p>无论你进行了多少次状态更改，每个组件都只更新一次。</p>
<p>若要等待一个状态改变后的 DOM 更新完成，你可以使用 <a
href="https://cn.vuejs.org/api/general.html#nexttick">nextTick()</a>
这个全局 API。</p>
<h3 id="计算属性">计算属性</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br></pre></td></tr></table></figure>
<p>返回值会自动打包成一个 <strong>ref</strong></p>
<p>可以通过 <code>get()</code> 和 <code>set(newValue)</code>
控制计算属性的读写</p>
<h3 id="class-绑定">class 绑定</h3>
<p><code>class</code> 与 <code>style</code> 在使用 <code>v-bind</code>
时，除字符串外，表达式的值也可以是对象或数组。</p>
<p>对象和数组可以是内联的，也可以是独立的，还可以是 computed 类型</p>
<h4 id="绑定对象">绑定对象</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">const isActive = ref(true)</span><br><span class="line">const error = ref(null)</span><br><span class="line"></span><br><span class="line">const classObject = computed(() =&gt; (&#123;</span><br><span class="line">  active: isActive.value &amp;&amp; !error.value,</span><br><span class="line">  &#x27;text-danger&#x27;: error.value &amp;&amp; error.value.type === &#x27;fatal&#x27;</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; className: isActive &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="绑定数组">绑定数组</h4>
<p><strong>字符串数组形式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const activeClassName = ref(&#x27;active&#x27;)</span><br><span class="line">const errorClassName = ref(&#x27;text-danger&#x27;)</span><br><span class="line"></span><br><span class="line">&lt;div :class=&quot;[activeClassName, errorClassName]&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p><strong>三元表达式形式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div :class=&quot;[isActive ? activeClass : &#x27;&#x27;, errorClass]&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p><strong>对象数组形式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div :class=&quot;[&#123; active: isActive &#125;, errorClass]&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h4 id="组件的-class-规则">组件的 class 规则</h4>
<p>只有一个根元素的组件，组件上绑定的 class 自动与根元素合并</p>
<p>有多个根元素时，通过 <code>$attrs</code> 来指定绑定</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- MyComponent 模板使用 $attrs 时 --&gt;</span><br><span class="line">&lt;p :class=&quot;$attrs.class&quot;&gt;Hi!&lt;/p&gt;</span><br><span class="line">&lt;span&gt;This is a child component&lt;/span&gt;</span><br></pre></td></tr></table></figure>
<h3 id="style-绑定">style 绑定</h3>
<h4 id="绑定对象-1">绑定对象</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div :style=&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h4 id="绑定数组-1">绑定数组</h4>
<p>绑定一个包含多个样式对象的数组，对象会被合并。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div :style=&quot;[baseStyles, overridingStyles]&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h4 id="自动前缀">自动前缀</h4>
<p>当在 <code>:style</code> 中使用了需要<a
href="https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix">浏览器特殊前缀</a>的
CSS 属性时，Vue 会自动为他们加上相应的前缀</p>
<h4 id="样式多值">样式多值</h4>
<p>数组仅会渲染浏览器支持的最后一个值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div :style=&quot;&#123; display: [&#x27;-webkit-box&#x27;, &#x27;-ms-flexbox&#x27;, &#x27;flex&#x27;] &#125;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h3 id="v-if-条件渲染">v-if 条件渲染</h3>
<p><code>v-if</code>、<code>v-else-if</code>、<code>v-else</code>、<code>v-show</code></p>
<p><code>v-if</code> 有更高的切换开销，而 <code>v-show</code>
有更高的初始渲染开销。</p>
<p><code>v-if</code> 的优先级高于 <code>v-for</code>，<code>v-if</code>
的条件将无法访问到 <code>v-for</code> 作用域内定义的变量别名</p>
<p>同时使用 <code>v-if</code> 和 <code>v-for</code>
是<strong>不推荐的</strong>，可以通过包装一层 template 来解决</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template v-for=&quot;todo in todos&quot;&gt;</span><br><span class="line">  &lt;li v-if=&quot;!todo.isComplete&quot;&gt;</span><br><span class="line">    &#123;&#123; todo.name &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<h3 id="v-for-列表渲染">v-for 列表渲染</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;(value, key, index) in myObject&quot;&gt;</span><br><span class="line">  &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure>
<p><code>v-for</code> 可以直接接受一个整数值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span v-for=&quot;n in 10&quot;&gt;&#123;&#123; n &#125;&#125;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">// 此处 n 的初值是从 1 开始</span><br></pre></td></tr></table></figure>
<p>可以在任何时候为 <code>v-for</code> 提供一个 key，提高渲染效率。</p>
<p>数组更新、替换后，不会重新渲染整个列表，而是最大化重用。</p>
<h3 id="事件处理">事件处理</h3>
<p>使用 <code>v-on</code> 指令 (简写为 <code>@</code>) 来监听 DOM
事件，并在事件触发时执行对应的
JavaScript。用法：<code>v-on:click="methodName"</code> 或
<code>@click="handler"</code>。</p>
<p><code>$event</code>
变量代表原生事件，可以通过内联事件传递给事件处理函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@click=&quot;handler(message,$event)&quot;</span><br></pre></td></tr></table></figure>
<h4 id="事件修饰符">事件修饰符</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 修饰语可以使用链式书写 --&gt;</span><br><span class="line">&lt;a @click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<table>
<colgroup>
<col style="width: 5%" />
<col style="width: 16%" />
<col style="width: 77%" />
</colgroup>
<thead>
<tr class="header">
<th>序号</th>
<th>修饰符</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td><code>.stop</code></td>
<td>单击事件将停止传递</td>
</tr>
<tr class="even">
<td>2</td>
<td><code>.prevent</code></td>
<td>如果此事件没有被显式处理，阻止事件的默认行为。<br />比如 submit
的提交后会刷新界面的行为就该事件的默认行为</td>
</tr>
<tr class="odd">
<td>3</td>
<td><code>.self</code></td>
<td>仅当 event.target 是元素本身时才会触发事件处理器</td>
</tr>
<tr class="even">
<td>4</td>
<td><code>.capture</code></td>
<td>在事件在捕获阶段到达该元素时触发</td>
</tr>
<tr class="odd">
<td>5</td>
<td><code>.once</code></td>
<td>仅执行一次</td>
</tr>
<tr class="even">
<td>6</td>
<td><code>.passive</code></td>
<td>事件的默认行为立即执行</td>
</tr>
<tr class="odd">
<td>7</td>
<td><code>.&#123;keyAlias&#125;</code></td>
<td>只在某些按键下触发处理函数。</td>
</tr>
</tbody>
</table>
<blockquote>
<p>使用修饰符时需要注意调用顺序，因为相关代码是以相同的顺序生成的。</p>
<p>因此使用 <code>@click.prevent.self</code>
会阻止<strong>元素及其子元素的所有点击事件的默认行为</strong>，</p>
<p>而 <code>@click.self.prevent</code>
则只会阻止对元素本身的点击事件的默认行为。</p>
</blockquote>
<h4 id="按键修饰符">按键修饰符</h4>
<p>用于监听键盘事件。使用 <a
href="https://developer.mozilla.org/zh-CN/docs/Web/API/KeyboardEvent/key/Key_Values"><code>KeyboardEvent.key</code></a>
暴露的按键名称作为修饰符，但需要转为 kebab-case 形式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input @keyup.page-down=&quot;onPageDown&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p><strong>按键别名：</strong></p>
<p><code>.enter</code>、<code>.tab</code>、<code>.delete</code>
(捕获“Delete”和“Backspace”两个按键)、<code>.esc</code>、
<code>.space</code>、<code>.up</code>、 <code>.down</code>、
<code>.left</code>、 <code>.right</code></p>
<p><strong>系统按键：</strong></p>
<p><code>.ctrl</code>、 <code>.alt</code>、 <code>.shift</code>、
<code>.meta</code></p>
<p><strong>鼠标按键修饰符：</strong></p>
<p><code>.left</code>、<code>.right</code>、<code>.middle</code></p>
<p><strong><code>.exact</code> 修饰符：</strong></p>
<p>仅响应确定组合的事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 当按下 Ctrl 时，即使同时按下 Alt 或 Shift 也会触发 --&gt;</span><br><span class="line">&lt;button @click.ctrl=&quot;onClick&quot;&gt;A&lt;/button&gt;</span><br><span class="line">&lt;!-- 仅当按下 Ctrl 且未按任何其他键时才会触发 --&gt;</span><br><span class="line">&lt;button @click.ctrl.exact=&quot;onCtrlClick&quot;&gt;A&lt;/button&gt;</span><br><span class="line">&lt;!-- 仅当没有按下任何系统按键时触发 --&gt;</span><br><span class="line">&lt;button @click.exact=&quot;onClick&quot;&gt;A&lt;/button&gt;</span><br></pre></td></tr></table></figure>
<h3 id="v-model-输入绑定">v-model 输入绑定</h3>
<p>v-model 将 value 绑定到元素上，并监听 value
的变化，达到数据绑定的效果。</p>
<ul>
<li>文本类型的 <code>&lt;input&gt;</code> 和
<code>&lt;textarea&gt;</code> 元素会绑定 <code>value</code> property
并侦听 <code>input</code> 事件；</li>
<li><code>&lt;input type="checkbox"&gt;</code> 和
<code>&lt;input type="radio"&gt;</code> 会绑定 <code>checked</code>
property 并侦听 <code>change</code> 事件；</li>
<li><code>&lt;select&gt;</code> 会绑定 <code>value</code> property
并侦听 <code>change</code> 事件。</li>
</ul>
<p><code>v-model</code> 会忽略任何表单元素上初始的
<code>value</code>、<code>checked</code> 或 <code>selected</code>
attribute。</p>
<h4 id="修饰符">修饰符</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 在 &quot;change&quot; 事件后同步更新而不是 &quot;input&quot; --&gt;</span><br><span class="line">&lt;input v-model.lazy=&quot;msg&quot; /&gt;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr class="header">
<th>修饰符</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>.lazy</code></td>
<td>将数据修改从 input 事件修改到 change 事件后触发</td>
</tr>
<tr class="even">
<td><code>.number</code></td>
<td>用户输入自动转换为数字</td>
</tr>
<tr class="odd">
<td><code>.trim</code></td>
<td>自动去除用户输入内容中两端的空格</td>
</tr>
</tbody>
</table>
<h3 id="生命周期">生命周期</h3>
<p><img data-src="https://cn.vuejs.org/assets/lifecycle.16e4c08e.png" /></p>
<h3 id="监听器">监听器</h3>
<h4 id="watch">watch</h4>
<p><code>watch</code> 的第一个参数可以是不同形式的“数据源”：它可以是一个
ref (包括计算属性)、一个响应式对象、一个 getter
函数、或多个数据源组成的数组：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> y = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单个 ref</span></span><br><span class="line"><span class="title function_">watch</span>(x, <span class="function">(<span class="params">newX</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`x is <span class="subst">$&#123;newX&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// getter 函数</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> x.<span class="property">value</span> + y.<span class="property">value</span>,</span><br><span class="line">  <span class="function">(<span class="params">sum</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`sum of x + y is: <span class="subst">$&#123;sum&#125;</span>`</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">deep</span>: <span class="literal">false</span>, <span class="comment">// 默认 false, 表示非深层监听</span></span><br><span class="line">    <span class="attr">immediate</span>: fale, <span class="comment">// 默认 false, 表示创建监听时不立即执行</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个来源组成的数组</span></span><br><span class="line"><span class="title function_">watch</span>([x, <span class="function">() =&gt;</span> y.<span class="property">value</span>], <span class="function">(<span class="params">[newX, newY]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`x is <span class="subst">$&#123;newX&#125;</span> and y is <span class="subst">$&#123;newY&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>不能直接监听响应式对象的属性值，必须使用像上例中的 getter
函数形式。</p>
<p>watch 默认是深层监听器，如果只想监听某个属性，可以使用 getter
函数方式</p>
<h4 id="watcheffect">watchEffect</h4>
<p><code>watchEffect</code>
的回调会立即执行一次，它会自动追踪依赖，有点类似
<code>computed</code></p>
<blockquote>
<p><code>watchEffect</code>
仅会在其<strong>同步</strong>执行期间，才追踪依赖。在使用异步回调时，只有在第一个
<code>await</code> 正常工作前访问到的属性才会被追踪。</p>
</blockquote>
<h4 id="回调触发">回调触发</h4>
<p>默认情况下，用户创建的侦听器回调，都会在 Vue
组件更新<strong>之前</strong>被调用。在侦听器回调中访问的 DOM 是被 Vue
更新之前的状态。</p>
<p>使用 <code>flush: 'post'</code> 来设置监听回调在 DOM 更新后触发。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">watch</span>(source, callback, &#123;</span><br><span class="line">  <span class="attr">flush</span>: <span class="string">&#x27;post&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">watchEffect</span>(callback, &#123;</span><br><span class="line">  <span class="attr">flush</span>: <span class="string">&#x27;post&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="watchposteffect">watchPostEffect</h4>
<p>等效于：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">watchEffect</span>(callback, &#123;</span><br><span class="line">  <span class="attr">flush</span>: <span class="string">&#x27;post&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="停止侦听器">停止侦听器</h4>
<p>同步语句创建的侦听器，会自动停止，但是在异步中调用创建的监听器需要调用其返回值手动停止</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; watchEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 它会自动停止</span></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...这个则不会！</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> unwatch = <span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">  <span class="comment">// 手动停止</span></span><br><span class="line">  <span class="title function_">unwatch</span>()</span><br><span class="line">&#125;, <span class="number">100</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="组件">组件</h2>
<h3 id="组件基础">组件基础</h3>
<h4 id="组件定义">组件定义</h4>
<p><strong>script setup 形式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const count = ref(0)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;count++&quot;&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<p><strong>非 setup 形式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const count = ref(0)</span><br><span class="line">    return &#123; count &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;button @click=&quot;count++&quot;&gt;</span><br><span class="line">      You clicked me &#123;&#123; count &#125;&#125; times.</span><br><span class="line">    &lt;/button&gt;`</span><br><span class="line">  // 或者 `template: &#x27;#my-template-element&#x27;`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="组件使用">组件使用</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// 在 setup 中直接导入即可</span><br><span class="line">import ButtonCounter from &#x27;./ButtonCounter.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;Here is a child component!&lt;/h1&gt;</span><br><span class="line">  &lt;ButtonCounter /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<h4 id="传递-props">传递 props</h4>
<p><em>script setup</em> 使用 defineProps 定义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">defineProps([&#x27;title&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>非 <em>setup</em>，使用 <code>props</code> 定义，在
<code>setup(props,ctx)</code> 中读取值</p>
<h4 id="触发事件">触发事件</h4>
<p>通过 <a
href="https://cn.vuejs.org/api/sfc-script-setup.html#defineprops-defineemits"><code>defineEmits</code></a>
宏来声明需要抛出的事件。</p>
<p>在 <em>script setup</em> 中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const emit = defineEmits([&#x27;eventName&#x27;])</span><br><span class="line">emit(eventName,data)</span><br></pre></td></tr></table></figure>
<p>在 setup() 中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  emits: [&#x27;enlarge-text&#x27;],</span><br><span class="line">  setup(props, ctx) &#123;</span><br><span class="line">    ctx.emit(&#x27;enlarge-text&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="插槽">插槽</h4>
<p>使用 <code>&lt;slot /&gt;</code> 来点位</p>
<h4 id="动态组件">动态组件</h4>
<p>使用 <code>is</code> 属性实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- currentTab 改变时组件也改变 --&gt;</span><br><span class="line">&lt;component :is=&quot;tabs[currentTab]&quot;&gt;&lt;/component&gt;</span><br></pre></td></tr></table></figure>
<p>被传给 <code>:is</code> 的值可以是以下几种：</p>
<ul>
<li>被注册的组件名</li>
<li>导入的组件对象</li>
</ul>
<p>当使用 <code>&lt;component :is="..."&gt;</code>
来在多个组件间作切换时，被切换掉的组件会被卸载。</p>
<p>通过 <a
href="https://cn.vuejs.org/guide/built-ins/keep-alive.html">KeepAlive</a>强制被切换掉的组件仍然保持“存活”的状态。</p>
<h4 id="大小写">大小写</h4>
<p>HTML
标签和属性名称是不分大小写的，所以浏览器会把任何大写的字符解释为小写。</p>
<p>Vue 对组件元素做了预处理，因此在使用时，建议组件使用 PascalCase
命名方式。</p>
<p>组件可以使用 <code>&lt;/&gt;</code> 作为关闭标签。</p>
<h3 id="注册组件">注册组件</h3>
<h4 id="全局注册">全局注册</h4>
<p>使用 Vue 实例的 <code>app.component()</code> 方法，注册全局组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line">app.<span class="title function_">component</span>(</span><br><span class="line">  <span class="comment">// 注册的名字</span></span><br><span class="line">  <span class="string">&#x27;MyComponent&#x27;</span>,</span><br><span class="line">  <span class="comment">// 组件的实现</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>单文件组件注册成全局组件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;MyComponent&#x27;</span>, <span class="title class_">MyComponent</span>)</span><br></pre></td></tr></table></figure>
<p><code>app.component()</code> 方法可以被链式调用。</p>
<h4 id="局部注册">局部注册</h4>
<p>在使用 <code>&lt;script setup&gt;</code>
的单文件组件中，导入的组件可以直接在模板中使用，无需注册。</p>
<p>如果没有使用 <code>&lt;script setup&gt;</code>，则需要使用
<code>components</code> 选项来显式注册。</p>
<h3 id="props">props</h3>
<h4 id="props-定义">props 定义</h4>
<p>在使用 <code>&lt;script setup&gt;</code> 的单文件组件中，props
可以使用 <code>defineProps()</code> 宏来声明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps([&#x27;foo&#x27;])</span><br><span class="line"></span><br><span class="line">console.log(props.foo)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>在没有使用 <code>&lt;script setup&gt;</code> 的组件中，prop 可以使用
<a
href="https://cn.vuejs.org/api/options-state.html#props"><code>props</code></a>
选项来声明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  props: [&#x27;foo&#x27;],</span><br><span class="line">  setup(props) &#123;</span><br><span class="line">    // setup() 接收 props 作为第一个参数</span><br><span class="line">    console.log(props.foo)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>defineProps 与 props 中传递的参数是一样，它们有以下几种形式：</p>
<ol type="1">
<li><p>字符串数组，<code>[propName1,propName2,...]</code>，每个字符串表示特性名称</p></li>
<li><p>对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 使用 &lt;script setup&gt;</span><br><span class="line">defineProps(&#123;</span><br><span class="line">  title: String,</span><br><span class="line">  likes: Number</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<p><code>&lt;script setup&gt;</code> 还可以使用类型标注来声明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">defineProps&lt;&#123;</span><br><span class="line">  title?: string</span><br><span class="line">  likes?: number</span><br><span class="line">&#125;&gt;()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h4 id="传递值给-props">传递值给 props</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 传入静态值 --&gt;</span><br><span class="line">&lt;BlogPost likes=&quot;basketball&quot; readonly/&gt;</span><br><span class="line">&lt;!-- 根据一个变量的值动态传入 --&gt;</span><br><span class="line">&lt;BlogPost :likes=&quot;post.likes&quot;/&gt;</span><br></pre></td></tr></table></figure>
<h4 id="使用一个对象绑定多个-prop">使用一个对象绑定多个 prop</h4>
<p>可以将一个对象的所有属性都当作 props 传入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const post = &#123;</span><br><span class="line">  id: 1,</span><br><span class="line">  title: &#x27;My Journey with Vue&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;BlogPost v-bind=&quot;post&quot; /&gt;</span><br><span class="line">// 等效于</span><br><span class="line">&lt;BlogPost :id=&quot;post.id&quot; :title=&quot;post.title&quot; /&gt;</span><br></pre></td></tr></table></figure>
<h4 id="单向绑定">单向绑定</h4>
<p>props
因父组件的更新而变化，自然地将新的状态向下流往子组件，而不会逆向传递。</p>
<p><strong>不应该</strong>在子组件中去更改一个 prop。</p>
<p>导致想要更改一个 prop 的需求通常来源于以下两种场景：</p>
<ol type="1">
<li><p><strong>prop
被用于传入初始值；而子组件想在之后将其作为一个局部数据属性</strong>。在这种情况下，最好是新定义一个局部数据属性，从
props 上获取初始值即可：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>([<span class="string">&#x27;initialCounter&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计数器只是将 props.initialCounter 作为初始值</span></span><br><span class="line"><span class="comment">// 像下面这样做就使 prop 和后续更新无关了</span></span><br><span class="line"><span class="keyword">const</span> counter = <span class="title function_">ref</span>(props.<span class="property">initialCounter</span>)</span><br></pre></td></tr></table></figure></li>
<li><p><strong>需要对传入的 prop
值做进一步的转换</strong>。在这种情况中，最好是基于该 prop
值定义一个计算属性：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>([<span class="string">&#x27;size&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该 prop 变更时计算属性也会自动更新</span></span><br><span class="line"><span class="keyword">const</span> normalizedSize = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> props.<span class="property">size</span>.<span class="title function_">trim</span>().<span class="title function_">toLowerCase</span>())</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="props-校验">props 校验</h4>
<p>校验形式如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="comment">// 基础类型检查</span></span><br><span class="line">  <span class="comment">// （给出 `null` 和 `undefined` 值则会跳过任何类型检查）</span></span><br><span class="line">  <span class="attr">propA</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="comment">// 多种可能的类型</span></span><br><span class="line">  <span class="attr">propB</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>],</span><br><span class="line">  <span class="comment">// 必传，且为 String 类型</span></span><br><span class="line">  <span class="attr">propC</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span> <span class="comment">// 默认为 false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Number 类型的默认值</span></span><br><span class="line">  <span class="attr">propD</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="number">100</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 对象类型的默认值</span></span><br><span class="line">  <span class="attr">propE</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Object</span>,</span><br><span class="line">    <span class="comment">// 对象或数组的默认值</span></span><br><span class="line">    <span class="comment">// 必须从一个工厂函数返回。</span></span><br><span class="line">    <span class="comment">// 该函数接收组件所接收到的原始 prop 作为参数。</span></span><br><span class="line">    <span class="title function_">default</span>(<span class="params">rawProps</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">&#x27;hello&#x27;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 自定义类型校验函数</span></span><br><span class="line">  <span class="attr">propF</span>: &#123;</span><br><span class="line">    <span class="title function_">validator</span>(<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="comment">// The value must match one of these strings</span></span><br><span class="line">      <span class="keyword">return</span> [<span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;warning&#x27;</span>, <span class="string">&#x27;danger&#x27;</span>].<span class="title function_">includes</span>(value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 函数类型的默认值</span></span><br><span class="line">  <span class="attr">propG</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Function</span>,</span><br><span class="line">    <span class="comment">// 不像对象或数组的默认，这不是一个</span></span><br><span class="line">    <span class="comment">// 工厂函数。这会是一个用来作为默认值的函数</span></span><br><span class="line">    <span class="title function_">default</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;Default function&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>校验中的 type 有：</p>
<ul>
<li><code>String</code></li>
<li><code>Number</code></li>
<li><code>Boolean</code></li>
<li><code>Array</code></li>
<li><code>Object</code></li>
<li><code>Date</code></li>
<li><code>Function</code></li>
<li><code>Symbol</code></li>
<li>也可以是自定义类型，vue 通过 instanceof 来匹配</li>
</ul>
<h3 id="事件">事件</h3>
<h4 id="声明">声明</h4>
<p><code>$emit</code> 只能在模板中使用。</p>
<p>在 <code>script setup</code> 中无法使用，可以通过
<code>defineEmits</code> 来获取 <code>emit</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;inFocus&#x27;</span>, <span class="string">&#x27;submit&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发</span></span><br><span class="line"><span class="title function_">emit</span>(<span class="string">&#x27;submit&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><code>defineEmits()</code> 宏必须直接放置在
<code>&lt;script setup&gt;</code> 的顶级作用域下。</p>
<p>非 <code>&lt;script setup&gt;</code>中，事件需要通过 <a
href="https://cn.vuejs.org/api/options-state.html#emits"><code>emits</code></a>
选项来定义，<code>emit</code> 函数也被暴露在 <code>setup()</code>
的上下文对象上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  emits: [&#x27;inFocus&#x27;, &#x27;submit&#x27;],</span><br><span class="line">  setup(props, ctx) &#123;</span><br><span class="line">    ctx.emit(&#x27;submit&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>事件定义支持对象语法，它允许对触发事件的参数进行验证：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>(&#123;</span><br><span class="line">  <span class="title function_">submit</span>(<span class="params">payload</span>) &#123;</span><br><span class="line">    <span class="comment">// 通过返回值为 `true` 还是为 `false` 来判断</span></span><br><span class="line">    <span class="comment">// 验证是否通过</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>也可以使用 TypeScript 的类型标注来验证：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">const</span> emit = defineEmits&lt;&#123;</span><br><span class="line">  (<span class="attr">e</span>: <span class="string">&#x27;change&#x27;</span>, <span class="attr">id</span>: number): <span class="keyword">void</span></span><br><span class="line">  (<span class="attr">e</span>: <span class="string">&#x27;update&#x27;</span>, <span class="attr">value</span>: string): <span class="keyword">void</span></span><br><span class="line">&#125;&gt;()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h4 id="触发">触发</h4>
<p>事件通过 <code>v-on</code>(简写为 <code>@</code>) 来进行监听。</p>
<p>在组件的模板表达式中，也可以直接使用 <code>$emit</code>
方法触发自定义事件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button @click=&quot;$emit(&#x27;someEvent&#x27;)&quot;&gt;click me&lt;/button&gt;</span><br></pre></td></tr></table></figure>
<p>组件触发的事件<strong>没有冒泡机制</strong></p>
<h4 id="参数">参数</h4>
<p>第一个参数为事件名，第二个参数为事件参数</p>
<p><code>emit(emitName,eventArgs)</code></p>
<h4 id="校验">校验</h4>
<p>在对象定义中，通过添加 <code>submit</code> 来进行验证</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>(&#123;</span><br><span class="line">  <span class="title function_">submit</span>(<span class="params">payload</span>) &#123;</span><br><span class="line">    <span class="comment">// 通过返回值为 `true` 还是为 `false` 来判断</span></span><br><span class="line">    <span class="comment">// 验证是否通过</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="组件-v-model">组件 v-model</h3>
<h4 id="v-model-本质"><code>v-model</code> 本质</h4>
<p><code>v-model</code> 通过属性绑定和事件监听实现的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchText&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--等效于：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:value</span>=<span class="string">&quot;searchText&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">input</span>=<span class="string">&quot;searchText = $event.target.value&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="v-model-实现方式">v-model 实现方式</h4>
<ol type="1">
<li>定义一个 props，名为 <code>modelValue</code></li>
<li>当 props 变化时，触发 <code>update:modelValue</code> 事件</li>
</ol>
<p>事件传递的参数即为 v-model 的新值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;CustomInput</span><br><span class="line">  :modelValue=&quot;searchText&quot;</span><br><span class="line">  @update:modelValue=&quot;newValue =&gt; searchText = newValue&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>
<p>还可以使用 computed 属性来实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- CustomInput.vue --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; computed &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const props = defineProps([&#x27;modelValue&#x27;])</span><br><span class="line">const emit = defineEmits([&#x27;update:modelValue&#x27;])</span><br><span class="line"></span><br><span class="line">const value = computed(&#123;</span><br><span class="line">  get() &#123;</span><br><span class="line">    return props.modelValue</span><br><span class="line">  &#125;,</span><br><span class="line">  set(value) &#123;</span><br><span class="line">    emit(&#x27;update:modelValue&#x27;, value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input v-model=&quot;value&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<h4 id="多个-v-model">多个 v-model</h4>
<p>默认情况下，<code>v-model</code> 在组件上都是使用
<code>modelValue</code> 作为 prop，并以 <code>update:modelValue</code>
作为对应的事件。</p>
<p>可以通过给 <code>v-model</code> 指定一个参数来更改
<code>v-model</code> 映射。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;UserName</span><br><span class="line">  v-model:first-name=&quot;first&quot;</span><br><span class="line">  v-model:last-name=&quot;last&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>
<h4 id="自定义修饰符">自定义修饰符</h4>
<p>自定义的修饰符通过 <code>props.modelModifiers</code>
可以访问到。在触发事件时，可以判断 <code>Modifiers</code>
中是否有修饰符，如果有，根据修饰符对数据进行处理后再触发事件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  modelValue: String,</span><br><span class="line">  modelModifiers: &#123; default: () =&gt; (&#123;&#125;) &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const emit = defineEmits([&#x27;update:modelValue&#x27;])</span><br><span class="line"></span><br><span class="line">function emitValue(e) &#123;</span><br><span class="line">  let value = e.target.value</span><br><span class="line">  if (props.modelModifiers.capitalize) &#123;</span><br><span class="line">    value = value.charAt(0).toUpperCase() + value.slice(1)</span><br><span class="line">  &#125;</span><br><span class="line">  emit(&#x27;update:modelValue&#x27;, value)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; :value=&quot;modelValue&quot; @input=&quot;emitValue&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<p>又有参数又有修饰符的 <code>v-model</code> 绑定，生成的 prop 名将是
<code>arg + "Modifiers"</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;MyComponent v-model:title.capitalize=&quot;myText&quot;&gt;</span><br><span class="line"></span><br><span class="line">// 访问</span><br><span class="line">console.log(props.titleModifiers) // &#123; capitalize: true &#125;</span><br></pre></td></tr></table></figure>
<h3 id="attributes-继承">Attributes 继承</h3>
<p>父组件向子组件传递 Attributes 时，若子组件没有在 <a
href="https://cn.vuejs.org/guide/components/props.html">props</a> 和 <a
href="https://cn.vuejs.org/guide/components/events.html#defining-custom-events">emits</a>
中声明，则会向下继承。</p>
<p>当一个组件以单个元素为根作渲染时，继承的 attribute
会自动被添加到根元素上。</p>
<p>继承的 <code>class</code> 和 <code>style</code>
会与子组件上的相同属性合并。</p>
<h4 id="访问继承">访问继承</h4>
<p>在 <code>&lt;script setup&gt;</code> 中使用 <code>useAttrs()</code>
API 来访问一个组件继承的所有 attribute</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useAttrs &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const attrs = useAttrs()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>在 <code>setup(props,ctx)</code> 函数中通过 <code>ctx.attrs</code>
来访问</p>
<p><code>attrs</code> 对象总是反映为最新的
attribute，但它并不是响应式的。</p>
<h4 id="禁用继承">禁用继承</h4>
<p>设置 <code>inheritAttrs: false</code> 来禁用自动继承。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// 使用普通的 &lt;script&gt; 来声明选项</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">inheritAttrs</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// ...setup 部分逻辑</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>继承的 Attributes 可以在模板中直接用 <code>$attrs</code> 访问到。</p>
<p>这个 <code>$attrs</code> 对象包含了除组件所声明的 <code>props</code>
和 <code>emits</code> 之外的所有其他 attribute，例如
<code>class</code>，<code>style</code>，<code>v-on</code>
监听器等等。</p>
<p>有几点需要注意：</p>
<ul>
<li>和 props 有所不同，继承的 attributes 在 JavaScript
中保留了它们原始的大小写，所以像 <code>foo-bar</code> 这样的一个
attribute 需要通过 <code>$attrs['foo-bar']</code> 来访问。</li>
<li>像 <code>@click</code> 这样的一个 <code>v-on</code>
事件监听器将在此对象下被暴露为一个函数
<code>$attrs.onClick</code>。</li>
</ul>
<h4 id="指定继承">指定继承</h4>
<p>可以在子组件中通过 v-bind 来将 attributes 绑定到其它组件上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;btn-wrapper&quot;&gt;</span><br><span class="line">  &lt;button class=&quot;btn&quot; v-bind=&quot;$attrs&quot;&gt;click me&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h4 id="多根节点的-attributes-继承">多根节点的 Attributes 继承</h4>
<p>需要手动指定继承，无法像单根节点一样，自动继承</p>
<h3 id="插槽-slots">插槽 Slots</h3>
<p><code>&lt;slot&gt;</code> 元素是一个<strong>插槽出口</strong> (slot
outlet)，标示了父元素提供的<strong>插槽内容</strong> (slot content)
将在哪里被渲染。</p>
<p><img data-src="https://cn.vuejs.org/assets/slots.dbdaf1e8.png" /></p>
<h4 id="渲染作用域">渲染作用域</h4>
<p>插槽内容可以访问到父组件的数据作用域，<strong>无法访问</strong>子组件的数据。</p>
<h4 id="默认内容">默认内容</h4>
<p>放置 <code>&lt;slot&gt;</code>
标签时，标签之间的内容作为默认内容。</p>
<h4 id="具名插槽">具名插槽</h4>
<p>带 <code>name</code> 属性的插槽叫具名插槽。没有提供 <code>name</code>
的 <code>&lt;slot&gt;</code> 出口会隐式地命名为“default”。</p>
<p>使用 <code>v-slot:slotName</code>(简写为 <code>#slotName</code>)
方式来指定所使用的插槽。</p>
<p>默认插槽不用指定。</p>
<p>当一个组件同时接收默认插槽和具名插槽时，所有位于顶级的非
<code>&lt;template&gt;</code>
节点都被隐式地视为默认插槽的内容。如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;BaseLayout&gt;</span><br><span class="line">  &lt;template #header&gt;</span><br><span class="line">    &lt;h1&gt;Here might be a page title&lt;/h1&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 隐式的默认插槽 --&gt;</span><br><span class="line">  &lt;p&gt;A paragraph for the main content.&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;And another one.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template #footer&gt;</span><br><span class="line">    &lt;p&gt;Here&#x27;s some contact info&lt;/p&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/BaseLayout&gt;</span><br></pre></td></tr></table></figure>
<h4 id="动态插槽">动态插槽</h4>
<p>通过指令的动态参数传递不同的名称实现动态插槽。</p>
<h4 id="插槽传递参数">插槽传递参数</h4>
<p>插槽的内容无法访问到子组件的状态，在定义插槽时，我们需要先将组件数组绑定到插槽上，使用时，再从插槽中获取。</p>
<p><img data-src="https://cn.vuejs.org/assets/scoped-slots.1c6d5876.svg" /></p>
<p><strong>数据绑定：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- &lt;MyComponent&gt; 的模板 --&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;slot :text=&quot;greetingMessage&quot; :count=&quot;1&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p><strong>参数接收：</strong></p>
<ul>
<li>默认插槽使用 <code>v-slot="slotProps"</code> 或者
<code>#default="slotProps"</code>来接收参数</li>
<li>具名插槽使用 <code>#slotName="slotProps"</code> 来接收参数</li>
</ul>
<h4 id="无渲染组件">无渲染组件</h4>
<p>一些组件可能只包括了逻辑而不需要自己渲染内容，视图输出通过作用域插槽全权交给了消费者组件。我们将这种类型的组件称为<strong>无渲染组件</strong>。</p>
<h3 id="依赖注入">依赖注入</h3>
<p>依赖注入用于多级父子组件传值，解决 props 传值链路长的问题。</p>
<p><strong>props 传值：</strong></p>
<p><img data-src="https://cn.vuejs.org/assets/prop-drilling.11201220.png" /></p>
<p><strong>依赖注入：</strong></p>
<p><img data-src="https://cn.vuejs.org/assets/provide-inject.3e0505e4.png" /></p>
<h4 id="provide-提供">Provide (提供)</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; provide &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">provide(/* 注入名 */ &#x27;message&#x27;, /* 值 */ &#x27;hello!&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>第一个参数被称为<strong>注入名</strong>，可以是一个字符串或是一个
<code>Symbol</code></p>
<p>第二个参数是提供的值，值可以是任意类型，包括响应式的状态</p>
<p>可以在应用层进行依赖注入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const app = createApp(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">app.provide(/* 注入名 */ &#x27;message&#x27;, /* 值 */ &#x27;hello!&#x27;)</span><br></pre></td></tr></table></figure>
<h4 id="inject-注入">Inject (注入)</h4>
<p>使用 <a
href="https://cn.vuejs.org/api/composition-api-dependency-injection.html#inject"><code>inject()</code></a>
函数注入上层组件提供的数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 第二个参数是默认值</span></span><br><span class="line">    <span class="keyword">const</span> value = <span class="title function_">inject</span>(<span class="string">&#x27;key&#x27;</span>, <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">ExpensiveClass</span>())</span><br><span class="line">    <span class="keyword">return</span> &#123; value &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="使用建议">使用建议</h4>
<p>当提供 /
注入响应式的数据时，<strong>建议尽可能将任何对响应式状态的变更都保持在供给方组件中</strong>。这样可以确保所提供状态的声明和变更操作都内聚在同一个组件内，使其更容易维护。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 在供给方组件内 --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; provide, ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const location = ref(&#x27;North Pole&#x27;)</span><br><span class="line"></span><br><span class="line">function updateLocation() &#123;</span><br><span class="line">  location.value = &#x27;South Pole&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">provide(&#x27;location&#x27;, &#123;</span><br><span class="line">  location,</span><br><span class="line">  updateLocation</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 在注入方组件 --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; inject &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const &#123; location, updateLocation &#125; = inject(&#x27;location&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;updateLocation&quot;&gt;&#123;&#123; location &#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<h4 id="只读数据">只读数据</h4>
<p>可以使用 <a
href="https://cn.vuejs.org/api/reactivity-core.html#readonly"><code>readonly()</code></a>
来包装提供的值使其不能被修改</p>
<h3 id="异步组件">异步组件</h3>
<h4 id="定义">定义</h4>
<p>使用 <a
href="https://cn.vuejs.org/api/general.html#defineasynccomponent"><code>defineAsyncComponent</code></a>
方法来实现按需从服务器加载相关组件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AsyncComp</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...从服务器获取组件</span></span><br><span class="line">    <span class="title function_">resolve</span>(<span class="comment">/* 获取到的组件 */</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ... 像使用其他一般组件一样使用 `AsyncComp`</span></span><br></pre></td></tr></table></figure>
<p><a
href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import">ES
模块动态导入</a>也会返回一个 Promise，所以多数情况下我们会将它和
<code>defineAsyncComponent</code> 搭配使用。类似 Vite 和 Webpack
这样的构建工具也支持此语法
(并且会将它们作为打包时的代码分割点)，因此我们也可以用它来导入 Vue
单文件组件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AsyncComp</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span></span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&#x27;./components/MyComponent.vue&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h4 id="加载与错误状态">加载与错误状态</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">AsyncComp</span> = <span class="title function_">defineAsyncComponent</span>(&#123;</span><br><span class="line">  <span class="comment">// 加载函数</span></span><br><span class="line">  <span class="attr">loader</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./Foo.vue&#x27;</span>),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加载异步组件时使用的组件</span></span><br><span class="line">  <span class="attr">loadingComponent</span>: <span class="title class_">LoadingComponent</span>,</span><br><span class="line">  <span class="comment">// 展示加载组件前的延迟时间，默认为 200ms</span></span><br><span class="line">  <span class="attr">delay</span>: <span class="number">200</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加载失败后展示的组件</span></span><br><span class="line">  <span class="attr">errorComponent</span>: <span class="title class_">ErrorComponent</span>,</span><br><span class="line">  <span class="comment">// 如果提供了一个 timeout 时间限制，并超时了</span></span><br><span class="line">  <span class="comment">// 也会显示这里配置的报错组件，默认值是：Infinity</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">3000</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="逻辑复用">逻辑复用</h2>
<h3 id="组合式函数">组合式函数</h3>
<p>“组合式函数”(Composables) 是一个利用 Vue 的组合式 API
来封装和复用<strong>有状态逻辑</strong>的函数。在开发中可以将功能细分成一个个组合式函数，最后组合成功能。</p>
<h3 id="约定和最佳实践">约定和最佳实践</h3>
<h4 id="命名">命名</h4>
<p>组合式函数约定用驼峰命名法命名，并以“use”作为开头。</p>
<h4 id="输入参数兼容-ref">输入参数兼容 ref</h4>
<p>使用 <code>unref</code> 来兼容输入参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; unref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useFeature</span>(<span class="params">maybeRef</span>) &#123;</span><br><span class="line">  <span class="comment">// 若 maybeRef 确实是一个 ref，它的 .value 会被返回</span></span><br><span class="line">  <span class="comment">// 否则，maybeRef 会被原样返回</span></span><br><span class="line">  <span class="keyword">const</span> value = <span class="title function_">unref</span>(maybeRef)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="返回值">返回值</h4>
<p>组合式函数应始终返回一个包含多个 ref
的普通的非响应式对象，这样该对象在组件中被解构为 ref
之后仍可以保持响应性。</p>
<p>从组合式函数返回一个响应式对象会导致在对象解构过程中丢失与组合式函数内状态的响应性连接。</p>
<p>如果更希望以对象属性的形式来使用组合式函数中返回的状态，可以将返回的对象用
<code>reactive()</code> 包装一次，这样其中的 ref
会被自动解包，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mouse = <span class="title function_">reactive</span>(<span class="title function_">useMouse</span>())</span><br><span class="line"><span class="comment">// mouse.x 链接到了原来的 x ref</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mouse.<span class="property">x</span>)</span><br></pre></td></tr></table></figure>
<h4 id="额外操作">额外操作</h4>
<p>如果你的应用用到了<a
href="https://cn.vuejs.org/guide/scaling-up/ssr.html">服务端渲染</a>
(SSR)，请确保在组件挂载后(<code>onMounted</code>)才调用的生命周期钩子中执行
DOM 相关的其它操作，并在 <code>onUnmounted()</code> 中释放资源。</p>
<h4 id="使用限制">使用限制</h4>
<p>组合式函数在 <code>&lt;script setup&gt;</code> 或
<code>setup()</code> 钩子中，应始终被<strong>同步地</strong>调用。</p>
<h4
id="通过抽取组合式函数改善代码结构">通过抽取组合式函数改善代码结构</h4>
<p>可以基于逻辑问题将组件代码拆分成更小的函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; useFeatureA &#125; <span class="keyword">from</span> <span class="string">&#x27;./featureA.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useFeatureB &#125; <span class="keyword">from</span> <span class="string">&#x27;./featureB.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useFeatureC &#125; <span class="keyword">from</span> <span class="string">&#x27;./featureC.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; foo, bar &#125; = <span class="title function_">useFeatureA</span>()</span><br><span class="line"><span class="keyword">const</span> &#123; baz &#125; = <span class="title function_">useFeatureB</span>(foo)</span><br><span class="line"><span class="keyword">const</span> &#123; qux &#125; = <span class="title function_">useFeatureC</span>(baz)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h4 id="在选项式-api-中使用组合式函数">在选项式 API
中使用组合式函数</h4>
<p>如果你正在使用选项式 API，组合式函数必须在 <code>setup()</code>
中调用。且其返回的绑定必须在 <code>setup()</code> 中返回，以便暴露给
<code>this</code> 及其模板</p>
<h3 id="自定义指令">自定义指令</h3>
<h4 id="定义与使用">定义与使用</h4>
<p>在 <code>&lt;script setup&gt;</code> 中，任何以 <code>v</code>
开头的驼峰式命名的变量都可以被用作一个自定义指令。例如<code>vFocus</code>
可以在模板中以 <code>v-focus</code> 的形式使用。</p>
<p>在没有使用 <code>&lt;script setup&gt;</code>
的情况下，自定义指令需要通过 <code>directives</code> 选项注册。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">directives</span>: &#123;</span><br><span class="line">    <span class="comment">// 在模板中启用 v-focus</span></span><br><span class="line">    <span class="attr">focus</span>: &#123;</span><br><span class="line">      <span class="comment">/* ... */</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="指令钩子">指令钩子</h4>
<p>一个指令的定义对象可以提供几种钩子函数 (都是可选的)：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myDirective = &#123;</span><br><span class="line">  <span class="comment">// 在绑定元素的 attribute 前</span></span><br><span class="line">  <span class="comment">// 或事件监听器应用前调用</span></span><br><span class="line">  <span class="title function_">created</span>(<span class="params">el, binding, vnode, prevVnode</span>) &#123;</span><br><span class="line">    <span class="comment">// 下面会介绍各个参数的细节</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 在元素被插入到 DOM 前调用</span></span><br><span class="line">  <span class="title function_">beforeMount</span>(<span class="params">el, binding, vnode, prevVnode</span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 在绑定元素的父组件</span></span><br><span class="line">  <span class="comment">// 及他自己的所有子节点都挂载完成后调用</span></span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params">el, binding, vnode, prevVnode</span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 绑定元素的父组件更新前调用</span></span><br><span class="line">  <span class="title function_">beforeUpdate</span>(<span class="params">el, binding, vnode, prevVnode</span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 在绑定元素的父组件</span></span><br><span class="line">  <span class="comment">// 及他自己的所有子节点都更新后调用</span></span><br><span class="line">  <span class="title function_">updated</span>(<span class="params">el, binding, vnode, prevVnode</span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 绑定元素的父组件卸载前调用</span></span><br><span class="line">  <span class="title function_">beforeUnmount</span>(<span class="params">el, binding, vnode, prevVnode</span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 绑定元素的父组件卸载后调用</span></span><br><span class="line">  <span class="title function_">unmounted</span>(<span class="params">el, binding, vnode, prevVnode</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="简化形式">简化形式</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">directive</span>(<span class="string">&#x27;color&#x27;</span>, <span class="function">(<span class="params">el, binding</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这会在 `mounted` 和 `updated` 时都调用</span></span><br><span class="line">  el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="在组件上使用">在组件上使用</h4>
<p>当在组件上使用自定义指令时，它会始终应用于组件的根节点。</p>
<p>指令不能通过 <code>v-bind="$attrs"</code>
来传递给一个不同的元素。</p>
<h3 id="插件">插件</h3>
<p>插件没有严格定义的使用范围，但是插件发挥作用的常见场景主要包括以下几种：</p>
<ol type="1">
<li>通过 <a
href="https://cn.vuejs.org/api/application.html#app-component"><code>app.component()</code></a>
和 <a
href="https://cn.vuejs.org/api/application.html#app-directive"><code>app.directive()</code></a>
注册一到多个全局组件或自定义指令。</li>
<li>通过 <a
href="https://cn.vuejs.org/api/application.html#app-provide"><code>app.provide()</code></a>
使一个资源<a
href="https://cn.vuejs.org/guide/components/provide-inject.html">可被注入</a>进整个应用。</li>
<li>向 <a
href="https://cn.vuejs.org/api/application.html#app-config-globalproperties"><code>app.config.globalProperties</code></a>
中添加一些全局实例属性或方法</li>
<li>一个可能上述三种都包含了的功能库 (例如 <a
href="https://github.com/vuejs/vue-router-next">vue-router</a>)。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="keyword">const</span> myPlugin = &#123;</span><br><span class="line">  <span class="title function_">install</span>(<span class="params">app, options</span>) &#123;</span><br><span class="line">    <span class="comment">// 配置此应用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line">app.<span class="title function_">use</span>(myPlugin, &#123;</span><br><span class="line">  <span class="comment">/* 可选的选项 */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="内置组件">内置组件</h2>
<h3 id="transition">Transition</h3>
<p>Vue 提供了两个内置组件来制作基于状态变化的过渡和动画：</p>
<ul>
<li><code>&lt;Transition&gt;</code> 会在一个元素或组件进入和离开 DOM
时应用动画。</li>
<li><code>&lt;TransitionGroup&gt;</code> 会在一个 <code>v-for</code>
列表中的元素或组件被插入，移动，或移除时应用动画。</li>
</ul>
<h2 id="应用规模化">应用规模化</h2>
<h2 id="最佳实践">最佳实践</h2>
<h2 id="typescript">TypeScript</h2>
<h2 id="参考">参考</h2>
<ol type="1">
<li><a href="https://cn.vuejs.org/guide/introduction.html">Vue 深度指南
(官方)</a></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Vue</category>
        <category>Vue3.x</category>
      </categories>
      <tags>
        <tag>NexT</tag>
        <tag>Vue</tag>
        <tag>galens</tag>
      </tags>
  </entry>
  <entry>
    <title>LearnVue 响应式原理</title>
    <url>/posts/2020/1P0TW1J.html</url>
    <content><![CDATA[<p>Vue.js的响应式原理依赖于 <a
href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty</a>，尤大大在
<a
href="https://cn.vuejs.org/v2/guide/reactivity.html#如何追踪变化">Vue.js文档</a>
中就已经提到过，这也是 Vue.js 不支持 IE8 以及更低版本浏览器的原因。Vue
通过设定对象属性的 setter/getter 方法来监听数据的变化，通过 getter
进行依赖收集，而每个 setter
方法就是一个观察者，在数据变更的时候通知订阅者更新视图。</p>
<span id="more"></span>
<h2
id="将数据data变成可观察observable的">将数据data变成可观察（observable）的</h2>
<h3 id="注解">注解</h3>
<ul>
<li><p><a
href="%5Bhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty(
obj, propName, descriptor )</a></p>
<p>在对象上定义一个新的属性，或者修改一个存在的属性，然后返回该对象</p>
<p>其中 descriptor 有以下参数</p>
<table>
<colgroup>
<col style="width: 14%" />
<col style="width: 74%" />
<col style="width: 11%" />
</colgroup>
<thead>
<tr class="header">
<th>描述符</th>
<th>作用</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>configurable</td>
<td>是否 可更改属性类型和可删除</td>
<td>false</td>
</tr>
<tr class="even">
<td>enumerable</td>
<td>是否 可枚举属性该属性。如果为 true,
在枚举属性的时候，会显示该属性</td>
<td>false</td>
</tr>
<tr class="odd">
<td>vlue</td>
<td>属性的值, 可以是任意的 js 值类型</td>
<td>undefined</td>
</tr>
<tr class="even">
<td>writable</td>
<td>是否 属性值是否可以通过赋值运算符进行修改</td>
<td>false</td>
</tr>
<tr class="odd">
<td>get</td>
<td>存取器</td>
<td>undefined</td>
</tr>
<tr class="even">
<td>set</td>
<td>存取器</td>
<td>undefined</td>
</tr>
</tbody>
</table></li>
<li><p><a
href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys">Object.keys()</a></p>
<p>返回对象所有的属性</p></li>
</ul>
<h3 id="疑问">疑问？</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Vue &#123;</span><br><span class="line">    constructor(options) &#123;</span><br><span class="line">        this._data = options.data;</span><br><span class="line">        observe(this._data, options.render)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果是 component ，它的 data 是一个函数，那它的 data
是怎么处理的呢？</p>
<h2 id="代理">代理</h2>
<p>我们可以在Vue的构造函数constructor中为data执行一个代理<a
href="https://github.com/vuejs/vue/blob/dev/src/core/instance/state.js#L33">proxy</a>。这样我们就把data上面的属性代理到了vm实例上。</p>
<ul>
<li><p><a
href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call">call()</a></p>
<p>使用给定的 this 值和单独提供的参数调用函数。</p>
<p>这样，在 _proxy 函数里面就可以调用 this 值了。</p></li>
</ul>
<h3 id="问题">问题？</h3>
<p>为什么不直接将 data 中的参数定义到 vm (vue 的实例) 上，而是要先定义到
vm._data, 然后再代理到 vm 呢？</p>
<p>我猜测是因为：</p>
<ul>
<li>如果直接定义到 this 实例上，那 data 就没有定义</li>
<li>而通过代理，data 传递引用给 vm._data, 在 _data上定义，就代表在 data
上也定义了，然后再代理到 vm 上，这样，可以通过 vm.propertyName
访问了</li>
</ul>
<h2 id="后记">后记</h2>
<p>本文是在学习 <a
href="https://github.com/answershuto/learnVue">LearnVue</a>
时的个人注解，如果需要参考，请先阅读 <a
href="https://github.com/answershuto/learnVue">LearnVue</a> 。</p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Vue</category>
        <category>VueBasic</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>LearnVue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue通信及组件之间传值</title>
    <url>/posts/2020/2H8Y4ZN.html</url>
    <content><![CDATA[<p>常用 vue 通信大概有这几种方式进行：</p>
<ul>
<li>组件间的父子之间的传值</li>
<li>组件间的子父之间的传值</li>
<li>非组件间的组件间的传值（简称：EventBus）</li>
<li>sessionStorage 缓存传值</li>
<li>路由带参数跳转进行传值</li>
<li>vuex 进行传值</li>
</ul>
<span id="more"></span>
<h2 id="组件间的父子之间的传值">组件间的父子之间的传值</h2>
<p><strong>思路：父组件调用子组件 dom
位置声明一个名称，然后在子组件接收这名称，便可直接调用。</strong></p>
<ul>
<li>父组件（谁是父组件个人理解：谁引用谁的组件，谁就是父组件）：</li>
</ul>
<figure>
<img data-src="https://camo.githubusercontent.com/26efadf3709bf05d062a790d02a8f31b89b96956/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f363230363931312d623332323530363632333533643435632e706e673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430"
alt="p1" />
<figcaption aria-hidden="true">p1</figcaption>
</figure>
<ul>
<li>子组件：</li>
</ul>
<figure>
<img data-src="https://camo.githubusercontent.com/54e8d2819fd0b54b8671df94969cd12b8a6937b0/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f363230363931312d333837363963363235363665386662352e706e673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430"
alt="p2" />
<figcaption aria-hidden="true">p2</figcaption>
</figure>
<h2 id="组件间的子父之间的传值">组件间的子父之间的传值</h2>
<p><strong>思路：在子组件通过触发一个事件带值，让父组件接受这个事件，解析这个值</strong></p>
<ul>
<li>子组件：</li>
</ul>
<figure>
<img data-src="https://camo.githubusercontent.com/3c3bfbaa2ea0e746a508b89bf455f83bef5ad316/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f363230363931312d353638643934306335376666373063312e706e673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430"
alt="p3" />
<figcaption aria-hidden="true">p3</figcaption>
</figure>
<ul>
<li>父组件：</li>
</ul>
<figure>
<img data-src="https://camo.githubusercontent.com/c859749eec1c72eedaaca0607b162fbdc07c4938/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f363230363931312d343964653533376232656662376536342e706e673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430"
alt="p4" />
<figcaption aria-hidden="true">p4</figcaption>
</figure>
<h2
id="非组件间的组件间的传值简称eventbus">非组件间的组件间的传值（简称：EventBus）</h2>
<p>先用例子来解释下组件间的关联：组件 A 比作一个路由器，通过中继器
(eventBus.js) 让其他房子接收到信号（组件B）</p>
<p><strong>思路：首先在src目录下创建一个eventBus.js文件，复制这行代码进去</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">let</span> connect = <span class="keyword">new</span> <span class="title class_">Vue</span>()    <span class="comment">// 实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect</span><br></pre></td></tr></table></figure>
<ul>
<li>组件A：</li>
</ul>
<figure>
<img data-src="https://camo.githubusercontent.com/94bc2eae2240d26d3b1273a4fc23241925cf3e62/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f363230363931312d326361313836323030346532663234662e706e673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430"
alt="p5" />
<figcaption aria-hidden="true">p5</figcaption>
</figure>
<ul>
<li>组件 B：</li>
</ul>
<figure>
<img data-src="https://camo.githubusercontent.com/2f6fa3509bfd99e936207e5460407198cc3804c9/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f363230363931312d343632623764373161326562383232362e706e673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430"
alt="p6" />
<figcaption aria-hidden="true">p6</figcaption>
</figure>
<p>效果展示如下:</p>
<figure>
<img data-src="https://camo.githubusercontent.com/fffa910ca560c667f3e99efb5f0ac22bc3e06dda/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f363230363931312d376230306462306533333436383137312e706e673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430"
alt="p7" />
<figcaption aria-hidden="true">p7</figcaption>
</figure>
<figure>
<img data-src="https://camo.githubusercontent.com/0e1d5d644da09ae76bd0750cac70d42cf08229c8/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f363230363931312d313165353738653733663031626632332e706e673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430"
alt="p8" />
<figcaption aria-hidden="true">p8</figcaption>
</figure>
<h2 id="sessionstorage-缓存">sessionStorage 缓存</h2>
<ul>
<li>组件 A：</li>
</ul>
<figure>
<img data-src="https://camo.githubusercontent.com/40da530008278a537d9c3d67196b066d2d23114f/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f363230363931312d386531386139653965306334333030382e706e673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430"
alt="p9" />
<figcaption aria-hidden="true">p9</figcaption>
</figure>
<ul>
<li>组件 B：</li>
</ul>
<figure>
<img data-src="https://camo.githubusercontent.com/f02c6a48a94850d083fca9e48594e50850b78c1e/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f363230363931312d636638356638376239326539386566392e706e673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430"
alt="p10" />
<figcaption aria-hidden="true">p10</figcaption>
</figure>
<h2 id="路由带参数跳转">路由带参数跳转</h2>
<ul>
<li>组件 A：有路由默认的页面</li>
</ul>
<figure>
<img data-src="https://camo.githubusercontent.com/a240c0d90dbe0fe999f7c66348e47b9377c0d9eb/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f363230363931312d316562333030353734393534623564372e706e673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430"
alt="11" />
<figcaption aria-hidden="true">11</figcaption>
</figure>
<ul>
<li>组件 B：路由其他页面 children</li>
</ul>
<figure>
<img data-src="https://camo.githubusercontent.com/bb2590cd81f9e826fd05745f1e0a92530741371f/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f363230363931312d663161383934643364643937333639342e706e673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430"
alt="p12" />
<figcaption aria-hidden="true">p12</figcaption>
</figure>
<p>效果如下：</p>
<figure>
<img data-src="https://camo.githubusercontent.com/6efadd538fe3863d4ec5a3f836c27d3ca77b229e/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f363230363931312d636233313834653530666432373133662e706e673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430"
alt="p13" />
<figcaption aria-hidden="true">p13</figcaption>
</figure>
<figure>
<img data-src="https://camo.githubusercontent.com/dc7016bf225f37c9b45b81ed0673ed5f316a7040/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f363230363931312d646263343434383030653031353131612e706e673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430"
alt="p14" />
<figcaption aria-hidden="true">p14</figcaption>
</figure>
<h2 id="vuex-主要做数据交互维护公共状态或数据">vuex
主要做数据交互，维护公共状态或数据</h2>
<p>官方网站：<a href="https://vuex.vuejs.org/zh/">Vuex</a></p>
<p>多看几遍这图，vuex 基本就会使用，多加运用就会更加熟练。</p>
<figure>
<img data-src="https://vuex.vuejs.org/vuex.png" alt="p15" />
<figcaption aria-hidden="true">p15</figcaption>
</figure>
<p>src下创建一个store的文件夹，里面创建index.js文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">   <span class="attr">state</span>: &#123;</span><br><span class="line">   <span class="attr">city</span>: <span class="string">&quot;上海&quot;</span></span><br><span class="line">   &#125;,</span><br><span class="line"> </span><br><span class="line">   <span class="attr">actions</span>: &#123;</span><br><span class="line">     <span class="title function_">handleCity</span>(<span class="params">ctx, city</span>) &#123;</span><br><span class="line">   <span class="comment">// console.log(ctx, city)</span></span><br><span class="line">       ctx.<span class="title function_">commit</span>(<span class="string">&quot;handleCity&quot;</span>, city)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">     <span class="title function_">handleCity</span>(<span class="params">state, city</span>) &#123;</span><br><span class="line">      state.<span class="property">city</span> = city</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>某文件触发事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">handleCityClick</span>(<span class="params">city</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;handleCity&quot;</span>, <span class="string">&quot;北京&quot;</span>);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
<p>展示页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;this.$store.state.city&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="致谢">致谢</h2>
<p>本文摘抄至：<a
href="https://blog.csdn.net/weihaifeng163/article/details/88338822">vue通信及组件之间传值</a></p>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Vue</category>
        <category>VueBasic</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>在组件内怎么监听 Vuex 中 state 的变化</title>
    <url>/posts/2020/2B9D6M8.html</url>
    <content><![CDATA[<p>最近在项目中需要使用 Vuex
来维护一个全局字段，同时在子组件里需要根据该字段的变化向后端请求数据来展示。</p>
<span id="more"></span>
<p>有两个办法解决上面的问题：</p>
<ul>
<li>用 computed 属性</li>
</ul>
<p>本方案有个缺陷，就是如果在组件内的模板区域内没有使用该计算属性，它是不会响应
state
中值的变化的，而本项目就遇到了这个坑，后面采用下面的方法解决了。</p>
<ul>
<li>用 watch 属性</li>
</ul>
<p>直接 watch state 里面的属性值，这里也有一个注意的地方，不能使用 lamda
表达式，而是要使用完整的方法定义，见下面的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;$store.getters.loginedProjectGroupId&#x27;</span>: <span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">getProjectInfo</span>(value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Vue</category>
        <category>VueBasic</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 中对跨域的 iframe 进行缓存</title>
    <url>/posts/2023/1EARQ0T.html</url>
    <content><![CDATA[<p>在 vue 应用程序中，有时候需要使用 <code>iframe</code>
嵌入其它网站的内容，并希望可以缓存 <code>iframe</code>
的状态。但如果被链接的源(origin) 与当前的 origin
不同时，<code>iframe</code>
就会发生跨域加载，这个时候，就不能在当前程序中获取 iframe 中的内容，包括
src，从而无法获取 iframe 中的状态，导致无法在初始化 iframe
时对状态进行恢复。</p>
<p>可以按以下方法来实现对 iframe 的缓存：</p>
<span id="more"></span>
<h2 id="尝试过的方法">尝试过的方法</h2>
<ol type="1">
<li><p>使用 <code>keep-alive</code></p>
<p>KeepAlive 缓存的是 vnode 节点，vnode
上面会有对应的真实DOM。组件“销毁”时，会将真实 DOM
移动到“隐藏容器”中，组件重新“渲染”时会从 vnode 上取到真实
DOM，再重新插入到页面中。这样对普通元素是没有影响的，但是 iframe
很特别，<strong>当其插入到页面时会重新加载，这是浏览器特性，与 Vue
无关。</strong></p></li>
<li><p>保存 iframe 实例，当组件挂载后添加到对应位置</p>
<p>失败的原因与第 1 点相同，当其重新插入到页面时会重新加载。</p></li>
</ol>
<h2 id="解决方案">解决方案</h2>
<h3 id="实现步骤">实现步骤</h3>
<blockquote>
<p><strong>思路</strong>：路由第一次加载时将 iframe
渲染到页面中，路由切换时通过 <code>v-show</code> 改变显/隐。</p>
</blockquote>
<ol type="1">
<li>在路由中，将 component 赋值为一个空组件 <code>index.vue</code></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: &quot;/chathub&quot;,</span><br><span class="line">  name: &quot;chathub&quot;,</span><br><span class="line">  component: ()=&gt;import(&quot;@/chathub/index.vue&quot;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><strong>index.js 代码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;iframe-example-index row justify-center&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;column justify-center text-h6 text-secondary&quot;&gt;加载中...&lt;/div&gt;    </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; onMounted, ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import store from &#x27;@/store/index&#x27;</span><br><span class="line">import &#123; useRoute &#125; from &#x27;@/compositions/vueRouter&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;iframeContainer&quot;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const src = ref(&quot;www.baidu.com&quot;)</span><br><span class="line"></span><br><span class="line">    function getIframeElement() &#123;</span><br><span class="line">      const iframeElement = document.getElementById(&#x27;iframe-example-body&#x27;)</span><br><span class="line">      return iframeElement</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    async function restoreSrc() &#123;</span><br><span class="line">      const iframeElement = getIframeElement()</span><br><span class="line">      if (!iframeElement) return</span><br><span class="line"></span><br><span class="line">      // 设置值</span><br><span class="line">      iframeElement.setAttribute(&#x27;src&#x27;, src.value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function initIFrame(force = false) &#123;</span><br><span class="line">      if (!force &amp;&amp; iframeSetting.initialized) return</span><br><span class="line"></span><br><span class="line">      console.log(&#x27;开始创建 iframe&#x27;)</span><br><span class="line"></span><br><span class="line">      // 初始化 iframe</span><br><span class="line">      const iframeTemp = document.createElement(&#x27;iframe&#x27;)</span><br><span class="line">      iframeTemp.setAttribute(&#x27;id&#x27;, &#x27;iframe-example-body&#x27;)</span><br><span class="line">      iframeTemp.setAttribute(&#x27;width&#x27;, &#x27;100%&#x27;)</span><br><span class="line">      iframeTemp.setAttribute(&#x27;height&#x27;, &#x27;100%&#x27;)</span><br><span class="line">      const container = document.getElementById(&#x27;iframe-example-container&#x27;)</span><br><span class="line">      // 判断是否有 children,有的话，移除</span><br><span class="line">      if (container.children.length &gt; 0) &#123;</span><br><span class="line">        container.removeChild(container.children[0])</span><br><span class="line">      &#125;</span><br><span class="line">      container.appendChild(iframeTemp)</span><br><span class="line">      iframeTemp.setAttribute(&#x27;src&#x27;, src.value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onMounted(async () =&gt; &#123;</span><br><span class="line">      // 修改 iframe</span><br><span class="line">      getIframeElement()</span><br><span class="line"></span><br><span class="line">      // 创建一个 iframe，保存到 iframe-example-container children 中</span><br><span class="line">      initIFrame()</span><br><span class="line"></span><br><span class="line">      // 从 url 中获取 src</span><br><span class="line">      await restoreSrc()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    return &#123; src &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">.iframe-example-index &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 0px;</span><br><span class="line">  left: 0px;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>在 router-view 处，加载一个 container 容器组件，通过
<code>v-if</code>、 <code>v-show</code> 来控制显示隐藏</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Container v-if=&quot;iframeVisited&quot; v-show=&quot;isIFramePageVisible&quot;&gt;&lt;/Container&gt;</span><br><span class="line"></span><br><span class="line">&lt;router-view v-slot=&quot;&#123; Component &#125;&quot;&gt;</span><br><span class="line">  &lt;keep-alive :include=&quot;keepAliveList&quot;&gt;</span><br><span class="line">    &lt;component :is=&quot;Component&quot;&gt;&lt;/component&gt;</span><br><span class="line">  &lt;/keep-alive&gt;</span><br><span class="line">&lt;/router-view&gt;</span><br></pre></td></tr></table></figure>
<p><strong>container.js 代码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;iframe-example-container&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li>通过监听路由path的变化，改变 ChatHub 的显/隐，间接控制 iframe
的显示</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const isIFramePageVisible = ref(false)</span><br><span class="line">// 这里是个优化，想的是只有页面访问过该路由才渲染，没访问过就不渲染该组件</span><br><span class="line">const iframeVisited = ref(false) </span><br><span class="line"></span><br><span class="line">watch(</span><br><span class="line">  () =&gt; routes.path,</span><br><span class="line">  (value) =&gt; &#123;</span><br><span class="line">    if (value === &#x27;/iframe&#x27;) &#123;</span><br><span class="line">      iframeVisited.value = true</span><br><span class="line">      isIFramePageVisible.value = true</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      isIFramePageVisible.value = false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    immediate: true</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="注意事项">注意事项</h3>
<p>iframe 只有处于显示时，才会加载 iframe 里面的内容。因此，必须保证
iframe 不在后台实例化，可以通过以下方式实现：</p>
<ol type="1">
<li>通过 <code>v-if</code> 来控制初始化加载</li>
<li>在 <code>index.vue</code> 第一次加载时，使用 js 初始化
iframe，然后添加到 <code>ChatHub</code> 作为其子元素。</li>
</ol>
<blockquote>
<p>如果后台先实例了 iframe 后，会导致从其它页面切换到 /chathub
页面时，无法正常加载 iframe 里面的内容，并影响性能。</p>
</blockquote>
<h2 id="参考">参考</h2>
<p>本文参考以下文章，在此报以诚挚谢意！</p>
<ol type="1">
<li><p><a
href="https://juejin.cn/post/7041376972261294088">vue缓存iframe的解决方法</a></p></li>
<li><p><a
href="https://juejin.cn/post/7246310077233659941#heading-2">Vue
KeepAlive 为什么不能缓存 iframe</a></p></li>
</ol>
]]></content>
      <categories>
        <category>Develop</category>
        <category>Javascript</category>
        <category>Vue</category>
        <category>VueBasic</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>iframe</tag>
      </tags>
  </entry>
</search>
